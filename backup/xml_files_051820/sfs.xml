<?xml version="1.0"?>
<kb_documents>
<kb_document>
<kb_title>Stata for Researchers: Combining Data Sets </kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part eight of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em> </p>
<p>Combining two data sets is a common data management task, and one that's very easy to carry out. However, it's also very easy to get wrong. Before combining data sets be sure you understand the structure of both data sets and the logic of the way you're combining them. Otherwise you can end up with a data set that you think is ready for analysis, but is really utter nonsense. Stata tries to make sure you've thought through what you're doing, but can't tell you what makes sense and what doesn't.</p>
<p>Stata always works with one data set at a time, so you will always be combining 
	the data set in memory (the master data set) with another data set on disk 
	(called the using data set, for reasons that will be clear when you see the syntax).</p>
<h2><a id="AppendingDataSets" name="AppendingDataSets"></a>Appending Data Sets</h2>
<p><img alt="When appending, data sets are stacked." height="288" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-10/5-10_1.png" width="432"/></p>
<p>Stata calls it appending  when you  add the observations 
                  from the using data set to the master data set. Appending makes sense when the observations in both data sets represent the same kind of thing, but not the same things. For example, you might append a data set of people from Wisconsin to a data set of people from Illinois. The data sets should have the same or mostly the same variables, with the same names. If a variable only appears in one data set, observations from the other data set will be given missing values for that variable.</p>
<p>The syntax is to carry out an append is simple: load the the master data set and then type:</p>
<p class="InputCode">append using <span class="Parameter">dataset</span></p>
<p>where <span class="Parameter"><span class="InputCode">dataset</span></span> is the name of the data set you want to append.</p>
<h2><a id="MergingDataSets" name="MergingDataSets"></a>Merging Data Sets</h2>
<h3><img alt="When merging, data sets are placed side by side." height="432" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-10/5-10_2.png" width="432"/></h3>
<p>Stata calls it merging when observations from the two data sets are combined. There are, in theory, four kinds of merges:</p>
<p>In a one-to-one merge, one observation from the master data set is combined with one observation from the using data set. A one-to-one merge makes sense when the observations in both data sets describe the same things, but have different information about them. For example, you might merge the answers people gave in wave one of a survey with the answers the same people gave in wave two of the survey.</p>
<p>In a one-to-many or many-to-one merge, one observation from one data set is combined with many observations from the other (the difference between one-to-many and many-to-one being whether the master data set has the "many" or the using data set). These merges make sense when you have hierarchical data, and one data set contains information about the level one units while the other contains information about the level two units. For example, you might merge information about households with information about the individuals who live in those households.</p>
<p>In principle there are also many-to-many merges. In practice they are rarely if ever useful. If you find yourself wanting to do a many-to-many merge, you should rethink what you're doing. Often what you really need to do is identify and correct duplicate identifiers, and then your merge will work as one-to-one or one-to-many.</p>
<p>In all the merges we'll discuss, Stata combines observations that have the same value of a key variable, typically an ID. You can also match based on multiple variables (e.g. combine data for the same state and year). In a one-to-many or many-to-one merge, it is the identifier for the level two units that is the key variable (e.g. household ID, not individual ID). It's very important that the key variable have the same format in both data sets.</p>
<p>If an observation in one data set does not match with an observation in the other, it will be given missing values for the variables from the other data set. Since the viability of a research project often depends on how many observations actually merge (e.g. how many people from wave one of the survey could  be found in wave two?) Stata gives you tools for figuring out how many observations actually merged and for examining those that didn't.</p>
<p>If a variable exists in both data sets, the values from the master data set will be kept and the values from the using data set will be discarded. Occasionally this is what you want, but it's more likely to be an error. In general you should set up your data such that the only variables the files to be merged have in common are the key variables.</p>
<p>The syntax for a merge is:</p>
<p class="InputCode">merge <span class="Parameter">type</span> <span class="Parameter">keyvars</span> using <span class="Parameter">dataset</span></p>
<p>The  <span class="Parameter">type</span> must be  <span class="InputCode">1:1</span> (one-to-one), <span class="InputCode">1:m</span> (one-to many), <span class="InputCode">m:1</span> (many-to-one) or <span class="InputCode">m:m</span> (many to many); <span class="Parameter">keyvars</span> is the key variable or variables; and <span class="InputCode">dataset</span> is the name of the data set you want to merge.</p>
<h2><a id="AnExampleofCombiningDataSets" name="AnExampleofCombiningDataSets"></a>An Example of Combining Data Sets</h2>
<p>The examples include several files containing fictional student information from 2007. <span class="InputCode">scores.dta</span> contains the students' scores on a standardized test, <span class="InputCode">demographics.dta</span> contains demographic information about them, and <span class="InputCode">teachers.dta</span> contains information on their teachers. Take a moment to look at each file, then start a do file that loads <span class="InputCode">scores</span>.</p>
<p>In this data set, each observation represents a student. <span class="InputCode">browse</span> and you'll see that you have a student ID (<span class="InputCode">id</span>), a teacher ID (<span class="InputCode">teacher</span>) and a <span class="InputCode">score</span> for each.</p>
<p>Your first task is to add in the demographic information. In <span class="InputCode">demographics.dta</span> each observation also represents a student, with the variables being <span class="InputCode">id</span> and  <span class="InputCode">race</span>. Thus this is a job for a one-to-one merge and the key variable is <span class="InputCode">id</span>.</p>
<p class="InputCode">merge 1:1 id using demographics</p>
<p>Stata will report that all 60 observations matched. It will also create a variable called <span class="InputCode">_merge</span>. A one in <span class="InputCode">_merge</span> means an observation only came from the master data set; a two means it only came from the using data set; and a three means an observation successfully matched and thus came from both. In this case we see that all observations matched and thus have <span class="InputCode">_merge</span> equal to three, so there's no need to keep the variable. In fact we need to drop it (or rename it) before doing any further merges:</p>
<p class="InputCode">drop _merge</p>
<p>Next add  information about teachers. In <span class="InputCode">teachers.dta</span> each observation represents a teacher, and each teacher has many students. That makes this a many-to-one merge (since the many students are currently in memory and the one teacher is in the using data set). The key variable is not <span class="InputCode">id</span>, since that refers to the students, but <span class="InputCode">teacher</span>:</p>
<p class="InputCode">merge m:1 teacher using teachers</p>
<p>Again, all 60 observations merged properly, so you can drop <span class="InputCode">_merge</span>.</p>
<p class="InputCode">drop _merge</p>
<h2><a id="CombiningPanelData" name="CombiningPanelData"></a>Combining Panel Data</h2>
<p>Now suppose you were tracking these students for multiple years. The data set <span class="InputCode">panel2007.dta</span> contains a simplified version of this data set: just <span class="InputCode">id</span> and <span class="InputCode">score</span>. The data set <span class="InputCode">panel2008.dta</span> has the same variables for a different year. How would you combine them?</p>
<p>The proper way to combine them depends on what data structure you want. This is hierarchical data where a level two unit is a student and a level one unit is a student's data for a particular year. Thus it can be represented in wide form (one observation per student), or in long form (one observation per student per year).</p>
<p>To put the data in long form simply stack the two data sets using <span class="InputCode">append</span>. However, you'll need to know which year each observation represents. To do that,  add a <span class="InputCode">year</span> variable to both data set, with the value 2007 for the 2007 data and the value 2008 for the 2008 data. You can do so with the following do file:</p>
<p class="InputCode">clear all<br/>
  set more off<br/>
  capture log close<br/>
  log using combine1.log, replace<br/>
<br/>
  use panel2007<br/>
  gen year=2007<br/>
  save panel2007_append<br/>
<br/>
  use panel2008<br/>
  gen year=2008<br/>
<br/>
  append using panel2007_append<br/>
  save appendedData,replace
  <br/>
<br/>
  log close
</p>
<p>To put the data in wide form,  do a one-to-one merge with <span class="InputCode">id</span> as the key variable. But first you need to change the variable names. Recall that in wide form, it is the variable names that tell you which level one unit you're talking about. So instead of <span class="InputCode">score</span>, you need <span class="InputCode">score2007</span> and <span class="InputCode">score2008</span>.</p>
<p class="InputCode">clear all<br/>
set more off<br/>
capture log close<br/>
log using combine2.log, replace<br/>
<br/>
  use panel2007<br/>
rename score score2007<br/>
save panel2007_merge<br/>
<br/>
use panel2008<br/>
rename score score2008<br/>
<br/>
merge 1:1 id using panel2007_merge<br/>
save mergedData,replace
<br/>
<br/>
log close
</p>
<p>This time you'll see that one observation does not match. You can see which one by typing:</p>
<p class="InputCode">l if _merge==2</p>
<p>Student number 55 was not in <span class="InputCode">panel2008</span> and thus couldn't be matched. As a result we have no idea what his or her test score was in 2008. Unfortunately this is very common—students move out of school districts between tests all the time.</p>
<p>If your entire research agenda depends on having both test scores, you may need to drop observations that don't exist in both data sets. You can do so at this point by adding:</p>
<p class="InputCode">drop if _merge!=3</p>
<p>You can also specify which observations should be kept directly in the merge command:</p>
<p class="InputCode">merge 1:1 id using panel2007_merge, keep(match)</p>
<p><span class="InputCode">keep(match)</span> means only keep observations which match. The alternatives are <span class="InputCode">master</span> and <span class="InputCode">using</span>, and you can list more than one. For example, to keep observations which match and observations that only come from the master data set, while throwing away observations that only come from the using data set, you'd say <span class="InputCode">keep(master match)</span>.</p>
<h2><a id="CommonProblemswithMerges" name="CommonProblemswithMerges"></a>Common Problems with Merges</h2>
<p>Merges will uncover all sorts of problems with your data set (and if they're not fixed merging will introduce new ones). Here are a two common ones and how to fix them:</p>
<h3>Key Variables Stored in Different Formats</h3>
<p>While Stata will happily match different kinds of numbers (ints and floats, for example) it can't match numbers and strings. IDs can be stored as either (as long as you choose a numeric type that has enough precision—see <a href="https://ssc.wisc.edu/sscc/pubs/sfr-data.htm#VariableTypesandPrecision">Working with Data</a>) and it's not uncommon to find that your data sets store the ID in different ways. In that case it's usually best to convert the numbers to strings:</p>
<p class="InputCode">gen idString=string(id)<br/>
  drop id<br/>
  rename idString id</p>
<p>The <span class="InputCode">string()</span> function takes a number and converts it to a string. You can give it a second argument containing the format in which the number should be "written" if needed.</p>
<h3><a id="DuplicateIDs" name="DuplicateIDs"></a>Duplicate IDs</h3>
<p>If you try to do a merge and you get an error message like "variable id does not uniquely identify observations in the master data" this means you have duplicate IDs in the data set mentioned. This problem needs to be fixed before you proceed. Do not simply change the type of merge for the relevant data set from "one" to "many" hoping to make the error message go away—the resulting data set will not make sense for the affected observations.</p>
<p>One possible source of duplicates is round-off error due to saving the IDs in an inappropriate variable type. In this case you'll need to go back to the original data and ensure the identifiers are stored as a type that won't round them, like long, double, or string.</p>
<p>Note that for purposes of merging, missing values are treated just like any other value. If you have observations with missing IDs Stata will count them as duplicates. You'll probably have to drop them before merging.</p>
<p>But most of the time duplicate IDs result from errors in the data. You'll need to do something about them before you can perform your merge.</p>
<p>Start a do file that loads the data set <span class="InputCode">merge_error</span>. This data set contains students, but some of them have duplicate IDs that need to be fixed.</p>
<p>You can see how many problems you have with <span class="InputCode">duplicates report</span>:</p>
<p class="InputCode">duplicates report id</p>
<p>This  tells you how many observations have the same value of <span class="InputCode">id</span>. The output tells you that no ID appears more than twice, but twelve observations have duplicate IDs.</p>
<p>For further examination,  create a variable that tells you how many copies there are of each ID:</p>
<p class="InputCode">bysort id: gen copies=_N</p>
<p>Then you can look at just the problem observations with:</p>
<p class="InputCode">browse if copies&gt;1</p>
<p>For the observations with <span class="InputCode">id</span> equal to 9, 26, and 33, the two observations with the same ID are identical. This suggests the same student was entered twice and you can fix the problem by simply dropping the extra observations. Do so with:</p>
<p class="InputCode">duplicates drop</p>
<p>Note that unlike the <span class="InputCode">duplicates report</span> command you ran earlier, this command does not have a varlist. This means it only drops duplicate observations if they have the same value for all variables, not just <span class="InputCode">id</span>. You can give it a <em>varlist</em> so it drops observations if only those variables have the same values, but be very careful doing so.</p>
<p>At this point in  complex problems you may want to drop the <span class="InputCode">copies</span> variable you created earlier and recreate it so <span class="InputCode">browse if copies&gt;1</span> will no longer show the observations you have already fixed, but there's no need in this data set.</p>
<p>For the observations with <span class="InputCode">id</span> equal to 64, 74, and 94, the other variables show that the observations with the same ID are not the same person. This is a major problem for merging: you can't be sure which "student #64" in this data set goes with the "student #64" in the hypothetical other data set.</p>
<p>Adding more variables may help. For example, in this case, merging by both <span class="InputCode">id</span> and <span class="InputCode">race</span> would  allow you to correctly match the two subjects with id equal to 94. Merging by <span class="InputCode">id</span>, <span class="InputCode">race</span>, and <span class="InputCode">grade</span> would  allow you to correctly match the subjects with id equal to 74. Just keep in mind that if the data set you wanted to merge with this one were for the subsequent school year like in our previous example you'd have to subtract one from its <span class="InputCode">grade</span> variable first. If you choose to go this route, recreate the <span class="InputCode">copies</span> variable using the complete set of variables you plan to match by in the <em>by</em> prefix and see how many duplicates are left.</p>
<p>Nothing will help with the two observations with <span class="InputCode">id</span> equal to 64, and in a larger data set it's less likely that matching by a few more variables will allow you to uniquely identify subjects. In such cases you'll probably need to drop all the observations you can't uniquely identify, since you reliably can't match any them. You can do so with:</p>
<p class="InputCode">drop if copies&gt;1</p>
<h2>Exercises</h2>
<ol>
<li>An alternative way to combine data sets into wide form is to first append them and then reshape. Combine <span class="InputCode">panel2007</span> and <span class="InputCode">panel2008</span> into wide form using this method. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_combine1.htm">Solution</a>)</li>
<li>If you combine the two years of data into long form using <span class="InputCode">append</span>, how can you find the observation  which doesn't appear in 2008? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_combine2.htm">Solution</a>)</li>
<li>Combine <span class="InputCode">error2007.dta</span> and <span class="InputCode">error2008.dta</span> by merging it into the wide form, fixing whatever problems you find. Then append the two data sets and try to locate the same problems. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_combine3.htm">Solution</a>)</li>
</ol>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-graphics.htm">Graphics</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-hier.htm">Hierarchical Data</a></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-10/5-10_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-10/5-10_2.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Working With Data</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part four of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>Now that you understand Stata's basic syntax, you're ready to start working with your data. This article will teach you how to make new variables, modify existing variables, and create labels.</p>
<h2><a id="GenerateandReplace" name="GenerateandReplace"></a>Generate and Replace</h2>
<p>The basic commands for creating and changing variables are <span class="InputCode">generate</span> (usually abbreviated <span class="InputCode">gen</span>) and <span class="InputCode">replace</span> (which, like other commands that can destroy information, has no abbreviation). <span class="InputCode">gen</span> creates new variables; <span class="InputCode">replace</span> changes the values of existing variables. Their core syntax  is identical:</p>
<p class="InputCode">gen <span class="Parameter">variable</span>=<span class="Parameter">expression</span></p>
<p>or</p>
<p class="InputCode">replace <span class="Parameter">variable</span>=<span class="Parameter">expression</span></p>
<p>where <span class="Parameter">variable</span> is the name of the variable you want to create or change, and <span class="Parameter">expression</span> is the mathematical expression whose result you want to put in it. Expressions can be as simple as a single number or involve all sorts of complicated functions. Stata has a large library of functions you can use in <span class="InputCode">gen</span> and <span class="InputCode">replace</span> expressions, far too many for us to cover them all (though we'll introduce some as we go). For a full list, type <span class="InputCode">help functions</span>—we'll talk about learning from the help files in  <a href="https://ssc.wisc.edu/sscc/pubs/sfr-learning.htm">Learning More</a>.</p>
<p>If an expression includes a missing value at any point, the result is missing. Usually this is exactly what you'd expect and want.</p>
<p>You should never change data interactively, so before proceeding create a do file. Open the do file editor (type <span class="InputCode">doedit</span> or click on the button that looks like a pencil writing in a notebook). Immediately click <span class="MenuOutput">File</span>, <span class="MenuOutput">Save as...</span> and save the do file as <span class="InputCode">data1</span> (Stata will fill in <span class="InputCode">.do</span> at the end). Then start your do file with the following commands, as described in the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-do.htm">previous section</a>:</p>
<p class="InputCode">clear all<br/>
                  capture log close<br/>
                  set more off<br/>
                  log using data.log, replace<br/>
<br/>
                  use auto<br/>
<br/>
                  //real work goes here<br/>
<br/>
                  save autoVersion2,replace
                  <br/>
                  log close
                </p>
<p>Now you're ready to go to work. The work itself will go after <span class="InputCode">use auto</span> and before <span class="InputCode">log close</span>.</p>
<p>The prices in the auto data set are in 1978 dollars, so it might be useful to convert them to 2019 dollars. To do so you need to multiply the prices by a conversion factor which is the CPI in 2019 divided by the CPI in 1978, or about 4. The code will be:</p>
<p class="InputCode">gen price2019=price*4</p>
<p>You can now compare them with:</p>
<p class="InputCode">l make price*</p>
<p>Add these lines to your do file, then click the Do button on the far right (the one that looks like sheet of paper with a little "play" symbol in the corner) or press <span class="InputCode">Ctrl-d</span>. Switch to the main Stata window to see the results.</p>
<p>But let's be a little more precise and use 4.03 as the conversion factor. Go back to the do file and change the line:</p>
<p class="InputCode">gen price2019=price*4</p>
<p>to:</p>
<p class="InputCode">gen price2019=price*4.03</p>
<p>and run the do file again. The do file starts by clearing the previous data set from memory and loading the original from disk, so there's no need to "fix" the old version of <span class="InputCode">price2019</span>. It's simply created again the way we now want it.</p>
<p>Having both  <span class="InputCode">price</span> and a <span class="InputCode">price2019</span> variables allowed us to compare their values and check for plausibility. But if you only want to work with 2019 dollars and are confident you've got the formula right, you can use the <span class="InputCode">replace</span> command to change the existing <span class="InputCode">price</span> variable instead of creating a new one:                </p>
<p class="InputCode">replace price=price*4.03</p>
<p>Run this version and you'll get the message <span class="MenuOutput">(74 real changes made)</span>. Given that the data set has 74 observations, this tells us all of them were changed as we'd expect. Once you start including <em>if</em> conditions, how many observations were actually changed can be very useful information.</p>
<p>If a <span class="InputCode">gen</span> command has an <em>if</em> condition, the resulting variable will (and must) still exist for all observations. However it will be assigned a missing value for observations where the <em>if</em> condition is not true. If a <span class="InputCode">replace</span> command has an <em>if</em> condition, observations where the <em>if</em> condition is not true will be left unchanged.</p>
<p>Suppose you wanted to collapse the five-point scale of the <span class="InputCode">rep78</span> variable  into a three-point
            	scale. Add the following code to your do file to do so:</p>
<p class="InputCode">gen rep3=1 if rep78&lt;3<br/>
                  replace rep3=2 if rep78==3<br/>
                  replace rep3=3 if rep78&gt;3 &amp; rep78&lt;.</p>
<p>The first line creates the new variable <span class="InputCode">rep3</span>, but only sets it to one
                  for cases where <span class="InputCode">rep78</span> is less
                  than             	 three. The
                  others get missing. The second line changes some of those missings
                  to twos, and the third changes more
                  of them to threes. Note how the third line specifically excludes
                  observations where <span class="InputCode">rep78</span> is
                  missing. What will the value of <span class="InputCode">rep3</span> be for those cases? Missing,  because it was never
                  set to anything else. Observations where <span class="InputCode">rep78</span> is missing were implicitly or explicitly excluded from all three commands. (If you forgot to exclude missing values from the last command, then <span class="InputCode">rep3</span> would be three for cars where <span class="InputCode">rep78</span> is missing, an all-too-common mistake.)</p>
<h2><a id="Recode" name="Recode"></a>Recode</h2>
<p>The <span class="InputCode">recode</span> command gives you an alternative way of creating <span class="InputCode">rep3</span>. It is designed solely for recoding tasks and is much less flexible than <span class="InputCode">gen</span> and <span class="InputCode">replace</span>. In fact, anything <span class="InputCode">recode</span> can do can also be done with <span class="InputCode">gen</span> and <span class="InputCode">replace</span>, so learning it is optional. But it can do some things more easily. The syntax is:</p>
<p class="InputCode">recode <span class="Parameter">var</span> (<span class="Parameter">rule 1</span>) (<span class="Parameter">rule 2</span>) (<span class="Parameter">more rules as needed...</span>), gen(<span class="Parameter">newvar</span>)</p>
<p>The <span class="InputCode">gen</span> option at the end is not required—if it's not there then the original variable will be changed rather than creating a new variable with the new values. You can also have <span class="InputCode">recode</span> work on a list of variables, recoding them all in the same way.</p>
<p>The core of the recode command is a list of rules, in parentheses, that tell it how a variable is to be recoded. They take the form <span class="InputCode">(</span><span class="Parameter">inputValue</span><span class="InputCode">=</span><span class="Parameter">outputValue</span><span class="InputCode">)</span>. The <span class="Parameter">inputValue</span> can be a single number, a list of numbers, or a range of numbers specified with <span class="Parameter">start</span>/<span class="Parameter">end</span>. <span class="Parameter">outputValue</span> will always be a single number. Anything not covered by a rule is left unchanged. Here's a <span class="InputCode">recode</span> version of converting <span class="InputCode">rep78</span> to a three-point scale:</p>
<p class="InputCode">recode rep78 (1 2=1) (3=2) (4/5=3), gen(rep3b)</p>
<p> (The only reason for listing 1 and 2 but giving a range for 4 through 5 was to demonstrate both styles.)  Missing values required no special handling: since  missing was not listed in the input values of any rule, observations with missing values remain unchanged.</p>
<p>If you did everything correctly, rep3 and rep3b will be identical. Check that with an assert:</p>
<p class="InputCode">assert rep3==rep3b</p>
<p>Run the do file to find out how you did.</p>
<h2><a id="CreatingIndicatorVariables" name="CreatingIndicatorVariables"></a>Creating Indicator Variables</h2>
<p>In creating indicator variables, you can take advantage of the fact that Stata treats true as one and false as zero by setting a variable equal to a condition. Consider:</p>
<p class="InputCode">gen gasGuzzler=(mpg&lt;20)</p>
<p>(The parentheses are optional, but make it easier to read.) This creates an indicator variable called <span class="InputCode">gasGuzzler</span> which is one (true) for cars where <span class="InputCode">mpg</span> is less than twenty and zero (false) where <span class="InputCode">mpg</span> is greater than or equal to twenty. You can see the effect with:</p>
<p class="InputCode">l make mpg if gasGuzzler</p>
<p>We know that no car has a missing value for <span class="InputCode">mpg</span> but, if any did, the above code would assign it a zero for <span class="InputCode">gasGuzzler</span> as if it were known to have good gas mileage. <span class="InputCode">gasGuzzler</span> should be missing for such cases, which you can do with:</p>
<p class="InputCode">gen gasGuzzler=(mpg&lt;20) if mpg&lt;.</p>
<h2><a id="Egen" name="Egen"></a>Egen</h2>
<p>The <span class="InputCode">egen</span> command, short for <em>extended
                  generate</em>, gives you access to another library of functions—type <span class="InputCode">help egen</span> for a full list.  <span class="InputCode">egen</span> functions tend to be more complex, and often work across observations.</p>
<p>Suppose you wanted to find the mean value of <span class="InputCode">mpg</span> and store it in a variable. <span class="InputCode">egen</span> has
                  a <span class="InputCode">mean</span> function which will give you
                  exactly what you want: </p>
<p class="InputCode">egen meanMPG=mean(mpg)<br/>
</p>
<p>The <span class="InputCode">mean()</span> function finds the mean of a column. To find the mean of a row, or, more likely, part of a row,  use <span class="InputCode">rowmean()</span>:</p>
<p class="InputCode">egen rm=rowmean(mpg rep78)</p>
<p>For each car, <span class="InputCode">rm</span> will contain the mean of that car's <span class="InputCode">mpg</span> and <span class="InputCode">rep78</span>, not that that's likely to be a useful quantity. A more typical use of <span class="InputCode">rowmean()</span> is to construct a respondent's mean response to a group of questions.</p>
<p></p>
<p>The <span class="InputCode">egen</span> functions generally handle missing values by calculating their result across whatever data are available. Thus for observations where <span class="InputCode">rep78</span> is missing, <span class="InputCode">rm</span> is just <span class="InputCode">mpg</span>. Most of the time that's what you want: if you have 10,000 observations and 1 of them has a missing value you wouldn't want Stata to tell you it's impossible to calculate a mean. However, it can be problematic: if you use <span class="InputCode">rowmean()</span> to calculate mean responses to a group of questions but some people didn't answer all the questions, the result will be the same as if you had filled in all the missing values with the mean—a very bad idea.</p>
<p>With <span class="InputCode">egen</span>, what follows the equals sign is a single function and not a mathematical expression. If you wanted to set a variable to one-half of a mean you'd have to first use <span class="InputCode">egen</span> to calculate the mean and then use a <span class="InputCode">replace</span> command to divide it by 2.</p>
<p>Here are a few of the most commonly used functions in the egen library:</p>
<table border="1">
<tr>
<th>Name</th>
<th>Description</th>
</tr>
<tr>
<td>min()</td>
<td>Minimum value</td>
</tr>
<tr>
<td>max()</td>
<td>Maximum value</td>
</tr>
<tr>
<td>mean()</td>
<td>Mean</td>
</tr>
<tr>
<td>median()</td>
<td>Median</td>
</tr>
<tr>
<td>sd()</td>
<td>Standard Deviation</td>
</tr>
<tr>
<td>total()</td>
<td>Total</td>
</tr>
</table>
<p>All of these functions act across observations. The parentheses will usually contain a single variable for the function to act on, but can contain a mathematical expression instead. These functions also have row equivalents (<span class="InputCode">rowmin</span>, <span class="InputCode">rowmax</span>, etc.) that do the same thing but across variables on a single row. There are plenty of other useful egen functions, such as <span class="InputCode">std</span> (create a standardized version of a variable), <span class="InputCode">group</span> (create a group identifier based on the values of one or more categorical variables), or even <span class="InputCode">mtr</span> (marginal tax rate for a married couple in the US with a given amount of income in a given year). You can get a complete list by typing <span class="InputCode">help egen</span>, and you should plan on reading through it some time early in your Stata career.</p>
<h2><a id="DropandKeep" name="DropandKeep"></a>Drop and Keep</h2>
<p>The <span class="InputCode">drop</span> command allows you to remove either variables or observations from your data set. If you give it a <em>varlist</em>, it will remove those variables:</p>
<p class="InputCode">drop rep3b</p>
<p>removes the variable <span class="InputCode">rep3b</span>  from your data set.</p>
<p>If you give it an <em>if</em> condition, <span class="InputCode">drop</span> will remove all observations where that condition is true:</p>
<p class="InputCode">drop if gasGuzzler</p>
<p>The <span class="InputCode">keep</span> command works in the same way, but in the opposite sense. <span class="InputCode">keep rep3b</span> would remove all variables except <span class="InputCode">rep3b</span>, while <span class="InputCode">keep if gasGuzzler</span> would remove all observations that are not gas guzzlers.</p>
<h2><a id="Rename" name="Rename"></a>Rename</h2>
<p>You can rename a variable by typing:</p>
<p class="InputCode">rename <span class="Parameter">oldName</span> <span class="Parameter">newName</span></p>
<p>Renaming variables with gibberish names (<span class="InputCode">H2V06</span> and the like) may take a bit of time, but will save you time in the end.</p>
<p>Variable names must be one word with no spaces. However, you can use either capital letters or underscores (_) to mark word boundaries. A variable name like <span class="InputCode">numinhh</span> looks like gibberish, but if you put it in the form <span class="InputCode">numInHH</span> or <span class="InputCode">num_in_hh</span> then the reader has a fighting chance of realizing it means "number in household."</p>
<p>The rename command also has the ability to rename large numbers of variables based on patterns. Type <span class="InputCode">help rename</span> for more information.</p>
<p>The variable name <span class="InputCode">rep3</span> doesn't convey much information, so let's change it:</p>
<p class="InputCode">rename rep3 repairRecord</p>
<p></p>
<h2><a id="Labels" name="Labels"></a>Labels</h2>
<p>Labels allow you to convey more information about your data. You only have to type them once, so they can be as long
                  as you want. Labels can be applied to variables or to their values (or entire data sets, which we won't discuss).</p>
<p>This data set already has a good set of variable labels, as you can see in the Variables window. The only one that might be confusing is the label on <span class="InputCode">foreign</span>, so we'll change it using the <span class="InputCode">label variable</span> command. The syntax to set a variable label is: </p>
<p class="InputCode">label variable <span class="Parameter">var "</span><span class="Parameter">label"</span></p>
<p>So type:</p>
<p class="InputCode">label variable foreign "Car Origin"</p>
<p>Look at the Variables window again to see the results.</p>
<p> Next let's explore value labels by labeling the values of the <span class="InputCode">repairRecord</span> (formerly known as <span class="InputCode">rep3</span>, the new variable we recoded to collapse <span class="InputCode">rep78</span> from a five point scale to a three point scale). Value labels
                  are a mapping from a set of integers to a set of descriptions, so the first step is to create the map. To do so, use the <span class="InputCode">label define</span> command: </p>
<p class="InputCode">label define <span class="Parameter">mapName</span> <span class="Parameter"> value1</span> <span class="Parameter">"label1</span>" <span class="Parameter">value2</span> "<span class="Parameter">label2</span>"...</p>
<p>Thus:</p>
<p class="InputCode">label define rep 1 "Bad" 2"Average" 3"Good"</p>
<p>Then  tell Stata to label the values of the <span class="InputCode">repairRecord</span> variable
                  using the <span class="InputCode">rep</span> mapping you just
                  defined. The syntax  is:</p>
<p class="InputCode">label values <span class="Parameter">variable</span> <span class="Parameter">map</span></p>
<p>And thus:</p>
<p class="InputCode">label values repairRecord rep</p>
<p>To see the results, add:</p>
<p class="InputCode">list repairRecord</p>
<p>Once a map is defined you can apply it to any number of variables: just replace the single variable in the  <span class="InputCode">label values</span> command above with a list of variables. Suppose you're working with survey data
                  and your variables include the gender of the respondent, the
                  gender of the respondent's spouse, and the genders of all the
                  respondent's children. You could define just one map called <span class="InputCode">gender</span> and
                  then use it to label the values of all the gender variables.</p>
<p>Two final 
                  commands for value labels: <span class="InputCode">label dir</span> gives you a list of all the defined labels, and <span class="InputCode">label
                list</span> tells you what they mean.</p>
<h2><a id="VariableTypesandPrecision" name="VariableTypesandPrecision"></a>Variable Types and Precision</h2>
<p>Stata can store numbers in five different types of variables. <span class="InputCode">byte</span>, <span class="InputCode">int</span> and <span class="InputCode">long</span> are all integers of various sizes. The smallest, <span class="InputCode">byte</span>, can only store numbers below 100 but takes up very little memory, making it ideal for indicator and categorical variables. <span class="InputCode">int</span> can store numbers up to about 32,000 and <span class="InputCode">long</span> up to about two billion. For numbers with fractions, your choices are <span class="InputCode">float</span> (the default) and <span class="InputCode">double</span>. Both can store very large numbers, but their precision is limited: a <span class="InputCode">float</span> only has about seven digits of accuracy and a <span class="InputCode">double</span> sixteen. For details type <span class="InputCode">help data_types</span>.</p>
<p>While social scientists rarely have seven meaningful digits in their data, keep in mind that identifiers are just big numbers as far as Stata is concerned. For example, you probably think of your UW ID as a string of ten small integers ("nine, zero, two...") but to Stata it's a single, very large number. If you tried to store UW IDs as the default <span class="InputCode">float</span>, they'd be rounded since a <span class="InputCode">float</span> can't store ten digits accurately (which would defeat the purpose of storing an ID). Such IDs should be stored using <span class="InputCode">doubles</span>, <span class="InputCode">longs</span> or <span class="InputCode">strings</span>.</p>
<p>The type of a variable is set when it is created. To create a variable that is not a float, put the desired type right after <span class="InputCode">gen</span> or <span class="InputCode">egen</span> and before the variable name:</p>
<p class="InputCode">gen byte highMPG=(mpg&gt;25)</p>
<p>If you declare that a variable is an integer (<span class="InputCode">byte</span>, <span class="InputCode">int</span> or <span class="InputCode">long</span>) but the expression you set it equal to contains fractions, the fractional part will be truncated, not rounded. There is also a <span class="InputCode">round()</span> function if you need it.</p>
<p>Much of the time it's not worth worrying about finding the most efficient numeric types for your variables. However, if your data set is large, using small types like <span class="InputCode">byte</span> where possible can save a lot of memory and disk space. The <span class="InputCode">compress</span> command will look for variables that can be stored in smaller types without losing precision, and  will change them automatically. </p>
<h2><a id="Strings" name="Strings"></a>Strings</h2>
<p>Strings are variables that contain text rather than numeric values. It's quite possible for that text to be made up of numbers, but Stata will not try to evaluate them. You can recognize a string because it will have quotes around it:</p>
<p class="InputCode">gen x1="123"</p>
<p>makes <span class="InputCode">x1</span> a string, and is completely different from</p>
<p class="InputCode">gen x2=123</p>
<p>For example, you can't add x1 and x2. You can write <span class="InputCode">if x1=="123"</span> and even <span class="InputCode">if x1&gt;"123"</span> but the latter will be evaluated according to alphabetical order, not numeric. </p>
<p>Stata noticed that you were setting <span class="InputCode">x1</span> equal to a string, and thus made <span class="InputCode">x1</span> a string variable automatically.  However:</p>
<p class="InputCode">replace x1=123</p>
<p>or</p>
<p class="InputCode">replace x2="123"</p>
<p>will not work because you can't change a variable from string to numeric or vice versa—but you can make it look like you did.</p>
<h3><a id="ChangingtheTypeofaVariable" name="ChangingtheTypeofaVariable"></a>Changing the Type of a Variable</h3>
<p>Suppose you needed to do some math with the numbers contained in <span class="InputCode">x1</span>. Right now you can't, because <span class="InputCode">x1</span> is a string. Here's how you can change that:</p>
<p class="InputCode">gen temp=real(x1)<br/>
                  drop x1<br/>
                  rename temp x1</p>
<p>The <span class="InputCode">real()</span> function takes one argument, a string, and returns that string converted to a number. If the string contains anything but numbers <span class="InputCode">real()</span> will return missing. Having stored the numbers in <span class="InputCode">x1</span> as <span class="InputCode">temp</span>, you then drop <span class="InputCode">x1</span> and make <span class="InputCode">temp</span> the new <span class="InputCode">x1</span>. <span class="InputCode">x1</span> is now a numeric variable. You can turn numeric variables into strings using the same process—just replace the <span class="InputCode">real()</span> function with the <span class="InputCode">string()</span> function.                </p>
<h2>Exercises</h2>
<p>For the exercises that use the automobile data set, make sure your do file loads the original data set.</p>
<ol>
<li>Using the automobile data set, suppose the cost of manufacturing a car is the sum of the following:
                    
                    <ul>
<li>$1.50 per pound of weight</li>
<li>$0.25 per pound to ship if it is foreign</li>
<li>$100 if its <span class="InputCode">rep78</span> is 5 (presumably to hire better engineers)</li>
</ul>
<p>Calculate the profit  (price minus cost) from selling each car. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_data1.htm">Solution</a>)</p>
</li>
<li>Consider <span class="InputCode">interviews.dta</span>. It contains the month and year in which each subject was born and the month and year in which that subject was interviewed. Find the age of the subject at the time of the interview in months. Then find it in whole years (i.e. what the person would say if you asked "How old are you?"). Don't worry about days (or if you prefer, assume that interviews always occur later in the month than birthdays). For extra credit, read up on Stata dates and repeat the process using them. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_data2.htm">Solution</a>)</li>
<li>
<p>Going back to the automobile data set, the <span class="InputCode">make</span> variable is comprised of the manufacturer of the car followed by the name of the car. Create a new variable containing just the manufacturer.</p>
<p> This exercise will probably require you to type <span class="InputCode">help functions</span> and/or <span class="InputCode">help egen</span> and look through the list of functions available. In fact that's kind of the point: finding functions that will do what you need to do is a big part of Stata programming. <a href="https://ssc.wisc.edu/sscc/pubs/sfr-learning.htm">Learning More</a> has some tips for understanding the help files. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_data3.htm">Solution</a>)</p>
</li>
<li>Now consider <span class="InputCode">statecounty.dta</span>. It has a two-part identifier: <span class="InputCode">state</span> and <span class="InputCode">county</span>. Combine them into a single identifier such that county 1 in state 1 becomes 101 and county 5 in state 12 becomes 1205. Now do it again by turning them into strings first, making the code for county 1, state 1 "0101". (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_data4.htm">Solution</a>)</li>
<li>Use the automobile data set again. Create value labels so that when listing <span class="InputCode">mpg</span> you see "12 (Lowest MPG)" and "41 (Highest MPG)" for the cars with the lowest and highest values of <span class="InputCode">mpg</span> respectively. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_data5.htm">Solution</a>)</li>
</ol>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-stats.htm"> Statistics</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-syntax.htm">Usage and Syntax</a></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Do Files</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part three of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>Up to this point we've used Stata interactively: we've typed commands in the command window, hit Enter, and observed the results. But now that we've covered the basics of Stata syntax, the next step is learning how to create and change variables. You should <em><strong>never</strong></em> change your data interactively, so we'll first talk about how to write do files.</p>
<h2>Writing a Do File</h2>
<p>Do files are simply text files whose names end with <span class="InputCode">.do</span> and
                  which contain Stata commands exactly the way you'd type them
                  into the command window. Sometimes people call them programs, though Stata uses this term for something else (see <a href="https://ssc.wisc.edu/sscc/pubs/stata_prog2.htm">Stata Programming Tools</a>). You can write do files using any text editor, but the Do File Editor built into Stata has tools and features designed to help programmers so we recommend using it. Do not write Stata code using Word—it will automatically insert things like "smart quotes" and other formatting that Stata cannot understand.</p>
<p>Start the Do File Editor by clicking on the button that looks like a pencil writing in a notebook or by typing <span class="InputCode">doedit</span>.</p>
<h2>Setting Up</h2>
<p>Almost every do file should start with the following commands (or something very much like them):</p>
<p class="InputCode">clear all<br/>
                  capture log close<br/>
                set more off</p>
<p>The first command clears the memory so you don't have to worry about what might have happened before your do file was run. The second closes any open log files. The third tells Stata not to pause whenever the screen fills and wait for you to press a key (while saying <span class="Blue">--more--</span> at the bottom).</p>
<h2><a id="KeepingLogs" name="KeepingLogs"></a>Starting a Log</h2>
<p>A research do file should have a corresponding log file which records
                  all the commands the do file ran and their results. To start logging, the command is: </p>
<p class="InputCode">log using <span class="Parameter">filename</span>.log,
                  replace</p>
<p>where <span class="Parameter">filename</span> is the name of the
                  file you want Stata to use as a log. Give the log file the same name as the do file it records, so it's obvious which log file goes with which do file.  The <span class="InputCode">replace</span> option
                  tells Stata that if a log file with that name already exists, usually from a previous attempt to run the do file, it should be
                  replaced by the current log. </p>
<p>If you do not specify the <span class="InputCode">.log</span> at
                  the end of the filename, Stata will save the log using its Stata
                  Markup and Control Language. SMCL has its uses, but it can only
                  be read by Stata's Viewer. If your filename ends with <span class="InputCode">.log</span>,
                  Stata will save the log as plain text which you can read in any
                  text editor. </p>
<h2>Loading Data</h2>
<p>Next you will usually load a data set:</p>
<p class="InputCode">use <span class="Parameter">dataset</span></p>
<p>If the dataset is in the current working directory, you don't need to specify its location.</p>
<h2>Do Your Work</h2>
<p>At this point you'll be ready to do your work. Generally this means data preparation, exploratory analysis, or analysis you intend to report or publish. We recommend you have separate do files for each of these, as they are very different processes and have different requirements. We'll talk more about this in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-projects.htm">Project Management</a>.</p>
<h4>Save your Data</h4>
<p>If this do file is for data preparation, you'll need to save your work at the end:</p>
<p class="InputCode">save <span class="Parameter">newDataset</span>, replace</p>
<p>The <span class="InputCode">replace</span> option again  allows Stata to overwrite the output from previous attempts to run the do file.</p>
<p><strong>Never, ever save your output data set over your input data set. </strong>(In other words, the starting <span class="InputCode">use</span> command and the ending <span class="InputCode">save</span> command should never act on the same file.) If you do, the data set your do file was written to work with will no longer exist. If it turns out you made a mistake, you can't easily recover. If the data set was stored on the SSCC network, you can call the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">Help Desk</a> and ask to have the file restored from backup but this is definitely not ideal.</p>
<p>Clearing everything from memory, loading the data set you want to use, and then saving any changes you make to a different file makes your do file <em>reproducible</em>: you can run it again any time you want and get the exact same results. If the input data set changes, you'll be applying the exact same procedures to the new data. If it turns out you made a mistake, all you need to do is correct the error in your code and run the do file again. If you need to make changes you can do so without starting over. It may take a bit of effort at first to get into the habit of writing reproducible code, but the effort will pay off very quickly.</p>
<h2>Close your log</h2>
<p>The last line of the do file will normally be:</p>
<p class="InputCode">log close</p>
<p>If you don't close the do file's log, any commands you run after the do file finishes will be logged as if they were part of the do file. If your do file crashes before reaching the <span class="InputCode">log close</span> command it will leave the log file open. That's why you need <span class="InputCode">capture log close</span> at the beginning. (The <span class="InputCode">capture</span> prefix basically says "If the following command generates any errors I don't care. Please don't crash my do file." We use it here because <span class="InputCode">log close</span> will generate an error if there is no open log. At this point in your Stata career you should not use <span class="InputCode">capture</span> for anything else—fix the errors instead.)</p>
<h2>Running a Do File</h2>
<p>The easiest way to run a do file is to press <span class="InputCode">Ctrl-d</span> in the Do File Editor, or click the icon on the far right that looks like a "play" button over some code. If you first select just part of the do file then only that part will be run.</p>
<p> Running parts of your code rather than the entire do file can save a lot of time, but code taken out of context won't always work. For example, if you run a command that creates a variable <span class="InputCode">x</span>, realize you made a mistake, and then fix it, you can't simply select that command and run it again unless you first drop the existing version of <span class="InputCode">x</span>. If you find yourself getting confused by these kinds of issues, run the entire do file rather than a selection so everything is run in its proper context.</p>
<p>You can also tell Stata to run a do file with the do command:</p>
<p class="InputCode">do myDoFile</p>
<p>This means do files can run other do files. For complicated projects it can be very helpful to have a master do file that runs all the other do files in the proper sequence.</p>
<h2>How long should a do file be?</h2>
<p>For data preparation work, it's easy to "daisy-chain" do files: <span class="InputCode">dofile1</span> loads <span class="InputCode">dataset1</span>, modifies it, and saves it as <span class="InputCode">dataset2</span>; <span class="InputCode">dofile2</span> loads <span class="InputCode">dataset2</span>, modifies it, and saves it as <span class="InputCode">dataset3</span>, etc. When you're done, a master do file can run them all. Thus there's very little downside to breaking up one long do file into two or more short do files. Our suggestion is that you keep your do files short enough that when you're working on one of them you can easily wrap your head around it. You also want to keep do files short so they run as quickly as possible: working on a do file usually requires running it repeatedly, so moving any code that you consider "done" to a different do file will save time.</p>
<h2>Comments</h2>
<p>Comments are  text included in a do file for the benefit
                  of human readers, not for Stata. Comments can explain what the do file does and why, and if
                  anyone else ever needs to read and understand your do file they'll be very grateful for good comments. But <em>you</em> are the most likely beneficiary of your comments, when you have to figure out how your do file works months or years after writing it.</p>
<p>You don't need to comment every command—most Stata
                  code is fairly easy to read. But be sure to comment any code 
                  that required particular cleverness to write, or you'll need to be just as clever to figure out what it does later.</p>
<p>Comments need to be marked as such so that Stata will not try to execute them. <span class="InputCode">/*</span> means Stata should ignore everything until it sees <span class="InputCode">*/</span>, while <span class="InputCode">//</span> means Stata should ignore the rest of that line. Here's how one might comment the solution to one of the exercises in the previous section:</p>
<p class="InputCode">// make a list of cars I might be interested in buying<br/>
                list make price mpg rep78 if price&lt;4000 | (price&lt;5000 &amp; rep78&gt;3 &amp; rep78&lt;.)<br/>
/* <br/>
                  Note:<br/>
                Some cars will appear on the list even though they have<br/>
a missing value for rep78.<br/>
                This is not an error.<br/>
                If their price is less than $4,000 I don't care about their<br/>
repair record.<br/>
*/</p>
<p>A useful programmer's trick is to "comment out" code you don't want to run right now but don't want to delete entirely. For example, if you temporarily wanted to focus on just the cars that meet the <span class="InputCode">price&lt;4000</span> condition, you could change that command to:</p>
<p class="InputCode">list make price mpg rep78 if price&lt;4000 // | (price&lt;5000 &amp; rep78&gt;3 &amp; rep78&lt;.) </p>
<p>When you're ready to return to the original command, just remove the comment markers.</p>
<p>Three forward slashes (<span class="InputCode">///</span>) means that the current command is continued on the next line. Think of it as commenting out the 'end-of-line' that tells Stata the command is complete. This allows you to break up commands over multiple lines for readability:</p>
<p class="InputCode">list make price mpg rep78 ///<br/>
<span class="indent3">if price&lt;4000 | (price&lt;5000 &amp; rep78&gt;3 &amp; rep78&lt;.)</span></p>
<p>From now on we'll do everything using do files.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-data.htm">Working with Data</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-syntax.htm">Usage and Syntax</a></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>SSCC - Social Science Computing Cooperative</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part nine of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>Stata has a suite of tools for creating publication-quality graphs.
            	Graphs are inherently complicated objects and the syntax for
            	creating them can also get quite complicated. However, simple
            	graphs with the default settings are very easy to make.</p>
<p> This article will give you a very brief introduction to Stata's graphical capabilities. If this is a topic that interests you, you may want to skip this article and read our <a href="https://ssc.wisc.edu/sscc/pubs/4-24.htm">Introduction to Stata Graphics</a> instead (either before or after proceeding to the next article in this series, <a href="https://ssc.wisc.edu/sscc/pubs/sfr-do.htm">Do Files and Project Management</a>).</p>
<p>Load the automobile data set once again:</p>
<p class="InputCode">sysuse auto, replace</p>
<p>Then make a scatterplot of <span class="InputCode">mpg</span> versus <span class="InputCode">weight</span> by typing:</p>
<p class="InputCode">scatter mpg weight </p>
<p>If you want a line graph instead, type:</p>
<p class="InputCode">line mpg weight, sort </p>
<p>The <span class="InputCode">sort</span> option here does not mean
                  Stata should  sort the data. Rather it means that the
                  line should be drawn from the observation with the smallest value
                  of <span class="InputCode">weight</span> to the observation with
                  the next smallest, etc. Without it the line would be drawn from
                  observation one to observation two to observation three and so
                  forth, and the result would look like a scribble (try it).</p>
<p>Since graphs can be so complicated we don't suggest trying to memorize the syntax for every setting and detail. Keeping track of such things is the great strength of a point-and-click graphical
                  user interface, so this is an area where we suggest taking advantage of it. Stata will translate what you choose into a
                  Stata command which you can then put into a do file, rerun or modified.</p>
<p>To make the same basic line graph using the graphical user interface, start by clicking <span class="MenuOutput">Graphics</span>, <span class="MenuOutput">Twoway
                  graph</span> (twoway meaning a graph that
                  has an X and a Y). Then click the <span class="MenuOutput">Create</span> button
                  to create a new plot.</p>
<p>You'll then get a window where you can choose the basic properties
                  of your plot. Leave the category set to <span class="MenuOutput">Basic
                    plots</span>, set the
                  type to <span class="MenuOutput">Line</span> and choose or type <span class="InputCode">mpg</span> as
                  the <span class="MenuOutput">Y
                    variable</span> and <span class="InputCode">weight</span> as the <span class="MenuOutput">X variable</span>. Check the box that says <span class="MenuOutput">Sort
                      on x variable</span>. Then click <span class="MenuOutput">Accept</span>. </p>
<p><img alt="Creating a line graph" height="416" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-9/4-9_2.png" width="621"/></p>
<p>This will take you back to the main graphics Window. You could
                  click <span class="MenuOutput">Create</span> again to add another
                  plot, which would be overlaid on the line plot you already defined.
                  But there are several other tabs that control the properties
                  of the entire graph.</p>
<p>Select the <span class="MenuOutput">if/in</span> tab and you can
                  choose which observations are to be included. Type <span class="InputCode">price&lt;10000</span> in
                  the <span class="MenuOutput">If:</span> box (note that you shouldn't type the word <span class="InputCode">if</span>). </p>
<p><img alt="Selecting observations with if" height="346" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-9/4-9_3.png" width="481"/></p>
<p>Next click on the <span class="MenuOutput">By </span>tab. Check
                  the box <span class="MenuOutput">Draw subgraphs for unique values of variables</span> and
                  for <span class="MenuOutput">Variables</span> choose
                  or type <span class="InputCode">foreign</span>. </p>
<p><img alt="By: options" height="346" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-9/4-9_4.png" width="481"/></p>
<p>Click <span class="MenuOutput">OK</span>, and the graph will be
                  created. The command for creating it will also be placed in the
                  results window:</p>
<p class="InputCode">twoway (line mpg weight, sort) if price&lt;10000, by(foreign) </p>
<p>Note how for
                  graphs <em>by</em> is
                  an option, not a prefix like you're used to. That's because you're
                  not creating two completely separate graphs for the domestic and
                  foreign cars like you would with the standard <em>by:</em>. Instead
                  you're creating one graph with the two subpopulations next to
                  each other. </p>
<p>If you click <span class="MenuOutput">Graphics</span>, <span class="MenuOutput">Twoway
                  graph </span>again, the same settings will still be there so you
                  can refine the options you chose. Once you've
                  got the graph you want, copy the resulting command into a
                  do file. If you want to start a new graph instead, click
                  on the large <span class="MenuOutput">R</span> (reset) button in
                  the lower left of the window.</p>
<p>For much more information about creating graphs, see <a href="https://ssc.wisc.edu/sscc/pubs/4-24.htm">An
                  Introduction to Stata Graphics</a>.</p>
<h4>Exercise</h4>
<ol>
<li>Create a scatter plot of <span class="InputCode">price</span> on <span class="InputCode">weight</span>.</li>
<li>Split that scatter plot into seven plots, one for each value of <span class="InputCode">rep78</span> including missing and a total.</li>
</ol>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-projects.htm">Project Management</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-combine.htm">Combining Data Sets</a></p>
<p> </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/4-9/4-9_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-9/4-9_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-9/4-9_4.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Working with Groups</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part six of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em> </p>
<p>Tasks that  require working with groups are common and can range from the very simple ("Calculate the mean mpg of the domestic cars and the foreign cars separately") to the very complex ("Model student performance on a standardized test, taking into account that the students are grouped into classes which are grouped into schools which are grouped into districts."). Fortunately, working with groups is one of Stata's greatest strengths. In this article we'll discuss tools for working with groups, and at the same time try to give you more experience using Stata's syntax to get useful results. In the next section (<a href="https://ssc.wisc.edu/sscc/pubs/sfr-hier.htm">Hierarchical Data</a>) we'll introduce a theoretical framework for thinking about grouped data, but it will make more sense if you've had some experience working with groups first.                </p>
<p>We'll start by going through some basic tools that are used for working with groups, and some tricks for using them. In doing so we'll use one of the example data sets for this series, <span class="InputCode">households.dta</span>. Make sure you copied those files from <span class="MenuOutput">X:\SSCC Tutorials\StataResearch</span> or <a href="https://ssc.wisc.edu/sscc/pubs/files/StataResearch.zip">downloaded them</a>, and put them in a convenient location like <span class="MenuOutput">U:\StataResearch</span>. Make sure your current working directory is set to that location:</p>
<p class="InputCode">cd U:\StataResearch</p>
<p>(or wherever you put them). Then start a do file:</p>
<p class="InputCode">clear all<br/>
capture log close<br/>
set more off<br/>
log using groups1.log, replace<br/>
<br/>
use households<br/>
<br/>
log close</p>
<p>You'll want to run your do file frequently in this section. Consider keeping a data browser window open so you can easily see what the do file does to your data.</p>
<p>This data set contains information on twenty fictional people who live in six different households. This data structure is one of the most common encountered at the SSCC. One variable that may require explanation is <span class="InputCode">rel2head</span>, or "relationship to the head of household." It is a categorical variable that takes on three values, with value labels applied. Type <span class="InputCode">label list</span> to see them. This is typical of real-world data (except real data usually have many more kinds of relationships).</p>
<h2><a id="By" name="By"></a>By</h2>
<p>The most important tool for working with groups is <em>by</em>. Recall that if you put <span class="InputCode">by </span><span class="Parameter">varlist</span><span class="InputCode">:</span> before a command, Stata will first break up the data set up into one group for each value of the <em>by</em> variable (or each unique combination of the <em>by</em> variables if there's more than one), and then run the command separately for each group. For further review,  see the section on <em>by</em> in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-syntax.htm#by">Usage and Syntax</a>. Here are some examples of things you can do with <em>by</em>.</p>
<h3><a id="CalculatingSummaryStatisticsOverGroups" name="CalculatingSummaryStatisticsOverGroups"></a>Calculating Summary Statistics Over Groups</h3>
<p>Find the average age of the adults in each household:</p>
<p class="InputCode">by household: sum age if age&gt;=18</p>
<p>(You could get the same results more compactly with <span class="InputCode">tab household if age&gt;=18, sum(age)</span>)                </p>
<p>Store the total household income  in a new variable:</p>
<p class="InputCode">by household: egen householdIncome=total(income)</p>
<p>Note that <span class="InputCode">householdIncome</span> is the same for all the individuals living in a given household. That's because it's a characteristic of the household, not the individual. We'll talk more about this distinction in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-hier.htm">Hierarchical Data</a>.</p>
<h3><a id="IdentifyingCharacteristicsofaGroup" name="IdentifyingCharacteristicsofaGroup"></a>Identifying Characteristics of a Group</h3>
<p>Create an indicator for whether a household has children or not, regardless of number:</p>
<p class="InputCode">gen child=(age&lt;18)<br/>
                by household: egen hasChildren=max(child)</p>
<p></p>
<p></p>
<p>If a household has no children, the maximum value of <span class="InputCode">child</span> will be zero. If it has any at all, the maximum will be one.</p>
<p>In this case, <span class="InputCode">child</span> is likely to be a useful variable in its own right. But if you didn't need it, you could do the whole process in one line with:</p>
<p class="InputCode">by household: egen hasChildren=max(age&lt;18)</p>
<p>Now instead of finding the max of a variable, you're finding the max of an expression, but the result is the same: the maximum will be one for the entire household if the household has any children in it and zero otherwise.</p>
<h3><a id="CountingObservationsthatMeetaCondition" name="CountingObservationsthatMeetaCondition"></a>Counting Observations that Meet a Condition</h3>
<p>Find the number of children in each household:</p>
<p class="InputCode">                by household:egen numChildren=total(child)                </p>
<p>Here we
                  take advantage               
                of the fact that the total of an indicator variable is the number of observations for which the indicator variable is true. Again, <span class="InputCode">total(child)</span> could have been <span class="InputCode">total(age&lt;18)</span>.</p>
<h3><a id="ResultSpreading" name="ResultSpreading"></a>Result Spreading</h3>
<p>Suppose we need to store the mean age of the adults in each household as a variable. The obvious starting point would be:</p>
<p class="InputCode">by household: egen meanAdultAge=mean(age) if age&gt;=18</p>
<p>However, <span class="InputCode">meanAdultAge</span> receives a missing for all the children in the data set. That's because the <em>if</em> condition does two things in this command: it controls which which observations are used in calculating the mean to be stored in <span class="InputCode">meanAdultAge</span>, but also which observations that mean is stored in. If we need the household's <span class="InputCode">meanAdultAge</span> to be available in all the observations for that household (and we usually do), then we need to "spread" the result to the other observations.</p>
<p class="InputCode">by household: egen temp=mean(meanAdultAge)<br/>
                drop meanAdultAge<br/>
                rename temp meanAdultAge</p>
<p>All the observations in each household that have a value for <span class="InputCode">meanAdultAge</span> have the same value. Thus the <span class="InputCode">mean()</span> function returns that value—but it does so for all the observations in the household. (Recall that when <span class="InputCode">mean()</span> encounters missing values it essentially ignores them and calculates the mean of the non-missing values.) Thus the <span class="InputCode">temp</span> variable contains the proper value of <span class="InputCode">meanAdultAge</span> for all observations, adults and children. We then drop the old <span class="InputCode">meanAdultAge</span> variable and rename <span class="InputCode">temp</span> <span class="InputCode">meanAdultAge</span>. If we plan ahead we can save one line of code compared to the above:</p>
<p class="InputCode">by household: egen temp=mean(age) if age&gt;=18<br/>
  by household: egen meanAdultAge=mean(temp)<br/>
  drop temp
</p>
<p> This is sometimes called "spreading" a result: if you can find the right answer for some of the observation in a group, you can then spread it out to the others. You could do  spreading with any of several <span class="InputCode">egen</span> functions: <span class="InputCode">min()</span>, <span class="InputCode">max()</span>, etc., but <span class="InputCode">mean()</span> is perhaps the most intuitive.</p>
<h4>Exercises</h4>
<ol>
<li>Create an indicator variable for childless households using the <span class="InputCode">numChildren</span> variable you created earlier. Defend your choice whether or not to use <em>by</em> in the process. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_by1.htm">Solution</a>)</li>
<li>Find the age of the youngest adult in each household at the time their first child was born. (Hint: this is a characteristic of the household, not an individual.) (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_by2.htm">Solution</a>)</li>
<li>Find the mean household income of people in single-parent households and  two-parent households. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_by3.htm">Solution</a>)</li>
</ol>
<h2><a id="_nand_N" name="_nand_N"></a>_n and _N</h2>
<p>Most Stata commands are actually loops: do something to observation one, then do it to observation two and so forth. As Stata works through this loop, it tracks  which observation it is working on with an internal variable called <span class="InputCode">_n</span>. You are welcome to use this variable in your commands:</p>
<p class="InputCode">l if _n==5</p>
<p>will only list observation five, because the condition <span class="InputCode">_n==5</span> is only true when Stata is working with observation five.</p>
<p><span class="InputCode">_n</span> becomes even more useful when combined with <em>by. </em>Suppose you wanted to list the first observation in each household:</p>
<p class="InputCode">by household: l if _n==1</p>
<p>It just so happens that the first observation is the head of household in every case, which is not unusual. But what if instead of having <span class="InputCode">rel2head</span> you only knew the head of household by their location in the household? Then you'd have to be very careful about sorting. Stata's default sort algorithm is not "stable," meaning that if you sort by household it may change the order of observations within the household. If the order of observations matters, you should add the <span class="InputCode">stable</span> <em>option</em> to any <span class="InputCode">sort</span> commands. That way Stata will use a different sort algorithm that is slower but will not change the order of observations within a group. But having done that you can always identify the head of household with a combination of <span class="InputCode">by household:</span> and <span class="InputCode">if _n==1</span>.</p>
<p>Another internal variable, <span class="InputCode">_N</span>, contains the number of observations in the data set. It is also the observation number of the last observation. You can use it in commands just like <span class="InputCode">_n</span>:</p>
<p class="InputCode">by household: l if _n==_N</p>
<p>This lists the last observation in each household.</p>
<h3><a id="CreatingWithinGroupIdentifiers" name="CreatingWithinGroupIdentifiers"></a>Creating Within-Group Identifiers</h3>
<p> Often you'll want to have a within-group identifier so you can always tell which observation is which, even after a mistaken sort. In this case the within-group identifier could logically be called <span class="InputCode">person</span>:</p>
<p class="InputCode">by household: gen person=_n</p>
<p>The <span class="InputCode">person</span> variable will correspond to the observation number of the person within their household in the current sort order. If you wanted a globally unique identifier, run the above command without <span class="InputCode">by household:</span>.</p>
<h3><a id="FindingtheSizeofaGroup" name="FindingtheSizeofaGroup"></a>Finding the Size of a Group</h3>
<p>Like <span class="InputCode">_n</span>, <span class="InputCode">_N</span> honors by groups. Thus <span class="InputCode">_N</span> contains the number of observations in the <em>by</em> group currently being worked on. You can easily find household size with:</p>
<p class="InputCode">by household: gen size=_N</p>
<h2><a id="Subscripts" name="Subscripts"></a>Subscripts</h2>
<p>Consider the command:</p>
<p class="InputCode">gen newIncome=income </p>
<p>In carrying it out, Stata looks at one observation at a time, and sets <span class="InputCode">newIncome</span> for that observation equal to <span class="InputCode">income</span> for the same observation. Subscripts allow you to look at the value of a variable for any observation you want. Try:</p>
<p class="InputCode">gen newIncome2=income[1]</p>
<p><span class="InputCode">income[1]</span> means "the value of income for observation 1." Thus <span class="InputCode">newIncome2</span> will be 60,000 for all observations (not that that is a useful result).</p>
<h3><a id="SpreadingCharacteristicsofaSpecialObservation" name="SpreadingCharacteristicsofaSpecialObservation"></a>Spreading Characteristics of a Special Observation</h3>
<p>Consider trying to identify the female-headed households:</p>
<p class="InputCode">by household: gen femaleHead=female[1]</p>
<p>Since the first person in each household is the head, the household has a female head if and only if the first person is female.</p>
<p>What if the head of household were last instead of first? Just change it to:</p>
<p class="InputCode">by household: gen femaleHead=female[_N]</p>
<p>What if the heads of household weren't in any particular place within the household? Use <span class="InputCode">sort</span> to make them the first person in the household:</p>
<p class="InputCode">sort household rel2head<br/>
  by household: gen femaleHead=female[1]</p>
<p>What if the code for "head of household" weren't the lowest value of <span class="InputCode">rel2head</span>? The following will always work:</p>
<p class="InputCode">gen isHead=(rel2head==1)<br/>
  sort household isHead<br/>
  by household: gen femaleHead=female[_N]<br/>
</p>
<p>What if some households don't have a head, and you need <span class="InputCode">femaleHead</span> to be missing for those households? Do the above, but add an <em>if</em> condition to the last line:</p>
<p class="InputCode">by household: gen femaleHead=female[_N] if isHead[_N]</p>
<p>This general method will work any time you need to pick out the characteristics of a special row within a group (the respondent to a survey, the month in which a subject graduated, etc.):</p>
<ol>
<li>Create an indicator variable that is one for the special row and zero for all other rows</li>
<li>Sort by the group ID and the new indicator variable</li>
<li>The special row will be last and can be accessed with <span class="InputCode">[_N]</span> as long as you start with <em>by</em></li>
</ol>
<p>If you  want the special observation to be first rather than last, you can use <span class="InputCode">gsort</span> (generalized sort):</p>
<p class="InputCode">gsort household -isHead</p>
<p>With <span class="InputCode">gsort</span> you can put a minus sign in front of a variable name and the observations will be sorted in descending order by that variable rather than ascending.</p>
<h3>Checking Whether a Variable Varies within a Group</h3>
<p>The <span class="InputCode">householdIncome</span> variable should have the same value for all the individuals within a given household. You can check that with:</p>
<p class="InputCode">sort household householdIncome<br/>
by household: assert householdIncome[1]==householdIncome[_N]</p>
<p>Because the observations within a household are sorted by <span class="InputCode">householdIncome</span>, the smallest value will be first and the largest value will be last. If the first and last values are the same, then you know all the values are the same.</p>
<h4>Exercises</h4>
<ol>
<li>How could you check that every household has one and only one head of household? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_checks1.htm">Solution</a>)</li>
<li>Create an indicator variable for whether a household's value of <span class="InputCode">age</span> varies. Use it to <span class="InputCode">browse</span> just those households whose <span class="InputCode">age</span> does vary. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_checks2.htm">Solution</a>)</li>
</ol>
<h3><a id="CalculationsBasedonanObservationsNeighbors" name="CalculationsBasedonanObservationsNeighbors"></a>Calculations Based on an Observation's Neighbors</h3>
<p>Subscripts can contain mathematical expressions, including <span class="InputCode">_n</span> and <span class="InputCode">_N</span>.</p>
<p> Start a new do file that loads the data set called <span class="InputCode">schools</span>. This contains enrollment numbers for ten fictional (and not terribly plausible) schools. We'll define a student's peer group as everyone in her grade, the grade above her, and the grade below her. To find the size of each grade's peer group, type the following:</p>
<p class="InputCode">by school: gen peerGroup=students+students[_n+1]+students[_n-1]</p>
<p>The result is missing for grade one because it doesn't have a grade before it, and for grade twelve because it doesn't have a grade after it. Thus <span class="InputCode">students[_n-1]</span>or <span class="InputCode">students[_n+1]</span> give missing values for them. Fortunately Stata just returns a missing value in such cases rather than giving an "index out of bounds" error or something similar.</p>
<h4>Exercises    </h4>
<ol>
<li>What would happen if you left out <span class="InputCode">by school:</span> in:
  <p class="InputCode">by school: gen peerGroup=students+students[_n+1]+students[_n-1]</p>
<p> What would happen if some schools didn't have an observation for some grades? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_subscripts2.htm">Solution</a>)</p>
</li>
<li>Implement an extended definition of  <span class="InputCode">peerGroup</span> where the the peers of the first graders and the first and second graders, and the peers of the twelfth graders are the eleventh and twelfth graders (i.e. fill in the missing values). (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_subscripts1.htm">Solution</a>)</li>
</ol>
<h2><a id="PanelData" name="PanelData"></a>Panel Data</h2>
<p>Panel data, or data with multiple individuals observed multiple times, can be treated like grouped data even though a "group" in this case is  an individual. (This is why we introduce more general terminology in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-hier.htm">Hierarchical Data</a>.) Start another do file that loads a data set called <span class="InputCode">employment</span>. This consists of five people observed for twenty months, with each person's employment status recorded each month.</p>
<h3><a id="IdentifyingSpells" name="IdentifyingSpells"></a>Identifying Spells</h3>
<p>A typical person in this panel is employed for a while, then unemployed for a while, etc. Each period of continuous employment or unemployment is called a "spell" and a common first task with such data is to identify the spells.</p>
<p>Begin by identifying the months which start a new spell, i.e. the months where a person's employment status is different from what it was the previous month:</p>
<p class="InputCode">by person: gen start=(employed!=employed[_n-1])</p>
<p>For the first month  in which a person is observed, the quantity <span class="InputCode">employed[_n-1]</span> does not exist and is thus missing. Since <span class="InputCode">employed</span> is never missing (how would you check that?) this guarantees that the first month a person is observed is marked as the start of a new spell.</p>
<p>Next comes something you should add to your bag of tricks:</p>
<p class="InputCode">by person: gen spell=sum(start)</p>
<p>The <span class="InputCode">sum()</span> function finds running sums, i.e. the sum of a variable for all observations up to and including the current observation. Since <span class="InputCode">start</span> is one whenever a spell starts and zero otherwise, <span class="InputCode">sum(start)</span> for an observation is the number of spells which have started up to that point—and that serves as a splendid spell ID.</p>
<p>Once you've identified the spells, you can treat them as groups. However, these spell IDs only make sense within the context of a person (each person has their own spell number one). Thus the proper <em>by</em> is <span class="InputCode">by person spell:</span>, and the first time you use it you'll have to say <span class="InputCode">bysort</span>. But everything you've learned still applies. For example, finding the duration of a spell is exactly like finding the size of a household:</p>
<p class="InputCode">bysort person spell: gen duration=_N</p>
<h4>Exercises</h4>
<ol>
<li><p>Think back to the command:</p><p class="InputCode">by person: gen start=(employed!=employed[_n-1])</p>
<p>What would happen if you omitted the <em>by</em>? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_spell1.htm">Solution</a>)</p></li>
<li>Create variables containing the start month, start year, end month and end year for each spell. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_spell2.htm">Solution</a>)</li>
<li>Find the mean spell length for each person. Make sure the mean is calculated over spells, not months. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_groups_spell3.htm">Solution</a>)</li>
</ol>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-hier.htm">Hierarchical Data</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-stats.htm"> Statistics</a></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Hierarchical Data</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part seven of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>Hierarchical data are  data where observations fall into groups or clusters. The most common examples at the SSCC are individuals living in a household and a subject being observed multiple times, as in the data sets used in the previous section. But there are many other applications: schools within a district, courses taken by a student, or   individuals who are part of a subject's social network can all be treated as hierarchical data. Hierarchies can  have more than two levels; for example students may be grouped into classrooms which are grouped into schools which are grouped into districts.</p>
<p>This article will  introduce you to a way of describing hierarchical data that will make it easier to talk about—and think about—its structure. It was developed by the community of statisticians interested in formal Hierarchical Linear Modeling, but you don't have to be doing HLM for the concepts and terminology to be useful. We'll then introduce two commands that act directly on the structure of hierarchical data sets: <span class="InputCode">reshape</span> and <span class="InputCode">collapse</span>.</p>
<h2><a id="DescribingHierarchicalData" name="DescribingHierarchicalData"></a>Describing Hierarchical Data</h2>
<p>Since hierarchical data can describe so many different things, we need  to define terms that can apply to all of them. We'll describe the smallest unit in the data as the level one unit. In the examples mentioned above the level one unit would be an individual within the household, a particular time the subject was observed, a school within the district, a course taken by the student, or an individual within the subject's social network. A level two unit is  a group of level one units: the household in which the individuals live, the subject which is measured repeatedly, the district which contains the schools, the student who takes the courses or the subject whose social network is being described. If needed, a level three unit is  a collection of level two units, and so forth.</p>
<p>Most hierarchical data sets will include some variables which describe the level one units and some which describe the level two units. For example, a data set of individuals living in households may contain the age and sex of each individual, plus the household income of the household as a whole. Age and sex would then be level one variables while household income would be a level two variable.</p>
<p>Level two variables are easy to identify: they always have the same value for all the level one units in the same level two unit. For example, the total number of people in the household must be the same for every member of a household, or if a subject is observed multiple times he or she will  have the same birth date each time. Anything that varies within a level two unit is a level one variable: individuals within a household can obviously have different employment statuses, so employment status must be a level one variable. While it's rarely difficult to identify which of your variables are level one and which are level two, taking a moment to do so during the planning stage of your project and before writing any code can help you avoid a lot of headaches.</p>
<p>Ideally each level will have an associated  identifier: for example a household ID and an individual ID, or a subject ID and a survey wave ID. The level one identifiers only need to be unique within a level two group, and in fact the <span class="InputCode">reshape</span> command will only work if this is the case. Often data sets do not come with a usable level one identifier, but you learned how to create one in the last section (e.g. <span class="InputCode">by household: gen person=_n</span>).</p>
<h2><a id="RepresentingHierarchicalDataasaMatrix" name="RepresentingHierarchicalDataasaMatrix"></a>Representing Hierarchical Data as a Matrix</h2>
<p>Stata (like most statistical programs) stores its data in a matrix, where rows are observations and columns are variables. But when working with hierarchical data "observation" is an ambiguous term: it could mean either a level one unit or a level two unit. The purpose of the <span class="InputCode">reshape</span> command is to allow you to go back and forth between the two definitions at will, restructuring your data accordingly.</p>
<p>If an observation represents a level one unit then your data are in the long form, so named because it has more observations. In the long form, both level one and level two variables are represented by columns in the data matrix. However, level two variables will have many repeated values, since all the observations in the same level two group will share the same values of all the level two variables.</p>
<p>If, on the other hand, an observation represents a level two unit then your data are in the wide form, so named because it has more variables. In wide form, level two variables are represented by columns as usual. However, level one variables are represented by sets of columns, with each set containing a column for each level one unit. Thus the values of the level one variables for each level one unit within a level two unit are stored in the same row, but in different columns.</p>
<p>Consider the following data:</p>
<a id="long" name="long"></a>
<table cellpadding="0" cellspacing="0">
<tr>
<th>person</th>
<th>wave</th>
<th>birthdate</th>
<th>education</th>
<th>income</th>
</tr>
<tr>
<td align="right">1</td>
<td align="right">1</td>
<td align="right">12/2/1963</td>
<td>HS Grad</td>
<td align="right">60000</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">2</td>
<td align="right">12/2/1963</td>
<td>HS Grad</td>
<td align="right">65000</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">1</td>
<td align="right">3/18/1966</td>
<td>Bachelor's</td>
<td align="right">90000</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">2</td>
<td align="right">3/18/1966</td>
<td>Bachelor's</td>
<td align="right">0</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">1</td>
<td align="right">6/6/1959</td>
<td>Some College</td>
<td align="right">40000</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">2</td>
<td align="right">6/6/1959</td>
<td>Bachelor's</td>
<td align="right">110000</td>
</tr>
</table>
<p>This is panel data, with three people each observed in two survey waves. Thus a level two unit is a person, while a level one unit is a person-wave combination. A person's birthdate never changes, so it is a level two variable. Meanwhile, a person's  income clearly can change between waves, so it is  a level one variable. Education looks like it might be a level two variable at first, but person number three apparently went back to school between waves and finished a Bachelor's degree. Thus <span class="InputCode">education</span> must be treated as a level one variable.</p>
<p>Since each row represents a level one unit, the above data are in the long form. Now consider the exact same data in a different format:</p>
<a id="wide" name="wide"></a>
<p>
<table cellpadding="0" cellspacing="0">
<tr>
<th>person</th>
<th>birthdate</th>
<th>education1</th>
<th>income1</th>
<th>education2</th>
<th>income2</th>
</tr>
<tr>
<td align="right">1</td>
<td align="right">12/2/1963</td>
<td>HS Grad</td>
<td align="right">60000</td>
<td>HS Grad</td>
<td align="right">65000</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">3/18/1966</td>
<td>Bachelor's</td>
<td align="right">90000</td>
<td>Bachelor's</td>
<td align="right">0</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">6/6/1959</td>
<td>Some College</td>
<td align="right">40000</td>
<td>Bachelor's</td>
<td align="right">110000</td>
</tr>
</table>
</p>
<p>Here a row represents a level two unit, so this is the wide form. The level one variables education and income are represented by two columns each, one for each wave.</p>
<h2><a id="UsingReshape" name="UsingReshape"></a>Using Reshape</h2>
<p>Stata's <span class="InputCode">reshape</span> command allows you switch between the two forms at will. The general syntax is:</p>
<p class="InputCode">reshape <span class="Parameter">long/wide</span> <span class="Parameter">"stubs" of level 1 vars</span>, i(<span class="Parameter">level 2 ID</span>) j(<span class="Parameter">level 1 ID</span>)</p>
<p>Before talking through the syntax in detail let's do an example. Start a do file that loads the dataset <span class="InputCode">reshape1</span>.</p>
<p>Do a <span class="InputCode">list</span> and you'll see it's currently in the long form (as in <a href="#long">this table</a>). To change that, type:</p>
<p class="InputCode">reshape wide education  income, i(person) j(wave)</p>
<p>Do another <span class="InputCode">list</span> to see the results (it should look like <a href="#wide">this table</a> except for the placement of the <span class="InputCode">birthdate</span> column). To go back to long form, type: </p>
<p class="InputCode"> reshape long education  income, i(person) j(wave)</p>
<p>Referring back to the general syntax, <span class="InputCode">long</span> or <span class="InputCode">wide</span> is the form in which you want to put the data. Next comes a list of level one variables, but note that when the data set is in wide form it does not contain any variables literally called  <span class="InputCode">education</span> or <span class="InputCode">income. </span>Instead you have <span class="InputCode">education1, education2 </span>and so forth.  <span class="InputCode">birthdate</span> is not in the list, as it is a level two variable.</p>
<p> The <span class="InputCode">i()</span> option is where you give the level two identifier variable. <span class="InputCode">j()</span> is then the level one identifier—but  note again that in wide form the data set does not have a variable called <span class="InputCode">wave</span>. When reshaping from wide to long, <span class="InputCode">education  income</span> combined with <span class="InputCode">j(wave) </span>can be interpreted as "look for variable names that start with <span class="InputCode">education</span> or <span class="InputCode">income</span>, then take whatever follows those words and put it in a new variable called <span class="InputCode">wave</span>."                </p>
<h2><a id="RemovingExtraneousCases" name="RemovingExtraneousCases"></a>Removing Extraneous Cases</h2>
<p>Now consider a (fabricated) data set consisting of individuals living in households:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th scope="col">household</th>
<th scope="col">income</th>
<th scope="col">age1</th>
<th scope="col">female1</th>
<th scope="col">age2</th>
<th scope="col">female2</th>
<th scope="col">age3</th>
<th scope="col">female3</th>
</tr>
<tr>
<td>1</td>
<td>30000</td>
<td>30</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>2</td>
<td>90000</td>
<td>45</td>
<td>0</td>
<td>43</td>
<td>1</td>
<td>15</td>
<td>0</td>
</tr>
</table>
<p>Here the level one unit is an individual, the level two unit is a household (with the <span class="InputCode">household</span> variable as the identifier), <span class="InputCode">income</span> is a level two variable, and <span class="InputCode">age</span> and <span class="InputCode">female</span> are level one variables. Since an observation represents a household, the level two unit, this data set is in wide form.</p>
<p>Start a do file that loads this data set, called <span class="InputCode">reshape2</span>.</p>
<p>If you need a dataset of individuals, all you need to do is reshape the data into the long form:</p>
<p class="InputCode">reshape long age female, i(household) j(person)</p>
<p>Here is the result:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th scope="col">household</th>
<th scope="col">person</th>
<th scope="col">income</th>
<th scope="col">age</th>
<th scope="col">female</th>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>30000</td>
<td>30</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>30000</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>30000</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>90000</td>
<td>45</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>90000</td>
<td>43</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>90000</td>
<td>15</td>
<td>0</td>
</tr>
</table>
<p>There's just one problem: person number three in household one. Note that in wide form the number of columns is determined by the household with the largest number of members: the data set must have <span class="InputCode">age</span> and <span class="InputCode">female</span> columns for all the individuals in that household. However, that means the smaller households must have those columns as well. In this data set, household one only has two people so <span class="InputCode">age3</span> and <span class="InputCode">female3</span> are missing. But the reshape command doesn't choose not to create an observation just because these variables  have missing values. Conceivably there could  be a third person in household one and we just don't know their age or sex.</p>
<p>Such agnosticism is rarely an option with real data. In big surveys the largest household tends to be very large indeed, so you could easily have twenty or more <span class="InputCode">age</span> and <span class="InputCode">female</span> variables. Converting them all to observations results in a data set consisting mostly of missing values. Thus you most likely want to drop these extraneous observations:</p>
<p class="InputCode">drop if age==. &amp; female==.</p>
<p>If you had more level one variables you would still use all of them in the <em>if</em> condition,  to be sure that you don't eliminate a real person who is only missing a few variables.</p>
<h2>Collapse</h2>
<p>Sometimes you need to remove the level one units from your data entirely, leaving a data set of level two units. If all the level two variables you need have already been created, you can do so with code like:</p>
<p class="InputCode">drop age sex <br/>
                  by household: keep if _n==1<br/>
</p>
<p>Don't put this in your do file. But if you did, the first line would drop all the individual level variables, and the second would keep just the first observation in each household. (Once the level one variables are gone, it doesn't matter which one you keep because they're all the same.)</p>
<p>But if you need to calculate some level two variables before dropping the level one units, the <span class="InputCode">collapse</span> command may be able to do both for you. <span class="InputCode">collapse</span> says it "converts the dataset in memory into a dataset of means, sums, medians, etc." Left unsaid is that it does so across level two units.</p>
<p>The basic syntax for collapse is:</p>
<p class="InputCode">collapse (<span class="Parameter">statistic1</span>) <span class="Parameter">varlist1</span> (<span class="Parameter">statistic2</span>) <span class="Parameter">varlist2</span>..., by(<span class="Parameter">level 2 ID</span>)</p>
<p>The various statistics <span class="InputCode">collapse</span> calculates can be found by typing <span class="InputCode">help collapse</span>, but some particularly useful ones are <span class="InputCode">mean</span> (the default), <span class="InputCode">count</span>, and <span class="InputCode">first</span>. By default <span class="InputCode">collapse</span> will replace the current values of each variable with the  statistic it calculates for that variable, but you can have it rename variables with <span class="Parameter">newvar</span><span class="InputCode">=</span><span class="Parameter">oldvar</span>. Just note that <span class="Parameter">oldvar</span> will be removed—as will any variables not listed somewhere in the <span class="InputCode">collapse</span> command.</p>
<p>Suppose you want to reduce the data set of individuals you have now to a data set of households, and for each household you need to know the household income (which you already have), the proportion of household members which are female, and the size of the household. You can do so with the following collapse command:</p>
<p class="InputCode">collapse (first) income (mean) propFemale=female (count) size=person, by(household)</p>
<p>Since <span class="InputCode">income</span> is already a level two variable all you need to do is carry it over into the new data set. <span class="InputCode">(first) income</span> does so by setting the  <span class="InputCode">income</span> statistic to the first value of   <span class="InputCode">income</span> for each household.</p>
<p><span class="InputCode">(mean) propFemale=female</span> takes advantage of the fact that the mean of an indicator variable is the proportion of observations which have a one for it. The statistic is calculated based on the <span class="InputCode">female</span> variable, but the result is called <span class="InputCode">propFemale</span>.</p>
<p>The <span class="InputCode">(count)</span> statistic counts how many observations have a non-missing value of the listed variable. To get the size of the household you want to count all observations, so you can have it count any variable that's never missing. Identifiers (<span class="InputCode">person</span> in this case) are good candidates because they are rarely missing, but you should always check.</p>
<h4>Exercise</h4>
<ol>
<li>Consider the data set <span class="InputCode">reshape4.dta</span>. What is a level one unit? What is a level two unit? What are the level one and level two variables? Reshape it to wide form and then go back to long form. Now convert it to a data set of just countries, with variables <span class="InputCode">meanPop</span> (mean population over the period) and <span class="InputCode">maxCGDP</span> (maximum cgdp over the period). (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_hier2.htm">Solution</a>)</li>
</ol>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-combine.htm">Combining Data Sets</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-groups.htm">Working with Groups</a></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Introduction</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Stata is the most popular program for statistical analysis at
                  the SSCC, as it is extremely powerful and relatively easy
                  to learn. Its straightforward but flexible syntax makes it a
                  good choice for data management, and it implements
                  a very large number of statistical techniques. Stata
                  also has a an extensive user community which has made
                  a great deal of code available, including many
                  additional estimators. We've been quite pleased with Stata at
                  the SSCC, and we think you'll find it extremely useful.</p>
<p>The goal of Stata for Researchers (as opposed to <a href="https://ssc.wisc.edu/sscc/pubs/sfs/">Stata for Students</a>) is to give you a solid
                  foundation that you can  build on to become an expert
                  Stata user. If your goal is  to learn just enough Stata to get
                  you through a particular course you should probably read <a href="https://ssc.wisc.edu/sscc/pubs/sfs/">Stata for Students</a> instead.</p>
<p>There are two different approaches one can take to Stata. One
                  is to use it as an interactive tool: you start Stata, load your
                  data, and start typing or clicking on commands. This can be a good
                  way to explore your data, figure out what you want to do, and
                  check that your programs worked properly. It can also be useful when you're trying to figure out something new because you get immediate feedback. However, interactive
                  work cannot be easily or reliably replicated, or modified if
                  you change your mind. It's also very difficult to recover from
                  mistakes—there's no "undo"
                  command in Stata.</p>
<p>The other approach is to treat Stata as a programming language.
                  In this approach you write your programs, called do files, and
                   run them when they're complete. A do file contains the same  commands
                  you'd type in interactive Stata, but since they're written in a permanent file they can   be debugged or modified and then rerun at will. They also serve as an exact record
                  of how you obtained your results—a lab notebook for
                  the social scientist. Any work you
                  intend to publish or present should be done using do files. Thus
                  this series will for the most part ignore Stata's graphical
                  user interface and prepare you to write do files for
                  research.</p>
<h2>About This Series</h2>
<p>Stata for Researchers contains the following sections:</p>
<ol>
<li><a href="#top">Introduction</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-syntax.htm">Usage and Syntax</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-do.htm">Do Files</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-data.htm">Working With Data</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-stats.htm">Statistics</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-groups.htm">Working with Groups </a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-hier.htm">Hierarchical Data</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-combine.htm">Combining Data Sets</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-graphics.htm">Graphics</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-projects.htm">Project Management</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfr-learning.htm">Learning More</a></li>
</ol>
<p><a id="files" name="files"></a>Some of the articles in this series use example files. If you are on the SSCC network these files can be found in <span class="MenuOutput">X:\SSCC Tutorials\StataResearch</span>. Alternatively, you can <a href="https://ssc.wisc.edu/sscc/pubs/files/StataResearch.zip">download a zip file containing all the example files</a>. Copy these files to a convenient location like <span class="MenuOutput">U:\StataResearch</span> and make that location your current working directory whenever you're doing the examples in this series (we'll show you how shortly).</p>
<p>Each topic includes exercises, and solutions are given for most of them. While many of the exercises are short questions to test your understanding of the material, others require more work and are designed to give you experience working with Stata. If you are currently involved in a research project it may be a better use of your time to get your Stata experience by working on your project. If you get stuck on an exercise it's probably best to move on. On the other hand, you can learn from reading the solutions even if you don't do all the exercises.</p>
<h2>Running Stata at the SSCC</h2>
<p>The SSCC makes Stata available on Winstat, in our computer labs, on Linstat, and through our HTCondor flock. For details about the capabilities of the SSCC's servers see <a href="https://ssc.wisc.edu/sscc/pubs/computing_resources.htm">Computing Resources at the SSCC</a>. Most SSCC members run Stata/MP on Winstat, but some jobs require different resources.</p>
<h3>Stata/MP vs. Stata/MP16</h3>
<p>The SSCC runs Stata/MP, the multi-processor version of Stata. Most of our licenses are for the two processor version of Stata/MP, but we have a small number of the more expensive sixteen processor licenses for use on our servers. Use regular Stata/MP for day-today work, especially writing do files, but feel free to use Stata/MP16 any time you need to run a do file that will take more than a minute or two. You don't have to make any changes to your do files to run them using Stata/MP16. <a href="https://ssc.wisc.edu/sscc/pubs/stata_mp.htm">Running Stata/MP at the SSCC</a> has instructions.</p>
<h3>Windows vs. Linux</h3>
<p>Stata looks and acts the same whether it's running on Windows or Linux (or on a Mac). However, Linstat (the SSCC's Linux computing cluster) has much more memory than Winstat (the SSCC's Windows Terminal Server Farm), and is better suited for long jobs. Running Stata jobs on Linstat is probably easier than you think: read <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a> to learn how.</p>
<h3>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-syntax.htm">Usage and Syntax</a></h3>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Learning More</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part eleven of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>Congratulations, you now know enough Stata to get started and do some very useful things. However, you'll almost certainly need to learn more at some point in your Stata career. Thus we'll conclude by discussing resources for doing so.</p>
<h2>Help</h2>
<p> Your first resource is the Stata help files. To see the help for a particular
                  command type <span class="InputCode">help <span class="Parameter">command</span></span>,
                  e.g.</p>
<p class="InputCode">help egen</p>
<p>You'll get a syntax diagram, a brief explanation of the various
                options, and even examples.</p>
<p>In the syntax diagram, optional elements are placed in square brackets. Thus for <span class="InputCode">egen</span> a <span class="InputCode">[type]</span> is optional (if you don't specify a variable type you'll get the default float) while a name for the new variable is mandatory. If part of a word is underlined, that is the minimum abbreviation for that word. Thus in the <span class="InputCode">anycount()</span> function, the <span class="InputCode">values()</span> option could be abbreviated as just <span class="InputCode">v()</span> or as <span class="InputCode">val()</span>, <span class="InputCode">value()</span> etc.</p>
<h2>Help on Functions</h2>
<p>To use a function you need two pieces of information: the input and the output. The inputs, or arguments, are the things that go in parentheses.</p>
<p> For <span class="InputCode">egen</span> functions the inputs will almost always be a single entity, but that entity could be a list of variables (<span class="Parameter">varlist</span>), a single variable (<span class="Parameter">varname</span>) or a mathematical expression (<span class="Parameter">exp</span>), among others. Keep in mind that a single variable counts as an expression.</p>
<p>To get help on general-use functions, type <span class="InputCode">help functions</span> and then click on the type of function you need (for example, string functions). To use these functions you need to find out how many arguments are needed and what they mean. For example, the <span class="InputCode">abbrev()</span> function is listed as <span class="InputCode">abbrev(s,n)</span>, which tells you it takes two arguments. <span class="InputCode">Domain s:     strings</span> and <span class="InputCode">Domain n:     5 to 32</span> tells you the first argument must be a string and the second must be a number between 5 and 32, but they don't have to be called  <span class="InputCode">s</span> or <span class="InputCode">n</span>. The inputs can be variables of the proper types, or quantities you type in. <span class="InputCode">Range:        strings</span> tells you the output is a string, and  <span class="InputCode">Description:  returns s, abbreviated to n characters</span>, along with the longer note below that, tells you what that string will be.</p>
<h2>Findit</h2>
<p>You'll  often know what you want to do but not the
                  name of the command that will do it. Then <span class="InputCode">findit</span> is
                  your best bet—think of it as Google for Stata. For example, suppose you want to do something
                  with Heckman selection models. If you type</p>
<p class="InputCode">findit heckman</p>
<p>you'll get a tremendous amount of information.  First Stata will
                  search the help files and point out that there is a <span class="InputCode">heckman</span> command,
                  along with related commands like <span class="InputCode">suest</span> and <span class="InputCode">treatreg</span>.
                  Then it will search the <a href="http://stata.com/support/faqs/">Frequently Asked Questions files on Stata's
                  web site</a> and the large <a href="http://www.ats.ucla.edu/stat/stata/default.htm">Stata web site at UCLA</a>. Finally
                  it will search through the user-written programs that have appeared
                  in the <a href="http://stata.com/bookstore/sjdetails.html">Stata Journal</a>, the old <a href="http://stata.com/products/stb/">Stata Technical Bulletin</a>, or in
                  the Boston College <a href="http://ideas.repec.org/s/boc/bocode.html">Statistical Software Components</a> archive. You
                can find out what these programs do by reading their help files (<span class="InputCode">.hlp</span>), and if you decide they'll be useful to you you can download and install them by clicking on the <span class="InputCode">click here to install</span> link. See <a href="https://ssc.wisc.edu/sscc/pubs/4-16.htm">Finding and Installing User-Written  		  Stata Programs</a> for more information.</p>
<p>Another useful tool for finding commands is the <span class="MenuOutput">Also see</span> section at the bottom of each help file. If you can think of a command that's close to what you want to do, call up its PDF help file and then see what's related to it.</p>
<h2>Documentation</h2>
<p>More extensive documentation is available as PDF files. For example, click on the <span class="InputCode">heckman</span> command in the <span class="InputCode">findit</span> results to see its help file, then click <span class="InputCode">[R] heckman</span> at the top. This opens the entry for <span class="InputCode">heckman</span> in the <span class="MenuOutput">Reference</span> manual (hence the <span class="InputCode">[R]</span>). This will give you a longer description of what the command does, along with worked out examples and technical information about how the command is implemented. The references  can be a good place to start if you need to learn more about the theory behind the method.</p>
<p>The PDF documentation is also good for general learning about Stata in general, especially the <span class="MenuOutput">User's Guide</span> (sections headings like this—once upon a time they were separate books—are found on the left).  You can open the PDF documentation directly by clicking <span class="MenuOutput">Help</span>, <span class="MenuOutput">PDF Documentation</span>.</p>
<h2>SSCC Resources</h2>
<p>The <a href="https://ssc.wisc.edu/sscc/pubs/stat.htm">SSCC's
                  Knowledge Base</a> has a large section on Stata, including
                  general guides like this one and discussions of specific topics like <a href="https://ssc.wisc.edu/sscc/pubs/4-27.htm">Bootstrapping
                in Stata</a> or <a href="https://ssc.wisc.edu/sscc/pubs/4-23.htm">Using Stata Graphs in Documents</a>. Once you feel confident using Stata's basic syntax, we strongly suggest reading <a href="https://ssc.wisc.edu/sscc/pubs/stata_prog1.htm">Stata Programming Essentials</a>. It will teach you things like how to do the same thing to ten different variables without having to write it out ten times. If you're interested in graphics, be sure to read <a href="https://www.ssc.wisc.edu/sscc/pubs/4-24.htm">An Introduction to Stata Graphics</a>.</p>
<p>The SSCC offer classes on Stata each semester, generally including a class based on this Stata for Researchers series, a class on Stata programming, and at least one class on some other topic—see the <a href="https://www.ssc.wisc.edu/sscc_jsp/training/index.jsp">training
                  web page</a> for details and to register.</p>
<p>Finally, the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">SSCC's statistical consultants</a> are available to assist SSCC members. We cannot write your Stata programs for you.
                  But we will be more than happy to help with planning your project,
                  figuring out the commands that will make your program
                  work, and of course finding and fixing bugs along with consulting on statistical methodology.</p>
<h2>Practice</h2>
<p>The most important resource for learning Stata is practice. If you don't use the skills and knowledge you've gained from reading this series within the next few weeks (at most) you'll lose them rapidly. If you don't have a current research project that will require you to use Stata, make one up.</p>
<p>One particular pitfall to watch out for is "I'll just do it in Excel." It may be true that you can carry out a particular task in Excel faster than you can first learn how to do it in Stata and then actually carry it out. But if you do it in Stata anyway, the next time it comes up you'll be able to do it much more quickly in Stata than in Excel (and more reproducibly, and with less likelihood of error). You'll also build up your general Stata expertise, so that soon you'll be able to do things faster in Stata even if you've never done them before. Now that you've spent the time to learn Stata, plan on never using Excel for research again.</p>
<p>This concludes the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Stata for Researchers</a> series. We hope it has been useful to you, and that your relationship with Stata will be a long and productive one.</p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-do.htm">Do Files and Project Management</a></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Do Files and Project Management</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part ten of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>In a typical project you have a research question you want to
                  answer and some data that you think will answer it, but the data
                isn't in a form that can actually answer the question—yet. Project management is about getting from raw data to completed analysis.</p>
<h2>Simple Best Practices</h2>
<p>Books have been written about how to manage research projects properly. While we won't go into that level of detail here, we will suggest a few simple best
                  practices that can save  a tremendous amount of time 
                and reduce the probability of making serious mistakes.</p>
<h3>Master your Data Set</h3>
<p>Everything you do depends on your data set, so spend the time to get to know it well. How was it collected? What does an observation represent? What variables are available? Is there any hierarchy or other structure? Which variables are continuous, categorical, binary or text? How are they distributed? Is there missing data? How much? Is there structure to the missing data ("People who answered X to question Y then skipped to question Z")?</p>
<p>Real mastery (i.e. knowing the answers to most if not all of these questions without having look them up) will come as you're working on your project, but you should spend a significant amount of time learning about the data before you start writing code. Sometimes the answers to these questions can affect the feasibility of your research agenda. For example, crosstabs may reveal that you have too few observations in certain cells to get meaningful results. ("Not enough women with PhDs in science and engineering" can be a statistical problem as well as a social problem!)</p>
<h3>Begin with the End in Mind </h3>
<p>Before you write any code, decide out what form the data
                  needs to be in so you can analyze it. What should an observation
                  represent? What variables will each observation need to contain?
                  The answers to these questions will most likely be determined
                  by the statistical techniques you plan to use. Thinking it through ahead of time will prevent you from spending time putting the data in a form that seems natural, but doesn't actually  meet your needs.</p>
<h3>Don't Try to do Everything at Once</h3>
<p>Once the goal is clear in your mind, don't try to write one massive do file that
                  gets you there in one step, only trying to run it once it's "done."
                  If you do, the do file 
                  will most likely have a large number of bugs. Then you
                  may find that in order to make one part work, you need
                  to do something in a different way than you originally planned.
                  You'll then have to change everything that follows.</p>
<p>It's far better to write a bit of code, test and debug it, then
                  write a little more, test and debug it, and so forth. But if a do file gets too big, you waste  time rerunning old code you know is good in order to test  what you just added.  When that happens it's time to start a new do file.</p>
<h3>Split Your Code into Multiple Do Files</h3>
<p>If a do file gets too long, as you go through the write-test-debug cycle you'll find yourself spending too much time waiting for code you know is good to run so it can move on to the code you just added and need to test. More generally, you want to write do files that are short enough that while you're working on one you can remember everything it does.</p>
<p>To break up a long do file into smaller pieces, just pick a logical stopping point, have the do file save the data set at that point, then create a new do file that uses that data set as its starting point. Just remember: <strong><em>never save your output data set over your input data set.</em></strong><em> </em></p>
<h3>Put Code for Different Purposes in Different Do Files</h3>
<p>While data preparation is a linear process with each step depending on what came before (first recode, then clean...), exploratory analysis often branches out (maybe ordinary linear regression is okay, but I'll try a mixed model too...). Then when you've identified the results you want to report or publish, you want the code that produces them to be as clean, clear, and concise as possible. Thus it's best to have separate do files for each of these purposes.</p>
<p>For most projects there should be a "final" data set that's used for all  analysis. That way you can open it up interactively and try things, write do files that analyze it in different ways, and generally experiment at will without running the risk of forgetting that, for example, the do file that ran the linear regressions also did a bit more recoding.</p>
<h2>Checking your Work</h2>
<p>Programming errors can be subtle and very difficult to catch by just staring at your code. Generally it's more effective to spend your time comparing your results to what they should be. Of course this depends on having some sense of what they should be: be constantly on the lookout for information you can use to check your work.</p>
<p>Examine summary statistics and frequencies frequently as you carry out data preparation, especially when you create new variables or change the structure of your data. See if what you get is plausible. If the results change, be sure you can explain why.</p>
<p>Spend even more time looking at individual cases. Use the <span class="InputCode">browse</span> command, often with a <em>varlist</em> and an <em>if</em> condition to allow you to focus on what's currently relevant, and compare what your do file did to individual cases with what you meant it to do. If you have different types of cases, be sure to look at samples of each.</p>
<p>If you do find problems, looking at cases is the best way to solve them. What kinds of cases get the wrong answers? Which variables are wrong? Figuring out those details will point you to the particular commands that need to be corrected.</p>
<h2>Make your Project Reproducible</h2>
<p>With proper organization you should be able to reproduce your entire project at will.</p>
<p>Start with the data as you obtained it.  Your first
                  do file will  read it in, make some changes, and save the results
                  in a different file. Your second do file will read in the output
                  from the first do file, make further changes, and then save its
                  results in another separate file. Repeat until data preparation is complete. Then all your analysis do files will read the same final data set and analyze it in various ways.</p>
<p>If you discover errors or need to make changes, having a well-organized and reproducible project will save you significant amounts of time. To track down an error, run your do files one-by-one, checking the results after each, until the error appears. Then you'll know which do file needs to be fixed. Once the error is corrected or the change is made, consider whether it will affect subsequent do files. Once all the needed changes are made, simply rerun all your do files.</p>
<p>Consider writing a master do file that runs all the do files required by the project, in the proper order (recall that one do file can run another simply by running the command <span class="InputCode">do otherDoFile</span>). Also write a "readme" document to keep with the project files, containing other relevant information. This will be very valuable to anyone else who has to work with your code, but also to the future you who has to try to remember how it all worked months or years later.                </p>
<h2>Case Studies</h2>
<p>Two stories that illustrate the importance of proper project management:</p>
<p>One day a professor and her research assistant came to the SSCC's statistical consultants. They were working with census data from multiple  countries over many years, so a lot of data preparation work was required to make the various data sets compatible and then combine them. The RA had been working on this data preparation for about six months.</p>
<p>Then the the professor decided to run some basic frequencies on the data they had. The results were clearly wrong. The RA must have made a mistake at some point, and they came to us hoping we'd be able to fix the problem. After some discussion, we found that the RA had been doing all his work interactively. He had only a general recollection of what he had done, and had no do files, logs or intermediate data sets to fall back on. Since everything he had created was useless, the project had to be started again from the original data.</p>
<p>The next time we saw her, the professor had a new RA, one who was very careful to do everything using do files.</p>
<p>On a happier note, a grad student once came to the SSCC's statistical consultants because in preparing to present her research she  discovered that the values of one variable for three observations had somehow been corrupted. Three observations probably wouldn't change her results, but we didn't really know.</p>
<p>Fortunately she had done everything using do files. We got the data from the source again, checked that it was intact this time, and then she re-ran all her do files. Months of work were replicated in less than 15 minutes, and she was able to proceed with her presentation.</p>
<p>Far more could be said about project management (we haven't even mentioned collaborating with others). You might find J. Scott Long's <a href="http://stata.com/bookstore/wdaus.html">Workflow of Data Analysis Using Stata</a> helpful. </p>
<h4>Exercises</h4>
<ol>
<li>
<p>We've looked at how foreign cars and domestic cars differ, but the foreign cars include both European cars and Japanese cars and you might reasonably expect them to differ from each other as well. Classify each car as American, European or Japanese. (Hint: one way to do that would be to identify the manufacturer of each car and then classify the manufacturers.) Then analyze how <span class="InputCode">weight</span>, <span class="InputCode">price</span>, <span class="InputCode">mpg</span> and <span class="InputCode">rep78</span> differ between these categories using whatever statistical techniques you are comfortable with and think are appropriate (or use the ones discussed in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-stats.htm">Basic Statistics</a>). Feel free to ignore the small sample size.</p>
<p>Use good research practices in carrying out this exercise: put all the related files in a singe directory, write at least two do files (one for data work and one for analysis), make them self sufficient, add comments  where needed, etc. For extra credit, once they're complete run them again using Condor.</p></li>
<li>
<p>Consider the data sets <span class="InputCode">finalscores</span> and <span class="InputCode">finaldemo</span>. The first contains fictional scores on standardized tests. The second contains information about the fictional students and their families. Examine how household income, whether the student lives with one parent or both parents, and the maximum education attainment of the student's parents (i.e. the educational attainment of the parent with the most education) predict test scores. Again, use good research practices in carrying out this exercise.</p>
<p>It will be easiest to first create the explanatory variables described using the demographics file, then merge it with the scores. The merge will work best if you drop the non-students first (which you can do once you've figured out what you need to know about the students in their families).</p></li>
<li>Take your current research project and think through it as described above.</li>
</ol>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-learning.htm">Learning More</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-graphics.htm">Graphics</a></p>
<h2></h2>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Statistics</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part five of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>This article will teach you how to get descriptive statistics, do basic hypothesis testing, run regressions, and carry out some postestimation tasks.  This is a very small sample of Stata's capabilities, but it will give you a sense of how Stata's statistical commands work.</p>
<p>We'll use the auto data set throughout this section. Start a do file as usual:</p>
<p class="InputCode">clear all<br/>
capture log close<br/>
set more off<br/>
log using stats.log, replace<br/>
<br/>
use auto<br/>
<br/>
//real work goes here<br/>
<br/>
log close</p>
<p>Remember the code you add goes after <span class="InputCode">use auto</span> and before <span class="InputCode">log close</span>.</p>
<h2><a id="GeneralInformation" name="GeneralInformation"></a>General Information</h2>
<p>A good place to start with any new data set is <span class="InputCode">describe</span>. This gives you information about the data set, including the amount of memory it needs and a list of all its variables and their types and labels. Especially watch out for value labels. If you have a large data set and only need information about a few of them, you can give <span class="InputCode">describe</span> a <em>varlist</em>:</p>
<p class="InputCode">describe foreign</p>
<p>For more information about your variables try the <span class="MenuOutput">Properties</span> window or the <span class="MenuOutput">Variables Manager</span> (third button from the right or type <span class="InputCode">varman</span>).</p>
<h2><a id="SummaryStatistics" name="SummaryStatistics"></a>Summary Statistics</h2>
<p><span class="InputCode">summarize</span> (<span class="InputCode">sum</span>)
           	    gives you summary statistics. If you just type:</p>
<p class="InputCode">sum</p>
<p>you will get basic summary statistics for all the variables in
                  your data set. Note
                  that there is nothing for <span class="InputCode">make</span>:
                  it is a string variable so summary statistics don't make sense. Also note that for <span class="InputCode">rep78</span> the number of observations is 69 rather than 74. That's because the five missing values were ignored and the summary statistics calculated over the remaining 69. Most statistical commands take a similar approach to missing values and that's usually what you want, so you rarely have to include special handing for missing values in statistical commands.</p>
<p>All the syntax elements you learned earlier also work with statistical commands. To get summary statistics for just <span class="InputCode">mpg</span>, give <span class="InputCode">sum</span> a <em>varlist</em>:</p>
<p class="InputCode">sum mpg</p>
<p> If you want summary statistics for just the foreign cars, add an <em>if</em> condition:</p>
<p class="InputCode">sum mpg if foreign</p>
<p>If you want summary statistics of <span class="InputCode">mpg</span> for both foreign and domestic cars,  calculated separately, use <em>by</em>:</p>
<p class="InputCode">by foreign: sum mpg</p>
<p>The <span class="InputCode">detail</span> (<span class="InputCode">d</span>) <em>option</em> will give more information.
                Try:</p>
<p class="InputCode">sum mpg, d</p>
<p></p>
<p></p>
<h2><a id="Frequencies" name="Frequencies"></a>Frequencies</h2>
<p><span class="InputCode">tabulate</span> (<span class="InputCode">tab</span>)
           	    will create tables of frequencies. If you give it a <em>varlist</em> with one variable it will give you a one-way table, while if you give it two variables it will give you a two-way table (i.e. crosstabs). To get an idea of what <span class="InputCode">tab</span> does, try:</p>
<p class="InputCode">tab rep78<br/>tab rep78 foreign</p>
<p>Tables are usually easier to read if the variable with the most
                unique values comes first, so they're listed vertically.</p>
<p></p>
<p>Note that the missing values of <span class="InputCode">rep78</span> were ignored. If you'd like them to have their own entry, add the <span class="InputCode">missing</span> option:</p>
<p class="InputCode">tab rep78, missing</p>
<p> The <span class="InputCode">tab</span> command won't accept more
            	than two variables, but you can create three-way or higher tables
            	by combining <span class="InputCode">tab</span> with <em>by:</em>.</p>
<p class="InputCode">by foreign: tab headroom rep78</p>
<p></p>
<p>To get percentages, add the <span class="InputCode">row</span>, <span class="InputCode">column</span> or <span class="InputCode">cell</span> options:</p>
<p class="InputCode">tab rep78 foreign, row column cell</p>
<p>For this table, <span class="InputCode">row</span> answers the question "What percentage of the cars with a <span class="InputCode">rep78</span> of one are domestic?" while <span class="InputCode">column</span> answers "What percentage of the domestic cars have a <span class="InputCode">rep78</span> of one?" and <span class="InputCode">cell</span> answers "What percentage of all the cars are both domestic and have a <span class="InputCode">rep78</span> of one?"</p>
<p><span class="InputCode">tab</span> has an <em>option</em> called <span class="InputCode">sum</span> which
            	gives summary statistics for a given variable, calculated over the observations in each cell of the table. Try: </p>
<p class="InputCode">tab foreign, sum(mpg)</p>
<p>There's also a <span class="InputCode">chi2</span> option that
                runs a chi-squared test on a two-way table: </p>
<p class="InputCode">tab rep78 foreign, chi2</p>
<h2><a id="Correlations" name="Correlations"></a>Correlations</h2>
<p><span class="InputCode">correlate</span> (<span class="InputCode">cor</span>) calculates correlations:</p>
<p class="InputCode">cor weight length mpg</p>
<p>If you need covariances instead, add the <span class="InputCode">cov</span> option:</p>
<p class="InputCode">cor weight length mpg, cov</p>
<h2><a id="HypothesisTestsofMeans" name="HypothesisTestsofMeans"></a>Hypothesis Tests of Means</h2>
<p><span class="InputCode">ttest</span>  tests hypotheses about means. To test whether the mean of a variable is equal to a given number,  type <span class="InputCode">ttest </span><span class="Parameter">var</span><span class="InputCode">==</span><span class="Parameter">number</span>:</p>
<p class="InputCode">ttest mpg==20</p>
<p>To test whether two variables have the same mean, type <span class="InputCode">ttest </span><span class="Parameter">var1</span><span class="InputCode">==</span><span class="Parameter">var2</span>:</p>
<p class="InputCode">ttest mpg==weight</p>
<p>To test whether two subsamples of your data have the same mean for a given variable, use the <span class="InputCode">by()</span> <em>option</em>:</p>
<p class="InputCode">ttest mpg, by(foreign)</p>
<h2>Exercises</h2>
<ol>
<li>Find the mean value of <span class="InputCode">weight</span> for cars with <span class="InputCode">mpg</span> greater than 25. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_stats_desc1.htm">Solution</a>)</li>
<li>Test the hypothesis that cars with <span class="InputCode">mpg</span>&gt;25 have a lower mean weight than cars with <span class="InputCode">mpg</span>&lt;=25. You'll have to create a new variable to do so. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_stats_desc3.htm">Solution</a>)</li>
</ol>
<h2><a id="ReturnedResults" name="ReturnedResults"></a>Returned Results</h2>
<p>Most statistical commands also save their results so that you can use them in subsequent commands. You can see what is saved with the <span class="InputCode">return list</span> command. To see a typical example, try:</p>
<p class="InputCode">sum mpg<br/>
  return list</p>
<p>These saved results are often referred to as the <em>r vector</em>.</p>
<p>Suppose you want to center <span class="InputCode">mpg</span> around zero, by subtracting the mean value from all observations. Running <span class="InputCode">sum mpg</span> puts the mean of mpg in the <em>r vector</em>, and then you can create a centered version of <span class="InputCode">mpg</span> with:</p>
<p class="InputCode">gen mpgCentered=mpg-r(mean)</p>
<p>Check your results with:</p>
<p class="InputCode">sum mpgCentered</p>
<p>The mean isn't quite zero due to round-off error, but it's as close as a computer can get.</p>
<p> If you type:</p>
<p class="InputCode">return list</p>
<p>again, you'll see that the tables of the <em>r vector</em> have changed. It only contains the results of the most recent command, so if you need to use any of those results be sure to do so (or store them in variables) before running any other commands that use the <em>r vector</em>.</p>
<p>To  standardize <span class="InputCode">mpg</span> you could take <span class="InputCode">mpgCentered</span> and divide by <span class="InputCode">r(sd)</span>. However, there's an <span class="InputCode">egen</span> function called <span class="InputCode">std()</span> that will do the entire process for you.</p>
<h4>Exercise</h4>
<ol>
<li>Find the Interquartile Range of <span class="InputCode">mpg</span> (i.e. the difference between the 75th percentile and the 25th percentile). Recall that <span class="InputCode">sum</span> with the <span class="InputCode">details</span> option calculates various percentiles. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_stats_res1.htm">Solution</a>)</li>
</ol>
<p></p>
<h2><a id="Regression" name="Regression"></a>Regression</h2>
<p>Stata has many, many commands for doing various kinds of regressions, but its developers worked  hard to make them all as
            	 similar as possible. Thus if you can do a simple linear regression you can do all sorts of more complex models.</p>
<h3>Linear Regression</h3>
<p>The <span class="InputCode">regress</span> (<span class="InputCode">reg</span>) command does linear regression. It always needs a <em>varlist</em>, and it uses it in a particular way: the first variable
                  is the dependent variable, and it is regressed on all the others
                in the list plus a constant (unless you add the <span class="InputCode">noconstant</span> <span class="italic">option</span>).</p>
<p>Let's estimate how much consumers were willing to pay for good gas
                  mileage in 1978 using a naive "hedonic pricing" model (i.e., we'll presume the price depends on the characteristics of the car). Whether
                  a car is foreign or domestic seems to be important, so throw
                that in as a covariate too. Type: </p>
<p class="InputCode">regress price mpg foreign</p>
<p>This regresses <span class="InputCode">price</span> on <span class="InputCode">mpg</span> and <span class="InputCode">foreign</span>.  The negative and highly significant coefficient on <span class="InputCode">mpg</span> suggests that American
                  consumers in 1978 disliked fuel efficiency, and would pay to avoid it!</p>
<p>Like any good researcher, when our empirical results contradict
            	 our theory (or common sense) we first look for better empirical results. We might
            	possibly have some missing variable bias here; in particular it's probably
            	important to control for the size of the car by adding <span class="InputCode">weight</span> to the regression:</p>
<p class="InputCode">reg price mpg foreign weight</p>
<p>Now <span class="InputCode">mpg</span> is insignificant but <span class="InputCode">weight</span> is positive and highly significant. Looks like American consumers in 1978 liked big cars and didn't 
                  care about fuel efficiency, a much more plausible result.</p>
<h3>Logistical Regression</h3>
<p>Logistical regression is just as easy to run, but we need a binary dependent variable. Make an indicator variable <span class="InputCode">goodRep</span> which is one for cars with <span class="InputCode">rep78</span> greater than three (and missing if <span class="InputCode">rep78</span> is missing):</p>
<p class="InputCode">gen goodRep=(rep78&gt;3) if rep78&lt;.</p>
<p>Now let's examine what predicts a car's repair record. We'll include <span class="InputCode">mpg</span>, <span class="InputCode">displacement</span> and <span class="InputCode">gear_ratio</span> because they're the only technical data we have about the car's engine (the most likely thing to break), <span class="InputCode">weight</span> as a measure of load on the engine, and <span class="InputCode">price</span> and <span class="InputCode">foreign</span> just because they seem to be important characteristics of a car.</p>
<p>The <span class="InputCode">logit</span> command runs logistical regression. The syntax is identical to regress:                </p>
<p class="InputCode">logit goodRep mpg displacement gear_ratio weight price foreign</p>
<p>If you prefer odds ratios to coefficient add the <span class="InputCode">or</span> <em>option</em>. Just be sure to interpret them properly, as well discuss later. The fact that logit models are easy to run often masks the fact that they can be extremely difficult to interpret.</p>
<h3><a id="CategoricalFactorVariables" name="CategoricalFactorVariables"></a>Categorical (Factor) Variables</h3>
<p>Consider the variable <span class="InputCode">rep78</span>: it is a measure of the car's repair record and takes on the values one through five (plus a few missing values). However, these numbers only represent categories—a car with a <span class="InputCode">rep78</span> of five is not five times better  than a car with a <span class="InputCode">rep78</span> of one. Thus it would make no sense to include <span class="InputCode">rep78</span> in a regression as-is. However, you might want to include a set of indicator variables, one for each value of <span class="InputCode">rep78</span>. This is even more important for categorical variables with no underlying order, like race. Stata can create such indicator variables for you "on the fly"; in fact you can treat them as if they were always there.</p>
<p>The set of indicator variables representing a categorical variable is formed  by putting <span class="InputCode">i.</span> in front of the variable's name. This works in most (but not  all) <em>varlists</em>. To see how it works, try:</p>
<p class="InputCode">list rep78 i.rep78</p>
<p>As you see, <span class="InputCode">3.rep78</span> is one if <span class="InputCode">rep78</span> is three and zero otherwise. The other indicators are constructed in the same way. <span class="InputCode">1b.rep78</span> is a special case: it is the base category, and always set to zero to avoid the "dummy variable trap" in regressions. If <span class="InputCode">rep78</span> is missing, all the indicator variables are also missing. </p>
<p>If you want to choose a different category as the base, add <span class="InputCode">b</span> and then the number of the desired base category to the <span class="InputCode">i</span>:</p>
<p class="InputCode">list rep78 ib3.rep78</p>
<p>Now try using <span class="InputCode">i.rep78</span> in a regression:</p>
<p class="InputCode">reg price weight foreign i.rep78</p>
<p>The coefficients for each value of <span class="InputCode">rep78</span> are interpreted as the expected change in <span class="InputCode">price</span> if a car moved to that value of <span class="InputCode">rep78</span> from the base value of one. If you change the base category:</p>
<p class="InputCode">reg price weight ib3.rep78</p>
<p>the model is the same, but the coefficients are now the expected change in <span class="InputCode">price</span> if a car moves to that value of <span class="InputCode">rep78</span> from a <span class="InputCode">rep78</span> of three. You can verify that the models are equivalent by noting that the coefficients in the second model are just the coefficients of the first model minus the coefficient for <span class="InputCode">3.rep78</span> from the first model.</p>
<p>You don't have to use the full set of indicators. For example, you could pick out just the indicator for <span class="InputCode">rep78</span> is five with:</p>
<p class="InputCode">reg price weight 5.rep78</p>
<p>This has the effect of collapsing all the other categories into a single category of "not five."</p>
<p>Indicator variables are, in a sense, categorical variables. Marking them as such will not affect your regression output; you'll get the same results from:</p>
<p class="InputCode">reg price weight ib3.rep78 foreign</p>
<p>as from:</p>
<p class="InputCode">reg price weight ib3.rep78 i.foreign</p>
<p>However, the latter tells Stata that <span class="InputCode">foreign</span> is not continuous, which is very important to some postestimation commands.  However, if you're not planning to run <span class="InputCode">margins</span> or some other postestimation command that cares about this distinction, putting <span class="InputCode">foreign</span> in your model rather than <span class="InputCode">i.foreign</span> is just fine.</p>
<h3><a id="Interactions" name="Interactions"></a>Interactions</h3>
<p>You can add interactions between variables by putting two pound signs between them:</p>
<p class="InputCode">reg price weight foreign##rep78</p>
<p>The two pound signs means "include the main effects of <span class="InputCode">foreign</span> and <span class="InputCode">rep78</span> and their interactions." Two variables with one pound sign between them refers to just their interactions. It's almost always a mistake to include interactions in a regression without the main effects, but you'll need to talk about the interactions alone in some postestimation commands.</p>
<p>The variables in an interaction are assumed to be categorical unless you say otherwise. Thus the above model includes everything in:</p>
<p class="InputCode">reg price weight i.foreign i.rep78</p>
<p>What it adds is a new set of indicator variables, one for each unique combination of <span class="InputCode">foreign</span> and <span class="InputCode">rep78</span>. This allows the model to see, for example, whether the effect of having a <span class="InputCode">rep78</span> of five is different for foreign cars than for domestic cars.</p>
<p>Note that while Stata chose <span class="InputCode">rep78==1</span> for its base category, it had to drop the <span class="InputCode">rep78==5</span> category for foreign cars because no foreign cars have a <span class="InputCode">rep78</span> of one. If you'd prefer that it drop the same category for both types of cars, choose a different base category:</p>
<p class="InputCode">reg price weight foreign##ib3.rep78</p>
<p>To form interactions involving a continuous variable,  use the same syntax but put <span class="InputCode">c.</span> in front of the continuous variable's name:</p>
<p class="InputCode">reg price foreign##c.weight i.rep78</p>
<p>This allows the effect of <span class="InputCode">weight</span> on <span class="InputCode">price</span> to be different for foreign cars than for domestic cars (i.e. they can have different slopes).</p>
<p>The <span class="InputCode">##</span> symbol is an operator just like <span class="InputCode">+</span> or <span class="InputCode">-</span>, so you can use parentheses  with the usual rules:</p>
<p class="InputCode">reg price foreign##(c.weight rep78)</p>
<p>This interacts <span class="InputCode">foreign</span> with both <span class="InputCode">weight</span> and <span class="InputCode">rep78</span>. The latter is automatically treated as a categorical variable since it appears in an interaction and does not have <span class="InputCode">c.</span> in front of it.</p>
<p>Interactions are formed by multiplication: to form an indicator for "car is foreign and has a rep78 of 5" multiply an indicator for "car is foreign" by an indicator for "car has a rep78 of 5." But this is not limited to indicators:</p>
<p class="InputCode">reg price c.weight##c.weight</p>
<p>This regresses <span class="InputCode">price</span> on <span class="InputCode">weight</span> and weight squared, allowing you to consider non-linear effects of <span class="InputCode">weight</span> (at least second order Taylor series approximations to them). You could estimate the same model with:</p>
<p class="InputCode">gen weightSquared=weight^2<br/>
                  reg price weight weightSquared</p>
<p>Specifying the model using interactions is shorter, obviously. But it also (again) helps postestimation commands understand the structure of the model.</p>
<h4>Exercises</h4>
<ol>
<li>The product of <span class="InputCode">weight</span> and <span class="InputCode">mpg</span> measures how many pounds a car's engine can move one mile using one gallon of gasoline, and is thus a measure of the efficiency of the engine independent of the car it's placed in. Regress the <span class="InputCode">price</span> of a car on this product and the main effects of <span class="InputCode">weight</span> and <span class="InputCode">mpg</span>. Form the product of <span class="InputCode">weight</span> and <span class="InputCode">mpg</span> using interactions, not <span class="InputCode">gen</span>. Hint: if you get an error message, read it carefully. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_stats_cat1.htm">Solution</a>)</li>
<li>Suppose I argued that "The efficiency of an engine in terms of pound-miles per gallon is an attribute of the engine, not an interaction. Thus I don't need to include the main effects of <span class="InputCode">weight</span> and <span class="InputCode">mpg</span>." Run that model, then explain how the results of that model compared to  one that includes main effects of  <span class="InputCode">weight</span> and <span class="InputCode">mpg</span> (i.e. the model from exercise 1) show that this argument is wrong. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_stats_cat2.htm">Solution</a>)</li>
</ol>
<h2><a id="Postestimation" name="Postestimation"></a>Postestimation</h2>
<p>Estimation commands store values in the <em>e vector</em>, which can be viewed with the <span class="InputCode">ereturn list</span> command. Try:</p>
<p class="InputCode">reg price c.weight##c.weight i.foreign i.rep78 mpg displacement<br/>
  ereturn list </p>
<p>Most of these results are only of interest to advanced Stata users, with one important exception.</p>
<p>The <span class="InputCode">e(sample)</span> function tells you whether a particular observation was in the sample used for the previous regression. It is 1 (true) for observations that were included and 0 (false) for observations that were not. In this case, the five observations with missing values of <span class="InputCode">rep78</span> were excluded. <span class="InputCode">e(sample)</span> can be very useful if you think missing data may be causing problems with your model. For example, you could type:</p>
<p class="InputCode">tab foreign if e(sample)</p>
<p>to check which values of <span class="InputCode">foreign</span> actually appear in the data used in the regression. Or:</p>
<p class="InputCode">sum mpg if e(sample)<br/>
  sum mpg if !e(sample)</p>
<p>will tell you if the mean value of <span class="InputCode">mpg</span> is different for the observations used than for the observations not used, which could indicate that the data are not missing at random.</p>
<p>Regression coefficients are stored in the <span class="InputCode">e(b)</span> matrix. We won't discuss working with matrices, but they are also available as <span class="InputCode">_b[</span><span class="Parameter">var</span><span class="InputCode">]</span> (e.g. <span class="InputCode">_b[mpg]</span>). Standard errors are available as <span class="InputCode">_se[</span><span class="Parameter">var</span><span class="InputCode">]</span>.</p>
<p>Most of the time you won't use the <em>e vector</em> directly. Instead you'll use Stata's postestimation commands and let them work with the <em>e vector</em>. We'll cover just a small sample of them.</p>
<h3 id="test">Hypothesis Tests on Coefficients</h3>
<p>The <span class="InputCode">test</span> command tests hypotheses about the model coefficients. The syntax is just <span class="InputCode">test</span> plus a list of hypotheses, which are tested jointly. In setting up hypotheses, the name of a variable is taken to mean the coefficient on that variable. If you just give the name of a variable without comparing it to something, <span class="InputCode">test</span> will assume you want to test the hypothesis that that variable's coefficient is zero. The command:</p>
<p class="InputCode">test mpg displacement</p>
<p>tests the hypothesis that the coefficients on <span class="InputCode">mpg</span> and<span class="InputCode"> displacement </span>are jointly zero. If you want to jointly test more complicated hypotheses, put each hypothesis in parentheses:</p>
<p class="InputCode">test (mpg==-50) (displacement==5)</p>
<p>For factor variables, indicate which level you want to test by putting the number before the variable, followed by a period:</p>
<p class="InputCode">test 1.foreign=3000</p>
<p>For interactions, use the variable name itself to refer to the main effect, and  the interaction specified with one pound sign for the interaction term:</p>
<p class="InputCode">test weight c.weight#c.weight</p>
<p>You can have variables on both sides of the equals sign:</p>
<p class="InputCode">test weight=mpg</p>
<p>This is equivalent to (and will be recast as):</p>
<p class="InputCode">test weight-mpg==0</p>
<h3 id="predict">Predicted Values</h3>
<p>The <span class="InputCode">predict</span> command puts the model's predicted values in a variable:</p>
<p class="InputCode">predict phat</p>
<p>("hat" refers to the circumflex commonly used to denote estimated values). You can calculate residuals with the <span class="InputCode">residuals</span> <em>option</em>:                </p>
<p class="InputCode">predict res, residuals</p>
<p> You can change your data between running the model and making the predictions, which means you can look at counterfactual scenarios like "What if all the  cars were foreign?" See <a href="https://ssc.wisc.edu/sscc/pubs/4-22.htm">Making
       			Predictions with Counter-Factual Data in Stata</a> for some examples. However, it's usually easier to do that kind of thing using <span class="InputCode">margins</span>.</p>
<h3 id="margins">Margins</h3>
<p>The <span class="InputCode">margins</span> command is a very useful tool for exploring what your regression results mean.</p>
<p>If you just type:</p>
<p class="InputCode">margins</p>
<p>all by itself, Stata will calculate the predicted value of the dependent variable for each observation, then report the mean value of those predictions (along with the standard error, t-statistic, etc.).</p>
<p>If margins is followed by a categorical variable, Stata first identifies all the levels of the categorical variable. Then, for each value it calculates what the mean predicted value of the dependent variable <em>would be</em> if all observations had that value for the categorical variable. All other variables are left unchanged. Thus:</p>
<p class="InputCode">margins foreign</p>
<p>first asks, "What would the mean price be if all the cars were domestic?" (but still had their existing weights, displacements, etc.) and then asks "What would the mean price be if all the cars were foreign?"</p>
<p class="InputCode">margins rep78</p>
<p>does the same for all five values of <span class="InputCode">rep78</span>, but since there are so many of them it's a good candidate for a graphical presentation. The <span class="InputCode">marginsplot</span> command takes the results of the previous <span class="InputCode">margins</span> command and turns them into a graph:</p>
<p class="InputCode">marginsplot</p>
<p>For continuous variables <span class="InputCode">margins</span> obviously can't look at all possible values, but you can specify which values you want to examine with the <span class="InputCode">at</span> option:</p>
<p class="InputCode">margins, at(weight=(2000 4000))</p>
<p>This calculates the mean predicted value of <span class="InputCode">price</span> with <span class="InputCode">weight</span> set to 2000 pounds, and then again with <span class="InputCode">weight</span> set to  4000 pounds. Think of each value as a "scenario"—the above scenarios are very simple, but you can make much more complicated scenarios by listing multiple variables and values in the <span class="InputCode">at</span> option. The <span class="InputCode">margins</span> output first assigns a number to each scenario, then gives their results by number.</p>
<p> The values are specified using a <em>numlist</em>. A <em>numlist</em> is a list of numbers just like a <em>varlist</em> is a list of variables and, like a <em>varlist,</em> there are many different ways to define a <em>numlist</em>. Type <span class="InputCode">help numlist</span> to see them all. The simplest method is just to list the numbers you want, as above. We'll learn one more version, which is <span class="Parameter">start</span><span class="InputCode"> (</span><span class="Parameter">interval</span><span class="InputCode">)</span><span class="Parameter"> end</span>:</p>
<p class="InputCode">margins, at(weight=(1500 (500) 5000))</p>
<p>This calculates the mean predicted value of <span class="InputCode">price</span> with <span class="InputCode">weight</span> set to 1500,  2000, 2500, etc. up to 5000. (The actual weights range from 1760 to 4840.) Again, this is a good candidate for a graphic:</p>
<p class="InputCode">marginsplot</p>
<p>If you want to look at the marginal effect of a covariate, or the derivative of the mean predicted value with respect to that covariate, use the <span class="InputCode">dydx</span> option:</p>
<p class="InputCode">margins, dydx(mpg)</p>
<p>In this simple case, the derivative is just the coefficient on<span class="InputCode"> mpg</span>, which will always be the case for a linear model. But consider changing <span class="InputCode">weight</span>: since the model includes both <span class="InputCode">weight</span> and weight squared you have to take into account the fact that both change. This case is particularly confusing (but not unusual) because the coefficient on <span class="InputCode">weight</span> is negative but the coefficient on weight squared is positive. Thus the  net effect of changing <span class="InputCode">weight</span> for any given car will very much depend on its starting weight.</p>
<p>The <span class="InputCode">margins</span> command can very easily tell you the mean effect:</p>
<p class="InputCode">margins, dydx(weight)</p>
<p>What <span class="InputCode">margins</span> does here is take the numerical derivative of the  expected <span class="InputCode">price</span> with respect to <span class="InputCode">weight</span> for each car, and then calculates the mean. In doing so, <span class="InputCode">margins</span> looks at the actual data. Thus it considers the effect of changing the Honda Civic's weight from 1,760 pounds as well as changing the Lincoln Continental's from 4,840 (the weight squared term is more important with the latter than the former). It then averages  them along with all the other cars to get its result of 2.362865, or that each additional pound of <span class="InputCode">weight</span> increases the mean expected <span class="InputCode">price</span> by $2.36.</p>
<p>To see how the effect of <span class="InputCode">weight</span> changes as <span class="InputCode">weight</span> changes, use the <span class="InputCode">at</span> option again and then plot the results:</p>
<p class="InputCode">margins, dydx(weight) at(weight=(1500 (500) 5000))<br/>
marginsplot</p>
<p>This tells us that for low values of weight (less than about 2000), increasing weight actually reduces the price of the car. However, for most cars increasing weight increases price.</p>
<p>The <span class="InputCode">dydx</span> option also works for binary variables:</p>
<p class="InputCode">margins, dydx(foreign)</p>
<p>However, because <span class="InputCode">foreign</span> was entered into the model as <span class="InputCode">i.foreign</span>, <span class="InputCode">margins</span> knows that it cannot take the derivative with respect to <span class="InputCode">foreign</span> (i.e. calculate what would happen if all the cars became slightly more foreign). Thus it reports the difference between the scenario where all the cars are foreign and the scenario where all the cars are domestic. You can verify this by running:</p>
<p class="InputCode">margins foreign</p>
<p>and doing the subtraction yourself.</p>
<h3 id="marginslogit">Binary Outcome Models and Predicted Probabilities</h3>
<p>The <span class="InputCode">margins</span> command becomes even more useful with binary outcome models because they are always nonlinear. Clear the <span class="InputCode">auto</span> data set from memory and then load <span class="InputCode">grad</span>:</p>
<p class="InputCode">clear<br/>
                  use grad
                </p>
<p>This is a fictional data set consisting of 10,000 students. Exactly one half of them are "high socioeconomic status" (<span class="InputCode">highSES</span>) and one half are not. Exactly one half of each group was given an intervention, or "treatment" (<span class="InputCode">treat</span>) designed to increase the probability of graduation. The <span class="InputCode">grad</span> variable tells us whether they did in fact graduate. Your goals are to determine 1) whether the treatment made any difference, and 2) whether the effect of the treatment differed by socioeconomic status (SES).</p>
<p>You can answer the first question with a simple logit model:</p>
<p class="InputCode">logit grad treat highSES</p>
<p>The coefficient on <span class="InputCode">treat</span> is positive and significant, suggesting the intervention did increase the probability of graduation. Note that <span class="InputCode">highSES</span> had an even bigger impact.</p>
<p>Next examine whether the effect depends on SES by adding an interaction between the two:</p>
<p class="InputCode">logit grad treat##highSES</p>
<p>The coefficient on <span class="InputCode">treat#highSES</span> is not significantly different from zero. But does that really mean the treatment had exactly the same effect regardless of SES?</p>
<p>Binary outcomes are often interpreted in terms of odds ratios, so repeat the previous regression with the <span class="InputCode">or</span> <em>option</em> to see them:</p>
<p class="InputCode">logit grad treat##highSES, or</p>
<p>This tells us that the odds of graduating if you are treated are approximately 2.83 times the odds of graduating if you are not treated, regardless of your SES. Researchers sometimes confuse odds ratios with probability ratios; i.e. they say you are 2.83 times more "likely" to graduate if you are treated. This is incorrect.</p>
<p>If you ask <span class="InputCode">margins</span> to examine the interaction between two categorical variables, it will create scenarios for all possible combinations of those variables. You can use this to easily obtain the predicted probability of graduation for all four possible scenarios (high SES/low SES, treated/not treated):</p>
<p class="InputCode">margins highSES#treat</p>
<p>For low SES students, treatment increases the predicted probability of graduation from about .49 to about .73. For high SES students, treatment increases the predicted probability of graduation from about .96 to about .98. Now, if you plug those probabilities  into the formula for calculating the odds ratio, you will find that the odds ratio is 2.83 in both cases (use the full numbers from the <span class="InputCode">margins</span> output, not the two digit approximations given here). Treatment adds the same amount to the linear function that is passed through the logistic function in both cases. But recall the <em>shape</em> of the logistic function:</p>
<p><img alt="Graph of logistic function, with four possible scenarios marked" height="446" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfr/logit.png" width="631"/></p>
<p>The treatment has a much smaller effect on the probability of graduation for high SES students because their probability is already very high—it can't get much higher. Low SES students are in the part of the logistic curve that slopes steeply, so  changes in the linear function have much larger effects on the predicted probability.</p>
<p>The <span class="InputCode">margins</span> command can most directly answer the question "Does the effect of the treatment vary with SES?" with a combination of <span class="InputCode">dydx()</span> and <span class="InputCode">at()</span>:</p>
<p class="InputCode">margins, dydx(treat) at(highSES=(0 1))</p>
<p></p>
<p>(You can also do this with <span class="InputCode">margins highSES, dydx(treat)</span>.) Once again, these are the same numbers you'd get by subtracting the levels obtained above. We suggest always looking at levels as well as changes—knowing where the changes start from gives you a much better sense of what's going on.</p>
<p>What if you just ran:</p>
<p class="InputCode">margins, dydx(treat)</p>
<p>This examines the change in predicted probability due to changing the <span class="InputCode">treat</span> variable, but <span class="InputCode">highSES</span> is not specified so margins uses the actual values of <span class="InputCode">highSES</span> in the data and takes the mean across observations. Since our sample is about one half high SES and one half low, the mean change is 1/2 times the change for highSES students plus 1/2 times the change for low SES students. But if a sample had a different proportion of high and low SES students, this number would be very different. Any time the <span class="InputCode">margins</span> command does not specify values for all the variables in the underlying regression model, the result will only be valid for populations that are similar to the sample.</p>
<p>It's a general rule that it's easiest to change the predicted probability for  subjects who are "on the margin;" i.e. those whose predicted probability starts near 0.5. However, this is a property of the logistic function, not the data. It is an assumption you make when you choose to run a logit model.</p>
<h4>Exercises</h4>
<ol>
<li>Try regressing <span class="InputCode">price</span> on <span class="InputCode">weight</span>, <span class="InputCode">foreign</span> and <span class="InputCode">rep78</span>, ignoring the fact that <span class="InputCode">rep78</span> is a categorical variable. Then regress <span class="InputCode">price</span> on <span class="InputCode">weight</span>, <span class="InputCode">foreign</span> and <span class="InputCode">i.rep78</span>. Use the second model to test the hypothesis that the first model is right. (Hint: if it is right, what should the coefficients on the <span class="InputCode">i.rep78</span> indicator variables in the second model be?) (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_stats_reg1.htm">Solution</a>)</li>
<li>Consider the final example of students and the treatment intended to increase the probability of graduation. Assume that these are the results from the first year of the program, and you are now deciding what to do in the second year. You can only give the treatment to one half of all the students, but you can choose which ones. If you are the superintendent of schools and will be evaluated based on your students' graduation rate, who do you want to give the treatment to? If you are the person administering the treatment program and will be evaluated based on the graduation rate of the students you treat, who do you want to give the treatment to? If you are the parent of a child in the district, who do you want to give the treatment to?</li>
</ol>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-groups.htm">Working with Groups</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-data.htm">Working With Data</a></p>
<h2></h2>
<p></p>
<h2></h2>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sfr/logit.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Researchers: Usage and Syntax</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This is part two of the Stata for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a>. If you're new to Stata we highly recommend reading the articles in order.</em></p>
<p>This article will introduce Stata's user interface and teach you its basic syntax. Understanding Stata's syntax is the key to becoming an expert Stata user.</p>
<h2>Running Stata</h2>
<p>To start Stata on Winstat or another Windows computer, click the Windows logo button, <span class="MenuOutput">All Programs</span>, <span class="MenuOutput">Stata 14</span> and then <span class="MenuOutput">Stata MP 14</span>. On Linstat, type <span class="InputCode">xstata</span>.                </p>
<h2>Stata's User Interface</h2>
<p>When you start up Stata, the first thing you'll see is the main user interface window. </p>
<table border="0" class="noBorder">
<tr>
<td><img alt="" height="478" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfr/ui2.png" width="768"/></td>
</tr>
</table>
<p>Most of it is self-explanatory. A few tricks that will make you more efficient:</p>
<ul>
<li>Press <span class="InputCode">Page Up</span> to retrieve your last command; press it more than once to retrieve earlier commands.</li>
<li>Click on a command in the <span class="MenuOutput">Review</span> window and it will be pasted into the <span class="MenuOutput">Command</span> window for editing. Double click on a command and it will be executed again.</li>
<li>If you decide something you did interactively was useful enough to preserve, right-click on the commands in the <span class="MenuOutput">Review</span> window, choose <span class="MenuOutput">Send selected to Do-file Editor</span>, edit as needed, and then save.</li>
<li>If you start typing the name of a variable and then press <span class="InputCode">Tab</span>, Stata will fill in the rest of the variable name if you've typed in enough for Stata to identify it.</li>
<li>Click on a variable name in the <span class="MenuOutput">Variables</span> window and it will be pasted into the <span class="MenuOutput">Command</span> window at the current location of the cursor.</li>
<li>Press <span class="InputCode">q</span> or click on the circled-X button at the top to interrupt a command in progress (the button turns red when something is running)</li>
<li>Use the <span class="MenuOutput">Properties</span> window do learn about your data set, the individual variables it contains, and how much memory Stata is using. Stata must load your entire data set into memory, but if you try to use more memory than your computer has Windows will use disk space as memory and Stata will become extremely slow.</li>
</ul>
<p>Start up Stata on the computer you're using. You should be seeing 
                the graphical user interface just like the picture above. 
                </p>
<h2>Directories and Files</h2>
<p>Stata always has exactly one data set in memory, and  the commands you issue will act on it. To open a data set you may be tempted to click <span class="MenuOutput">File</span>, <span class="MenuOutput">Open</span>, but you can't write that into a do file. Thus we'll stick to typing commands.</p>
<p>Stata always keeps track of what it calls the "current working directory." Think of it as where you "are" in your computer's file system. Any commands that work with files will assume that the files are in the current working directory unless you specify otherwise. You  set the current working directory with the <span class="InputCode">cd</span> (change directory) command. The syntax is simply:</p>
<p class="InputCode">cd <span class="Parameter">directory</span></p>
<p>with one caveat: if the directory name has any spaces in it the entire directory name must go in quotes so Stata understands it's just one entity.</p>
<p>If the directory name starts with a drive letter (or in Linux if it starts with "/") then Stata will go directly to that location no matter what the current working directory is. If you placed the <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm#files">Stata for Researchers example files</a> in <span class="InputCode">U:\StataResearch</span> make that the current working directory by typing:</p>
<p class="InputCode">cd U:\StataResearch</p>
<p>If you placed it in a different directory, type that instead. Don't forget that if you put spaces in the name you need to put quotes around it (e.g. <span class="InputCode">cd "U:\Stata Research"</span>). Note that in Windows file and directory names are not case sensitive (i.e. you could have typed <span class="InputCode">cd u:\stataresearch</span>) but in Linux they are.</p>
<p>You can also specify directories relative to the current directory. For example, .. means "up one level from the current directory." Assuming you're now in <span class="InputCode">U:\StataResearch</span>, typing:</p>
<p class="InputCode">cd ..</p>
<p>will put you in <span class="InputCode">U:\</span>. </p>
<p>If the directory in your <span class="InputCode">cd</span> command does not start with a drive letter ("/" in Linux) then it is assumed to be inside the current directory. Type:</p>
<p class="InputCode">cd StataResearch</p>
<p>to move from the <span class="InputCode">U:\</span> drive to <span class="InputCode">U:\StataResearch</span>.</p>
<p>Next see what's here using the <span class="InputCode">ls</span> (list) command. Type:</p>
<p class="InputCode">ls</p>
<p>The file you want is called <span class="InputCode">auto.dta</span> (<span class="InputCode">.dta</span> is the standard extension
                  for  Stata data sets).  To load it type:</p>
<p class="InputCode">use auto</p>
<p>You don't have to type the <span class="InputCode">.dta</span>;
                  Stata will assume it.</p>
<p>You can specify the full location of a data set in the <span class="InputCode">use</span> command, e.g.:</p>
<p class="InputCode">use U:\StataResearch\auto</p>
<p>With this method you don't need to use <span class="InputCode">cd</span> to set the current directory, but you have to specify the full location of every file you work with. You can also use relative paths in commands: if the current working directory had a subdirectory called <span class="InputCode">data</span> you could type <span class="InputCode">use data\mydataset</span> to load a data set inside it.</p>
<p>Our suggestion is that you make a directory for each project you're working on, and  keep all the data files, do files, log files and any other files related to the project in its directory. Make that directory the current working directory whenever you're working on that project. If you double-click on a data set or do file in Windows Explorer, Stata will start with the current working directory already set to the location of the file. Then in your programs you can refer to files simply by name without having to specify any locations. This is quicker than typing out the location of each file and reduces opportunities for error. It also makes your project portable: you can move the entire directory to a different computer (even from Windows to Linux) or zip it up and send it to someone else, and all your programs will still work.</p>
<p> If you're inclined to create subdirectories to organize your files, consider using Stata's Project Manager instead. The Project Manager allows you to define groups and place files in them without actually changing their location on disk. That way you can reorganize your files without changing the programs that use them. We won't discuss the Project Manager, but it's very easy to use.</p>
<h2>The 'auto' Example Data Set</h2>
<p>The 'auto' data set contains information about 1978 cars and has been included with Stata for many, many years. Every Stata user has access to it so it is frequently used for examples, just as we'll use it today. To see what's in it, type:</p>
<p class="InputCode">browse</p>
<p>or click the fourth button from the right in the toolbar at the top. This opens Stata's <span class="MenuOutput">Data Editor</span>, which shows you your data set in a spreadsheet-like form. You can also invoke the <span class="MenuOutput">Data Editor</span> by typing <span class="InputCode">edit</span> or clicking the fifth button from the right, and then it will allow you to make changes. Since you should <em><strong>never</strong></em> change your data interactively, get in the habit of using <span class="InputCode">browse</span> so you don't make changes by accident. Before proceeding there are a few things you should note about this data set.</p>
<h3>Numbers vs. Strings</h3>
<p>Most of the variables in this data set are numbers, like <span class="InputCode">price</span> and <span class="InputCode">mpg</span>. The variable <span class="InputCode">make</span> contains words or, as Stata calls them, "strings" (as in strings of characters). Obviously you can't do math with words, but Stata can do many other useful things with string variables. </p>
<h3>Missing Values</h3>
<p>Several cars have dots in the <span class="InputCode">rep78</span> column rather than numbers. These indicate missing values. A Stata data set is a rectangular matrix, so every observation must have something for every variable. If no actual data are available, Stata stores a  code for "missing."</p>
<p>Missing values often require special handling, and it's easy to write code which works fine with complete data but gives wrong answers if there are any missing values. The worst part about missing values is there's no single right way to deal with them—it depends on what you're trying to do.  How to handle missing data will be a recurring theme in this series.</p>
<p>While this data set just uses "generic" missing values, there are 26 others you can use:  <span class="InputCode">.a</span> through <span class="InputCode">.z</span>. Stata treats them all the same, but you can assign meanings to them. For example, if you were working with a survey  you might decide to code "the question did not apply" as <span class="InputCode">.a</span> and "the respondent refused to answer" as <span class="InputCode">.b</span>.</p>
<h3>Value Labels</h3>
<p>The <span class="InputCode">foreign</span> variable appears to contain text, like <span class="InputCode">make</span>. But note that it's a different color, and if you click on a cell in that column what appears at the top of the window is a <span class="InputCode">0</span> or a <span class="InputCode">1</span>. This tells you <span class="InputCode">foreign</span> is really an numeric variable with a set of value labels applied. Comparing the 
                numbers at the top with the words in the table, you'll see that this set of value labels associates the number <span class="InputCode">0</span> with the word <span class="InputCode">Domestic</span> and the number <span class="InputCode">1</span> with the word <span class="InputCode">Foreign</span>. We'll talk about creating value labels in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-data.htm">Working with Data</a>. But for now, the important thing to remember is that if you write code referring to the <span class="InputCode">foreign</span> variable, it must use the real values <span class="InputCode">0</span> and <span class="InputCode">1</span>, not the labels <span class="InputCode">Domestic</span> and <span class="InputCode">Foreign</span>. This frequently confuses people who are starting out with a new data set, so it's worth checking to see which variables have associated value labels. In addition to opening the data browser and looking for columns in blue, you can look at the <span class="MenuOutput">Properties</span> window (after selecting the variable of interest in the <span class="MenuOutput">Variables</span> window) or type:</p>
<p class="InputCode">describe</p>
<p>(or just <span class="InputCode">d</span>). This will give you information about all the variables in your data set, including a column that tells you which ones have value labels. You can get the same information and more by opening the <span class="MenuOutput">Variables Manager</span> window (third button from the right or type <span class="InputCode">varman</span>). You can see what the labels are by typing:</p>
<p class="InputCode">label list</p>
<h2>Syntax Elements</h2>
<p>Almost all Stata commands rely on the same set of syntax elements. These elements give you a tremendous amount of control over the commands you run. Very complicated instructions can be expressed relatively simply by the proper combination of syntax elements.</p>
<p>We'll discuss four elements:</p>
<ul>
<li><em>varlists</em></li>
<li><em>if</em></li>
<li><em>options</em></li>
<li><em>by</em></li>
</ul>
<p>These elements always go in the same order:</p>
<p class="InputCode">[by varlist:] command [varlist] [if condition] [, options]</p>
<p>In order to see these elements in action, we'll use a very simple command:</p>
<p class="InputCode"> list</p>
<p>(<span class="InputCode">list</span> can  also be abbreviated as just <span class="InputCode">l</span>.) This  prints your data on the screen—think of it as a <span class="InputCode">browse</span> you can use in do files. However, <span class="InputCode">list</span> all by itself produces so much output that it's hard to find what you want. By learning to use these syntax elements you'll learn to <span class="InputCode">list</span> just the information you want—and in the process learn to control what any Stata command does.</p>
<h3><a id="Varlists" name="Varlists"></a>Varlists</h3>
<p><em>Varlists</em> allows you to control which variables (columns) a command will act on. A <em>varlist</em> is simply a list of variables separated by spaces, and it goes right after the command itself.  Type:</p>
<p class="InputCode">list make</p>
<p>This
  lists just the <span class="InputCode">make</span> of each car rather than all the variables. </p>
<p> As the name suggests, a <span class="italic"><em>varlist</em></span> can
  include multiple variables. Try typing: </p>
<p class="InputCode">list make price mpg</p>
<p><em>Varlists</em> can get quite long, so there are several shortcuts for writing them. If you put a dash between two variables, all the variables between them (as defined by the order they're listed in the <span class="MenuOutput">Variables</span> window) will be included in the variable list. Thus:</p>
<p class="InputCode">list make-mpg</p>
<p>includes <span class="InputCode">price</span>, because the first three variables in the data set are <span class="InputCode">make</span>, <span class="InputCode">price</span> and <span class="InputCode">mpg</span>.</p>
<p>You can also use wildcard characters. A <span class="InputCode">*</span> matches any number of characters, so </p>
<p class="InputCode">list m*</p>
<p>gives you both <span class="InputCode">make</span> and <span class="InputCode">mpg</span>. It would also include a variable just called <span class="InputCode">m</span> if there were one in the data set. A <span class="InputCode">?</span> matches any one character, but it must be exactly one. Thus:</p>
<p class="InputCode">list x?</p>
<p>would list (if our data set had such variables) <span class="InputCode">x1</span>, <span class="InputCode">x2</span>, and <span class="InputCode">x3</span>, but not <span class="InputCode">x</span>, <span class="InputCode">x10</span> or <span class="InputCode">xenophobia</span>.</p>
<p>Wildcards can go in any location. For example,</p>
<p class="InputCode">list *t</p>
<p>lists all variables that end in t (<span class="InputCode">weight</span> and <span class="InputCode">displacement</span>) while</p>
<p class="InputCode">list t*n*</p>
<p>lists all variables that start with <span class="InputCode">t</span> and then have an <span class="InputCode">n</span> in any other position (<span class="InputCode">trunk</span> and <span class="InputCode">turn</span>).</p>
<p>You can  mix shortcut types:</p>
<p class="InputCode">list m* weight-displacement *n
</p>
<p></p>
<h4>Exercises</h4>
<ol>
<li>What is the most concise varlist that would include all the variables in this data set? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_syntax_varlists_1.htm">Solution</a>)</li>
<li>Suppose your data set included  variables <span class="InputCode">x1</span> through <span class="InputCode">x20</span> plus many others, including one called <span class="InputCode">xenophobia</span>. What varlist would select <span class="InputCode">x1</span> through <span class="InputCode">x20</span> but not those other variables, in particular not <span class="InputCode">xenophobia</span>? Assume the variables are intermingled so <span class="InputCode">x1-x20</span> will not work. (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_syntax_varlists_2.htm">Solution</a>)</li>
</ol>
<h3>If</h3>
<p><em>If</em> conditions allow you to control which observations (rows) a command acts on. An <em>if</em> condition consists of the  word <span class="InputCode">if</span> followed by some condition that is either true or false. It comes after the <em>varlist</em> if there is one (if not it goes directly after the command). The command will only act on those observations where the condition is true. Type:</p>
<p class="InputCode">list make mpg if mpg==25</p>
<p>This gives you a list containing the <span class="InputCode">make</span> and <span class="InputCode">mpg</span> of just those cars which get exactly 25 miles per gallon.</p>
<p>Make sure you type two equals signs. Stata, like most computer languages, understands two different
            	meanings for "equals." One equals sign is for assignment: <span class="InputCode">mpg=25</span> means "Make mpg 25." Two equals signs is a question: <span class="InputCode">mpg==25</span> asks
            	"Is mpg  25?" This will drive you crazy
            	for about a week and then  become second nature. The following are the "relational operators" used to form conditions:</p>
<table border="0">
<tr>
<td>==</td>
<td><p>Equal</p></td>
</tr>
<tr>
<td>&gt;</td>
<td>Greater than</td>
</tr>
<tr>
<td>&lt;</td>
<td>Less than</td>
</tr>
<tr>
<td>&gt;=</td>
<td>Greater than or equal to</td>
</tr>
<tr>
<td>&lt;=</td>
<td>Less than or equal to</td>
</tr>
<tr>
<td>!=</td>
<td>Not equals</td>
</tr>
</table>
<p>The exclamation point also means "not" more generally. For example,
            	try:</p>
<p class="InputCode">  list make mpg if !(mpg&gt;25)</p>
<p>"Not" can  be thought of as reversing the
   condition that follows it: changing false to true and true to false.</p>
<h4>Combining Conditions</h4>
<p>You can  combine two conditions with "logical and" (<span class="InputCode">&amp;</span>) or "logical or" (<span class="InputCode">|, </span> called the "pipe" and created by pressing <span class="InputCode">Shift-\</span>). With "logical and" the result is true if and only if both conditions are true, while with "logical or" the result is true if either condition is true, or both. In terms of set theory, "logical and" is the intersection, while "logical or" is the union.</p>
<p>Thus:</p>
<p class="InputCode">list make price mpg if mpg&gt;25 &amp; price&lt;5000</p>
<p>will give you a list of cars that both get good gas mileage and are relatively cheap (remember these are 1978 dollars), while:</p>
<p class="InputCode">list make price mpg if mpg&gt;25 | price&lt;5000</p>
<p>will give you a list of cars that either get good gas mileage or are relatively cheap or both, a much larger list.</p>
<p>Once you get past two conditions, the order in which they're evaluated can  change the result. There are set precedence rules, but we suggest using parentheses liberally to ensure Stata will evaluate conditions in the order you think it should.</p>
<h4>Indicator Variables</h4>
<p>While we've talked about conditions being true or false, in reality Stata uses numbers: one is true and zero is false. You can take advantage of this to write very natural <em>if</em> conditions with indicator variables:</p>
<p class="InputCode">list make if foreign</p>
<p>Part of what makes this work is the variable name: the variable <span class="InputCode">foreign</span> tells us whether or not a car is in fact foreign. Now consider a variable called <span class="InputCode">gender</span>: does a one indicate that a person is male or that a person is female? You can't tell without checking your codebook (or value labels). But if the variable were called <span class="InputCode">female</span> it would be obvious that a one means this person is female.</p>
<p>Be careful however: more generally, any number other than zero is considered true—even missing.  If <span class="InputCode">foreign</span> were missing for some cars, <span class="InputCode">list make if foreign</span> would treat those cars as if they were known to be foreign. This leads some people to suggest that it's better to always use code like:</p>
<p class="InputCode">list make if foreign==1</p>
<p>But this treats cars with a missing value for <span class="InputCode">foreign</span> as if they were known <em>not</em> to be foreign. Which  one is appropriate—or whether you need to do something else entirely—depends on what exactly you're trying to do.</p>
<h4>Missing Values and Inequalities</h4>
<p>Internally, Stata stores the missing values <span class="InputCode">.</span>, <span class="InputCode">.a</span>, <span class="InputCode">.b</span> ... <span class="InputCode">.z</span> as the 27 largest possible numbers of each variable type, and in that order. It's very important to keep this in mind when dealing with inequalities: think of missing values as essentially "positive infinity."</p>
<p>Consider making a list of cars with "good" repair records, defined as <span class="InputCode">rep78</span> greater than three:</p>
<p class="InputCode">l make rep78 if rep78&gt;3</p>
<p>Cars with a missing value for <span class="InputCode">rep78</span> are included, because infinity is much greater than three.</p>
<p>Whether that's a problem or not depends on your goal in making this list. If you want a list of cars which are not known to have poor repair records,  that code is entirely correct. But if you want a list of cars which are known to have good repair records then you need to add a second condition:</p>
<p class="InputCode">l make rep78 if rep78&gt;3 &amp; rep78!=.</p>
<p>Now cars with missing repair records are specifically excluded. However, note that this would not exclude the other missing values: <span class="InputCode">.a</span>, <span class="InputCode">.b</span>, etc. Thus veteran Stata programmers will use:</p>
<p class="InputCode">l make rep78 if rep78&gt;3 &amp; rep78&lt;.</p>
<p>The generic <span class="InputCode">.</span> is the smallest of the missing values, so <span class="InputCode">rep78&lt;.</span> will be true for all valid values and false for all missing values.</p>
<p>An alternative that's  longer to type but easier to read is:</p>
<p class="InputCode">l make rep78 if rep78&gt;3 &amp; !missing(rep78)</p>
<p>The <span class="InputCode">missing</span> function takes a variable name as input, and returns true if that variable is missing and false if it is not. (Alternatively you can give it a list of variables separated by commas and it will return true if any of them are missing.) The exclamation point  reverses the result, making it effectively "not missing."</p>
<p>Since the "missing is infinity" rule is not  intuitive, it's easy to forget. But doing so can be disastrous. Consider trying to identify senior citizens with the condition <span class="InputCode">if age&gt;=65</span>: anyone whose age is missing would be called a senior citizen. Different rules for handling missing values have been proposed, but they  just make the disasters occur under different circumstances. There's no alternative to checking for missing values and handling them properly where they exist.</p>
<p>Fortunately the checking is easy to do. Just type:</p>
<p class="InputCode">misstable sum</p>
<p>This is an example of a command with a subcommand. The <span class="InputCode">misstable</span> command can do many things, so the second word (or in this case abbreviation since <span class="InputCode">sum</span> is short for <span class="InputCode">summarize)</span> tells Stata you want it to give you a summary of the variables that have missing values. Since <span class="InputCode">rep78</span> is the only variable listed, you now know that you have to worry about missing values when working with <span class="InputCode">rep78</span>, but can ignore them with all the other variables—as long as the data set doesn't change.</p>
<p>If you will be working with many data sets or data sets that do change, you can build a test for missing values right into your do files. The <span class="InputCode">assert</span> command checks to see whether a given condition is true or not for all observations. For example:</p>
<p class="InputCode">assert mpg&lt;.</p>
<p>checks to see if <span class="InputCode">mpg</span> is always non-missing. Since it is, nothing happens. However, try:</p>
<p class="InputCode">assert rep78&lt;.</p>
<p>Now you get an error message (along with information about how often the condition is violated). If you had been running a do file it would have come to a screeching halt. This is good: if your  code was written  on the assumption that <span class="InputCode">rep78</span> is never missing, it's far better for that code to crash than to continue running and give you wrong answers.</p>
<p><span class="InputCode">assert</span> is useful for far more than checking for missing values. With clever programming you can use it to check all sorts of assumptions about your data ("Each value of <span class="InputCode">ID</span> is associated with just one person", "Every household has a head of household", etc.). Doing so can save you a lot of headaches.</p>
<h4>Exercises</h4>
<ol>
<li>A shipping company would like to ship cars from other countries to the US. Its ships can handle cargoes up to 200 inches in length and weighing up to 4,000 pounds. Doing so is only profitable for cars costing at least $5,000. Which cars should it consider shipping? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_syntax_if_2.htm">Solution</a>)</li>
<li>Suppose I want to buy a car. I'm willing to pay up to $4,000 for most cars, but I'll go up to $5,000 if the car is known to be reliable (<span class="InputCode">rep78</span>&gt;3) and gets good gas mileage (<span class="InputCode">mpg</span>&gt;25). Which cars should I look at? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_syntax_if_1.htm">Solution</a>)</li>
<li>Recall that we earlier typed <span class="InputCode">list make mpg if !(mpg&gt;25)</span>. Now try <span class="InputCode">list make mpg if !mpg&gt;25</span>. What's going on? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_syntax_if_3.htm">Solution</a>)</li>
</ol>
<h3><a id="Options" name="Options"></a>Options</h3>
<p><em>Options</em> control how a command runs. They go at the end of the command after a comma.  There can be any number of options (all following a single comma) and they can go in any order. If an option needs more information, like a variable to act on, that information goes in parentheses immediately following the option. To see an option in action, type:</p>
<p class="InputCode">list make foreign</p>
<p>and then</p>
<p class="InputCode">list make foreign, nolabel</p>
<p>The <span class="InputCode">nolabel</span> option can be used with many commands. It tells the command to ignore value labels and show the actual values of the variable. Other options may only be used by a single command.</p>
<p>The <span class="InputCode">list</span> command has a <span class="InputCode">header</span> option that prompts it to repeat the header row containing variable names. This can make it easier to keep track of what the columns mean in long lists. However, it needs to know how how many observations should go between each repetition of the header. As additional information, this number goes in parentheses after the word <span class="InputCode">header</span>:</p>
<p class="InputCode">list make-mpg, header(20)</p>
<h3></h3>
<h3><a id="by" name="by"></a>By</h3>
<p><em>by</em> is used to run a command separately across 
  groups. For example, list the domestic cars and the foreign cars
  separately by typing:</p>
<p class="InputCode">by foreign: l make foreign </p>
<p>Note how the list is broken into two parts. The first one says <span class="MenuOutput">foreign=Domestic</span> at the top, the second says <span class="MenuOutput">foreign=Foreign</span>. <span class="italic"><em>by</em></span> splits the data set up into 
  groups, one group for each unique value of the <span class="italic"><em>by</em></span> variable, then executes the command  for each group independent of the others.</p>
<p>Since <span class="italic"><em>by</em></span> takes a <span class="italic">varlist</span>,
  you can work by more than one variable at a time. Try: </p>
<p class="InputCode">by foreign rep78: l make</p>
<p>You'll get the message</p>
<p class="MenuOutput"><span class="Red">not sorted</span><br/>
<span class="Blue">r(5); </span></p>
<p>Stata can only use <span class="italic"><em>by</em></span> if the data
  set is sorted in the order of the <em>by</em> variables. This
  data set started out sorted by <span class="InputCode">foreign</span>,
  but not by <span class="InputCode">rep78</span>. Type:</p>
<p class="InputCode">sort foreign rep78</p>
<p>and Stata will sort the data and allow you to execute:</p>
<p class="InputCode"> by
  foreign rep78: l make</p>
<p> successfully. As you can see it breaks
  the data set into one group for each unique combination
  of <span class="InputCode">foreign</span> and <span class="InputCode">rep78</span> and then carries out the
  command. Note that some combinations (foreign cars with a <span class="InputCode">rep78</span> of one, for example) do not occur in the data and  are not listed.</p>
<p> Users got  tired of forgetting to sort before using <em>by</em>, so Stata added <span class="InputCode">bysort</span>:</p>
<p class="InputCode">bysort foreign rep78: l make</p>
<p>This will first sort the data by <span class="InputCode">foreign</span> and <span class="InputCode">rep78</span>, then carry out the rest
  of the command.</p>
<p>A caution about sorting: Stata's default sort algorithm is not <em>stable</em>, meaning that it may change the order of the observations even if it doesn't have to. For example, if you have data consisting of individuals grouped into households, running <span class="InputCode">sort household</span> may change the order of individuals within a household. If the order is important, add the <span class="InputCode">stable</span> option to the <span class="InputCode">sort</span> command (e.g. <span class="InputCode">sort household, stable</span>) and Stata will switch to a  slower algorithm that is stable.</p>
<h4>Exercise</h4>
<ol>
<li><span class="InputCode">make</span>  appears to be a unique identifier in this data set (i.e. each car has a unique value of <span class="InputCode">make</span>). If so, what would it look like if you did a list "by make"? Do the list; is it what you expected? What would it look like if <span class="InputCode">make</span> were not in fact a unique identifier? (<a href="https://ssc.wisc.edu/sscc/pubs/sfr/soln_syntax_by.htm">Solution</a>)</li>
</ol>
<p>We'll do much more with <em>by</em> in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-groups.htm">Working with Groups</a>.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-do.htm">Do Files</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Introduction</a></p>
<p> </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sfr/ui2.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>We demonstrated appending in order to create the long form of this data set:</p>
<p class="InputCode">clear<br/>
use panel2007<br/>
gen year=2007<br/>
save panel2007_append<br/>
use panel2008<br/>
gen year=2008<br/>
append using panel2007_append</p>
<p> Now all you need to do is reshape:</p>
<p class="InputCode">reshape wide score, i(id) j(year)</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Again the first step is to append the data sets:</p>
<p class="InputCode">clear<br/>
use panel2007<br/>
gen year=2007<br/>
save panel2007_append<br/>
use panel2008<br/>
gen year=2008<br/>
append using panel2007_append</p>
<p>You can observe that there is a person who only appears once with <span class="InputCode">duplicates report</span>:</p>
<p class="InputCode">duplicates report id</p>
<p>If you want to figure out who it is and examine their data, you can follow the procedure for identifying duplicates. Just keep in mind that in this case everyone should have two copies, and anything else is a problem:</p>
<p class="InputCode"> bysort id: gen copies=_N<br/>
                l if copies==1</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Two notes before diving into the details:</p>
<ol>
<li>It's probably worth your time to try to combine these files before fixing all the errors so you can see what the result looks like. When it comes to programming, "experience" often comes down to having made a mistake before so you recognize it faster when you make it again.</li>
<li>Given that you have two files to fix and Stata only works with one file at a time, the efficient way to do it is to load one, fix all the problems in it, save the results, and then move on to the other. But for clarity we'll discuss fixing one kind of error at a time in both files and omit the implied <span class="InputCode">save</span> and <span class="InputCode">use</span> commands. We'll put everything together and in the proper order at the end. </li>
</ol>
<p>Begin by doing a <span class="InputCode">describe</span> on both data sets:</p>
<p class="InputCode">                  use error2007<br/>
                  d<br/>
                  use error2008<br/>d</p>
<p>The first problem is the variable names: in <span class="InputCode">error2007</span> the identifier variable is called <span class="InputCode">studentID</span> while in <span class="InputCode">error2008</span> it is called <span class="InputCode">id</span>. In <span class="InputCode">error2007</span> the teacher identifier is  called <span class="InputCode">teacher</span>, while in <span class="InputCode">error2008</span> it is called <span class="InputCode">teacherID</span>. Meanwhile the student's score is called <span class="InputCode">testScore</span> in <span class="InputCode">error2007</span> and simply <span class="InputCode">score</span> in <span class="InputCode">error2008</span>. It doesn't matter what the variables are called, but they must be consistent. We'll go with <span class="InputCode">id</span>, <span class="InputCode">teacher</span> and <span class="InputCode">score</span>:</p>
<p class="InputCode">rename studentID id<br/>
                  rename testScore score<br>
                  rename teacherID teacher                  <br/>
</br></p>
<p>Second, in <span class="InputCode">error2007</span> the <span class="InputCode">id</span> variable (formerly <span class="InputCode">studentID</span>)  is a string while in <span class="InputCode">error2008</span> it is a number. Strings are nice for identifiers because you never have to worry about rounding, so we'll convert the <span class="InputCode">id</span> in <span class="InputCode">error2008</span> to a string. However, there's an additional complication: the string identifiers in <span class="InputCode">error2007</span> have leading zeroes for if they are less than ten ("<span class="InputCode">01</span>", "<span class="InputCode">02</span>" etc.). One option would be to tell the <span class="InputCode">string</span> function to use a format that includes leading zeroes when converting the numbers to strings. But rather than look up the proper format I'd suggest a straightforward <span class="InputCode">replace</span>:</p>
<p class="InputCode">gen temp=string(id)<br/>
                  replace temp="0"+temp if id&lt;10
                  <br/>
                  drop id<br/>
                rename temp id</p>
<p>The third problem is duplicate observations. You can examine them with:</p>
<p class="InputCode">duplicates report id<br/>
                  bysort id: gen copies=_N<br/>
                  l if copies&gt;1</p>
<p>This reveals that in <span class="InputCode">error2007</span> you have two student 41's, and they're different. There's just one student 41 in <span class="InputCode">error2008</span> and you have no idea which it should match with, so you'll have to drop both student 41's from <span class="InputCode">error2007</span>. You could drop student 41 from <span class="InputCode">error2008</span> as well, but you'll take care of that when you do the final merge by only keeping observations that match.</p>
<p class="InputCode">drop if id=="41"</p>
<p>(Remember we converted id to a string, so the number 41 must go in quotes.) </p>
<p>Meanwhile in <span class="InputCode">error2008</span> we have two student 37's and two observations with missing values for <span class="InputCode">id</span>. <span class="InputCode">error2007</span> has no observations with missing values for <span class="InputCode">id</span>, so they won't match with anything and will be deleted automatically. The two student 37's on the other hand, turn out to be the same person--their data are identical. Thus all you need to do is drop one:</p>
<p class="InputCode">duplicates drop id, force</p>
<p>Now we've fixed the errors, but we still have to keep track of which year is which. To put things in the wide form that means adding the year to the end of all the level one variable names:</p>
<p class="InputCode">rename score score2007<br/>
                  rename race race2007<br/>
                  rename teacher teacher2007<br/>
                rename teacherRace teacherRace2007 </p>
<p>And similar for 2008.</p>
<p>Now you're finally ready to merge. For now keep everything whether it matches or not:</p>
<p class="InputCode">merge 1:1 id using fixed2007</p>
<p>You'll see that despite your best efforts, some observations did not match. Examine the problem observations with:</p>
<p class="InputCode">browse if _merge!=3</p>
<p>The observations with the id's "<span class="InputCode">41</span>" and "<span class="InputCode">.</span>" were dealt with previously and you expected them not to match. However, "<span class="InputCode">40</span>", "<span class="InputCode">20</span>", "<span class="InputCode">55</span>" and "<span class="InputCode">60</span>" are unexpected. But they do not indicate mistakes: if you go back to the original files, you'll see that <span class="InputCode">error2008</span> has no student 40, and <span class="InputCode">error2007</span> has no students 20,55 or 60. Thus you've done the best that can be done.</p>
<p>You can eliminate the unmatched observations (assuming they're no use to you without both years' data) with:</p>
<p class="InputCode">drop if _merge!=3</p>
<p>Alternatively you can go back and chance the merge command to:</p>
<p class="InputCode">merge 1:1 id using fixed2007, keep(match)</p>
<p>But note that if you did that from the beginning you couldn't check your results.</p>
<p>Following is the complete code, in the proper order and including all the <span class="InputCode">use</span> and <span class="InputCode">save</span> commands:</p>
<p class="InputCode">use error2007<br/>
                d<br/>
                rename studentID id<br/>
                rename testScore score<br/>
<br/>
                duplicates report id<br/>
                bysort id: gen copies=_N<br/>
                l if copies&gt;1<br/>
                drop if id=="41"<br/>
<br/>
                rename score score2007<br/>
                rename race race2007<br>
                rename teacher teacher2007<br/>
                rename teacherRace teacherRace2007<br/>save fixed2007, replace<br/>
<br/>
                use error2008<br/>
                d<br/>
                rename teacherID teacher<br/>
<br/>
                gen temp=string(id)<br/>
                replace temp="0"+temp if id&lt;10<br/>
                drop id<br/>
                rename temp id<br/>
<br/>
                duplicates report id<br/>
                bysort id: gen copies=_N<br/>
                l if copies&gt;1<br/>
                duplicates drop id, force<br/>
<br/>
rename score score2008<br/>
                rename race race2008<br/>
                rename teacher teacher2008<br/>
                rename teacherRace teacherRace2008<br/>
                save fixed2008, replace<br/>
<br/>
                merge 1:1 id using fixed2007<br/>
                  browse if _merge!=3<br/>
                  drop if _merge!=3
                  <br/>
</br></p>
<p>Moving on to appending the data, you'll find that Stata will append the two data sets as-is without any complaints:</p>
<p class="InputCode">use error2007<br/>
                append using error2008</p>
<p>The result is unusable, but <span class="InputCode">browse</span> and see why. The <span class="InputCode">merge</span> command is much more likely to crash than the <span class="InputCode">append</span> command, but that's a good thing--it brings problems to your attention that would have caused trouble eventually anyway.</p>
<p>You'll need to do a bit of fixing just to see the more interesting errors with <span class="InputCode">append</span>:</p>
<p class="InputCode">use error2007<br/>
                  rename studentID id<br/>
                  save fixed2007b<br/>
                  use error2008<br/>
                  gen temp=string(id)<br/>
                  replace temp="0"+temp if id&lt;10<br/>
                  drop id<br/>
                  rename temp id<br/>
                append using fixed2007b</p>
<p>To identify the duplicate observations you can follow the same procedure as before, but note that each ID should have two observations:</p>
<p class="InputCode">duplicates report id<br/>
                  bysort id: gen copies=_N<br/>
                browse if copies!=2</p>
<p>You'll see the same suspects as before. Alternatively, if you had created a year variable (as you'd need to if you actually wanted to use this data) you could have included it in your <span class="InputCode">duplicates report</span> and <span class="InputCode">bysort</span> commands and then the expected result would be one observation per id/year combination.</p><!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>When you're starting out, it's best to break things up into little pieces. So start with the first component of cost, $1.50 per pound of weight:</p>
<p class="InputCode">gen cost=1.5*weight</p>
<p>Next add the $0.25 per pound to ship for foreign cars:</p>
<p class="InputCode">replace cost=cost+.25*weight if foreign</p>
<p>And finally the $100 for cars with a <span class="InputCode">rep78</span> of 5:</p>
<p class="InputCode">replace cost=cost+100 if rep78==5</p>
<p>Then the profit is price minus cost:</p>
<p class="InputCode">gen profit=price-cost</p>
<p>But once you're confident of what you're doing you can make it much more compact:</p>
<p class="InputCode">gen profit2=price-(1.5*weight + .25*weight*foreign + 100*(rep78==5))</p>
<p>This relies on two tricks: that true/false is equivalent to one/zero, and that adding something multiplied by zero is equivalent to not adding it. Thus <span class="InputCode">.25*weight</span> is only added for foreign cars, and 100 is only added for cars where <span class="InputCode">rep78==5</span>.</p>
<p>You can verify that these commands are equivalent with:</p>
<p class="InputCode">assert profit==profit2</p>
<p>Complete do file:</p>
<p class="InputCode">clear all<br/>
                  set more off<br/>
                  capture log close<br/>
                  log using data_ex1.log, replace<br/>
                  use auto<br/>
<br/>
gen cost=1.5*weight<br/>
replace cost=cost+.25*weight if foreign<br/>
replace cost=cost+100 if rep78==5<br/>
gen profit=price-cost<br/>
<br/>
gen profit2=price-(1.5*weight + .25*weight*foreign + 100*(rep78==5))<br/>
assert profit==profit2<br/>
list make profit*
<br/>
<br/>
log close
<br/>
</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>To find the amount of time that has passed between any two dates you subtract them, but the years have to be converted to months by multiplying by twelve:</p>
<p class="InputCode">gen ageInMonths=(interviewYear-birthYear)*12 + (interviewMonth-birthMonth)</p>
<p>To find  age in whole years you need to divide by 12 and drop the fractional part. Stata will drop the fractional part automatically if you declare your new variable to be an <span class="InputCode">int</span>:</p>
<p class="InputCode">gen int age=ageInMonths/12</p>
<p>Complete do file:</p>
<p class="InputCode">clear all<br/>
                  set more off<br/>
                  capture log close<br/>
                  log using data_ex2.log, replace<br/>
                  use interviews<br/>
<br/>
  gen ageInMonths=(interviewYear-birthYear)*12 + (interviewMonth-birthMonth)<br/>
  gen int age=ageInMonths/12<br/>
  list
  <br/>
<br/>
                  log close <br/>
</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>The easy way to find the manufacturer is to use the <span class="InputCode">word()</span> function. It takes two arguments: the first is the string you want to extract a word from and the second is the number of the word you want. Since the manufacturer is always the first word of <span class="InputCode">make</span>, all you need is:</p>
<p class="InputCode">gen manufacturer=word(make,1)</p>
<p>There are several ways to extract <span class="InputCode">manufacturer</span> from <span class="InputCode">make</span>, some of which will work in a wider variety of situations.</p>
<p> One alternative is the oddly-named <span class="InputCode">egen</span> function <span class="InputCode">ends()</span>, with the <span class="InputCode">head</span> option. This will give you the first word of the string:</p>
<p class="InputCode">egen manufacturer2=ends(make), head</p>
<p>The <span class="InputCode">last</span> option would give you the last word, and the <span class="InputCode">tail</span> option would give you all but the first word. But the advantage of <span class="InputCode">ends()</span> over <span class="InputCode">word() </span>is that <span class="InputCode">ends()</span> has a <span class="InputCode">punct()</span> option which lets you divide strings into "words" based on characters other than spaces. Thus if you had a variable <span class="InputCode">fullname</span> containing <span class="InputCode">Dimond,Russell</span> you could do:</p>
<p class="InputCode">egen firstname=ends(fullname), punc(",") last<br/>
                egen lastname=ends(fullname), punc(",") head                </p>
<p>The most flexible method uses  <span class="InputCode">substr()</span>, but, as usual, flexibility implies complexity. <span class="InputCode">substr()</span> takes three arguments: the string you want to extract a substring from, the location where the substring should start, and the number of characters it should contain. Since we want the first part of  <span class="InputCode">make</span>, the starting location is just 1. The trick is that the length of each manufacturer is different. However, we know we've hit the end of the manufacturer when we see a space, and we can use the <span class="InputCode">strpos()</span> function to find the space. <span class="InputCode">strpos()</span> takes two strings as arguments and returns the location of the second string within the first--or zero if the second string is not in the first, which can also be useful. Thus to find manufacturer using <span class="InputCode">substr()</span> you would type:</p>
<p class="InputCode">gen manufacturer3=substr(make,1,strpos(make," "))</p>
<p>This gives you one missing value, the car whose <span class="InputCode">make</span> is just <span class="InputCode">Subaru</span>. While <span class="InputCode">word()</span> and <span class="InputCode">ends()</span> interpreted <span class="InputCode">Subaru</span> as the first word, it confused our <span class="InputCode">substr()</span> method: <span class="InputCode">strpos(make," ")</span> returns zero because <span class="InputCode">Subaru</span> doesn't contain a space, and when <span class="InputCode">substr()</span> is asked to make a substring of zero length it responds with missing.</p>
<p>The moral of this story: use <span class="InputCode">word()</span> if you can, because it's so easy. But if you need to extract data from a complex piece of text (say, the HTML source code of a web page) <span class="InputCode">substr()</span> and <span class="InputCode">strpos()</span> may be your only hope.</p>
<p>Complete do file:</p>
<p class="InputCode">clear all<br/>
                  set more off<br/>
                  capture log close<br/>
                  log using data_ex3.log, replace<br/>
                  use auto<br/>
<br/>
                  gen manufacturer=word(make,1)<br/>
                  list make manufacturer                  <br/>
<br/>
                  log close
<br/>
</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Since the state ID becomes the hundreds place of the new ID, just multiply it by 100 and add the county ID:</p>
<p class="InputCode">gen id1=state*100+county</p>
<p>Making string versions of the variables is easy:</p>
<p class="InputCode">gen stateString=string(state)<br/>
                  gen countyString=string(county)</p>
<p>Combining them is also easy. With strings, tacking one string to the end of the other is just addition:</p>
<p class="InputCode">gen id2=stateString+countyString</p>
<p>Unfortunately it's also wrong. Do a list and you'll note that the leading zero you were asked to create is not there. Even worse, the first ten counties don't have a zero after the state, so you can't tell state 1, county 11 from state 11, county 1 (both have an <span class="InputCode">id2</span> of <span class="InputCode">111</span>). </p>
<p>One way to fix this problem is to detect cases that need leading zeros and add them:</p>
<p class="InputCode">replace stateString="0"+stateString if state&lt;10<br/>
                replace countyString="0"+countyString if county&lt;10</p>
<p>Then you can combine the modified strings and get the proper result:</p>
<p class="InputCode">gen id3=stateString+countyString</p>
<p>A more elegant method gives the <span class="InputCode">string()</span> function a second argument, the format the number should be put in when converting it to a string. We won't discuss formats, but since it is a better solution here are the commands:</p>
<p class="InputCode">gen goodStateString=string(state,"%02.0f")<br/>
                gen goodCountyString=string(county,"%02.0f")                </p>
<p>Type <span class="InputCode">help format</span> if you'd like to learn more about them.</p>
<p>Complete do file:</p>
<p class="InputCode">clear all<br/>
                  set more off<br/>
                  capture log close<br/>
                  log using data_ex4.log, replace<br/>
                  use statecounty<br/>
<br/>
                  gen id1=state*100+county<br/>
<br/>
gen stateString=string(state)<br/>
gen countyString=string(county)<br/>
gen id2=stateString+countyString<br/>
list if state==1<br/>
<br/>
replace stateString="0"+stateString if state&lt;10<br/>
replace countyString="0"+countyString if county&lt;10<br/>
gen id3=stateString+countyString<br/>
list
if state==1<br/>
<br/>
                  log close<br/>
</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Stata has no objection to value labels that happen to start with the number they label and then add some description. There's also no rule that says every value has to have a label—if a value has no label the value itself will be listed as usual. Thus the following will define the label you need:</p>
<p class="InputCode">label define mpgLabel 12 "12 (Lowest MPG)" 41 "41 (Highest MPG)"</p>
<p>Now apply that mapping to the values of the <span class="InputCode">mpg</span> variable:</p>
<p class="InputCode">label values mpg mpgLabel</p>
<p>Do a list to see the results:</p>
<p class="InputCode">l make mpg</p>
<p>Complete do file:</p>
<p class="InputCode">clear all<br/>
set more off<br/>
capture log close<br/>
log using data_ex1.log, replace<br/>
use auto<br/>
<br/>
label define mpgLabel 12 "12 (Lowest MPG)" 41 "41 (Highest MPG)"<br/>
label values mpg mpgLabel<br/>
l make mpg<br/>
<br/>
log close</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Given the <span class="InputCode">numChildren</span> variable, all you need to do to identify childless households is look for households where the number of children is zero:</p>
<p class="InputCode">gen childless=(numChildren==0)</p>
<p>There's no need to use <em>by</em> because this command doesn't look across observations in any way. You had to look across the observations in the household to construct <span class="InputCode">numChildren</span>, but at this point each observation has its own copy of the result.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Your first task is to find the age of the youngest adult in each household. You can do that with:</p>
<p class="InputCode">by household: egen ageYoungestAdult=min(age) if age&gt;=18</p>
<p>Next, find the age of the oldest child:</p>
<p class="InputCode">by household: egen ageFirstChild=max(age) if rel2head==3</p>
<p>(Yes, <span class="InputCode">if age&lt;18</span> would work too for this data. In real data sets you'd have to consider the possibility of adult children still living at home, and instead of "youngest adult" you'd have to think about "youngest parent," which could be hard to identify. But never mind all that for now.)</p>
<p>In principle, all you need is <span class="InputCode">ageYoungestAdult</span>-<span class="InputCode">ageFirstChild</span>. The trouble is, the first is only defined for adults and the second is only defined for children. Thus some result spreading is required.</p>
<p class="InputCode">by household: egen ageYoungestAdult2=mean(ageYoungestAdult)<br/>
                by household: egen ageFirstChild2=max(ageFirstChild)</p>
<p>The second command gives three missing values: the three people living in households with no children. Now we're ready to find the answer:</p>
<p class="InputCode">gen ageYoungestAdultAtFirstBirth= ageYoungestAdult2-ageFirstChild2</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Begin by  thinking carefully about what defines a single-parent household and a two-parent household. First, in order to have parents at all a household must have at least one child. Second, a two-parent household must have a spouse, while a single-parent household must not have a spouse. (This assumes that every household has a head, which is the case here but worth checking in real-world data. Real-world data will also include partners that are not spouses.)</p>
<p>If you've been following along, your do file will already have code to create a variable called <span class="InputCode">hasChildren</span>. If not, create it with:</p>
<p class="InputCode">gen child=(age&lt;18)<br/>
by household: egen hasChildren=max(child)</p>
<p>Next we need a variable for whether a household has a spouse or not. Recall that spouses have a 2 for <span class="InputCode">rel2head</span>. Thus we can type:</p>
<p class="InputCode">by household: egen hasSpouse=max(rel2head==2)</p>
<p>This command finds the maximum not of a variable, but of the expression <span class="InputCode">rel2head==2</span>. That expression will be 1 (true) for spouses and 0 (false) for everyone else. Thus its maximum value over a household will be 1 if there is a spouse in the household and 0 otherwise.                </p>
<p>Now you're ready to identify the single-parent and two-parent households. </p>
<p class="InputCode">gen singleParent=hasChildren &amp; !hasSpouse<br/>
                gen twoParent=hasChildren &amp; hasSpouse<br/>
</p>
<p>There's no need for <span class="InputCode">by household:</span> because neither command looks across observations.</p>
<p>With those indicators in hand, you're ready to look at incomes. Again, if you were following along you already have code to create a <span class="InputCode">householdIncome</span> variable, but if not create it with:</p>
<p class="InputCode">by household: egen householdIncome=total(income)</p>
<p>Now you can compare mean household incomes with:</p>
<p class="InputCode">sum householdIncome if singleParent<br/>
                sum householdIncome if twoParent</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="InputCode">by household: egen numHeads=total(rel2head==1)<br/>
                  assert numHeads==1
                </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="InputCode">sort household age<br/>
                  by household: gen ageVaries=age[1]!=age[_N]<br/>
                  browse if ageVaries</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Without the <span class="InputCode">by person:</span>, Stata won't know when the data for one person ends and the next person begins. Thus it will compare the first month for any given person with the last month of the person before, and only if their unemployment statuses differ will it mark it as the beginning of a new spell. The result could be a "spell" that is shared by two people!</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Since the months are still in order, to get information about the first and last month of each spell we just need to work <span class="InputCode">by person spell:</span> and then look at observations <span class="InputCode">[1]</span> and <span class="InputCode">[_N]</span>. Thus:</p>
<p class="InputCode">by person spell: gen startMonth=month[1]<br/>
                by person spell: gen startYear=year[1]<br/>
                by person spell: gen endMonth=month[_N]<br/>
                by person spell: gen endYear=year[_N]                <br/>
</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>It's tempting to do something like:</p>
<p class="InputCode">by person: egen meanDuration=mean(duration)</p>
<p>But this would be the mean across months, not spells. (For example, person five has two spells, one 18 months long and one 2 months long. The mean duration we want is 10. However, the mean across months is 16.4 since the 18 months with duration 18 count for more than the 2 months with duration 2.)</p>
<p>One easy way to get a mean across spells is to only consider one observation per spell. Since the <span class="InputCode">start</span> variable is one for just the first observation in each spell, you can do this with:</p>
<p class="InputCode">by person: egen meanDuration=mean(duration) if start</p>
<p>Depending on what you needed to do with this variable you might have to do some result spreading.</p>
<p>If you didn't have start defined already, you could create it with something like:</p>
<p class="InputCode">by person spell: gen start=(_n==1)</p>
<p>However, there's a egen function called <span class="InputCode">tag()</span> that does the same thing:</p>
<p class="InputCode">egen start=tag(person spell)</p>
<p>The <span class="InputCode">tag()</span> function gives a one to the first observation in each group defined by the variables it's given and a zero to all others. That first observation is thus "tagged" as the one to be included in calculations.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="InputCode">replace peerGroup=students+students[_n+1] if grade==1<br/>
                replace peerGroup=students[_n-1]+students if grade==12</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Consider grade twelve of school one and grade one of school two. If you specify <span class="InputCode">by school:</span> Stata understands that the first is the end of a school's data and the second is the beginning of a different school's data. But without <span class="InputCode">by school:</span> Stata sees them as adjacent observations. Thus the command:</p>
<p class="InputCode">gen peerGroup=students+students[_n+1]+students[_n-1]</p>
<p>would count the first graders in school two among the peers of the twelfth graders in school one.</p>
<p>This code is written on the assumption that adjacent observations represent "adjacent" grades. If some schools do not have some observations for some grades, that assumption is violated. For example, if a school did not have an observation for grade three, <span class="InputCode">students[_n+1]</span> for the second graders would be the fourth graders, and thus the fourth graders would be considered peers of the second graders.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>This data set contains data about three countries over three years. The level two unit is thus a country, and the level one unit is a country-year combination. The level two variables are <span class="InputCode">country</span> and <span class="InputCode">area</span>, while the level one variables are <span class="InputCode">year</span>, <span class="InputCode">pop</span> and <span class="InputCode">cgdp</span>. <span class="InputCode">country</span> is the level two identifier and <span class="InputCode">year</span> the level one identifier. Note that countries do occasionally change in area. If your panel included such an event (say, the United States in 1803) then you'd have to treat <span class="InputCode">area</span> as a level one variable throughout.                </p>
<p>To reshape this data to wide form the command is:</p>
<p class="InputCode">reshape wide pop cgdp, i(country) j(year)</p>
<p>To go back to long:</p>
<p class="InputCode">reshape long pop cgdp, i(country) j(year)</p>
<p>To collapse to a data set of countries with variables <span class="InputCode">meanPop</span> and <span class="InputCode">maxCGDP</span>:</p>
<p class="InputCode">collapse meanPop=pop (max) maxCGDP=cgdp, by(country)</p>
<p>Note that <span class="InputCode">area</span> disappeared. If you wanted to keep <span class="InputCode">area</span> (which you could, since it's a country-level variable) you'd need to add it to the command, probably using the <span class="InputCode">(first)</span> statistic.</p>
<p></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>The regression command is:</p>
<p class="InputCode">reg price c.weight##c.mpg</p>
<p>This includes <span class="InputCode">weight</span> and <span class="InputCode">mpg</span> as well as their product by treating them as main effects in the interaction between <span class="InputCode">weight</span> and <span class="InputCode">mpg</span>.</p>
<p>If you forget the <span class="InputCode">c.</span> in front of <span class="InputCode">weight</span> and <span class="InputCode">mpg</span>, Stata will assume they're both categorical variables and try to form an indicator for each possible combination of them. Fortunately the resulting error message gives several possible solutions, and the third one is correct.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>First review the results of the model including both main and interaction effects:</p>
<p class="InputCode">reg price c.weight##c.mpg</p>
<p>The coefficients on <span class="InputCode">weight</span> and <span class="InputCode">mpg</span> are both significant and positive, but the coefficient on their product is significant and negative.</p>
<p>To run the model without main effects, replace <span class="InputCode">##</span> with <span class="InputCode">#</span>:</p>
<p class="InputCode">reg price c.weight#c.mpg</p>
<p>First note that the R-squared of this model is essentially zero, as is its F-statistic: this model can't predict its way out of a paper bag. In addition, the coefficient on the product is now zero—and the standard error is quite small. What happened?</p>
<p>Since <span class="InputCode">c.weight#c.mpg</span> is made up of <span class="InputCode">weight</span> and <span class="InputCode">mpg</span>, you can't change it without changing one or both of its components. The first model suggests this is a complicated affair: increasing <span class="InputCode">weight</span> and/or <span class="InputCode">mpg</span> increases the expected <span class="InputCode">price</span> through its main effect, but decreases the expected <span class="InputCode">price</span> through the product. The second model, since it does not include the main effects, has to attribute the entire change to the effect of the product, and the combined effect turns out to be zero.</p>
<p>Having main and interaction effects cancel each other out so precisely is unusual. But it's even more unusual for main effects not to matter at all. If you leave them out, the model will have to attribute their effects to the interaction term. This might increase its coefficient or decrease it, but the important thing is that it will be wrong. The bottom line is that you should always include the main effects whenever you include an interaction.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="InputCode">sum weight if mpg&gt;25</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>First create an indicator variable for whether a car has <span class="InputCode">mpg</span>&gt;25:</p>
<p class="InputCode">gen highMPG=mpg&gt;25</p>
<p>Then test whether the subsample with <span class="InputCode">highMPG</span>=1 has a different mean from the subsample with <span class="InputCode">highMPG</span>=0:</p>
<p class="InputCode">ttest weight, by(highMPG)</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Ignoring the fact that <span class="InputCode">rep78</span> is a categorical variable gives:</p>
<p class="InputCode">reg price weight foreign rep78</p>
<p>The coefficient on <span class="InputCode">rep78</span> is about <span class="InputCode">150</span>, though with a 95% confidence interval of <span class="InputCode">-492</span> to <span class="InputCode">792</span> it's statistically indistuinguishable from zero.</p>
<p>That suggests that the contribution of <span class="InputCode">rep78</span> to a car's price is <span class="InputCode">150</span> times its value of <span class="InputCode">rep78</span>, i.e. for cars with a <span class="InputCode">rep78</span> of one it contrubutes <span class="InputCode">150</span>, for cars with a <span class="InputCode">rep78</span> of two it contributes <span class="InputCode">300</span>, etc. </p>
<p>Now run the regression with <span class="InputCode">i.rep78</span>:</p>
<p class="InputCode">reg price weight foreign i.rep78</p>
<p>The coefficient on each value of <span class="InputCode">i.rep78</span> represents its change from the base level of one. If the first model is right, we'd thus expect the coefficient on <span class="InputCode">2.rep78</span> to be <span class="InputCode">150</span> (a <span class="InputCode">rep78</span> of two contributes <span class="InputCode">300</span>, but we have to subtract the <span class="InputCode">150</span> contributed by a <span class="InputCode">rep78</span> of one), <span class="InputCode">3.rep78</span> to be <span class="InputCode">300</span>, etc. We can test the hypothesis that all those values are correct with:</p>
<p class="InputCode">test (2.rep78=150) (3.rep78=300) (4.rep78=450) (5.rep78==600)</p>
<p>The result does not reject this hypothesis, however that probably has more to do with the fact that we can't say much of anything about the effect of <span class="InputCode">rep78</span> than it actually being linear.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>You can find the values of the quartiles by adding the details option to sum:</p>
<p class="InputCode">sum mpg, d</p>
<p>Now look at the <em>r vector</em> to see where the numbers you want are stored:</p>
<p class="InputCode">return list</p>
<p>You numbers you want are called <span class="InputCode">r(p75)</span> and <span class="InputCode">r(p25)</span>. To calculate their difference, type:</p>
<p class="InputCode">gen iqr=r(p75)-r(p25)</p>
<p>You can see the value by typing:</p>
<p class="InputCode">tab iqr</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>If you do <span class="InputCode">by make:</span>, and <span class="InputCode">make</span> indeed uniquely identifies a car, then each <em>by</em> group will have exactly one car in it. That is in fact the case:</p>
<p class="InputCode">bysort make: l make</p>
<p>If there were two cars with the same value of <span class="InputCode">make</span> they'd be in the same <em>by</em> group. Thus in that group (and only that group, assuming no other duplicates) there would be an observation two--we'll take advantage of that fact in <a href="https://ssc.wisc.edu/sscc/pubs/sfr-groups.htm">Working with Groups</a>.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>The cars I should look at are:</p>
<pre>     +--------------------------------------+<br/>     | make             price   mpg   rep78 |<br/>     |--------------------------------------|<br/>  3. | AMC Spirit       3,799    22       . |<br/> 14. | Chev. Chevette   3,299    29       3 |<br/> 18. | Chev. Monza      3,667    24       2 |<br/> 19. | Chev. Nova       3,955    19       3 |<br/> 20. | Dodge Colt       3,984    30       5 |<br/>     |--------------------------------------|<br/> 24. | Ford Fiesta      4,389    28       4 |<br/> 29. | Merc. Bobcat     3,829    22       4 |<br/> 34. | Merc. Zephyr     3,291    20       3 |<br/> 43. | Plym. Champ      4,425    34       5 |<br/> 57. | Datsun 210       4,589    35       5 |<br/>     |--------------------------------------|<br/> 62. | Honda Civic      4,499    28       4 |<br/> 63. | Mazda GLC        3,995    30       4 |<br/> 65. | Renault Le Car   3,895    26       3 |<br/> 66. | Subaru           3,798    35       5 |<br/> 68. | Toyota Corolla   3,748    31       5 |<br/>     +--------------------------------------+
</pre>
<p>I can generate this list with the following command:</p>
<p class="InputCode">l make price mpg rep78 if price&lt;4000 | (price&lt;5000 &amp; rep78&gt;3 &amp; rep78&lt;. &amp; mpg&gt;25)</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>The cars it should ship are:</p>
<pre>
     +----------------------------------------------------+
     | make            foreign   length   weight    price |
     |----------------------------------------------------|
 53. | Audi 5000       Foreign      189    2,830    9,690 |
 54. | Audi Fox        Foreign      174    2,070    6,295 |
 55. | BMW 320i        Foreign      177    2,650    9,735 |
 56. | Datsun 200      Foreign      170    2,370    6,229 |
 58. | Datsun 510      Foreign      170    2,280    5,079 |
     |----------------------------------------------------|
 59. | Datsun 810      Foreign      184    2,750    8,129 |
 61. | Honda Accord    Foreign      172    2,240    5,799 |
 64. | Peugeot 604     Foreign      192    3,420   12,990 |
 67. | Toyota Celica   Foreign      174    2,410    5,899 |
 69. | Toyota Corona   Foreign      175    2,670    5,719 |
     |----------------------------------------------------|
 70. | VW Dasher       Foreign      172    2,160    7,140 |
 71. | VW Diesel       Foreign      155    2,040    5,397 |
 73. | VW Scirocco     Foreign      156    1,990    6,850 |
 74. | Volvo 260       Foreign      193    3,170   11,995 |
     +----------------------------------------------------+
</pre>
<p>This list was generated with the following command:</p>
<p class="InputCode">l make foreign length weight price if foreign &amp; length&lt;=200 &amp; weight&lt;=4000 &amp; price&gt;=5000</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>First of all, the reason you get no output is that no observation fulfills the <em>if</em> condition. But how can that be, given that many cars get  25 miles per gallon or less?</p>
<p> The trouble is that, once you apply the proper order of operations, this condition has nothing to do with "25 miles per gallon or less." The original version,</p>
<p class="InputCode">l make mpg if !(mpg&gt;25)</p>
<p>first checks to see if <span class="InputCode">mpg</span> is greater than 25 or not, then reverses the result. But precedence rules say the not operator (<span class="InputCode">!</span>) is evaluated before the greater than operator (<span class="InputCode">&gt;</span>). Thus this version,</p>
<p class="InputCode">l make mpg if !mpg&gt;25</p>
<p>is actually equivalent to:</p>
<p class="InputCode">l make mpg if (!mpg)&gt;25</p>
<p>The quantity <span class="InputCode">!mpg</span> is evaluated first, using the rule "zero is false and anything else is true." Since <span class="InputCode">mpg</span> is never zero, <span class="InputCode">mpg</span> by itself is always true. That means <span class="InputCode">!mpg</span> is always false.</p>
<p> Stata then evaluates the greater than condition. False is zero, and zero is not greater than 25. Thus the final result is always false. Actually, it doesn't matter whether <span class="InputCode">!mpg</span> is true or false, since true (one) isn't greater than 25 either.</p>
<p>This particular example may be less confusing if you think like Stata: always use 1 and 0 instead of true and false, and think of the <span class="InputCode">!</span> and <span class="InputCode">&gt;</span> operators as functions. <span class="InputCode">!x</span> is defined as 1 if x=0 and 1 otherwise, and <span class="InputCode">x&gt;y</span> is defined as 1 if x&gt;y and 0 otherwise. But regardless of how you think about it, the moral of this story is to always use parentheses to control the order things are evaluated in.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>The most concise varlist that would include all the variables in any data set is simply a star, all by itself:</p>
<p class="InputCode">l *</p>
<p>Of course there's no point in using <span class="InputCode">*</span> with <span class="InputCode">list</span>, since that's what it does with no <em>varlist</em> at all. But you might use it with other commands.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Solution</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>The <em>varlist</em></p>
<p class="InputCode">x? x??</p>
<p>will select all variables that start with x and then contain either one or two additional characters. <span class="InputCode">x1</span> through <span class="InputCode">x20</span> fit this pattern but <span class="InputCode">xenophobia</span> does not.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Stata for Students is designed for undergraduate students taking methodology classes in the social sciences at UW-Madison, but it will be useful to students taking similar classes elsewhere or anyone looking for a basic introduction to Stata. Graduate students and other researchers, and those who hope to someday be graduate students or researchers, should start with <a href="https://ssc.wisc.edu/sscc/pubs/intro_stata/intro_stata1.htm">Introduction to Stata</a> and then read <a href="https://ssc.wisc.edu/sscc/pubs/dws/data_wrangling_stata1.htm">Data Wrangling in Stata</a>.</p>
<p>Stata for Students divided into short articles that cover a single subject. You should read all the articles in the <strong>Stata Basics</strong> section before you do anything else. We also recommend reading the articles in the <strong>Understanding Stata</strong> section, as they will help everything else make  sense and make you a more efficient Stata user. After that you can read just the articles that correspond to the material covered in your class.</p>
<p>You will learn more if you actually carry out the steps described in these articles. All of the articles include examples you can do yourself. They use a subsample from the 2014 General Social Survey, which you'll download by doing the example in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. (The <a href="http://gss.norc.org/">General Social Survey</a> (GSS) is a project of the independent research organization <a href="http://www.norc.org/">NORC</a> at the University of Chicago, with principal funding from the National Science Foundation.) If you have a  homework assignment to work on you may prefer to just read the articles and then immediately apply what you've learned to your assignment. In that case you can the ignore the specific instructions for the examples.</p>
<h2>Stata Basics</h2>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-where.htm">Where You Can Use Stata</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a></li>
</ul>
<h2>Understanding Stata</h2>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ui.htm">Stata's User Interface</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-data.htm">Stata Data Sets</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-syntax.htm">How Stata Commands Work</a><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ui.htm"></a></li>
</ul>
<h2>Other Topics</h2>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-comments.htm">Comments and Other Tools for Making Do Files Readable</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-vars.htm">Creating Variables and Labels</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-graphs.htm">Using Graphs</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-import.htm">Reading Data from a Spreadsheet or CSV File</a> </li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-qualtrics.htm">Downloading Data from Qualtrics and Importing it into Stata</a></li>
</ul>
<h2>Statistical Commands by Class</h2>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-soc357.htm">Sociology 357</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-soc360.htm">Sociology 360</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-econ310.htm">Economics 310</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-econ410.htm">Economics 410</a></li>
</ul>
<h2 id="topic">Statistical Commands by Topic                </h2>
<h3 id="desc">Descriptive Statistics</h3>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-describe.htm"><span class="InputCode">describe</span>: Information about a data set and what it contains</a></li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#oneway">Frequencies for a Single Categorical Variable</a></p>
<p>For a variable that describes  categories (like sex or race) rather than quantities (like income) frequencies tell you how many observations are in each category. These are examples of univariate statistics, or statistics that describe a single variable.</p>
<p>Categorical variables are also sometimes called factor variables. Indicator variables (also called binary or dummy variables) are just categorical variables with two categories. Frequency tables for a single variable are sometimes called one-way tables.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#sum">Summary Statistics for a Single Quantitative Variable</a></p>
<p>For a variable that describes quantities (like income) the mean tells you what the expected value of the variable is, and the standard deviation tells you how much it varies. However, the median and percentiles often give you a better sense of how the variable is distributed, especially for variables that are not symmetric (like income, which often has a few very high values). These are also univariate statistics.</p>
<p>Quantitative variables are often called continuous variables. Means are often called averages, and variance is just the standard deviation squared. The median is also the 50th percentile.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#twoway">Frequencies for Two Categorical Variables</a></p>
<p>For two categorical variables, frequencies tell you how many observations fall in each combination of the two categorical variables (like black women or hispanic men) and can give you a sense of the relationship between the two variables. These are examples of bivariate statistics, or statistics that describe the joint distribution of the two variables.</p>
<p>Tables of frequencies for two variables are often called two-way tables, contingency tables, or crosstabs.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#tabsum">Summary Statistics for One Quantitative Variable over One Categorical Variable</a></p>
<p>For a  quantitative variable and a categorical variable, the mean value of the quantitative variable for those observations that fall in each category of the categorical variable can give you a sense of how the two variables are related. Of then the question of interest is whether the distribution of the quantitative variable is different for different categories. These are also examples of bivariate statistics.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#threeway">Frequencies for Three or More Categorical Variables</a></p>
<p>For three or more categorical variables, frequencies <a href="#threeway"></a>will tell you how many observations fall in each combination of the variables and give you a sense of their relationships just like they did with two categorical variables. These are examples of multivariate statistics.<br/>
</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#twoway_sum">Summary Statistics for One Quantitative Variable over Two or More Categorical Variables</a></p>
<p>For a quantitative variable and two or more categorical variables, the  the mean value of the quantitative variable for those observations in each combination of the categorical variables can give you a sense of how the variables are related just like they did with a quantitative variable and one categorical variable. These are examples of multivariate statistics.</p>
</li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-cor.htm"><span class="InputCode">correlate</span>: Correlations between variables</a></li>
</ul>
<h3>Estimates and Hypothesis Tests</h3>
<ul>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ci.htm">mean</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ci.htm"> or <span class="InputCode">ci mean</span>: Estimate the population mean and its confidence interval for a variable</a></li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ttest.htm">ttest</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ttest.htm">: Test hypotheses about means</a></li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-prtest.htm">prtest</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-prtest.htm">: Test hypotheses about proportions</a></li>
</ul>
<h3 id="graphs">Graphs</h3>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-hist.htm"><span class="InputCode">histogram</span>: Graphical representation of a variable's distribution</a></li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-bargraph.htm">graph bar</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-bargraph.htm">: Bar graph representing summary statistics</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-scatter.htm"><span class="InputCode">scatter</span>: Scatterplot of two variables</a></li>
</ul>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Bar Graphs</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Bar graphs are a very useful tool for presenting summary statistics because the reader can instantly grasp the relationships between the various values. This is especially useful for non-technical audiences. In this article we'll discuss two simple bar graphs:</p>
<ul>
<li><a href="#mean">Mean of a Quantitative Variable Across a Categorical Variable</a></li>
<li><a href="#freq">Frequencies of a Categorical Variable</a></li>
</ul>
<p>You can build on what you learn here to create much more complex graphs.</p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">bargraph.do</span> in that folder that loads the GSS sample as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2 id="mean">Mean of a Quantitative Variable Across a Categorical Variable</h2>
<p>In the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#tabsum">Descriptive Statistics</a> section, one of the examples was:</p>
<p class="InputCode">tab class, sum(edu)</p>
<p>Which gives the following output:</p>
<pre class="InputCode"> SUBJECTIVE |
      CLASS |  Summary of HIGHEST YEAR OF SCHOOL
IDENTIFICAT |              COMPLETED
        ION |        Mean   Std. Dev.       Freq.
------------+------------------------------------
  LOWER CLA |        11.5   3.5630959          24
  WORKING C |   12.570248   3.1247038         121
  MIDDLE CL |    14.71134   3.0171688          97
  UPPER CLA |        15.2   3.4253954          10
------------+------------------------------------
      Total |   13.396825   3.3473052         252</pre>
<p>A few seconds spent examining this table will show that mean education increases with subjective class identification.</p>
<p>To make a bar graph of the same information, use the command <span class="InputCode">graph bar</span> followed by the quantitative variable whose means you want to see (in this case, <span class="InputCode">edu</span>). The variable that defines the categories (in this case, <span class="InputCode">class</span>) goes in an option called <span class="InputCode">over</span>:</p>
<p class="InputCode">graph bar edu, over(class)<br/>
</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/bar1.png" width="600"/></p>
<p>Now the relationship is immediately obvious.</p>
<p>Many people prefer horizontal bar graphs because they better match the eye's natural left-to-right, top-to-bottom reading pattern (western eyes, anyway). They're especially good if the category names are long. You can convert this graph to a horizontal bar graph by changing the command from <span class="InputCode">graph bar</span> to <span class="InputCode">graph hbar</span>:</p>
<p class="InputCode">graph hbar edu, over(class)</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/bar2.png" width="600"/></p>
<p>While this graph makes it easy to see the relationship between the two variables, it's hard to read off the values of the means. You can fix that, at the price of adding some clutter to your graph, by putting a label on each bar that gives the height of the bar. This is done by adding the  <span class="InputCode">blabel</span> (bar label) option with <span class="InputCode">bar</span> (bar height) in the parentheses:</p>
<p class="InputCode">graph hbar edu, over(class) blabel(bar)</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/bar3.png" width="600"/></p>
<p>Some of the labels have more significant digits than are useful. You can tell Stata how to format the labels by putting a <span class="InputCode">format</span> option inside the <span class="InputCode">blabel</span> option with the format you want. The format <span class="InputCode">%9.1f</span> means "format the number such that it fits in no more than nine total spaces (more than enough) with one digit after the decimal point, following the general rules for floating point numbers" but you don't really need to memorize all that.</p>
<p class="InputCode">graph hbar edu, over(class) blabel(bar, format(%9.1f))</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/bar4.png" width="600"/></p>
<h2 id="freq">Frequencies of a Categorical Variable</h2>
<p>Creating a bar graph to show the frequencies of a categorical variable is done in exactly the same way; just replace the first variable with <span class="InputCode">(count)</span>.</p>
<p class="InputCode">graph bar (count), over(class)</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/bar5.png" width="600"/></p>
<p>Note how this is essentially a histogram, just with space between the bars and better labels (compare with <span class="InputCode">histogram class, discrete frequency</span>).</p>
<p>All the tools you learned in the previous section can apply here as well (but no need to worry about decimal places with frequencies).</p>
<p class="InputCode">graph hbar (count), over(class) blabel(bar)</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/bar6.png" width="600"/></p>
<p>There is much more that can be done with bar graphs, such as changing labels and titles, and working with more than one categorical variable. If you're interested, click <span class="MenuOutput">Graphics</span>, <span class="MenuOutput">Bar chart</span> in Stata, and start experimenting.</p>
<h2 id="dofile">Complete Do File</h2>
<p>The following is a complete do file for this section:</p>
<p class="InputCode">capture log close<br/>
log using bargraph.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
tab class, sum(edu)<br/>
<br/>
graph bar edu, over(class)<br/>
graph hbar edu, over(class)<br/>
<br/>
graph hbar edu, over(class) blabel(bar)<br/>
 graph hbar edu, over(class) blabel(bar, format(%9.1f))<br/>
<br/>
graph bar (count), over(class)<br/>
graph hbar (count), over(class) blabel(bar)<br/>
<br/>
log close</p><!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/sfs/bar1.png, https://ssc.wisc.edu/sscc/pubs/sfs/bar2.png, https://ssc.wisc.edu/sscc/pubs/sfs/bar3.png, https://ssc.wisc.edu/sscc/pubs/sfs/bar4.png, https://ssc.wisc.edu/sscc/pubs/sfs/bar5.png, https://ssc.wisc.edu/sscc/pubs/sfs/bar6.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Means and Confidence Intervals</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>In principle, estimating the mean value of a variable in a population and calculating the mean value of a variable in a sample are very different tasks. In practice, this distinction is obscured by the fact that most of the time the sample mean is the best estimate for the population mean. In this section we'll discuss two commands that estimate the mean value of a variable for a population and give you a 95% confidence interval for that estimate.</p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">ci.do</span> in that folder that loads the GSS sample as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2>Mean in a Sample</h2>
<p>The <span class="InputCode">summarize</span> command gives you the sample mean, as described in the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#sum">Descriptive Statistics</a> section:</p>
<p class="InputCode">sum educ</p>
<p>Produces:</p>
<pre class="InputCode">    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        educ |        254    13.38583    3.336343          0         20</pre>
<h2>Mean in a Population</h2>
<p>The <span class="InputCode">mean</span> command estimates the population mean:</p>
<p class="InputCode">mean educ</p>
<p>Produces:<br/>
</p>
<pre class="InputCode">Mean estimation                   Number of obs   =        254

--------------------------------------------------------------
             |       Mean   Std. Err.     [95% Conf. Interval]
-------------+------------------------------------------------
        educ |   13.38583   .2093408      12.97355     13.7981
--------------------------------------------------------------</pre>
<p>Note how the estimated mean is exactly the same as that produced by <span class="InputCode">sum</span>. However, <span class="InputCode">mean</span> gives you a 95% confidence interval for that estimate.</p>
<p>You can get the  same results using the <span class="InputCode">ci</span> (confidence interval) command while specifying that you want the mean:</p>
<p class="InputCode">ci mean educ</p>
<p>This produces:</p>
<pre class="InputCode">    Variable |        Obs        Mean    Std. Err.       [95% Conf. Interval]
-------------+---------------------------------------------------------------
        educ |        254    13.38583    .2093408        12.97355     13.7981</pre>
<p>The  <span class="InputCode">mean</span> and <span class="InputCode">ci</span> commands can do a variety of other things, but for this purpose they produce the exact same results so which you use is purely a matter of taste—most likely your instructor's taste.</p>
<h2>Complete Do File</h2>
<p>The following is a complete do file for this section.</p>
<p class="InputCode">capture log close<br/>
log using ci.log, replace<br>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
sum educ<br/>
mean educ<br/>
ci mean educ<br/>
<br/>
log close </br></p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Comments and Other Readability Tools for Do Files</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Do files need to be readable by humans as well as Stata. In this article we'll talk about a few tools that can make it much easier for humans, like yourself, to read your do files.</p>
<h2>Blank Lines</h2>
<p>Stata doesn't care about blank lines in your code, but they can make it  easier for you to read. Put blank lines in between logical sections of your code, just like paragraphs in regular text.</p>
<p>Compare this do file:</p>
<p class="InputCode">                  capture log close<br/>
                  log using example1.log, replace<br/>
                  clear all<br/>
                  set more off<br/>
                  use gss_sample<br/>
                  sum age<br/>
                  log close<br/>
</p>
<p>To this one:</p>
<p class="InputCode">capture log close<br/>
                  log using example1.log, replace<br/>
<br/>
                  clear all<br/>
                  set more off<br/>
<br/>
                  use gss_sample<br/>
<br/>
                  sum age<br/>
<br/>
                log close</p>
<h2>Breaking up Long Lines</h2>
<p>Normally a do file has one command per line—in fact Stata uses the end of the line to know when the command is complete. However, if you put three slashes at the end of a line (<span class="InputCode">///</span>) then the command can continue on the next line. Use this to make long lines more readable. Graph commands can get very long very quickly:</p>
<p class="InputCode">graph hbar, over(life) blabel(bar, format(%5.1f)) ytitle(% of Respondents) title(Life is...) note(N=181)</p>
<p>This will be easier to read if you turn it into:</p>
<p class="InputCode">graph hbar, over(life) blabel(bar, format(%5.1f)) ///<br/>
<span class="indent3">                ytitle(% of Respondents) title(Life is...) note(N=181)</span></p>
<p>Indenting the second line makes it visually obvious that it's part of the previous line.</p>
<h2>Comments</h2>
<p>Comments are bits of text Stata will ignore. You can use them to explain your do file to other readers, or for notes to yourself. Your instructor might ask you to put your name in a comment so it appears in your log file.</p>
<p>Two slashes (<span class="InputCode">//</span>) means "the rest of this line is a comment." Alternatively, you can start a comment with <span class="InputCode">/*</span> and then it will continue until you type <span class="InputCode">*/</span>. Here are some examples of ways to use comments:</p>
<p class="InputCode">/* Create a set of indicator variables
for whether the respondent<br/>
answered the scientific knowledge questions correctly. */<br/>
<br/>
 gen bigbang_right=(bigbang==1) if bigbang&lt;.<br/>
gen electron_right=(electron==1) if electron&lt;.<br/>
// Correct answer for laser is 2, not 1<br/>
gen laser_right=(laser==2) if laser&lt;. </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Correlations</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section</em>.</p>
<p>                Correlations are a measure of how strongly related  two quantitative variables are. It can only perfectly measure linear relationships, but a linear relationship will serve as a first approximation to many other kinds of relationships. You can calculate correlations for categorical variables and the results you get will sometimes point you in the right direction, but there are <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm">better ways to describe relationships involving categorical variables</a>.</p>
<p>Correlation coefficients range from -1 to 1. A positive correlation coefficient means the two variables tend to move together: an observation which has a high value for one variable is likely to have a high variable for the other, and vice versa. The larger the coefficient the stronger the relationship. A negative correlation coefficient means they tend to move in opposite directions: observations with a high value for one variable are likely to have a low value for the other. Variables which are independent will have a correlation of zero, but variables which are related but not in a linear way can also have a correlation of zero.</p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">cor.do</span> in that folder that loads the GSS sample as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2>Calculating Correlations</h2>
<p>The <span class="InputCode">correlate</span> command, often abbreviated <span class="InputCode">cor</span>, calculates correlations. List the variables you want correlations for after the command.</p>
<p class="InputCode">cor sei10 educ height weight</p>
<p>This gives you the correlations between the respondent's socioeconomic status, years of education, height, and weight. They are given in the form of a matrix, but only half of the matrix is shown because it is symmetric:</p>
<pre class="InputCode">(obs=114)

             |    sei10     educ   height   weight
-------------+------------------------------------
       sei10 |   1.0000
        educ |   0.6205   1.0000
      height |   0.2466   0.1868   1.0000
      weight |   0.1048  -0.0224   0.5282   1.0000</pre>
<p>This shows that the correlation between socioeconomic status and education is .6205, which is fairly high. The correlation between socioeconomic status and height, .2466, is weaker, but it's interesting that its positive at all. Keep in mind that <a href="https://xkcd.com/552/">correlation does not imply causation</a>. We cannot tell from these results whether high socioeconomic status causes people to grow taller or being tall causes people to have higher socioeconomic status (both can be true, and there's  evidence for both theories), or if something else causes people to both grow taller and have higher socioeconomic status.</p>
<p>The correlation between weight and education is essentially zero, but the negative number indicates that people with higher levels of education are likely to have lower levels of weight. It's just a very small effect. On the other hand, given that education and height are positively correlated and height and weight are strongly positively correlated, this raises the possibility that education and weight might have a stronger negative relationship if we could control for height. Multivariate regression  allows us to explore that possibility.</p>
<h2>Calculating Covariances</h2>
<p>If you want covariances instead, add the <span class="InputCode">cov</span> option:</p>
<p class="InputCode">cor sei10 educ height weight, cov</p>
<pre class="InputCode">(obs=114)

             |    sei10     educ   height   weight
-------------+------------------------------------
       sei10 |  510.103
        educ |  43.4237  9.59983
      height |  22.7511  2.36376  16.6884
      weight |  99.2858 -2.91236  90.4648  1757.94</pre>
<p>Covariances are not bound to fall in the range of -1 to 1, and depend on both how much the variables vary together and how much they vary overall. But the interpretations of positive and negative numbers are similar. The diagonal of the matrix gives you the variance of each variable, or its standard deviation squared.</p>
<h2>Complete Do File</h2>
<p class="InputCode">capture log close<br/>
log using cor.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
cor sei10 educ height weight<br/>
cor sei10 educ height weight, cov<br/>
<br/>
log close
<br/>
</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Stata Data Sets</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>In this section we'll take a look at two Stata data sets and see how they're put together.</p>
<p>Start up Stata, then type:</p>
<p class="InputCode">sysuse auto</p>
<p>This will load an example data set of 1978 cars that comes with Stata. Next either type:</p>
<p class="InputCode">browse</p>
<p>or click the button at the top that looks like a magnifying glass looking at a spreadsheet. This will open the data browser and let you look at the data set you've loaded.</p>
<table border="0" class="noBorder">
<tr>
<td>
<img alt="Stata data browser" height="400" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_auto.png" width="739"/><br/>
</td></tr></table>
<p>As you see, a Stata data set looks a lot like a spreadsheet, only more structured. The rows are always represent observations, though it's not always obvious what an "observation" is in a given data set. In this data set an observation represents a kind of car, but just looking at it you might wonder if it represented individual cars. Always be sure you know what an observation is in your data set.</p>
<p>The columns represent variables. There are two main kinds of variables: numbers and text (Stata generally calls text variables "strings"). In this data set the <span class="InputCode">make</span> variable is a text variable and all the others are numbers.</p>
<table border="0" class="noBorder">
<tr>
<td>
<img alt="Stata data browser" height="400" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_auto2.png" width="739"/>
</td></tr></table>
<p>What about the <span class="InputCode">foreign</span> variable? (Scroll right to see it.) It looks like text, but note that the text is blue instead of red. This tells us that it is a numeric variable that has value labels associated with it. The value labels tell Stata that 0 means "Domestic" (i.e. built in the United States) and 1 means "Foreign." You'll learn how to create value labels in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-vars.htm">Creating Variables</a>. Value labels are very useful, but they're only for your benefit: Stata commands that refer to the values of the <span class="InputCode">foreign</span> variable need to use the numbers 0 and 1, not the text "Domestic" or "Foreign."</p>
<p>By convention, 0 means false and 1 means true. Thus a 1 for a variable called <span class="InputCode">foreign</span> means "this car is foreign" and 0 means "this car is not foreign." If you always name binary variables after the "true" state then you almost don't need labels.</p>
<table border="0" class="noBorder">
<tr>
<td>
<img alt="Stata data browser" height="400" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_auto3.png" width="739"/>
</td></tr></table>
<p>Next note the value of <span class="InputCode">rep78</span> (car's repair record in 1978, on a five-point scale) for the third observation, the AMC Spirit. Repair record  data weren't available for this car, so Stata stores a period, or dot, meaning that the value is missing. Surveys often need to store not just that a value is missing, but why (for example, the question didn't apply vs. the respondent refused to answer) so Stata can also use <span class="InputCode">.a</span>, <span class="InputCode">.b</span>, <span class="InputCode">.c</span>, up through <span class="InputCode">.z</span> for missing. Then data set creators can assign the different kinds of missing different meanings.</p>
<p>Internally, Stata stores <span class="InputCode">.</span> as a really big number and <span class="InputCode">.a</span>, <span class="InputCode">.b</span>, etc. as numbers that are even bigger than that. Just think of them all as positive infinity. That means that conditions like <span class="InputCode">x&gt;3</span> will be true if x is missing. On the other hand, <span class="InputCode">x&lt;.</span> will be true for all actual values of x and false for all missing values of x, including <span class="InputCode">.a</span> through <span class="InputCode">.z</span>. You'll learn how to use conditions like this in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-syntax.htm">How Stata Commands Work</a>.                </p>
<h2>The 2014 General Social Survey</h2>
<p>Next let's look at the 2014 General Social Survey. Close Stata. Go to the folder you created in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a> and double-click on <span class="MenuOutput">gss_sample.dta</span>. Then either type <span class="InputCode">browse</span> or click on the browse button.</p>
<table border="0" class="noBorder">
<tr>
<td>
<img alt="Stata Data Browser" height="400" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_gss.png" width="739"/>
</td></tr></table>
<p> This is a much larger data set, in terms of both observations and variables—the Properties window in the bottom right has a Data section that will tell you just how big. Almost all the variables in this data set are in blue, meaning they have value labels. Some of these are like the value labels you saw before. For example, the <span class="InputCode">sex</span> variable has 1 labeled as "male" and 2 labeled as "female."</p>
<p> However, most of the value labels only label the missing values. For the <span class="InputCode">prestg10</span> variable (respondent's occupational prestige score in 2010), the values for the first eight observations really are just the numbers you see. For observation nine, the value <span class="InputCode">.a</span> has been labeled "IAP,DK,NA" (inapplicable, don't know, or no answer). Other variables use multiple kinds of missing and assign different labels to them: for <span class="InputCode">actlaw</span>, <span class="InputCode">.a</span> is "iap", <span class="InputCode">.b</span> is "CANT CHOOSE" [sic], and <span class="InputCode">.c</span> has no label assigned. The GSS, like many real-world data sets, has some missing values for a lot of variables and a lot of missing values for some variables.</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_auto.png, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_auto2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_auto3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/browse_gss.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Describe</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>The <span class="InputCode">describe</span> command gives you a variety of useful information about your data set.</p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">desc.do</span> in that folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a> and start with the following code:</p>
<p class="InputCode">capture log close<br/>
                  log using desc.log, replace<br/>
<br/>
                  clear all<br/>
                  set more off<br/>
<br/>
                  use gss_sample<br/>
<br/>
                  // do work here<br/>
<br/>
                  log close</p>
<p>If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2>Using <span class="InputCode">describe</span></h2>
<p>If you run describe all by itself, you'll get a description of all the variables in the data set:</p>
<p class="InputCode">describe</p>
<p>Produces the output:</p>
<pre class="InputCode">Contains data from U:\sfs\gss_sample.dta
  obs:           254                          
 vars:           895                          22 Jun 2016 15:52
 size:       277,622                          
-----------------------------------------------------------------------------------------------------------------
              storage   display    value
variable name   type    format     label      variable label
-----------------------------------------------------------------------------------------------------------------
prestg10        byte    %8.0g      LABA       Rs occupational prestige score (2010)
sppres10        byte    %8.0g      LABA       Spouse occupational prestige score (2010)
papres10        byte    %8.0g      LABA       Father's occupational prestige score (2010)
mapres10        byte    %8.0g      LABA       Mother's occupational prestige score (2010)
prestg105plus   byte    %8.0g      LABA       Rs occupational prestige score using threshold method (2010)
sppres105plus   byte    %8.0g      LABA       Spouse occupational prestige score using threshold method (2010)
papres105plus   byte    %8.0g      LABA       Father's occupational prestige score using threshold method (2010)
mapres105plus   byte    %8.0g      LABA       Mother's occupational prestige score using threshold method (2010)
sei10           double  %12.0g     LABB       R's socioeconomic index (2010)
spsei10         double  %12.0g     LABB       R's spouse's socioeconomic index (2010)
pasei10         double  %12.0g     LABB       R's father's socioeconomic index (2010)
masei10         double  %12.0g     LABB       R's mother's socioeconomic index (2010)
sei10educ       double  %12.0g     LABB       Percentage of some college educ in OCC10 based on ACS 2010
spsei10educ     double  %12.0g     LABB       Percentage of some college educ in SPOCC10 based on ACS 2010
pasei10educ     double  %12.0g     LABB       Percentage of some college educ in PAOCC10 based on ACS 2010
masei10educ     double  %12.0g     LABB       Percentage of some college educ in MAOCC10 based on ACS 2010</pre>
<p>This is just the first page. With 895 variables, the <span class="InputCode">describe</span> output for the GSS is very long. Remember you can press 'q' or click on the red stop sign button to have Stata quit what it is doing.</p>
<p>A few highlights of this output:</p>
<ul>
<li>This data set has 254 observations, which in this case means 254 people who responded to the General Social Survey. It is a subset of the complete GSS results.</li>
<li>It has 895 variables.</li>
<li>The variable name is what you need to use in your commands.</li>
<li>The variable label can help you understand what each variable means, though it's no substitute for the complete GSS documentation.</li>
<li>All of these variables have something in the value label column. Commands like <span class="InputCode">tab</span> will show you the value labels by default, but code must refer to the actual values.</li>
</ul>
<p></p>
<p>If you want information about a specific variable, put its name right after describe:</p>
<p class="InputCode">describe sex</p>
<p>Produces:</p>
<pre class="InputCode">              storage   display    value
variable name   type    format     label      variable label
------------------------------------------------------------------
sex             byte    %8.0g      SEX        RESPONDENTS SEX</pre>
<p>With so many variables, it can be hard to find what you need in the GSS. One useful trick:</p>
<p class="InputCode">describe *edu*</p>
<p>This will describe all variables that contain "edu" anywhere in their name. The output is:</p>
<pre class="InputCode">              storage   display    value
variable name   type    format     label      variable label
------------------------------------------------------------------------------------------------------------
sei10educ       double  %12.0g     LABB       Percentage of some college educ in OCC10 based on ACS 2010
spsei10educ     double  %12.0g     LABB       Percentage of some college educ in SPOCC10 based on ACS 2010
pasei10educ     double  %12.0g     LABB       Percentage of some college educ in PAOCC10 based on ACS 2010
masei10educ     double  %12.0g     LABB       Percentage of some college educ in MAOCC10 based on ACS 2010
coneduc         byte    %8.0g      LABAB      CONFIDENCE IN EDUCATION
educ            byte    %8.0g      LABAJ      HIGHEST YEAR OF SCHOOL COMPLETED
immeduc         byte    %8.0g      IMMEDUC    LEGAL IMMIGRANTS SHOULD HAVE SAME EDUCATION AS AMERICANS
inteduc         byte    %8.0g      INTEDUC    INTERESTED IN LOCAL SCHOOL ISSUES
maeduc          byte    %8.0g      LABAJ      HIGHEST YEAR SCHOOL COMPLETED, MOTHER
nateduc         byte    %8.0g      LABBL      IMPROVING NATIONS EDUCATION SYSTEM
nateducy        byte    %8.0g      LABBL      EDUCATION -- VERSION Y
paeduc          byte    %8.0g      LABAJ      HIGHEST YEAR SCHOOL COMPLETED, FATHER
sexeduc         byte    %8.0g      SEXEDUC    SEX EDUCATION IN PUBLIC SCHOOLS
speduc          byte    %8.0g      LABAJ      HIGHEST YEAR SCHOOL COMPLETED, SPOUSE
usedup          byte    %8.0g      USEDUP     HOW OFTEN DURING PAST MONTH R FELT USED UP</pre>
<p>This is not a complete list of variables related to education, and includes one variable that is not related to education, <span class="InputCode">usedup</span>. But if you're interested in looking at education issues using the GSS it's a start.</p>
<h2>Complete Do File</h2>
<p>The following is a complete do file for this section.</p>
<p class="InputCode">capture log close<br/>
log using desc.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/> 
describe<br/>
describe sex<br/>
describe *edu*
<br/>
<br/>
log close</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: tabulate</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>Descriptive statistics give you a basic understanding one or more variables and how they relate to each other.</p>
<h2>Topics Covered in this Section</h2>
<h3><a href="#oneway">Frequencies for a Single Categorical Variable</a></h3>
<p>For a variable that describes  categories (like sex or race) rather than quantities (like income) frequencies tell you how many observations are in each category. These are examples of univariate statistics, or statistics that describe a single variable.</p>
<p>Categorical variables are also sometimes called factor variables. Indicator variables (also called binary or dummy variables) are just categorical variables with two categories. Frequency tables for a single variable are sometimes called one-way tables.</p>
<h3><a href="#sum">Summary Statistics for a Single Quantitative Variable</a></h3>
<p>For a variable that describes quantities (like income) the mean tells you what the expected value of the variable is, and the standard deviation tells you how much it varies. However, the median and percentiles often give you a better sense of how the variable is distributed, especially for variables that are not symmetric (like income, which often has a few very high values). These are also univariate statistics.</p>
<p>Quantitative variables are often called continuous variables. Means are often called averages, and variance is just the standard deviation squared. The median is also the 50th percentile. </p>
<h3><a href="#twoway"> Frequencies for Two Categorical Variables</a></h3>
<p>For two categorical variables, frequencies tell you how many observations fall in each combination of the two categorical variables (like black women or hispanic men) and can give you a sense of the relationship between the two variables. These are examples of bivariate statistics, or statistics that describe the joint distribution of the two variables.</p>
<p>Tables of frequencies for two variables are often called two-way tables, contingency tables, or crosstabs.</p>
<h3><a href="#tabsum">Summary Statistics for One Quantitative Variable over One Categorical Variable</a></h3>
<p>For a  quantitative variable and a categorical variable, the mean value of the quantitative variable for those observations that fall in each category of the categorical variable can give you a sense of how the two variables are related. Of then the question of interest is whether the distribution of the quantitative variable is different for different categories. These are also examples of bivariate statistics.</p>
<h3><a href="#threeway">Frequencies for Three or More Categorical Variables</a></h3>
<p>For three or more categorical variables, frequencies <a href="#threeway"></a>will tell you how many observations fall in each combination of the variables and give you a sense of their relationships just like they did with two categorical variables. These are examples of multivariate statistics.</p>
<h3><a href="#twoway_sum">Summary Statistics for One Quantitative Variable over Two or More Categorical Variables</a></h3>
<p>For a quantitative variable and two or more categorical variables, the  the mean value of the quantitative variable for those observations in each combination of the categorical variables can give you a sense of how the variables are related just like they did with a quantitative variable and one categorical variable. These are examples of multivariate statistics.</p>
<h3>Commands Used</h3>
<p>All of these tasks can be carried out using just two Stata commands: <span class="InputCode">tabulate</span> (or <span class="InputCode">tab</span>) and <span class="InputCode">summarize</span> (or <span class="InputCode">sum</span>). Getting them to do all these things is simply a matter of applying Stata syntax, so so if you've read <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-syntax.htm">How Stata Commands Work</a> this section will have no surprises for you.</p>
<p>Some  commonly used options  can change what the tables produced by <span class="InputCode">tab</span> look like, as described in the sections below:</p>
<ul>
<li><a href="#perc">Adding percentages</a></li>
<li><a href="#nolabel">Viewing values instead of labels</a></li>
<li><a href="#miss">Viewing missing values</a> </li>
</ul>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">descriptives.do</span> in that folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a> and start with the following code:</p>
<p class="InputCode">capture log close<br/>
log using descriptives.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
// do work here<br/>
<br/>
log close</p>
<p>If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2 id="oneway">Frequencies for a Single Categorical Variable</h2>
<p>The <span class="InputCode">tabulate </span>command, or just <span class="InputCode">tab</span>, creates tables of frequencies. To have it give  you frequencies for a single categorical variable simply tell it which variable you want it to act on:</p>
<p class="InputCode">tab sex</p>
<p>This produces the following output:</p>
<pre class="InputCode">RESPONDENTS |
        SEX |      Freq.     Percent        Cum.
------------+-----------------------------------
       male |        110       43.31       43.31
     female |        144       56.69      100.00
------------+-----------------------------------
      Total |        254      100.00</pre>
<p>This tells us that in the GSS sample, 110 of the respondents are male (43.31%) and 144 of the respondents are female (56.69%), for a total of 254 respondents.</p>
<h2 id="sum">Summary Statistics for a Single Quantitative Variable</h2>
<p>The <span class="InputCode">summarize</span> command, or just <span class="InputCode">sum</span>, creates tables of summary statistics. To have it give you summary statistics for a single variable, simply tell it which variable you want it to act on:</p>
<p class="InputCode">sum educ</p>
<p>This produces the following output:</p>
<pre class="InputCode">    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        educ |        254    13.38583    3.336343          0         20</pre>
<p>This tells us that the mean years of education of the respondents in our GSS sample is 13.4 years.</p>
<p>If you want to see percentiles, add the <span class="InputCode">detail</span> option:</p>
<p class="InputCode">sum educ, detail</p>
<p>This produces the following output:</p>
<pre class="InputCode">              HIGHEST YEAR OF SCHOOL COMPLETED
-------------------------------------------------------------
      Percentiles      Smallest
 1%            5              0
 5%            7              2
10%           10              5       Obs                 254
25%           12              6       Sum of Wgt.         254

50%           13                      Mean           13.38583
                        Largest       Std. Dev.      3.336343
75%           16             20
90%           18             20       Variance       11.13118
95%           19             20       Skewness      -.3988663
99%           20             20       Kurtosis       3.899598</pre>
<p>The median, 13, is in the table as the 50th percentile. Note how the 25th percentile is 12, just one year lower than the median, while the 75th percentile is four years higher at 16. This shows that the distribution of <span class="InputCode">educ</span> is asymmetric. A histogram (<span class="InputCode">hist educ </span>or <span class="InputCode">hist educ, discrete</span>) would be a good tool to understand its distribution.</p>
<h2 id="twoway">Frequencies for Two Categorical Variables</h2>
<p>To have tab give you the joint distribution of two categorical variables, tell it which two variables you want it to act on:</p>
<p class="InputCode">tab class sex</p>
<p>This produces the following output:</p>
<pre class="InputCode">   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |    RESPONDENTS SEX
            N |      male     female |     Total
--------------+----------------------+----------
  LOWER CLASS |        10         14 |        24 
WORKING CLASS |        57         64 |       121 
 MIDDLE CLASS |        37         60 |        97 
  UPPER CLASS |         5          5 |        10 
--------------+----------------------+----------
        Total |       109        143 |       252 </pre>
<p>This tells us that in the GSS sample 57 of the respondents are  males who consider themselves working class while 60 are females who consider themselves middle class. If you want percentages, see <a href="#perc">Adding Percentages to <span class="InputCode">tab</span> Output</a>.</p>
<p>The first variable you list will be placed in rows and the second in columns. The table will usually be easier to read if the variable with the most unique values is listed first. On the other hand, if you're thinking of the two variables as a dependent variable and an independent variable, the dependent variable is usually listed first so it goes in the rows.</p>
<h2 id="tabsum">Summary Statistics for One Quantitative Variable over One Categorical Variable</h2>
<p>If you start with a <span class="InputCode">tab</span> command and then add the <span class="InputCode">sum()</span> option, with the name of a continuous variable in the parentheses, Stata will add summary statistics for that variable to each cell of the table:</p>
<p class="InputCode">tab class, sum(edu)</p>
<p>Gives:</p>
<pre class="InputCode"> SUBJECTIVE |
      CLASS |  Summary of HIGHEST YEAR OF SCHOOL
IDENTIFICAT |              COMPLETED
        ION |        Mean   Std. Dev.       Freq.
------------+------------------------------------
  LOWER CLA |        11.5   3.5630959          24
  WORKING C |   12.570248   3.1247038         121
  MIDDLE CL |    14.71134   3.0171688          97
  UPPER CLA |        15.2   3.4253954          10
------------+------------------------------------
      Total |   13.396825   3.3473052         252</pre>
<p>This tells us that the 24 respondents who consider themselves lower class have an average of 11.5 years of education, while the 10 respondents who consider themselves upper class have an average of 15.2 years of education. Examination of the table as a whole suggests  a relationship between formal education and class, which should surprise no one.</p>
<h2 id="threeway">Frequencies for Three or More Categorical Variables</h2>
<p>You cannot give <span class="InputCode">tab</span> a list of three variables to act on. However, you can use <em>by</em> to create separate tables for each value of a categorical variable:</p>
<p class="InputCode">bysort sex: tab class race</p>
<p>This produces:</p>
<pre class="InputCode">-----------------------------------------------------------------
-&gt; sex = male

   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |        RACE OF RESPONDENT
            N |     white      black      other |     Total
--------------+---------------------------------+----------
  LOWER CLASS |         6          1          3 |        10 
WORKING CLASS |        41          8          8 |        57 
 MIDDLE CLASS |        30          3          4 |        37 
  UPPER CLASS |         3          2          0 |         5 
--------------+---------------------------------+----------
        Total |        80         14         15 |       109 


------------------------------------------------------------------
-&gt; sex = female

   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |        RACE OF RESPONDENT
            N |     white      black      other |     Total
--------------+---------------------------------+----------
  LOWER CLASS |         7          5          2 |        14 
WORKING CLASS |        49         12          3 |        64 
 MIDDLE CLASS |        45         10          5 |        60 
  UPPER CLASS |         3          1          1 |         5 
--------------+---------------------------------+----------
        Total |       104         28         11 |       143</pre>
<p>This tells us that the sample includes 6 respondents who are male, white, and identify as lower class, as well as 10 respondents who are female, black, and identify as middle class.</p>
<p>You can add as many variables as you need to the <em>by</em> part of the command:</p>
<p class="InputCode">bysort sex divorce: tab class race</p>
<p>However, the amount of output you'll get can become cumbersome quickly.</p>
<h2 id="twoway_sum">Summary Statistics for One Quantitative Variable over Two or More Categorical Variables</h2>
<p>The <span class="InputCode">sum()</span> option works exactly the same for tables with two or more categorical variables as it does with <a href="#sum">one categorical variable</a>.</p>
<p class="InputCode">tab class sex, sum(edu)</p>
<p>Produces:</p>
<pre class="InputCode">
                Means, Standard Deviations and Frequencies
                    of HIGHEST YEAR OF SCHOOL COMPLETED

SUBJECTIVE |
     CLASS |
IDENTIFICA |   RESPONDENTS SEX
      TION |      male     female |     Total
-----------+----------------------+----------
 LOWER CLA |      11.7  11.357143 |      11.5
           | 4.5227818   2.871803 | 3.5630959
           |        10         14 |        24
-----------+----------------------+----------
 WORKING C | 12.719298    12.4375 | 12.570248
           | 3.1495713  3.1212279 | 3.1247038
           |        57         64 |       121
-----------+----------------------+----------
 MIDDLE CL | 14.513514  14.833333 |  14.71134
           | 3.2966449  2.8532863 | 3.0171688
           |        37         60 |        97
-----------+----------------------+----------
 UPPER CLA |      15.2       15.2 |      15.2
           | 3.0331502  4.1472883 | 3.4253954
           |         5          5 |        10
-----------+----------------------+----------
     Total | 13.348624  13.433566 | 13.396825
           | 3.4490368  3.2793838 | 3.3473052
           |       109        143 |       252</pre>
<p>This tells us that the 37 males in our sample who identify as middle class have an average of 14.5 years of education, while the 60 females who identify as middle class have an average of 14.8 years of education.</p>
<p>If you need to consider three or more categorical variables, <a href="#threeway">use <em>by</em> as described above</a>.</p>
<h2 id="perc">Adding Percentages to <span class="InputCode">tab</span> Output</h2>
<p>By default Stata only shows percentages for tables with one variable. If you want percentages for other tables, you need to tell it which percentages you want by adding the appropriate option.</p>
<p>Consider the table of sex and class we created earlier:</p>
<p class="InputCode">tab class sex</p>
<pre class="InputCode">   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |    RESPONDENTS SEX
            N |      male     female |     Total
--------------+----------------------+----------
  LOWER CLASS |        10         14 |        24 
WORKING CLASS |        57         64 |       121 
 MIDDLE CLASS |        37         60 |        97 
  UPPER CLASS |         5          5 |        10 
--------------+----------------------+----------
        Total |       109        143 |       252 </pre>
<p>If we add the <span class="InputCode">row</span> option, Stata will tell us what percentage of each class is male and what percentage is female in our sample:</p>
<p class="InputCode">tab class sex, row</p>
<pre class="InputCode">+----------------+
| Key            |
|----------------|
|   frequency    |
| row percentage |
+----------------+

   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |    RESPONDENTS SEX
            N |      male     female |     Total
--------------+----------------------+----------
  LOWER CLASS |        10         14 |        24 
              |     41.67      58.33 |    100.00 
--------------+----------------------+----------
WORKING CLASS |        57         64 |       121 
              |     47.11      52.89 |    100.00 
--------------+----------------------+----------
 MIDDLE CLASS |        37         60 |        97 
              |     38.14      61.86 |    100.00 
--------------+----------------------+----------
  UPPER CLASS |         5          5 |        10 
              |     50.00      50.00 |    100.00 
--------------+----------------------+----------
        Total |       109        143 |       252 
              |     43.25      56.75 |    100.00 </pre>
<p>If we add the <span class="InputCode">column</span> (or <span class="InputCode">col</span>) option, Stata will tell us what percentage of the males are in each class and what percentage of the females are in each class:</p>
<p class="InputCode">tab class sex, col</p>
<pre class="InputCode">+-------------------+
| Key               |
|-------------------|
|     frequency     |
| column percentage |
+-------------------+

   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |    RESPONDENTS SEX
            N |      male     female |     Total
--------------+----------------------+----------
  LOWER CLASS |        10         14 |        24 
              |      9.17       9.79 |      9.52 
--------------+----------------------+----------
WORKING CLASS |        57         64 |       121 
              |     52.29      44.76 |     48.02 
--------------+----------------------+----------
 MIDDLE CLASS |        37         60 |        97 
              |     33.94      41.96 |     38.49 
--------------+----------------------+----------
  UPPER CLASS |         5          5 |        10 
              |      4.59       3.50 |      3.97 
--------------+----------------------+----------
        Total |       109        143 |       252 
              |    100.00     100.00 |    100.00 </pre>
<p>If we add the <span class="InputCode">cell</span> option, Stata will tell us what percentage each combination of class and sex is of the total sample.</p>
<p class="InputCode">tab class sex, cell</p>
<pre class="InputCode">+-----------------+
| Key             |
|-----------------|
|    frequency    |
| cell percentage |
+-----------------+

   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |    RESPONDENTS SEX
            N |      male     female |     Total
--------------+----------------------+----------
  LOWER CLASS |        10         14 |        24 
              |      3.97       5.56 |      9.52 
--------------+----------------------+----------
WORKING CLASS |        57         64 |       121 
              |     22.62      25.40 |     48.02 
--------------+----------------------+----------
 MIDDLE CLASS |        37         60 |        97 
              |     14.68      23.81 |     38.49 
--------------+----------------------+----------
  UPPER CLASS |         5          5 |        10 
              |      1.98       1.98 |      3.97 
--------------+----------------------+----------
        Total |       109        143 |       252 
              |     43.25      56.75 |    100.00 </pre>
<p>Which one you want depends on what question you're asking.</p>
<h2 id="nolabel">Viewing Values Instead of Labels</h2>
<p>By default <span class="InputCode">tab</span> shows  value labels for any variable that has them. If you need to see the actual values, add the <span class="InputCode">nolabel</span> option:</p>
<p class="InputCode">tab sex, nolabel</p>
<pre class="InputCode">RESPONDENTS |
        SEX |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |        110       43.31       43.31
          2 |        144       56.69      100.00
------------+-----------------------------------
      Total |        254      100.00</pre>
<h2 id="miss">Viewing Missing Values</h2>
<p>By default <span class="InputCode">tab</span> does not include missing values in its tables, which makes it easy to forget about them. Add the <span class="InputCode">missing</span> (or <span class="InputCode">miss</span>) option to see them:</p>
<p class="InputCode">tab class, miss</p>
<pre class="InputCode">   SUBJECTIVE |
        CLASS |
IDENTIFICATIO |
            N |      Freq.     Percent        Cum.
--------------+-----------------------------------
  LOWER CLASS |         24        9.45        9.45
WORKING CLASS |        121       47.64       57.09
 MIDDLE CLASS |         97       38.19       95.28
  UPPER CLASS |         10        3.94       99.21
           .b |          1        0.39       99.61
           na |          1        0.39      100.00
--------------+-----------------------------------
        Total |        254      100.00</pre>
<p>"<span class="InputCode">na</span>", i.e. "Not Applicable", is the value label applied to <span class="InputCode">.c</span> (as you can see if you add the <span class="InputCode">nolabel</span> option). The value <span class="InputCode">.b</span> also means missing, but has no label to say why it's missing. Whenever you use the <span class="InputCode">class</span> variable you should keep in mind that it is missing for two respondents.</p>
<h2 id="dofile">Complete Do File</h2>
<p>The following is a complete do file for this section:</p>
<p class="InputCode">capture log close<br/>
log using descriptives.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
tab sex<br/>
<br/>sum educ<br/>
sum educ, detail<br/>
<br/>
tab class sex<br/>
<br/>
tab class, sum(educ)<br/>
<br/>
bysort sex: tab class race<br/>
bysort sex divorce: tab class race

<br/>
<br/>
tab class sex, sum(edu)<br/>
<br/>
tab class sex<br/>
tab class sex, row<br/>
tab class sex, col<br/>
tab class sex, cell<br/>
<br/>
tab sex, nolabel<br/>
<br/>
tab class, miss<br/>
<br/>
log close </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Doing Your Work Using Do Files</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>A do file is is just a list of Stata commands. When you tell Stata to "do" the do file, it will carry out all the commands in order. By putting all your commands in a do file, you can re-run them at any time. You can do part of a homework assignment on one day and then pick right up where you left off on the next. If it turns out you made a mistake, all you need to do is fix the part of the do file that's wrong and run it again—no need to start over. We strongly recommend you do all your work using do files. This is especially true if you plan on using Stata for research in the future.</p>
<h2></h2>
<p>One thing that often confuses new Stata users is that Stata works with three things at the same time: your <em>data</em>, your <em>commands</em>, and your <em>results</em>. A properly written do file will manage all three: it will create a <span class="InputCode">.log</span> file to store its results, load a <span class="InputCode">.dta</span> file containing the relevant data, and then run the commands that do the actual work.</p>
<h2>Creating a Do File</h2>
<p>If you are doing our example assignment, use Windows Explorer to open the U:\SFS folder you created in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. If you're going straight to your homework, open the folder you created for it, making sure any data files you need are there.</p>
<p> Right-click on a blank spot inside the folder and choose <span class="MenuOutput">New</span>, <span class="MenuOutput">Text Document</span>. This will create a file in that folder called <span class="MenuOutput">New Text Document.txt</span>. (If <span class="MenuOutput">Text Document</span> is not an option on your computer, click <span class="MenuOutput">Microsoft Word Document</span> instead and you'll get <span class="MenuOutput">New Word Document.docx</span>.) If you're doing our example, change the name to <span class="InputCode">example1.do</span>. If you're doing a homework assignment, call it something logical like <span class="InputCode">homework1.do</span>.  Make sure you change the <span class="InputCode">.txt</span> (or <span class="InputCode">.docx</span>) part of the filename to <span class="InputCode">.do</span>, so Windows knows this will be a do file. If you don't see <span class="InputCode">.txt</span> or <span class="InputCode">.docx</span> at the end of the file name, revisit the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm#ViewingFileExtensions">instructions for making file extensions visible</a> in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>.</p>
<h2>Editing a Do File</h2>
<p>To edit a do file, go to the folder it is stored in and double-click on it. That will open the do file in Stata's do file editor and set Stata's working folder to the folder that it is stored in. If your data file(s) and log file(s) are or will be in the same folder, then you can just refer to them by name without specifying a location and Stata will find them automatically.</p>
<h2>Writing a Do File</h2>
<p>Almost all do files carry out the same basic steps.</p>
<h3>Create a Log File to Store Results</h3>
<p>The first thing your do file should do is set up a log file which will store its results. Make sure that no previous log files are still open with:</p>
<p class="InputCode">capture log close</p>
<p>Then open a new log file. We suggest giving a log file the same name as the do file it records, so either:</p>
<p class="InputCode">log using example1.log, replace</p>
<p>or something like:</p>
<p class="InputCode">log using homework1.log, replace
                  <br/>
</p>
<p>The <span class="InputCode">replace</span> option tells Stata it's okay to replace previous versions of that file.</p>
<h3>Clear Stata's Memory</h3>
<p>You always want to start a do file with a blank slate, so the next command should be:</p>
<p class="InputCode">clear all</p>
<p>This clears out any data or stored results from whatever you were doing before running this do file.</p>
<h3>Open a Data Set</h3>
<p>The command to open a Stata data set is <span class="InputCode">use</span>. If you're doing our example, type:</p>
<p class="InputCode">use gss_sample</p>
<p>If you're doing a homework assignment, replace <span class="InputCode">gss_sample</span> with the data set you're using. You don't need to type <span class="InputCode">.dta</span> at the end of the file name, but it won't hurt.</p>
<p>If the data set you want to work with is not in Stata format, you'll need the <span class="InputCode">import</span> command instead of <span class="InputCode">use</span>. You can click on <span class="MenuOutput">File</span>, <span class="MenuOutput">Import</span> in the main Stata window and then use the graphical user interface to set up the right options for reading in your data set, but be sure to copy the resulting command into your do file.</p>
<h3>Do Your Work</h3>
<p>You're now ready to do your work. If you're doing our example, type:</p>
<p class="InputCode">sum age</p>
<p>This will give you the mean age of the 2014 GSS respondents, along with other summary statistics. If you're doing homework, add whatever commands you need to do your assignment. Do files written for research may have hundreds of commands at this point.</p>
<h3>Finish Up</h3>
<p>Most homework assignments do not require you to save any changes to your data set. But if you have made changes to the data, like creating a new variable, and you want those changes to be available in the future, use the <span class="InputCode">save</span> command to save the modified data set:</p>
<p class="InputCode">save gss_sample2, replace</p>
<p>Again, the <span class="InputCode">replace</span> option means Stata can replace old versions of that file. However, note that the file name in the <span class="InputCode">save</span> command is not the same as in the earlier <span class="InputCode">use</span> command. <strong>Never save a modified data set over your original data file</strong>. If you do, and it turns out you made a mistake, you will have to get fresh copy of the data from its source. But if you keep the original data set intact, all you have to do is correct the mistake in your do file and run it again.</p>
<p>When you're all done, close your log file:</p>
<p class="InputCode">log close</p>
<p>That will normally be the last command in your do file.</p>
<h2>A Complete Do File</h2>
<p>Here is the complete do file described in the previous steps:</p>
<p class="InputCode">capture log close<br/>
                  log using example1.log, replace<br/>
<br/>
                  clear all<br/>
<br/>
                  use gss_sample<br/>
<br/>
                  sum age<br/>
<br/>
                  log close
                </p>
<h2>Running a Do File</h2>
<p>You can run a do file by pressing <span class="InputCode">Ctrl-D</span> or by clicking the button on the far right of the top menu that looks like a "play" button. If you select part of the do file, pressing Ctrl-D or clicking play will only run that part.</p>
<h2>Using Your Log</h2>
<p>The results of your do file will appear in the Results window, but they'll also be stored in your log file. Go back to the window showing your project's folder and the log file should have appeared there. Double-click on it and it will open in Notepad. Your professor may want you to send them this file directly or copy some or all of its contents into a Word document.</p>
<p>If you copy Stata results into Word, change the font for those results to Courier or something similar. Courier uses the same amount of space for each letter (<span class="InputCode">like this</span>) so the columns will line up properly.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Economics 310</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>This page contains links to articles describing the statistical topics covered in Economics 310 at UW-Madison. The articles assume you're already familiar with the basics of Stata, especially <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a> and <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>.</p>
<p> <em>SSCC staff try to keep this list up-to-date, but you instructor may add to or take away from it at any time and information you receive from him or her about what material you are responsible for always takes priority.</em></p>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-describe.htm"><span class="InputCode">describe</span>: Information about a data set and what it contains</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-hist.htm"><span class="InputCode">histogram</span>: Graphical representation of a variable's distribution</a></li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#sum">Summary Statistics for a Single Quantitative Variable</a></p>
<p>For a variable that describes quantities (like income) the mean tells you what the expected value of the variable is, and the standard deviation tells you how much it varies. However, the median and percentiles often give you a better sense of how the variable is distributed, especially for variables that are not symmetric (like income, which often has a few very high values). These are also univariate statistics.</p>
<p>Quantitative variables are often called continuous variables. Means are often called averages, and variance is just the standard deviation squared. The median is also the 50th percentile.</p>
</li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ci.htm">mean</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ci.htm"> or <span class="InputCode">ci mean</span>: Estimate the population mean and its confidence interval for a variable</a></li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ttest.htm">ttest</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ttest.htm">: Test hypotheses about means</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-cor.htm"><span class="InputCode">correlate</span>: Correlations between variables</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-scatter.htm"><span class="InputCode">scatter</span>: Scatterplot of two variables</a><br/>
<br/>
</li>
</ul>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Economics 310</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>This page contains links to articles describing the statistical topics covered in Economics 410 at UW-Madison. The articles assume you're already familiar with the basics of Stata, especially <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a> and <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>.</p>
<p> <em>SSCC staff try to keep this list up-to-date, but you instructor may add to or take away from it at any time and information you receive from him or her about what material you are responsible for always takes priority.</em></p>
<ul>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-describe.htm"><span class="InputCode">describe</span>: Information about a data set and what it contains</a></li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#sum">Summary Statistics for a Single Quantitative Variable</a></p>
<p>For a variable that describes quantities (like income) the mean tells you what the expected value of the variable is, and the standard deviation tells you how much it varies. However, the median and percentiles often give you a better sense of how the variable is distributed, especially for variables that are not symmetric (like income, which often has a few very high values). These are also univariate statistics.</p>
<p>Quantitative variables are often called continuous variables. Means are often called averages, and variance is just the standard deviation squared. The median is also the 50th percentile.</p>
</li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ci.htm">mean</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ci.htm"> or <span class="InputCode">ci mean</span>: Estimate the population mean and its confidence interval for a variable</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-cor.htm"><span class="InputCode">correlate</span>: Correlations between variables</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-scatter.htm"><span class="InputCode">scatter</span>: Scatterplot of two variables</a><br/>
<br/>
</li>
</ul>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Managing Stata Files</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>The easiest way to manage Stata files is to put all the files related to a given project, including files you download from Learn@UW, in a single folder. If that's something you're comfortable doing, you may be able to skim or completely skip this article. But if you usually just save things in the default location of the program you're using,  you may find a review of managing files helpful.</p>
<p>If you're using Winstat or one of the SSCC's Lab PCs, you should store your files on the U: drive, which is your personal disk space on the SSCC network. The U: drive is private (only you can access it), available from anywhere by logging into Winstat, and backed up five times a day. If you have installed Stata on your own computer, you can store your files on your local hard drive,  but we recommend doing some sort of backups regularly. This article will describe storing files on U:, but if you're storing files on a local drive just replace U: with the name of your drive.</p>
<h2>Windows Explorer</h2>
<p><img alt="The folder icon for Windows Explorer" height="38" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/explorer_icon.PNG" style="float: left; padding:5px;" width="60"/>The main program Windows uses to manage files is Windows Explorer (which is not the same as Internet Explorer). You'll use Windows Explorer to move files, create files, and start Stata by double-clicking on Stata files. Whenever you click on <span class="MenuOutput">Documents</span> or <span class="MenuOutput">Computer</span> or the folder icon on the task bar at the bottom of the screen, you're using Windows Explorer. Start Windows Explorer now. </p>
<h2 id="ViewingFileExtensions">Viewing File Extensions</h2>
<p>Windows thinks  you don't need to know about file name endings like <span class="InputCode">.dta</span>, <span class="InputCode">.do</span>, and <span class="InputCode">.log</span>, so it hides them from you by default. Dealing with Stata files will be much less confusing if you tell it you want to see these file name endings, or "extensions."</p>
<p>Press <span class="InputCode">Alt</span>. A new menu will appear near the top of the Windows Explorer window.</p>
<p><img alt="Press Alt and a new menu appears." height="372" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/new_menu.png" width="497"/></p>
<p> Click <span class="MenuOutput">Tools</span>, <span class="MenuOutput">Folder Options</span>, then the <span class="MenuOutput">View</span> tab. Uncheck the box that says <span class="MenuOutput">Hide extensions for known file types</span> and click <span class="MenuOutput">OK</span>. You will only need to do this once on each computer where you run Stata (including Winstat).</p>
<p><img alt="" height="481" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/uncheck.png" width="396"/></p>
<h2>Creating a Folder on the U: Drive</h2>
<p>Next click on <span class="MenuOutput">Computer</span> on the left. This will give you a list of drives available to your computer, including network drives. If you're using Winstat or a Lab PC, double-click on the drive with your name on it, <span class="MenuOutput"><em>Username</em> (\\sscwin\dfsroot\USERS) (U:)</span>. This is your U: drive, your space for storing files on the SSCC network.</p>
<p><img alt="The U: drive" height="422" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/u_drive.png" width="645"/></p>
<p>Right-click on a blank space inside the U: drive and choose <span class="MenuOutput">New</span>, <span class="MenuOutput">Folder</span>. This is the folder where you'll put all the Stata files for your current project. If you're going to do the examples we've created, call the new folder <span class="InputCode">SFS</span> (Stata for Students). If you're going to go straight to your class work, name the folder after the class you're taking (<span class="InputCode">Soc357</span>, <span class="InputCode">Econ310</span>, etc.).</p>
<p>If you're going to run Stata on your own computer you can put the new folder wherever  makes sense to you on your local hard drive.</p>
<h2>Downloading Files</h2>
<p>UW-Madison instructors frequently make files available through Learn@UW, including Stata data sets to be used in homework assignments. Stata can't read files from Learn@UW directly, so you'll need to download them and put them in the folder you've created.</p>
<p>Go to <a href="http://learnuw.wisc.edu/">Learn@UW</a> and  log in. Find the class you're taking and then locate the files associated with the assignment. (If you have any difficulties finding them, speak with your instructor or TA.) Click on the file you want, and then click on the <span class="MenuOutput">Download</span> button.</p>
<p>If the data set you need is on a different web site, the web site may have a process you need to follow to obtain the data set, or you may be able to download it like any other file. Your instructor or TA will be able to tell you more if you're getting the file for a class assignment. Some data sets will come "zipped" or otherwise compressed. If you double-click on a compressed file Windows will generally show you what it contains, but you'll need to actually extract (or "unzip") the data set before Stata can use it. The details of how to do that will depend on what software your computer uses to handle compressed files.</p>
<p>If you plan to do our examples in Stata for Students, <a href="https://ssc.wisc.edu/sscc/pubs/sfs/gss_sample.dta">click here to download a subsample of the 2014 General Social Survey</a>. (You can get the full data set from the <a href="http://gss.norc.org/Get-The-Data">GSS web site</a>.)</p>
<h3>Moving Downloaded Files to the U: Drive</h3>
<p>When your file has finished downloading it will be located in your Downloads folder. The next step is to move it from there to the U: drive. Go back to Windows Explorer, and click on <span class="MenuOutput">Downloads</span> on the left. Locate the file you just downloaded, right-click on it, and choose <span class="MenuOutput">Cut</span>.</p>
<p><img alt="Find the file in Downloads and Cut" height="398" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/file_cut.png" width="574"/> </p>
<p>Click the back button (the arrow pointing left in the upper left corner of Windows Explorer), and you should be back in the folder you just created. If the back button doesn't take you straight there, click on <span class="MenuOutput">Computer</span> on the left, then the <span class="MenuOutput">U:</span> drive, and then folder you made. Right-click on a blank space on the right and select <span class="MenuOutput">Paste</span>. The data file should appear in that folder.</p>
<p><img alt="Go to the folder you want to use and paste" height="398" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/file_paste.png" width="574"/></p>
<h2>Working With Your Files</h2>
<p>When you want to work with your files in the future, open Windows Explorer and go to <span class="MenuOutput">Computer</span>, <span class="MenuOutput">U:</span> drive, and then your folder. Double-click on a Stata data set or  do file and it will open in Stata automatically. This will also make the folder they're located in Stata's working folder, so you can use files in that folder without having to tell Stata where to find them.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a><br/>
</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/explorer_icon.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/new_menu.png, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/uncheck.png, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/u_drive.png, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/file_cut.png, https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/file_paste.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Using Graphs</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>We'll talk about how to create various graphs in the statistical sections of Stata for Students, but in this article we'll discuss what to do with a graph once you've created it. The answer will depend on what your instructor asks you to turn in.</p>
<p>As an example, go to the U:\SFS folder you created in  <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a> and create a new do file called <span class="InputCode">usegraphs.do</span> as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. Open it, and start with:</p>
<p class="InputCode">capture log close<br/>
log using usegraphs.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
histogram educ, discrete percent<br/>
<br/>
log close</p>
<p> This will create a histogram of the <span class="InputCode">educ</span> (years of education) variable. The options used tell Stata that <span class="InputCode">educ</span> is a discrete variable and thus the histogram should have a bin for each value, and that the y-axis should be labeled with percentages. The <span class="InputCode">histogram</span> command is discussed in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-hist.htm">Histograms</a>.</p>
<p><img alt="" height="442" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/educ_hist.png" width="510"/></p>
<p>If this were a homework assignment, your next task would be to get this graph to your instructor.</p>
<h2>Printing a Graph</h2>
<p>If your instructor asks you to print the graph and hand in the paper copy, click the button that looks like a printer at the top of the graph. If you're working in the SSCC computer lab you'll need to use <a href="http://ssc.wisc.edu/sscc/pubs/goprint.htm">GoPrint</a> to pay for your printing.</p>
<h2>Copying a Graph into a Word Document</h2>
<p>If your instructor asks you to put your graph in a Word document, right-click on the graph and choose <span class="MenuOutput">Copy</span>, then open your Word document and paste it in the proper location.</p>
<h2>Turning a Graph into a File</h2>
<p>If you just click the save button on the graph window, the graph will be saved as a Stata <span class="InputCode">.gph</span> file but other programs won't be able to use it. You can save the graph in a variety of standard image formats using <span class="InputCode">graph export</span>:</p>
<p class="InputCode">graph export  educ_hist.emf, replace</p>
<p>Stata will figure out what kind of file you want from the extension you put at the end of the file name. If you just want to send someone the graph itself, a <span class="InputCode">.pdf</span> file (Portable Document Format) is probably ideal. If you want to put the graph in a Word document, use <span class="InputCode">.emf</span> (Enhanced MetaFile). You can then go to Word and click <span class="MenuOutput">Insert</span>, <span class="MenuOutput">Picture</span> to add it to your document. Using <span class="InputCode">graph export</span> to save your graph as a file allows you to put the entire graph creation process in a do file.</p>
<h2>Complete Do File</h2>
<p>The following is a complete do file for this article, including saving the graph as an <span class="InputCode">.emf</span> file:</p>
<p class="InputCode">capture log close<br/>
log using usegraphs.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
histogram educ, discrete percent<br/>
graph export  educ_hist.emf, replace<br/>
<br/>
log close</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sfs/educ_hist.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Histograms</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>Histograms are a very useful graphical tool for understanding the distribution of a variable. They can be used for both categorical and quantitative variables. This section will teach you how to make histograms; <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-graphs.htm">Using Graphs</a> discusses what you can do with a graph once you've made it, such as printing it, adding it to a Word document, etc.</p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">hist.do</span> in that folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a> and start with the following code:</p>
<p class="InputCode">capture log close<br/>
                  log using hist.log, replace<br/>
<br/>
                  clear all<br/>
                  set more off<br/>
<br/>
                  use gss_sample<br/>
<br/>
                  // do work here<br/>
<br/>
                  log close</p>
<p>If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2>Creating Histograms</h2>
<p>The command to create a histogram is just <span class="InputCode">histogram</span>, which can be abbreviated <span class="InputCode">hist</span>. It is followed by the name of the variable you want it to act on:</p>
<p class="InputCode">hist educ</p>
<p>This produces:</p>
<p><img alt="Basic histogram of educ" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/hist1.png" width="600"/></p>
<p>The y-axis is labeled as Density because Stata likes to think of a histogram as an approximation to a probability density function. You can change the Y-axis to count the number of observations in each bin with the <span class="InputCode">frequency</span> (or <span class="InputCode">freq</span>) option:</p>
<p class="InputCode">hist educ, freq</p>
<p><img alt="Histogram of educ with Y axis denoting frequencies" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/hist2.png" width="600"/></p>
<p>Percentages (<span class="InputCode">percent</span>) is another popular option. Note how the shape of the histogram is the same no matter how the Y-axis is labeled.</p>
<p>You can control how many "bins" the data are divided into with the <span class="InputCode">bin()</span> option, putting the desired number of bins in the parentheses. Compare the above with:</p>
<p class="InputCode">hist educ, freq bin(8)                </p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/hist3.png" width="600"/></p>
<p>You can miss features of the data by not using enough bins. For example, with the default 15 bins we can see that people are more likely to drop out of college in the first half of their college career than the second, but this is not visible with 8 bins.</p>
<p>For categorical variables, or quantitative variables that are integers and take on a fairly small number of values (<span class="InputCode">educ</span> qualifies with 20 values), the ideal is often to have one bin for each value. You can do this with the <span class="InputCode">discrete</span> option:</p>
<p class="InputCode">hist educ, freq discrete</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/hist4.png" width="600"/></p>
<p>This further clarifies that what's really happening is that people are less likely to drop out in their last year of college.</p>
<p>There are many, many options you can set for histograms, such as titles and colors. The easy way to find all these options is to click <span class="MenuOutput">Graphics</span>, <span class="MenuOutput">Histogram</span>. Tweak the settings there until you get the graph you want, then copy the resulting command into your do file.                  </p>
<h2>Complete Do File</h2>
<p>The following is a complete do file for this section.</p>
<p class="InputCode">capture log close<br/>
log using hist.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
hist educ<br/>
hist educ, freq<br/>
hist educ, freq bin(8)<br/>
hist educ, freq discrete<br/>
<br/>
log close</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/sfs/hist1.png, https://ssc.wisc.edu/sscc/pubs/sfs/hist2.png, https://ssc.wisc.edu/sscc/pubs/sfs/hist3.png, https://ssc.wisc.edu/sscc/pubs/sfs/hist4.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Reading Data from a Spreadsheet or Text File</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>Stata can use many kinds of data files. In this section we'll talk about how to import two of the most common kinds of data files: Excel spreadsheets and CSV (comma-separated variable) files.</p>
<p>If you want to carry out the examples for this section, click on the following links to download a <a href="https://ssc.wisc.edu/sscc/pubs/sfs/gss2014.xls">GSS sample in Excel format</a> and a <a href="https://ssc.wisc.edu/sscc/pubs/sfs/gss2014.csv">GSS sample in CSV</a> format, then move them to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>.  Note that these files are subsets of the full GSS results. You can get the full data set from the <a href="http://gss.norc.org/Get-The-Data">GSS web site</a>.</p>
<h2>Importing Excel Spreadsheets</h2>
<p>Normally you tell Stata what data set you want to use with the <span class="InputCode">use</span> command, but if the data set is an Excel spreadsheet, use <span class="InputCode">import excel</span> instead. Here's an example do file:</p>
<p class="InputCode">capture log close<br/>
log using imp.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
import excel using gss2014, firstrow<br/>
<br/>
 save gss2014_from_excel, replace<br/>
<br/>
log close </p>
<p>When you give the filename of the spreadsheet you do not need to include <span class="InputCode">.xls</span> or <span class="InputCode">.xlsx</span>, but if you do it needs to be the right one.</p>
<p></p>
<p>The <span class="InputCode">firstrow</span> option tells Stata that the first row of the spreadsheet contains the names of the variables. Otherwise it will name the variables A, B, C, etc.</p>
<p>There are other options that let you specify which which worksheet to read, or to only read in part of a spreadsheet so you can skip titles or notes that aren't really data. If you have a complicated spreadsheet you might click <span class="MenuOutput">File</span>, <span class="MenuOutput">Import Excel</span>, tweak the options in the dialog box you get until it can read the spreadsheet successfully, then copy the resulting command into your do file.</p>
<h2>Importing CSV Files</h2>
<p>A CSV file is really just a text file, but structured so that each line of text represents one observation and each variable is separated by a comma. Hence the name, comma-separated variable file. Text files that put a specific character between variables are also known as delimited files, and the Stata command to read them is <span class="InputCode">import delimited</span>.</p>
<p class="InputCode">capture log close<br/>
log using imp_csv.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
import delimited using gss2014<br/>
<br/>
 save gss2014_from_csv, replace<br/>
<br/>
log close
                </p>
<p>The <span class="InputCode">import delimited</span> command will try to figure out whether the first row contains variable names or data, and usually succeeds. If it gets it wrong, you can specify that the first row contains variable names with the <span class="InputCode">varnames(1)</span> option.</p>
<p>Importing an Excel spreadsheet or CSV file takes longer than loading a Stata data set, and there's no need to repeat that process every time you analyze the data. That's why these do files simply import a data set and save it as a Stata data set. You can then write a separate do file that loads the Stata data set and carries out  your analysis.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Proportion Tests</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>Proportion tests allow you to test hypotheses about proportions in a population, such as the proportion of the population that is female or the proportion that answers a question in a given way. Conceptually they are very similar to t-tests.  The command to run one is simply <span class="InputCode">prtest</span>, but the syntax will depend on the hypothesis you want to test. In this section we'll discuss the following types of tests:</p>
<h3><a href="#onesample">The Proportion in the Population is Equal to Some Specified Value</a></h3>
<p>One type of hypothesis simply asks whether the population proportion of a variable is equal to some particular value of interest.</p>
<h3><a href="http://ssc.wisc.edu/sscc/pubs/sfs/sfs-ttest.htm#paired">The Population Proportions for Two Variables are the Same</a></h3>
<p>Another type of hypothesis looks at whether two variables have the same proportions.</p>
<h3><a href="#twosample">The Population Proportions for Two Subsamples are the Same</a></h3>
<p>The final type of hypothesis we'll consider is whether two groups have the same proportions for a single variable.</p>
<p>For all these tests we've described the null hypothesis. Usually the null hypothesis is the opposite of what you're really interested in. For example, if you're investigating differences between men and women in the proportion that have earned a bachelor's degree, your null hypothesis will usually be that the proportions are the same. Your alternative hypothesis could then be one of the following: that the proportion of women with a bachelor's degree is higher than the proportion of men with a bachelor's degree, that the proportion of women with a bachelor's degree is different than the proportion of men with a bachelor's degree, or the proportion of women with a bachelor's degree is lower than the proportion of men with a bachelor's degree.</p>
<p>Stata will report results for all three alternative hypotheses, but you should choose which one you're interested in ahead of time. Looking at the results and then picking the alternative hypothesis that matches what you'd like to see will increase the probability of drawing the wrong conclusion from the test.</p>
<p>We will discuss the interpretation of the proportion test in detail for the first type of hypothesis (that the proportion is equal to a specified value) but the discussion applies to all the hypotheses a t-test can test.</p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="http://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">prtests.do</span> in that folder that loads the GSS sample as described in <a href="http://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2>Preparing Variables for Proportion Tests</h2>
<p>The <span class="InputCode">prtest</span> command assumes that the variables it will act on are binary (0/1) variables and the proportion of interest is the proportion of 1's. The GSS codes most of its binary variables as 1/2, so we'll need to create some new variables and change others to match what <span class="InputCode">prtest</span> is expecting. We'll use the following four variables in the examples for this section:</p>
<p><span class="InputCode">sex</span> is coded 1 for male, 2 for female. Create a variable called <span class="InputCode">female</span>  coded 0/1 (1 meaning "yes, this person is female") with:</p>
<p class="InputCode">gen female=(sex==2)</p>
<p>Recall that if you set a variable equal to a condition, the variable gets 1 if the condition is true and 0 if it is false.</p>
<p><span class="InputCode">evolved</span> (SCI KNOWLEDGE:HUMAN BEINGS DEVELOPED FROM ANIMALS) is coded 1/2 with 1 meaning "True" (the correct answer) and 2 meaning "False". Recode it to 0/1 with 1 meaning "Yes, the respondent said humans evolved from animals" by changing the 2's to 0's with:</p>
<p class="InputCode">recode evolved (2=0)</p>
<p><span class="InputCode">electron</span> (SCI KNOWLEDGE:ELECTRONS ARE SMALLER THAN ATOMS) is coded 1/2 with 1 meaning "True" (the correct answer) and 2 meaning "False". Recode it to 0/1 with 1 meaning "Yes, the respondent said electrons are smaller than atoms" by changing the 2's to 0's with:</p>
<p class="InputCode">recode electron (2=0)</p>
<p><span class="InputCode">relpersn</span>  (R[espondent] CONSIDER SELF A RELIGIOUS PERSON) is coded 1-4, but create a binary variable with:</p>
<p class="InputCode">gen religious=(relpersn&lt;3)  if relprsn&lt;.</p>
<p>This creates a variable <span class="InputCode">religious</span> which is 1 if the respondent described themselves as moderately (<span class="InputCode">relpersn</span>=2) or very (<span class="InputCode">relpersn</span>=1) religious and 0 otherwise. The <em>if</em> condition ensures that if <span class="InputCode">relpersn</span> is missing (the respondent didn't answer the question) then <span class="InputCode">religious</span> is also missing.</p>
<p>For more examples of code like this, see <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-vars.htm">Creating Variables</a>. It also discusses creating  labels, which is left as an exercise for the reader.</p>
<h2>Hypothesis: The Proportion is Equal to Some Specified Value</h2>
<p>The Census Bureau reports that proportion of females in the US population is 0.508 (50.8%), but the proportion female in our sample is .567 (56.7%). Is this difference significant? To test,  the syntax is:</p>
<p class="InputCode">prtest female=0.508</p>
<p>This gives the following output:</p>
<pre class="InputCode">One-sample test of proportion                 female: Number of obs =      254
------------------------------------------------------------------------------
    Variable |       Mean   Std. Err.                     [95% Conf. Interval]
-------------+----------------------------------------------------------------
      female |   .5669291   .0310905                       .505993    .6278653
------------------------------------------------------------------------------
    p = proportion(female)                                        z =   1.8786
Ho: p = 0.508

    Ha: p &lt; 0.508               Ha: p != 0.508                 Ha: p &gt; 0.508
 Pr(Z &lt; z) = 0.9698         Pr(|Z| &gt; |z|) = 0.0603          Pr(Z &gt; z) = 0.0302</pre>
<p>Formal evaluation compares the null hypothesis (<span class="InputCode">Ho</span>), that the proportion (<span class="InputCode">p</span>) is 0.508, with one of three alternative hypotheses (<span class="InputCode">Ha</span>): that the proportion is less than 0.508, that the proportion is not equal to 0.508 but could be bigger or smaller, and that the proportion is greater than 0.508. You must pick the alternative hypothesis you're interested in testing before running the test.</p>
<p>First consider <span class="InputCode">Ha: p &lt; 0.508</span>. If the proportion female in the population is 0.508, the probability of drawing a sample of 254 observations with a proportion female less than 0.566921, which is what we observe in the sample, is 0.9698 (i.e. it's very likely). So if your alternative hypothesis is that the GSS population has a lower proportion female than the US population, then you should accept the null hypothesis, that they are the same, instead.</p>
<p>Next consider <span class="InputCode">Ha: p != 0.508</span>. If the proportion female in the population is 0.508, the probability of drawing a sample of 254 observations where the proportion female is at least 0.5669291-0.508=0.0589291 away from that in either direction is 0.0603. This is still above the conventional threshold for significance of 0.05, so if your alternative hypothesis is that the proportion is not 0.508 you should reject it in favor of the null hypothesis again.</p>
<p>Finally consider <span class="InputCode">Ha: p &gt; 0.508</span>. If the proportion female in the population is 0.508, the probability of drawing a sample of 254 observations with a proportion female of 0.5669291 or greater is 0.0302, i.e. it's not very likely. Since this is below the usual threshold of 0.05, if your alternative hypothesis is that the proportion female in the population is greater than 0.508, then you should reject the null hypothesis and accept the alternative instead.</p>
<p>Does this mean the GSS sample is not drawn from the US population? No, but it does suggest females may be more likely to respond to the GSS than males, which could bias any analysis done with this GSS sample. This is a very important issue in survey research and statistics in general, but techniques for correcting that bias, like weighting the data, are beyond the scope of  Stata for Students.</p>
<h2>Hypothesis: Two Variables have the Same Proportion</h2>
<p>Now consider the variables <span class="InputCode">evolved</span> and <span class="InputCode">electron</span>. One possible research hypothesis is that the relative  sizes of electrons and atoms is a  more obscure issue than evolution, so the proportion getting the <span class="InputCode">evolved</span> question right should be larger than the proportion getting the  <span class="InputCode">electron</span> question right. Another possible research hypothesis is that some respondents are aware of the scientific consensus on evolution but choose not to respond "true" to the evolution question for religious reasons, and thus the proportion giving the correct answer for <span class="InputCode">evolved</span> will be lower than the proportion giving the correct answer for <span class="InputCode">electron</span> (because <span class="InputCode">electron</span> does not raise similar issues). You can test both with: </p>
<p class="InputCode">prtest evolved=electron</p>
<pre class="InputCode">Two-sample test of proportions               evolved: Number of obs =      105
                                            electron: Number of obs =       83
------------------------------------------------------------------------------
    Variable |       Mean   Std. Err.      z    P&gt;|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
     evolved |    .552381   .0485265                      .4572708    .6474911
    electron |   .7108434   .0497639                      .6133079    .8083788
-------------+----------------------------------------------------------------
        diff |  -.1584624   .0695073                     -.2946943   -.0222306
             |  under Ho:   .0712048    -2.23   0.026
------------------------------------------------------------------------------
        diff = prop(evolved) - prop(electron)                     z =  -2.2254
    Ho: diff = 0

    Ha: diff &lt; 0                 Ha: diff != 0                 Ha: diff &gt; 0
 Pr(Z &lt; z) = 0.0130         Pr(|Z| &gt; |z|) = 0.0261          Pr(Z &gt; z) = 0.9870</pre>
<p>Keep in mind that Stata is comparing the proportion of 1's for the two variables. It is up to you to ensure that this makes sense: in this case both variables are coded so that a 1 means the respondent gave the correct answer.</p>
<p>Stata calculated the difference (<span class="InputCode">diff</span>) between the two proportions as <span class="InputCode">prop(evolved) - prop(electron)</span>, so the alternative hypothesis <span class="InputCode">Ha: diff &lt; 0</span> is also the hypothesis that the proportion giving the right answer for <span class="InputCode">evolved</span> is smaller than the proportion giving the right answer for <span class="InputCode">electron</span>, while <span class="InputCode">Ha: diff &gt; 0</span> is the hypothesis that the proportion giving the right answer for <span class="InputCode">electron</span> is greater than <span class="InputCode">evolved</span>.</p>
<p>If your research hypothesis is that more people know about evolution than the size of electrons, the relevant alternative hypothesis is <span class="InputCode">Ha: diff &gt; 0</span>, and the very large p-value suggests you should reject the alternative and accept the null hypothesis (no difference). This finding would  not support your research hypothesis.</p>
<p>If your research hypothesis is that some people choose not to answer "true" to the <span class="InputCode">evolved</span> question for religious reasons, then the relevant alternative hypothesis is <span class="InputCode">Ha: diff &lt; 0</span> and the low p-value suggests you should reject the null hypothesis and accept the alternative. This finding is consistent with your research hypothesis.</p>
<h2>Hypothesis: Two Subsamples have the Same Proportion</h2>
<p>But if we think people are choosing not to answer "true" to the evolve question for religious reasons, we should see a difference in the proportion responding "true" between religious respondents and non-religious respondents. We can test that with the following syntax:</p>
<p class="InputCode">prtest evolve, by(religious)</p>
<pre class="InputCode">Two-sample test of proportions                     0: Number of obs =       48
                                                   1: Number of obs =       57
------------------------------------------------------------------------------
    Variable |       Mean   Std. Err.      z    P&gt;|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
           0 |   .7291667   .0641422                      .6034503    .8548831
           1 |   .4035088   .0649817                       .276147    .5308706
-------------+----------------------------------------------------------------
        diff |   .3256579   .0913063                      .1467008     .504615
             |  under Ho:   .0974115     3.34   0.001
------------------------------------------------------------------------------
        diff = prop(0) - prop(1)                                  z =   3.3431
    Ho: diff = 0

    Ha: diff &lt; 0                 Ha: diff != 0                 Ha: diff &gt; 0
 Pr(Z &lt; z) = 0.9996         Pr(|Z| &gt; |z|) = 0.0008          Pr(Z &gt; z) = 0.0004</pre>
<p>Stata calculates the difference (<span class="InputCode">diff</span>) as <span class="InputCode">prop(0) - prop(1)</span>, or proportion of non-religious people who answered true minus proportion of religious people who answered true. Thus the hypothesis that religious people are less likely to answer true is <span class="InputCode">Ha: diff &gt; 0</span> and the very low p-value associated with it suggests we should reject the null and accept that alternative hypothesis.</p>
<p>On the other hand, it's possible that that religious people simply know less about science. If that were the case, we would expect the proportion of religious people who respond correctly to <span class="InputCode">electron</span> to be lower than the proportion of non-religious people:</p>
<p class="InputCode">prtest electron, by(religious)</p>
<pre class="InputCode">Two-sample test of proportions                     0: Number of obs =       36
                                                   1: Number of obs =       47
------------------------------------------------------------------------------
    Variable |       Mean   Std. Err.      z    P&gt;|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
           0 |   .6944444   .0767737                      .5439707    .8449182
           1 |   .7234043   .0652476                      .5955214    .8512871
-------------+----------------------------------------------------------------
        diff |  -.0289598   .1007544                     -.2264348    .1685152
             |  under Ho:   .1004136    -0.29   0.773
------------------------------------------------------------------------------
        diff = prop(0) - prop(1)                                  z =  -0.2884
    Ho: diff = 0

    Ha: diff &lt; 0                 Ha: diff != 0                 Ha: diff &gt; 0
 Pr(Z &lt; z) = 0.3865         Pr(|Z| &gt; |z|) = 0.7730          Pr(Z &gt; z) = 0.6135
</pre>
<p>The high p-value associated with <span class="InputCode">Ha: diff &gt; 0</span> suggests you should accept the null hypothesis (no difference) instead. In fact the proportion of religious people who answered electron correctly is slightly higher than the proportion of non-religious people, but the difference is not significant (no matter which specific alternative hypothesis you choose to test).</p>
<p> While it is certainly not conclusive, this combination of results supports the research hypothesis that some religious people choose not to answer "true" to the evolved question for religious reasons despite likely being aware of the scientific consensus on the issue. (On the other hand, note that 40% of religious people did answer "true" while 27% of non-religious people answered "false.")</p>
<h2>Saving the Data?</h2>
<p>In order to carry out this analysis you had to create two variables (<span class="InputCode">female</span> and <span class="InputCode">religious</span>) and recode two others (<span class="InputCode">evolve</span> and <span class="InputCode">electron</span>). Should you save the modified data set?</p>
<p>If this is the end of your analysis you don't need to. The commands to create and recode those variables are stored in the do file, so it will load the original GSS sample, create the variables it needs, and then carry out the analysis any time you run it.</p>
<p>If you want to carry out more analysis using these variables, you could save the data set with a command like:</p>
<p class="InputCode">save gss2, replace</p>
<p>You could then write a new do file that starts by loading gss2, and it will be able to use the new and modified variables immediately.</p>
<p>What you should <strong>not</strong> do is save the modified data set with the same name as the original data set (gss_sample) so that it overwrites the original data. If you do that, your do file will not work because  the variables <span class="InputCode">female</span> and <span class="InputCode">religious</span> will already exist and Stata won't allow you to create them again. Worse, if it turns out that you made a mistake, you'll need to download the data set again to fix it rather than being able to just fix your do file and run it again.</p>
<p> For research work, we recommend putting data preparation (e.g. creating and recoding variables) and analysis in separate do files. That way you can be sure that all your analysis is based on the same data.</p>
<h2>Complete Do File</h2>
<p>The following is a complete do file for this section.</p>
<p class="InputCode">capture log close<br/>
log using prtests.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
gen female=(sex==2)<br/>
recode evolved (2=0)<br/>
recode electron (2=0)<br/>
gen religious=(relpersn&lt;3) if relpersn&lt;.<br/>
<br/>
prtest female=0.508<br/>
<br/>
prtest evolved=electron<br/>
<br/>
prtest evolve, by(religious)<br/>
prtest electron, by(religious)<br/>
<br/>
save gss2,replace<br/>
log close </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Downloading Data from Qualtrics and Importing it into Stata</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em><br/>
</p>
<p>This article will teach you how to download data from a survey you've created using Qualtrics and import it into Stata. We'll assume you've already learned to use Qualtrics, created a survey, and collected data using it.</p>
<h2>Downloading the Data</h2>
<p>Begin by <a href="https://uwmadison.co1.qualtrics.com/ControlPanel/">logging into Qualtrics</a>, and opening your survey. Then go to <span class="MenuOutput">Data &amp; Analysis,</span> click the <span class="MenuOutput">Export &amp; Import</span> button, and choose <span class="MenuOutput">Export Data...</span></p>
<table border="1" class="noBorder" width="100%">
<tbody>
<tr>
<td align="center"><img alt="Dialog for downloading data from Qualtrics." height="518" src="https://ssc.wisc.edu/sscc/pubs/sfs/qualtrics_download.PNG" width="569"/></td>
</tr>
</tbody>
</table>
<p>Choose <span class="MenuOutput">CSV</span>, select <span class="MenuOutput">Use numeric values</span> and then <span class="MenuOutput">Download</span>. A CSV, or Comma-Separated Values file, is a text file containing data with one observation per line and a comma between each value. Many computers treat CSV files like Excel files, but they're really just text.</p>
<p><em>Note: for work that is not a class assignment it's usually easier to download an SPSS file and convert it to Stata format using Stat/Transfer, as it will come with  variable and value labels already defined. If your instructor told you to download a CSV file (as is typical in Soc 357) it's to give you an opportunity to practice preparing a data set.</em></p>
<p> Qualtrics will give you a zip file containing the CSV file you actually want to work with. Usually if you tell your browser to open the zip file you'll be able to see the CSV file.</p>
<table border="1" class="noBorder" width="100%">
<tbody>
<tr>
<td align="center"><img alt="Your CSV file, seen inside the Zip file." height="351" src="https://ssc.wisc.edu/sscc/pubs/sfs/zip.PNG" width="570"/></td>
</tr>
</tbody>
</table>
<p>You'll need to put the file in a permanent location, most likely wherever you normally put files associated with your class. On the SSCC network, the U: drive is a good choice. One way to do that is to right click on the file, choose <span class="MenuOutput">Copy</span>, go to the permanent location, and choose <span class="MenuOutput">Paste</span>.</p>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Create a do file in that location</a> and double-click on it to start Stata. Have your do file create a log file and set up the Stata environment <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">as usual</a>. When it comes time to load your data, you'll need to import it, and Qualtrics files need a bit of special attention.</p>
<h2>Importing the Data</h2>
<p>The easy way to import a CSV file is to click <span class="MenuOutput">File</span>, <span class="MenuOutput">Import</span>, <span class="MenuOutput">Text Data</span>. This will open an import window with the various settings you can choose and a preview of how the data will be interpreted with the current settings. Thus you can tweak the settings until the preview makes sense and then click <span class="MenuOutput">OK</span> to actually import the data. Just be sure to copy the resulting command into your do file so you don't have to go through that process every time. You'll start with something like the following:</p>
<table border="1" class="noBorder" width="100%">
<tbody>
<tr>
<td align="center"><img alt="Importing the data. At first there will be rows and columns you don't need." height="624" src="https://ssc.wisc.edu/sscc/pubs/sfs/import1.PNG" width="564"/></td>
</tr>
</tbody>
</table>
<p>The CSV file Qualtrics gives you  contains some variables you almost certainly don't care about, like the date and  time the respondent started the survey, and some rows that don't actually represent observations. Instead they contain "metadata" or information about the data. Most of that metadata cannot be used by Stata, and if you tell Stata to treat those rows as observations it will be very confused. The key to importing Qualtrics data into Stata is to use the <span class="MenuOutput">Set range</span> button to only import the part of the data that you want and can use.</p>
<p>Scroll right until you find the actual questions in your survey. In this example, they start in column 18:</p>
<table border="1" class="noBorder" width="100%">
<tbody>
<tr>
<td align="center"><img alt="Importing the data 2: finding the actual data." height="624" src="https://ssc.wisc.edu/sscc/pubs/sfs/import2.PNG" width="564"/></td>
</tr>
</tbody>
</table>
<p>Note how the actual responses begin in row 5. Now you're ready to click <span class="MenuOutput">Set range</span>:</p>
<table border="1" class="noBorder" width="100%">
<tbody>
<tr>
<td align="center"><img alt="The dialog for setting the rows and columns to be read." height="179" src="https://ssc.wisc.edu/sscc/pubs/sfs/import3.PNG" width="403"/></td>
</tr>
</tbody>
</table>
<p>Under <span class="MenuOutput">Rows</span>, check <span class="MenuOutput">First</span> and set it to <span class="InputCode">5</span>. Under <span class="MenuOutput">Columns</span> check <span class="MenuOutput">First</span> and set it to <span class="InputCode">18</span> (or the corresponding numbers for your data set). When you click OK, the preview window will look quite different:</p>
<table border="1" class="noBorder" width="100%">
<tbody>
<tr>
<td align="center"><img alt="" height="624" src="https://ssc.wisc.edu/sscc/pubs/sfs/import4.PNG" width="564"/></td>
</tr>
</tbody>
</table>
<p>With the metadata rows gone, Stata should recognize that the file contains variable names (<span class="InputCode">q1</span>, <span class="InputCode">q2</span>, etc.) and use them automatically. It will also recognize that the variables are numeric rather than text, so they'll be black instead of red. Click <span class="MenuOutput">OK</span> and you'll get a usable data set. Be sure to copy the command Stata runs into your do file so that in the future this whole process will happen automatically. It will look something like:</p>
<p class="InputCode">import delimited "U:\357\357 Example_March 7, 2018_09.38.csv", rowrange(5) colrange(18)</p>
<h2>Preparing the Data</h2>
<p>While the resulting data set can be used as-is, the variable names are not very informative, and variable and value labels would be very helpful (and possibly required for your class). Variable labels can only be 80 characters long, so you may need to abbreviate your questions. You may also want to create indicator variables for yes/no questions rather than using Qualtrics's default 1/2 coding. Instructions for doing all these things can be found in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-vars.htm">Stata for Students: Creating Variables and Labels</a>. We won't repeat them here, but the following do file is an example of their use. You may need to refer to your survey in Qualtrics to get details about the questions and possible responses.</p>
<p class="InputCode">capture log close<br/>
log using prepdata.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
import delimited "U:\357\357 Example_March 7, 2018_09.38.csv", rowrange(5) colrange(18)<br/>
<br/>
rename q1 difficult<br/>
label variable difficult "Using Stata for assignments in this class was difficult for me."<br/>
label define agree 1 "Strongly Agree" 2 "Somewhat Agree" 3 "Neither Agree Nor Disagree" 4 "Somewhat Disagree" 5 "Strongly Disagree"<br/>
label values difficult agree<br/>
<br/>
gen everProgram=(q2==1) if q2&lt;.<br/>
label variable everProgram "Before this class, had you ever written a computer program?"<br/>
<br/>

gen class=(q3==1) if q3&lt;.
<br/>
label variable class "Before this class, had you ever taken a programming class (HS or College)?"<br/>
<br/>

gen taught=(q4==1) if q4&lt;.<br/>
label variable taught "Were you ever taught to program before high school?"<br/>
<br/>

label define yn 1 "Yes" 0 "No"<br/>
label values everProgram class taught yn

<br/>
<br/>
drop q2 q3 q4<br/>
<br/>
rename q5 device<br/>
label variable device "What kind computing device have you spent the most time using?"<br/>
 rename q7 entDevice //Note how the variables were not numbered sequentially by Qualtrics. Watch for that.<br/>
label variable entDevice "What kind computing device have you spent the most time using for entertainment?"<br/>
<br/>

label define device 1 "Windows Computer" 2 "Apple Computer" 3 "Smartphone or Tablet" 4 "Gaming Console" 5 "Other Device / Does not apply"<br/>
label values device entDevice device<br/>
<br/>
save projectdata, replace<br/>
log close
                </p>
<p> </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/sfs/qualtrics_download.PNG, https://ssc.wisc.edu/sscc/pubs/sfs/zip.PNG, https://ssc.wisc.edu/sscc/pubs/sfs/import1.PNG, https://ssc.wisc.edu/sscc/pubs/sfs/import2.PNG, https://ssc.wisc.edu/sscc/pubs/sfs/import3.PNG, https://ssc.wisc.edu/sscc/pubs/sfs/import4.PNG</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Scatterplots</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>A scatterplot is an excellent tool for examining the relationship between two quantitative variables. One variable is designated as the Y variable and one as the X variable, and a point is placed on the graph for each observation at the location corresponding to its values of those variables. If you believe there is a causal relationship between the two variables, convention suggests you make the cause X and the effect Y, but a scatterplot is  useful even if there is no such relationship.</p>
<p>This section will teach you how to make scatterplots; <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-graphs.htm">Using Graphs</a> discusses what you can do with a graph once you've made it, such as printing it, adding it to a Word document, etc.</p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">scatter.do</span> in that folder that loads the GSS sample as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2>Creating Scatterplots</h2>
<p>To create a scatterplot, use the <span class="InputCode">scatter</span> command, then list the variables you want to plot. The first variable you list will be the Y variable and the second will be the X variable.</p>
<p class="InputCode">scatter weight height </p>
<p>This creates:<br/>
<img alt="Scatter plot of height vs weight" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/scatter.png" width="600"/></p>
<p>The distribution of the points suggests a positive relationship between height and weight (i.e. tall people tend to weigh more).</p>
<h2>Adding a Regression Line</h2>
<p>Regression attempts to find the line that best fits these points. You can plot a regression line or "linear fit" with the <span class="InputCode">lfit</span> command followed, as with <span class="InputCode">scatter</span>, by the variables involved. To add a linear fit plot to a scatterplot, first specify the scatterplot, then put two "pipe" characters (what you get when you press shift-Backslash) to tell Stata you're now going to add another plot, and then specify the linear fit.</p>
<p class="InputCode">scatter weight height || lfit weight height</p>
<p><img alt="scatterplot of height and weight with a fit line" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/lfit.png" width="600"/></p>
<h2>Plotting Subsamples</h2>
<p>You can use similar code to plot subsamples in different colors:</p>
<p class="InputCode">                scatter weight height if sex==1 || scatter weight height if sex==2</p>
<p><img alt="scatter plot of height and weight with men in blue and women in red." height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/sub1.png" width="600"/></p>
<p>Unfortunately, the default legend at the bottom is now completely useless, so you'll need to specify what it should say. You can do so with the <span class="InputCode">legend</span> option, which then contains the <span class="InputCode">order</span> option. Within that you give a list of plot numbers and associated labels much like a list of value labels. The first plot you specify is plot number 1, the second number 2, etc. </p>
<p class="InputCode">scatter weight height if sex==1 || scatter weight height if sex==2, ///<br/>
legend(order(1 "Males" 2 "Females"))</p>
<p><img alt="scatter plot of height and weight with men in blue and women in red with a much mure useful legend" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/sub2.png" width="600"/></p>
<p>An alternative way to plot create this plot is to start with the separate command.</p>
<p class="InputCode">separate weight, by(sex)</p>
<p>This creates two variables: a <span class="InputCode">weight1</span> which only exists for males (i.e. it's missing for females and thus won't be plotted) and a <span class="InputCode">weight2</span> which only exists for females. You can create a scatterplot that plots both of these variables with:</p>
<p class="InputCode">scatter weight1 weight2 height</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/sub3.png" width="600"/></p>
<p>The default legend for this version is more informative, but you'd still probably want to replace it (and add a title for the Y axis).</p>
<h2>Plotting Multiple Variables</h2>
<p>You can use similar syntax to plot multiple variables in the same scatterplot. Just list them after the <span class="InputCode">scatter</span> command. The last variable will always be the X variable and any other variables you list will be Y variables. For example:</p>
<p class="InputCode">scatter weight age height</p>
<p><img alt="" height="400" src="https://ssc.wisc.edu/sscc/pubs/sfs/multi.png" width="600"/></p>
<p>This plot suggests that while weight is positively related to height, age and height have a very weak relationship if any.</p>
<p>If  you run <span class="InputCode">tab height weight</span> (and sift through the rather large amount of output it creates) you'll find a weakness of these plots: sometimes two people have the same height and weight. </p>
<p>Stata dutifully plots two points, but the second one completely covers up the first so that you can only see one. In the subsample graphs, a male (blue) point will be covered up by a female (red) point just because the graph for females was the second one specified.</p>
<p>This can distort the understanding you get of the distribution of the two variables. In this case it probably doesn't make much difference, but it would be a major problem if you tried to make a scatterplot of two categorical variables. (The underlying problem here is that many respondents seem to have rounded their weight to a multiple of five, making weight act somewhat like a categorical variable.)</p>
<p>There are many, many more options you can set for scatterplots, such as titles and colors. The easy way to find all these options is to click <span class="MenuOutput">Graphics</span>, <span class="MenuOutput">Twoway graph</span>, and then <span class="MenuOutput">Create</span>. Tweak the settings there until you get the graph you want, then copy the resulting command into your do file. Read <a href="https://ssc.wisc.edu/sscc/pubs/4-24.htm">An Introduction to Stata Graphics</a> if you want to learn more about making scatterplots.</p>
<h2>Complete Do File</h2>
<p class="InputCode">capture log close<br/>
log using scatter.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
scatter height weight<br/>
<br/>
 scatter height weight || lfit height weight<br/>
<br/>
 scatter height weight if sex==1 || scatter height weight if sex==2<br/>
<br/>
 scatter height weight if sex==2 || scatter height weight if sex==1, ///<br/>
<span class="indent3">legend(order(1 "Males" 2 "Females"))</span><br/>
<br/>
 separate weight, by(sex)<br/>
 scatter weight1 weight2 height<br/>
<br/>
 scatter weight age height<br/>
<br/>
log close<br/>
</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/sfs/scatter.png, https://ssc.wisc.edu/sscc/pubs/sfs/lfit.png, https://ssc.wisc.edu/sscc/pubs/sfs/sub1.png, https://ssc.wisc.edu/sscc/pubs/sfs/sub2.png, https://ssc.wisc.edu/sscc/pubs/sfs/sub3.png, https://ssc.wisc.edu/sscc/pubs/sfs/multi.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Sociology 357</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>This page contains links to articles describing the statistical topics covered in Sociology 357 at UW-Madison. The articles assume you're already familiar with the basics of Stata, especially <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a> and <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>.</p>
<p> <em>SSCC staff try to keep this list up-to-date, but your instructor may add to or take away from it at any time and information you receive from him or her about what material you are responsible for always takes priority.</em></p>
<ul>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#oneway">Frequencies for a Single Categorical Variable</a></p>
<p>For a variable that describes  categories (like sex or race) rather than quantities (like income) frequencies tell you how many observations are in each category. These are examples of univariate statistics, or statistics that describe a single variable.</p>
<p>Categorical variables are also sometimes called factor variables. Indicator variables (also called binary or dummy variables) are just categorical variables with two categories. Frequency tables for a single variable are sometimes called one-way tables.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#sum">Summary Statistics for a Single Quantitative Variable</a></p>
<p>For a variable that describes quantities (like income) the mean tells you what the expected value of the variable is, and the standard deviation tells you how much it varies. However, the median and percentiles often give you a better sense of how the variable is distributed, especially for variables that are not symmetric (like income, which often has a few very high values). These are also univariate statistics.</p>
<p>Quantitative variables are often called continuous variables. Means are often called averages, and variance is just the standard deviation squared. The median is also the 50th percentile.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#twoway">Frequencies for Two Categorical Variables</a></p>
<p>For two categorical variables, frequencies tell you how many observations fall in each combination of the two categorical variables (like black women or hispanic men) and can give you a sense of the relationship between the two variables. These are examples of bivariate statistics, or statistics that describe the joint distribution of the two variables.</p>
<p>Tables of frequencies for two variables are often called two-way tables, contingency tables, or crosstabs.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#tabsum">Summary Statistics for One Quantitative Variable over One Categorical Variable</a></p>
<p>For a  quantitative variable and a categorical variable, the mean value of the quantitative variable for those observations that fall in each category of the categorical variable can give you a sense of how the two variables are related. Of then the question of interest is whether the distribution of the quantitative variable is different for different categories. These are also examples of bivariate statistics.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#threeway">Frequencies for Three or More Categorical Variables</a></p>
<p>For three or more categorical variables, frequencies <a href="#threeway"></a>will tell you how many observations fall in each combination of the variables and give you a sense of their relationships just like they did with two categorical variables. These are examples of multivariate statistics.</p>
</li>
<li>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#twoway_sum">Summary Statistics for One Quantitative Variable over Two or More Categorical Variables</a></p>
<p>For a quantitative variable and two or more categorical variables, the  the mean value of the quantitative variable for those observations in each combination of the categorical variables can give you a sense of how the variables are related just like they did with a quantitative variable and one categorical variable. These are examples of multivariate statistics.</p>
</li>
</ul>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Sociology 357</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>This page contains links to articles describing the statistical topics covered in Sociology 360 at UW-Madison. The articles assume you're already familiar with the basics of Stata, especially <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a> and <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>.</p>
<p> <em>SSCC staff try to keep this list up-to-date, but your instructor may add to or take away from it at any time and information you receive from him or her about what material you are responsible for always takes priority.</em></p>
<ul>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ttest.htm">ttest</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-ttest.htm">: Test hypotheses about means</a></li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-prtest.htm">prtest</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-prtest.htm">: Test hypotheses about proportions</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-hist.htm"><span class="InputCode">histogram</span>: Graphical representation of a variable's distribution</a></li>
<li><span class="InputCode"><a class="InputCode" href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-bargraph.htm">graph bar</a></span><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-bargraph.htm">: Bar graph representing summary statistics</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-scatter.htm"><span class="InputCode">scatter</span>: Scatterplot of two variables</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-cor.htm"><span class="InputCode">correlate</span>: Correlations between variables</a><br/>
<br/>
</li>
</ul>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: How Stata Commands Work</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>Stata tries very hard to make all its commands work the same way. Spending a little time learning the syntax itself will make it much easier to use commands later.</p>
<p>To carry out the examples in this section, you'll need to have created an SFS folder and downloaded the gss_sample data set as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Create a new do file in that folder called <span class="InputCode">syntax.do</span>, as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. To start with it should contain:</p>
<p class="InputCode">capture log close<br/>
                  log using syntax.log, replace<br/>
<br/>
                clear all<br/>
                set more off<br/>
<br/>
                use gss_sample<br/>
<br/>
                // work will go here<br/>
<br/>
                log close
                </p>
<p>The example commands will go after <span class="InputCode">use gss_sample </span>and before <span class="InputCode">log close</span>. Add the example commands to this do file as you go, and  run it frequently to see the results.</p>
<h2>Commands</h2>
<p>Most Stata commands are verbs. They tell Stata to do something: <span class="InputCode">summarize</span>, <span class="InputCode">tabulate</span>, <span class="InputCode">regress</span>, etc. Normally the command itself comes first and then you tell Stata the details of what you want it to do after.</p>
<p>Many commands can be abbreviated: <span class="InputCode">sum</span> instead of <span class="InputCode">summarize</span>, <span class="InputCode">tab</span> instead of <span class="InputCode">tabulate</span>, <span class="InputCode">reg</span> instead of <span class="InputCode">regress</span>. Commands that can destroy data, like <span class="InputCode">replace</span>, cannot be abbreviated.</p>
<h2>Variable Lists</h2>
<p>A list of variables after a command tells the command which variables to act on. First try <span class="InputCode">sum</span> (summarize) all by itself, and then followed by age:</p>
<p class="InputCode">sum<br/>
                  sum age
                  <br/>
</p>
<p>If you don't specify which variables <span class="InputCode">sum</span> should act on it will give you summary statistics for all the variables in the data set. In this case that's a pretty long list. Putting <span class="InputCode">age</span> after <span class="InputCode">sum</span> tells it to only give you summary statistics for the <span class="InputCode">age</span> variable.</p>
<p>If you list more than one variable, the command will act on all of them:</p>
<p class="InputCode">sum age yearsjob prestg10</p>
<p>This gives you summary statistics for age, years on the job, and a rating of the respondent's job's prestige.</p>
<h2>If Conditions</h2>
<div>
<p>An <em>if condition</em> tell a command which observations it should act on. It will only act on those observations where the condition is true. This allows you to do things with subsets of the data. An if condition comes after a variable list:</p>
<p class="InputCode">sum yearsjob if sex==1</p>
<p>This gives you summary statistics for years on the job for just the male respondents (in the GSS 1 is male and 2 is female).</p>
<p>Note the two equals signs! In Stata you use one equals sign when you're setting something equal to something else (see <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-vars.htm">Creating Variables</a>) and two equals signs when you're asking if two things are equal. Other operators you can use are:</p>
<table border="0">
<tr>
<td>==</td>
<td>Equal</td>
</tr>
<tr>
<td>&gt;</td>
<td>Greater than</td>
</tr>
<tr>
<td>&lt;</td>
<td>Less than</td>
</tr>
<tr>
<td>&gt;=</td>
<td>Greater than or equal to</td>
</tr>
<tr>
<td>&lt;=</td>
<td>Less than or equal to</td>
</tr>
<tr>
<td>!=</td>
<td>Not equals</td>
</tr>
</table>
<p>! all by itself means "not" and reverses whatever condition follows it.                  </p>
<h2>Combining Conditions</h2>
<p>You can combine conditions with <span class="InputCode">&amp;</span> (logical and) or <em class="InputCode">|</em> (logical or). The character used for logical or is called the "pipe" character and you type it by pressing <span class="InputCode">Shift-Backslash</span>, the key right above <span class="InputCode">Enter</span>. Try:                  </p>
<p class="InputCode">sum yearsjob if sex==1 &amp; income&gt;=9<br/>
                  sum yearsjob if sex==1 | income&gt;=9</p>
<p>The first gives you summary statistics for years on the job for respondents who are male <em>and</em> have a household income of $10,000 or more. The second gives you summary statistics for years on the job for respondents who are  male <em>or</em> have a household income of $10,000 or more, a very different group.</p>
<p>Any conditions you combine must be complete. If you want summary statistics for years on the job for respondents who are either black (race==2) or "other" (race==3) you can <em>not</em> use:</p>
<p class="InputCode">sum yearsjob if race==2 | 3 // don't do this</p>
<p>(What this does and why is left as an exercise for the reader, but it's not what you want.) Instead you should use:</p>
<p class="InputCode">sum yearsjob if race==2 | race==3 // do this instead</p>
<h2>Missing Values</h2>
<p>If you have missing values in your data, you need to keep them in mind when writing if conditions. Recall that the generic missing value (<span class="InputCode">.</span>) acts like positive infinity, and the extended missing values (<span class="InputCode">.a</span>, <span class="InputCode">.b</span>, etc.) are even bigger. So if you type:</p>
<p class="InputCode">sum yearsjob if age&gt;65</p>
<p>you are not just getting summary statistics for years on the job for respondents who are older than 65. Anyone with a missing value for age is also included. Assuming you're interested in people who are known to be older than 65, you should exclude the people with missing values for <span class="InputCode">age</span> with a second condition:</p>
<p class="InputCode">sum yearsjob if age&gt;65 &amp; age&lt;.</p>
<p>It makes a difference!</p>
<p>Why <span class="InputCode">age&lt;.</span> rather than <span class="InputCode">age!=.</span>? For the <span class="InputCode">age</span> variable, the GSS uses <span class="InputCode">.c</span> for missing and <span class="InputCode">age!=. </span>would not exclude <span class="InputCode">.c</span>. Other variables use different extended missing values, and some use more than one. Using <span class="InputCode">age&lt;.</span> guarantees you're excluding all missing values, even if you don't know ahead of time which ones the data set uses.</p>
<h2>Binary Variables</h2>
<p>If you have a binary variable coded as 0 or 1, you can take advantage of the fact that to Stata 1 is true and 0 is false. Imagine that instead of a variable called <span class="InputCode">sex</span> coded 1/2, you had a variable called <span class="InputCode">female</span> coded 0/1. Then you could do things like:</p>
<p class="InputCode">sum yearsjob if female<br/>
                    sum yearsjob if !female
                  // meaning "not female"</p>
<p>Just one thing to be careful of: to Stata everything except 0 is true, including missing. If <span class="InputCode">female</span> had missing values you would need to use:</p>
<p class="InputCode">sum yearsjob if female &amp; female&lt;. // exclude missing values</p>
<p>or:</p>
<p class="InputCode">sum yearsjob if female==1 // automatically excludes missing values</p>
<p>Unfortunately the GSS does not code its binary variables 0/1 so you can't actually run these four commands. But many data sets data sets do, and if you have to create your own binary variables you can make them easy to use by coding them 0/1.</p>
<h2>Options</h2>
<p>Options change how a command works. They go after any variable list or if condition, following a comma. The comma means "everything after this is options" so you only type one comma no matter how many options you're using.</p>
<p>The <span class="InputCode">detail</span> option tells <span class="InputCode">summarize</span> to calculate percentiles (including the 50th percentile, or median) and some additional moments.</p>
<p class="InputCode">sum yearsjob, detail</p>
<p>Many options can be abbreviated like commands can be—in this case just <span class="InputCode">d</span> would do.</p>
<p>Some options require additional information, like the name of a variable or a number. Any additional information an option needs goes in parentheses directly after the option itself.</p>
<p> Recall that when we did <span class="InputCode">sum</span> all by itself and it gave us summary statistics for all the variables, it put a separator line after every five variables. You can change that with the <span class="InputCode">separator</span> (or just <span class="InputCode">sep</span>) option:</p>
<p class="InputCode">sum, sep(10)</p>
<p>The <span class="InputCode">(10)</span> in parentheses tells the separator option to put a separator between every ten variables. You'll learn more useful options that need additional information in the articles on statistical commands.</p>
<h2>By</h2>
<p><em>By</em> allows you to execute a command separately for subgroups within your data. Try:</p>
<p class="InputCode">bysort sex: sum yearsjob</p>
<p></p>
<p> This gives you summary statistics for years on the job for both males and females, calculated separately.</p>
<p><em>By </em>is a prefix, so it comes before the command itself. It's followed by the variable (or variables) that identifies the subgroups of interest, then a colon. The data must be sorted for <em>by</em> to work, so <span class="InputCode">bysort</span> is a shortcut that first sorts the data and then executes the by command. Now that the data set is sorted by <span class="InputCode">sex</span>, you can just use <span class="InputCode">by</span> in subsequent commands:</p>
<p class="InputCode">by sex: sum prestg10</p>
<h2>Complete Do File</h2>
<p>The following is a do file containing all the example commands in this section:</p>
<p class="InputCode">capture log close<br/>
log using syntax.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
sum<br/>
sum age<br/>
sum age yearsjob
prestg10<br/>
<br/>
sum yearsjob if sex==1<br/>
sum yearsjob if sex==1 &amp; income&gt;=9<br/>
sum yearsjob if sex==1 | income&gt;=9<br/>
<br/>
sum yearsjob if race==2 | 3 // don't do this<br/>
sum yearsjob if race==2 | race==3 // do this instead<br/>
<br/>
sum yearsjob if age&gt;65<br/>
sum yearsjob if age&gt;65 &amp; age&lt;. // exclude missing values<br/>
<br/>
/* Things you could do if you had female coded 0/1<br/>
<span class="indent3"> instead of sex coded 1/2:</span><br/>
sum yearsjob if female<br/>
sum yearsjob if !female // meaning "not female"<br/>
sum yearsjob if female &amp; female&lt;. // exclude missing values<br/>
sum yearsjob if female==1 // automatically excludes missing values<br/>
*/
<br/>
<br/>
sum yearsjob, detail<br/>
sum, sep(10)<br/>
<br/>
bysort sex: sum yearsjob<br/>
by sex: sum prestg10<br/>
<br/>
log close                </p>
</div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: t-tests</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>t-tests are frequently used to test hypotheses about the population mean of a variable. The command to run one is simply <span class="InputCode">ttest</span>, but the syntax will depend on the hypothesis you want to test. In this section we'll discuss the following types of tests:</p>
<h3><a href="#onesample">The Population Mean is Equal to Some Specified Value</a></h3>
<p>One type of hypothesis simply asks whether the population mean of a variable is equal to some particular value of interest. This is called a single-sample t-test, because you look at the entire sample at once.</p>
<h3> <a href="#paired">The Population Means for Two Variables are the Same</a></h3>
<p>Another type of hypothesis looks at whether two variables have the same population mean. This is called a paired-sample t-test, because the test assumes that the values of the two variables for the same observation go together (i.e. the value of X for observation 1 has a relationship to the value of Y for observation 1 that does not exist between the value of X for observation 1 and the value of Y for observation 2).</p>
<h3><a href="#twosample">The Population Means for Two Subsamples are the Same</a></h3>
<p>The final type of hypothesis we'll consider is whether two groups have the same population mean for a single variable. This is called a two-sample t-test, and is  the most common.</p>
<p>For all these tests we've described the null hypothesis. Usually the null hypothesis is the opposite of what you're really interested in. For example, if you're investigating differences between men and women in the mean education level, your null hypothesis will usually be that they are the same. Your alternative hypothesis could then be one of the following: that the mean education level of women is higher than the mean education level of men, that the mean education level of men is higher than the mean education level of women, or that the mean levels of education are different regardless of which is higher.</p>
<p> Stata will report results for all three alternative hypotheses, but you should choose which one you're interested in ahead of time. Looking at the results and then picking the alternative hypothesis that matches what you'd like to see will increase the probability of drawing the wrong conclusion from the test.</p>
<p>We will discuss the interpretation of the t-test in detail for the first type of hypothesis (that the mean is equal to a specified value) but the discussion applies to  all the hypotheses a t-test can test.                </p>
<h2>Setting Up</h2>
<p>If you plan to carry out the examples in this article, make sure you've downloaded the GSS sample to your U:\SFS folder as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>. Then create a do file called <span class="InputCode">ttests.do</span> in that folder that loads the GSS sample as described in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>. If you plan on applying what you learn directly to your homework, create a similar do file but have it load the data set used for your assignment.</p>
<h2 id="onesample">Hypothesis: The Population Mean is Equal to Some Specified Value</h2>
<p>Suppose you want to test the hypothesis that the population mean of <span class="InputCode">educ</span> is 14 years. The syntax is simply:</p>
<p class="InputCode">ttest educ=14</p>
<p>This gives the output:</p>
<pre class="InputCode">One-sample t test
------------------------------------------------------------------------------
Variable |     Obs        Mean    Std. Err.   Std. Dev.   [95% Conf. Interval]
---------+--------------------------------------------------------------------
    educ |     254    13.38583    .2093408    3.336343    12.97355     13.7981
------------------------------------------------------------------------------
    mean = mean(educ)                                             t =  -2.9338
Ho: mean = 14                                    degrees of freedom =      253

    Ha: mean &lt; 14               Ha: mean != 14                 Ha: mean &gt; 14
 Pr(T &lt; t) = 0.0018         Pr(|T| &gt; |t|) = 0.0037          Pr(T &gt; t) = 0.9982</pre>
<p>The mean of <span class="InputCode">educ</span> in the sample<span class="InputCode">,</span> which is also the best estimate of the population mean, is 13.38. But in order to evaluate the hypothesis that mean is really 14, you have to consider the uncertainty about that estimate. The 95% confidence interval ranges from 12.97 to 13.80, which does not include 14, so it's not looking good for our null hypothesis.</p>
<p>Formal evaluation compares the null hypothesis (<span class="InputCode">Ho</span>), that the mean is 14, with one of three alternative hypotheses (<span class="InputCode">Ha</span>): that the mean is less than 14, that the mean is not equal to 14 but could be bigger or smaller, and that the mean is greater than 14. You must pick the alternative hypothesis you're interested in testing before running the test.</p>
<p>First consider <span class="InputCode">Ha: mean &lt; 14</span>. If the population mean is 14, then the probability of drawing a sample with a mean of 13.38 or less, given the number of observations we have and the standard deviation we observe, is 0.0018 (i.e. it's extremly unlikely). This is less than .05, so we reject the null hypothesis that the mean is 14 in favor of the alternative that the mean is less than 14.</p>
<p>Next consider <span class="InputCode">Ha: mean != 14</span>. If the population mean is 14, then the probability of drawing a sample that is at least 14 - 13.38 = 0.62 away from that mean in either direction is 0.0037 (again, given the number of observations we have and the standard deviation we observe). This is exactly twice the probability of the previous hypothesis, though this is obscured by rounding. The previous hypothesis was a one-tail test (i.e. looking at the probability that the outcome is out in one of the "tails" of the probability distribution) while this is a two-tail test (i.e. looking at the probability that the outcome is in either tail of the distribution). Again the probability is less than 0.05, so we reject the null hypothesis that the mean is 14 in favor of the alternative hypothesis that the mean is something other than 14.</p>
<p>Finally consider <span class="InputCode">Ha: mean &gt; 14</span>. If the population mean is 14, then the probability of drawing a sample with a mean that is 13.38 or greater is 0.9982 (i.e. it's almost certain). This probability is nowhere near less than 0.05, so in this case we accept the null hypothesis that the mean is 14 rather than the alternative that the mean is greater than 14.</p>
<h3>Changing the Confidence Level</h3>
<p>If you want to consider a different confidence level, use the <span class="InputCode">level()</span> option with the desired confidence level in the parentheses:</p>
<p class="InputCode">ttest educ=14, level(90)</p>
<p>This produces:</p>
<pre class="InputCode">One-sample t test
------------------------------------------------------------------------------
Variable |     Obs        Mean    Std. Err.   Std. Dev.   [90% Conf. Interval]
---------+--------------------------------------------------------------------
    educ |     254    13.38583    .2093408    3.336343    13.04023    13.73143
------------------------------------------------------------------------------
    mean = mean(educ)                                             t =  -2.9338
Ho: mean = 14                                    degrees of freedom =      253

    Ha: mean &lt; 14               Ha: mean != 14                 Ha: mean &gt; 14
 Pr(T &lt; t) = 0.0018         Pr(|T| &gt; |t|) = 0.0037          Pr(T &gt; t) = 0.9982</pre>
<p>The only change is that you are given a 90% confidence interval rather than a 95% confidence interval. The true mean will fall into this interval 90% of the time rather than 95% of the time like in the prior results, so this interval is slightly smaller.</p>
<h2 id="paired">Hypothesis: The Population Means for Two Variables are the Same</h2>
<p>Suppose you wanted to test the hypotheses that the population mean for the respondent's father's education  (<span class="InputCode">paeduc</span>) is the same as the population mean for the respondent's mother's education (<span class="InputCode">maeduc</span>). This is a paired sample test because the mother and father of the same respondent are related. To do this, run:</p>
<p class="InputCode">ttest paeduc=maeduc</p>
<p>This produces:</p>
<pre class="InputCode">Paired t test
------------------------------------------------------------------------------
Variable |     Obs        Mean    Std. Err.   Std. Dev.   [95% Conf. Interval]
---------+--------------------------------------------------------------------
  maeduc |     172    11.94767    .2895882    3.797913    11.37605     12.5193
  paeduc |     172    11.98256    .3293803    4.319782    11.33238    12.63273
---------+--------------------------------------------------------------------
    diff |     172   -.0348837    .2189349    2.871305   -.4670468    .3972794
------------------------------------------------------------------------------
     mean(diff) = mean(maeduc - paeduc)                           t =  -0.1593
 Ho: mean(diff) = 0                              degrees of freedom =      171

 Ha: mean(diff) &lt; 0           Ha: mean(diff) != 0           Ha: mean(diff) &gt; 0
 Pr(T &lt; t) = 0.4368         Pr(|T| &gt; |t|) = 0.8736          Pr(T &gt; t) = 0.5632</pre>
<p>Stata calculated the difference (<span class="InputCode">diff</span>) between the two means as <span class="InputCode">maeduc - paeduc</span>, so the alternative hypothesis <span class="InputCode">mean(diff) &lt; 0</span> is  also the hypothesis that <span class="InputCode">paeduc</span> is greater than <span class="InputCode">maeduc</span>. In this case the probabilities associated with all three alternative hypotheses are well above 0.05, so no matter which alternative hypothesis you chose to test you would accept the null hypothesis that the means are the same. More precisely, we do not have sufficient evidence to reject the hypothesis that they are same. It's possible we could reject that hypothesis if we had more observations, for example.</p>
<h2 id="twosample">Hypothesis: The Population Means for Two Subsamples are the Same</h2>
<p>Suppose you wanted to test the hypothesis that the population mean of <span class="InputCode">educ</span> is the same for men and women. To do this, run:</p>
<p class="InputCode">ttest educ, by(sex)</p>
<pre class="InputCode">Two-sample t test with equal variances
------------------------------------------------------------------------------
   Group |     Obs        Mean    Std. Err.   Std. Dev.   [95% Conf. Interval]
---------+--------------------------------------------------------------------
    male |     110    13.33636    .3275703    3.435586    12.68713     13.9856
  female |     144    13.42361    .2725067     3.27008    12.88495    13.96227
---------+--------------------------------------------------------------------
combined |     254    13.38583    .2093408    3.336343    12.97355     13.7981
---------+--------------------------------------------------------------------
    diff |           -.0872475    .4232854               -.9208752    .7463803
------------------------------------------------------------------------------
    diff = mean(male) - mean(female)                              t =  -0.2061
Ho: diff = 0                                     degrees of freedom =      252

    Ha: diff &lt; 0                 Ha: diff != 0                 Ha: diff &gt; 0
 Pr(T &lt; t) = 0.4184         Pr(|T| &gt; |t|) = 0.8369          Pr(T &gt; t) = 0.5816</pre>
<p><span class="InputCode">diff</span> is defined as <span class="InputCode">mean(male) - mean(female)</span>, so the alternative hypothesis <span class="InputCode">diff &lt; 0</span> is also the hypothesis that the mean of <span class="InputCode">educ</span> for females is greater than the mean of <span class="InputCode">educ</span> for males. All the probabilities are well above 0.05, so once again no matter which alternative hypothesis you chose to test you will not reject the null hypothesis that the mean level of education for males and females is the same.</p>
<p>Note that this test assumed that the population variance of <span class="InputCode">educ</span> was the same for males and females. We can see from the output that the standard deviation (which is the square root of the variance) is slightly higher for males in the sample. If we think that difference is real, we can tell the <span class="InputCode">ttest</span> command to take it into account by adding the <span class="InputCode">unequal</span> option:</p>
<p class="InputCode">ttest educ, by(sex) unequal</p>
<p>In this case it makes very little difference.</p>
<h2>Complete Do File</h2>
<p>The following is a complete do file for this section.</p>
<p class="InputCode">capture log close<br/>
log using ttests.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
ttest educ=14<br/>
ttest educ=14, level(90)<br/>
<br/>
ttest paeduc=maeduc<br/>
<br/>
ttest educ, by(sex)<br/>
ttest educ, by(sex) unequal<br/>
<br/>
log close </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Stata's User Interface</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>In this section, we'll give you a brief introduction to Stata's user interface, focusing on the parts you'll use to run do files.</p>
<table border="0" class="noBorder">
<tr>
<td><img alt="" height="478" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sfr/ui2.png" width="768"/></td>
</tr>
</table>
<p>Stata's main user interface is made up of five windows. The big one in the middle is the <span class="MenuOutput">Results</span> windows, where you'll see the results of your analysis. Underneath it is the <span class="MenuOutput">Command</span> window. You can type a command here, press <span class="InputCode">Enter</span>, and immediately see its results. This is useful for exploring and experimenting, but for real work you should use a <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">do file</a>.</p>
<p>One the left is the <span class="MenuOutput">Review</span> window, which contains a list of commands you've run previously. You can click on one to paste it into the <span class="MenuOutput">Command</span> window and run it again (or just press <span class="InputCode">Page Up</span> until you get the command you want<span class="InputCode">)</span>. </p>
<p>On the right, the <span class="MenuOutput">Variables</span> window lists the variables in your current data set. Underneath it, the <span class="MenuOutput">Properties</span> window gives you additional information about the variable selected in the <span class="MenuOutput">Variables</span> window and about the data set as a whole. If you click twice on a variable name in the <span class="MenuOutput">Variables</span> window, the name will be pasted into the <span class="MenuOutput">Command</span> window. You can also start typing a variable name in the <span class="MenuOutput">Command</span> window and  press <span class="InputCode">Tab</span>, and Stata will try go guess which variable you want.</p>
<p>A few key buttons across the top:</p>
<p>The button that looks like a pencil writing in a notebook opens the <span class="MenuOutput">Do File Editor</span>. We'll talk about it in <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>.</p>
<p>The button that looks like pencil writing in a spreadsheet opens the <span class="MenuOutput">Data Editor</span>, and the button that looks like a magnifying glass looking at a spreadsheet opens the <span class="MenuOutput">Data Browser</span>. Both let you see the data set itself, which is very useful. The difference is that the <span class="MenuOutput">Data Editor</span> will let you change the data and the <span class="MenuOutput">Data Browser</span> will not. You don't want to risk changing your data by accident so you should generally use the <span class="MenuOutput">Data Browser</span>. You should only use the <span class="MenuOutput">Data Editor</span> if you need to enter brand new data for a class assignment.</p>
<p>The button that looks like an octagon with a small 'x' inside will turn stop-sign red if Stata is working on something (including when Stata pauses because the <span class="MenuOutput">Results</span> window is full). You can  click that button to tell Stata to quit whatever it is doing. Pressing <span class="InputCode">q</span> will do the same thing.</p>
<p>One button you should <em>not</em> click is the button that looks like a floppy disk. This button will save the data currently in memory, including any changes you've made, over the original data file. <em>Always save modified data sets with a new name so you keep the original data intact.</em><br/>
</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sfr/ui2.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Creating Variables and Labels</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>In this article you'll learn how to create new variables and change existing variables.</p>
<p>Assuming you created an SFS folder while reading <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a>, go to that folder and create a new do file called <span class="InputCode">newvars.do</span>. Start with the usual setting up (see <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-do_files.htm">Doing Your Work Using Do Files</a>):</p>
<p class="InputCode">capture log close<br/>
log using newvars.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
// do work here<br/>
<br/>
log close</p>
<h2>Generate and Replace</h2>
<p>You create a new variable in Stata using the <span class="InputCode">generate</span> command, usually abbreviated <span class="InputCode">gen</span>. You can change the value of an existing variable using <span class="InputCode">replace</span>. Since <span class="InputCode">replace</span> can destroy data, it has no abbreviation. The basic syntax is the same for both commands:</p>
<p class="InputCode">gen <span class="Parameter">variable</span>=<span class="Parameter">something</span><br/>
                  replace <span class="Parameter">variable</span>=<span class="Parameter">something</span><br/>
</p>
<p>The something you're setting the variable to will be the result of some math, but it can be really simple math, like a single number.</p>
<p>The <span class="InputCode">gen</span> and <span class="InputCode">replace</span> commands will often have <em>if</em> conditions. With <span class="InputCode">gen</span>, an observation that doesn't meet the <em>if</em> condition will not get a value for the new variable—it will be missing instead. With <span class="InputCode">replace</span>, an observation that doesn't meet the <em>if</em> condition is left unchanged.</p>
<h2>Recoding with Generate and Replace</h2>
<p>Let's turn  the <span class="InputCode">educ</span> variable ("HIGHEST YEAR OF SCHOOL COMPLETED") into a categorical variable <span class="InputCode">edu_cat</span>, with the categories "Less than High School", "High School", "Some College", "Bachelors", and "Advanced". You'll need an initial <span class="InputCode">gen</span> command to create the new variable and handle one of the categories, and a <span class="InputCode">replace</span> command for each of the remaining categories. <em>if</em> conditions ensure that each respondent gets the right value of <span class="InputCode">edu_cat</span> based on its value of <span class="InputCode">educ</span>.</p>
<p class="InputCode">gen edu_cat=1 if educ&lt;12<br/>
                  replace edu_cat=2 if educ==12<br/>
                  replace edu_cat=3 if educ&gt;12 &amp; educ&lt;16<br/>
                  replace edu_cat=4 if educ==16<br/>
                replace edu_cat=5 if educ&gt;16 &amp; educ&lt;. </p>
<p>If <span class="InputCode">educ</span> is missing then <span class="InputCode">edu_cat</span> will be missing because a missing value does not meet any of the <em>if</em> conditions in these commands.</p>
<h2>The Recode Command</h2>
<p>You can also do this task using the <span class="InputCode">recode</span> command, which is easier to use but  not as flexible as <span class="InputCode">gen</span> and <span class="InputCode">replace</span>. With <span class="InputCode">recode</span> you specify a list of rules in the form <span class="InputCode">(</span><span class="Parameter">old values</span><span class="InputCode">=</span><span class="Parameter">new value</span><span class="InputCode">)</span>. The old values can be a single number, a list of numbers, or a range of numbers which you describe with <span class="Parameter">start</span><span class="InputCode">/</span><span class="Parameter">end</span>:</p>
<p class="InputCode">recode educ (0/11=1) (12=2) (13 14 15=3) (16=4) (17/20=5) ///<br/>
<span class="indent3">                , gen(edu_cat2)</span></p>
<p>The <span class="InputCode">gen</span> option tells <span class="InputCode">recode</span> to create a new variable (<span class="InputCode">edu_cat2</span>) to store the results. If you don't include a <span class="InputCode">gen</span> option, <span class="InputCode">recode</span> will change the original variable. <span class="InputCode">edu_cat2</span> will be missing if <span class="InputCode">educ</span> is missing  because none of the <span class="InputCode">recode</span> rules say to change missing values to anything else.</p>
<h2>Labels</h2>
<p>Variable labels can tell you more about the variable itself, like the actual question asked. You can set them with the<span class="InputCode"> label variable</span> command:</p>
<p class="InputCode">label variable edu_cat "Education Category"</p>
<p>Value labels tell you what the individual values of the variable mean. To set them, you first define the labels and then apply them to a variable:</p>
<p class="InputCode">label define edcats 1 "Less than HS" 2 "HS" 3 "Some College" ///<br/>
<span class="indent3">                  4 "Bachelors" 5 "Advanced"</span><br/>
                label values edu_cat edcats </p>
<p>If you look in the data browser at the <span class="InputCode">edu_cat</span> variable after running these commands, you'll see the text labels rather than the raw numbers.</p>
<h2>Rename</h2>
<p>You can change the name of a variable with the <span class="InputCode">rename</span> command. Changing meaningless variable names (like Q26 for "answer to question 26") to descriptive variable names can make it much easier to keep track of your variables. The GSS uses descriptive variable names, which is good, but they're very short and sometimes cryptic. For example, age of the respondent at the time their first child was born is <span class="InputCode">agekdbrn</span>. You could change it with:</p>
<p class="InputCode">rename agekdbrn age_at_1st_birth</p>
<h2>Indicator (Binary) Variables</h2>
<p>A variable  can  be set to the result of a condition. If the condition is true the variable will get a 1, and if it is false the variable will get a 0. This makes it very easy to create indicator or binary variables, which tell you if something is true or not.</p>
<p>Consider the questions <span class="InputCode">bigbang</span> ("THE UNIVERSE BEGAN WITH A HUGE EXPLOSION"), <span class="InputCode">electron</span> ("ELECTRONS ARE SMALLER THAN ATOMS"), and <span class="InputCode">laser</span> ("LASERS WORK BY FOCUSING SOUND WAVES"). They are true/false questions, with "true" coded as 1 and "false" coded as 2. They are designed to measure the scientific knowledge of the respondent. The correct answer to the first two questions is "true," but the correct answer to the third question is "false" (lasers are coherent light, not focused sound). Many respondents have missing values for these questions.</p>
<p>You can create corresponding indicator variables for "respondent got this question right" with the following commands:</p>
<p class="InputCode">gen bigbang_right=(bigbang==1) if bigbang&lt;.<br/>
gen electron_right=(electron==1) if electron&lt;.<br/>
gen laser_right=(laser==2) if laser&lt;.</p>
<p>The new <span class="InputCode">bigbang_right</span> variable will get a 1 if <span class="InputCode">bigbang</span> is 1 (i.e. the condition <span class="InputCode">(bigbang==1)</span> is true). It will get a 0 otherwise, unless <span class="InputCode">bigbang</span> is missing. In that case the <span class="InputCode">if bigbang&lt;.</span> condition takes over and says <span class="InputCode">bigbang_right</span> should be missing. Note that without that <em>if</em> condition, respondents with a missing value for <span class="InputCode">bigbang</span> would get 0 for <span class="InputCode">bigbang_right</span>, as if they had answered the question and gotten it wrong.</p>
<p>The variable names make these variables easy to understand: if <span class="InputCode">bigbang_right</span> is 1, or true, that means "Yes, this person got the big bang question right" while if <span class="InputCode">bigbang_right</span> is 0, or false, that means "No, this person did not get the big bang question right."</p>
<h2>Creating a Scale (Index)</h2>
<p>Next create a scale or index that measures the respondent's overall scientific knowledge:</p>
<p class="InputCode">gen sci_know=bigbang_right+electron_right+laser_right</p>
<p>The resulting scale will be the number of questions the respondent got right. It will be missing if the respondent didn't answer all of the questions, which is good: again, we do not want to treat not answering a question the same as answering it but getting it wrong.                </p>
<h2>Variables Based on Statistics</h2>
<p>The <span class="InputCode">egen</span> ("extended generate") command lets you create variables containing statistics based on your data. For example:</p>
<p class="InputCode">egen mean_sci_know=mean(sci_know)<br/>
</p>
<p>This creates a variable containing the mean  of <span class="InputCode">sci_know</span>. To see all the things <span class="InputCode">egen</span> can do, type <span class="InputCode">help egen</span>.</p>
<h2>Statistics for Groups</h2>
<p>If you want to calculate statistics for groups rather than the entire data set, use <em>by</em> to tell Stata to run <span class="InputCode">egen</span> separately for each group.</p>
<p class="InputCode">bysort edu_cat: egen edu_mean_sci_know=mean(sci_know)                </p>
<p>This calculates the mean of <span class="InputCode">sci_know</span> for each education category. To see the results, we'll jump ahead a bit and use the <span class="InputCode">tab</span> command with the <span class="InputCode">sum</span> option.</p>
<p class="InputCode">tab edu_cat, sum(mean_sci_know_edu)</p>
<p>The results show that the average of <span class="InputCode">sci_know</span> is higher at higher levels of education, as we'd expect. If you just wanted to see those means, not store them in a variable, you could run:</p>
<p class="InputCode">tab edu_cat, sum(sci_know)</p>
<p>This is an example of <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-descriptives.htm#tabsum">Summary Statistics for One Quantitative Variable over One Categorical Variable</a>.</p>
<h2>Complete Do File</h2>
<p>The following is a complete do file for this section:</p>
<p class="InputCode">capture log close<br/>
log using newvars.log, replace<br/>
<br/>
clear all<br/>
set more off<br/>
<br/>
use gss_sample<br/>
<br/>
gen edu_cat=1 if educ&lt;12<br/>
replace edu_cat=2 if educ==12<br/>
replace edu_cat=3 if educ&gt;12 &amp; educ&lt;16<br/>
replace edu_cat=4 if educ==16<br/>
replace edu_cat=5 if educ&gt;16 &amp; educ&lt;.<br/>
<br/>
recode educ (0/11=1) (12=2) (13 14 15=3) (16=4) (17/20=5) ///<br/>
<span class="indent3"> , gen(edu_cat2)</span><br/>
<br/>
label variable edu_cat "Education Category"

<br/>
<br/>
label define edcats 1 "Less than HS" 2 "HS" 3 "Some College" ///<br/>
<span class="indent3"> 4 "Bachelors" 5 "Advanced"
</span><br/>
label values edu_cat edcats<br/>
<br/>
rename agekdbrn age_at_1st_birth<br/>
<br/>
gen bigbang_right=(bigbang==1) if bigbang&lt;.<br/>
gen electron_right=(electron==1) if electron&lt;.<br/>
gen laser_right=(laser==2) if laser&lt;.<br/>
<br/>
gen sci_know=bigbang_right+electron_right+laser_right<br/>
<br/>
egen mean_sci_know=mean(sci_know)<br/>
<br/>
bysort edu_cat: egen mean_sci_know_edu=mean(sci_know)<br/>
<br/>
tab edu_cat, sum(mean_sci_know_edu)<br/>
 tab edu_cat, sum(sci_know)<br/>
<br/>
log close</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata for Students: Running Stata</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro"><em>This article is part of the <a href="https://ssc.wisc.edu/sscc/pubs/sfs/home.htm">Stata for Students</a> series. If you are new to Stata we strongly recommend reading all the articles in the Stata Basics section.</em></p>
<p>Students at UW-Madison have several options for using Stata:</p>
<ul>
<li>You can log into <a href="https://ssc.wisc.edu/sscc/pubs/winstat.htm">Winstat</a> from your computer (no matter where you are) and run Stata there</li>
<li>You can come to the <a href="https://ssc.wisc.edu/sscc/infrastructure/labs.htm">SSCC Computer Labs</a>, especially 4218 Sewell Social Sciences Building, and run Stata on the Lab PCs</li>
<li>You can download Stata from the <a href="https://software.wisc.edu">Campus Software Library</a> and install it on your own computer</li>
</ul>
<p>While the Campus Software Library is available to all UW-Madison students, you'll need an SSCC account to use Winstat or the Lab. If your class is using SSCC resources you should have received an account for use during that class. If not, visit the <a href="http://ssc.wisc.edu/sscc/accounts/new.htm">account request</a> page to see if you're eligible for one.</p>
<p>If you use Winstat or the Computer Lab, you'll have access to your SSCC home directory, the U: drive. Files on U: are available from anywhere by logging into Winstat and backed up five times a day. The instructions in Stata for Students will assume you're storing your files on the U: drive. If you are running Stata on your own computer, you can use a folder on your computer's hard drive instead. Just change references to the U: drive to the folder you're using.</p>
<p>Stata on a Mac (or Linux computer) is essentially identical to Stata on Windows. The instructions will assume you're using Windows, but Mac users will need to make very few changes, mostly related to using files. Alternatively, you can log into Winstat from your Mac and run Stata for Windows there.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/sfs/sfs-files.htm">Managing Stata Files</a></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
</kb_documents>