<?xml version="1.0"?>
<kb_documents>
<kb_document>
<kb_title>Articles on Using Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>
<!-- #BeginEditable "Content" -->
<p>This page lists articles on using the Linux 
                                operating system.</p>
<h2>Basics</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat_jobs.htm">Managing Jobs on Linstat<br/>
</a><a href="https://ssc.wisc.edu/sscc/pubs/7-1.htm">An Introduction to Condor</a><a href="https://ssc.wisc.edu/sscc/pubs/linstat_jobs.htm"> </a><br/>
<a href="https://www.ssc.wisc.edu/sscc/pubs/linuxos.htm">Getting Started in Linux</a><a href="https://ssc.wisc.edu/sscc/pubs/linuxos.htm"></a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/computing_resources.htm">Computing Resources at the SSCC</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/disk.htm">Network Disk Space at the SSCC</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linux_disk_space.htm">Managing Disk Space in Linux</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/1-15.htm">How to Change Your SSCC Passwords</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/7-28.htm">Printing from Linux</a><a href="https://ssc.wisc.edu/sscc/pubs/1-15.htm"> </a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/printfromlinux.htm">Using SSCC Network  Printers from Personal Linux Computers</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/diskfromlinux.htm">Using SSCC Network  Disk Space from Personal Linux Computers</a></p>
<h2> Connecting to Linux Servers</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/5-2.htm">Connecting to SSCC Linux Computers using X-Win32</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat_from_mac.htm">Connecting to Linstat from a Mac</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat_outside_us.htm">Connecting to Linstat from Outside the US</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat_google_auth.htm">Configuring Google Authenticator to Log in to Linstat</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat_public_key.htm">Configuring a Public/Private Key Pair to Log into Linstat</a><br/>
</p>
<h2>Tools</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/1-11.htm">Using SFTP</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/7-10.htm">Using Emacs</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/7-15.pdf">Using PICO on UNIX</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/7-17.pdf">Using nu/TPU on UNIX</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/7-8.htm">Using Compressed Data in Linux</a></p>
<h2> Advanced Topics</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/7-9.pdf">Configuring Your Login Session</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/7-14.pdf">Using the Revision Control System</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/flash.htm">Using the SSCC's High Performance Computing Cluster</a>
<br/>
</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Managing Disk Space in Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Data storage is a major expense for the SSCC, as the performance and reliability required for research data makes "enterprise level" storage much more expensive than the hard drive of your average PC. Individual members can help reduce these costs by managing the files in their 
              home and project directories. This article	
              will discuss Linux tools for managing your disk space.</p>
<h2>Viewing Your Large Files</h2>
<p>Most files are so small (or rather, disk storage today is so large) that even large numbers of them take up trivial amounts of space. We don't want our members to spend their valuable time deciding what small files they can delete. Thus the first task is to identify your large files.</p>
<p>You can use the good old <span class="InputCode">ls -l</span> command, aliased as <span class="InputCode">ll</span> 
              for most people, but <span class="InputCode">du</span> (disk usage) is better at it, especially when combined with other tools.</p>
<p class="InputCode">du <span class="Parameter">directory</span> -ha</p>
<p>where <span class="Parameter"><span class="InputCode">directory</span></span> 
              should be replaced by the name of the directory you want to examine, 
              will give you a list of all files and subdirectories in that directory 
              and their sizes. Sizes will be given in appropriate units for easy reading by humans. Note that this list includes 
              all the contents of all the subdirectories of the directory you specify, so running this command on a high 
              level directory will probably give you more text than you can 
              use.</p>
<p>To view just the biggest files, you can send these results to the 
              <span class="InputCode">sort</span> program and then list only the 
              top results using <span class="InputCode">head</span>. The disadvantage 
              is that <span class="InputCode">sort</span> can't understand different units, so tell <span class="InputCode">du</span> to list all the file sizes in 
              megabytes.</p>
<p class="InputCode">du <span class="Parameter">directory</span> -ma 
              | sort -n -r | head -n20</p>
<p>This will show the twenty biggest files and directories underneath 
              the starting directory (you can choose how many to view by changing 
              the number after <span class="InputCode">-n</span>). These are the 
              files you should focus on.</p>
<h2>Options for Large Files</h2>
<p>Once you've identified the files worth paying attention to, then the question becomes what to do with them:</p>
<ul>
<li>Compress large files that are not in active use. <a href="https://ssc.wisc.edu/sscc/pubs/7-8.htm">Using Compressed Data in Linux</a> has instructions.</li>
<li>Share large data files among researchers rather than everyone making their own copy</li>
<li>Delete intermediate data files that can be reproduced at will, keeping just the raw data and the version of the data you're currently working on (along with all the code that gets you from one to the other)</li>
<li>Delete data files that are no longer needed (but only if you're sure it's no longer needed)</li>
</ul>
<h2>Using Temporary Space</h2>
<p>One easy way to make sure you don't forget to delete a file when 
              you're done with it is to put it in temporary space. In Linux, files 
              stored in <span class="InputCode">/temp30days</span> are deleted 
              after thirty days, but you are welcome to use as much space as you 
              need during that time—just make yourself a directory there. If 
              you store files you'll only need briefly in <span class="InputCode">/temp30days</span>, 
              you'll never have you worry about going back to delete them. Keep 
              in mind that <span class="InputCode">/temp30days</span> is not 
              backed up.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Getting Started in Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<h2>Table of Contents</h2>
<ol class="TOC">
<li><a href="#xtocid215400">Introduction</a></li>
<li><a href="#xtocid274591">SSCC Linux Computers</a>
<ul>
<li><a href="#xtocid274592">Connecting to a Linux computer, 
                    logging in, logging out</a></li>
</ul>
</li>
<li><a href="#xtocid274590">The Linux operating system</a>
<ul>
<li><a href="#xtocid274594">How to Formulate a Linux Command</a></li>
<li><a href="#xtocid274595">A Few Simple Useful Utilities</a></li>
<li><a href="#xtocid274596">How Linux Stores Files: The Linux 
                    File System</a></li>
<li><a href="#xtocid274597">File Names under Linux</a></li>
<li><a href="#xtocid274598">Home Directories and the Present 
                    Working Directory</a></li>
<li><a href="#xtocid274599">Manipulating The File System</a>
<ul>
<li><a href="#xtocid2745910">Changing Your Present Working 
                        Directory</a></li>
<li><a href="#xtocid2745911">Listing directories</a></li>
<li><a href="#xtocid2745912">Making and Removing Directories</a></li>
<li><a href="#xtocid2745913">Copying, Moving, Renaming, 
                        and Removing Files</a></li>
</ul>
</li>
<li><a href="#xtocid2745914">Viewing The Contents of Files</a></li>
<li><a href="#xtocid2745915">Using Pipes to View The Output 
                    of Commands</a></li>
<li><a href="#xtocid2745916">Using Pipes to Print the Output 
                    of Commands</a></li>
<li><a href="#xtocid2745924">Command Shortcuts</a>
<ul>
<li><a href="#xtocid2745925">Wildcard Characters</a></li>
<li><a href="#xtocid2745926">Home Directory Abbreviation: 
                        The Tilde (~)</a></li>
<li><a href="#xtocid2745931">Path Abbreviations: The . and 
                        ..</a></li>
<li><a href="#xtocid2745928">Rerunning Commands and Editing 
                        the Command Line</a></li>
</ul>
</li>
<li><a href="#xtocid2745929">Getting Help</a></li>
<li><a href="#xtocid2745930">In Case of Emergency: What to Try 
                    When Things Go Wrong</a></li>
</ul>
</li>
<li><a href="#xtocid2154024">Managing Disk Space</a>
<ul>
<li><a href="#xtocid2154025">Categories of Disk Space</a></li>
<li><a href="#xtocid2154026">Determining How Much Disk Space 
                    You are Using</a></li>
<li><a href="#xtocid2154027">Compressing Large Files</a></li>
</ul>
</li>
<li><a href="#xtocid215401">Choosing the Proper Linux Computer</a>
<ul>
<li><a href="#xtocid215403">Condor</a></li>
<li><a href="#flash">High Performance Computing Cluster</a></li>
<li><a href="#xtocid215405">Software</a></li>
<li><a href="#xtocid215406">CPU Power</a></li>
<li><a href="#xtocid215407">System Load</a></li>
</ul>
</li>
<li><a href="#xtocid215409">Running Jobs</a>
<ul>
<li><a href="#xtocid2154010">Command Input and Output in Linux</a>
<ul>
<li><a href="#xtocid2154012">Redirection of Standard Output</a></li>
<li><a href="#xtocid2154014">Redirection of Standard Input</a></li>
<li><a href="#xtocid2154015">Pipes</a></li>
</ul>
</li>
<li><a href="#xtocid2154016">Running Jobs in the Foreground 
                    and Background</a></li>
<li><a href="#xtocid2154017">Switching Between Foreground and 
                    Background</a></li>
<li><a href="#xtocid2154018">Managing Background Jobs</a></li>
<li><a href="#xtocid2154019">Killing jobs</a></li>
<li><a href="#xtocid2154021">Running Multiple Jobs</a></li>
<li><a href="#xtocid2154022">Condor</a></li>
<li><a href="#xtocid2154023">Scripts</a></li>
<li><a href="#xtocid2154030">Running a Job Later</a></li>
</ul>
</li>
<li><a href="#xtocid215432">Summary of Commands</a></li>
<li><a href="#xtocid215433">Other Sources of Information</a></li>
</ol>
<h2><a id="xtocid215400" name="xtocid215400"></a>1. Introduction</h2>
<p>This handbook will introduce you to the Linux operating system, with a focus on using SSCC's Linstat servers. It is intended for those who want to use Linux for more than just a way to run statistical jobs. If your goal is just to run jobs on Linstat, <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a> and <a href="https://ssc.wisc.edu/sscc/pubs/linstat_jobs.htm">Managing Jobs on Linstat</a> will probably teach you everything you need to know.</p>
<h2><a id="xtocid274591" name="xtocid274591">2. SSCC Linux Computers</a></h2>
<p>Linstat is the SSCC's cluster of  servers running Linux. When you connect to Linstat, you'll  be directed to one of the three Linstat servers (linstat1, linstat2 and linstat3)   automatically. This will spread users among the three servers and help   avoid situations where one server is much busier than another.</p>
<h3><a id="xtocid274592" name="xtocid274592"> Connecting to a Linux computer, logging 
              in, logging out </a></h3>
<p>Linux is designed for remote logins and can be used very successfully
            	 from anywhere in the world. To connect to a Linux server you
            	will need a client program capable of using a secure protocol,
            	ideally SSH. X-Win32 is our suggestion for 
              PC's. For details on downloading and using X-Win32,
              see <a href="https://www.ssc.wisc.edu/sscc/pubs/5-2.htm">Connecting
              to SSCC Linux Computers using X-Win32</a>.
              For other options see the Connecting to Linstat section of <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm#ConnectingtoLinstat">Using Linstat</a>.</p>
<p>When you are finished with your login session, be sure to log off by typing <span class="InputCode">exit</span> at the Linux 
              prompt.</p>
<h2><a id="xtocid274590" name="xtocid274590"></a>3. The Linux Operating 
              System</h2>
<p align="left">Linux is a very powerful, flexible operating system.
              In a few minutes, it is possible to learn enough to get into the
              system, run statistical programs like Stata, and get out
              again. On the other extreme, those who have worked on Linux for
              years are still learning every day. This reflects both the power
              and the complexity of the operating system.</p>
<h3 align="left"><a id="xtocid274594" name="xtocid274594"> How to Formulate a Linux 
              Command</a></h3>
<p>When you log in to a Linux computer, a prompt will appear on the 
              screen, waiting for you to enter a command. At this point you can 
              enter any valid Linux command and the computer will run it.</p>
<p>The syntax of a Linux command is very simple: first, enter the 
              command name, followed by any options and any other parameters. 
              Spaces separate the command name from the options and the options 
              from the parameters. Once the command has been completely formed, 
              press Enter. When you press Enter, the command is executed.</p>
<p>For instance, if you want to know the current date and time, use 
              the <span class="InputCode">date</span> command. Then press Enter. 
              The current date and time will appear, followed by another prompt. 
              Your login session will look like this:</p>
<p class="InputCode">linstat2.ssc.wisc.edu&gt; date<br/>
              Mon Feb 18 10:52:55 CST 2008<br/>
            linstat2.ssc.wisc.edu&gt;</p>
<p>When the prompt appears (the prompt here is <span class="InputCode">linstat2.ssc.wisc.edu&gt;)</span>, 
              the computer is ready for you to enter another command. </p>
<p>Note that the prompt will vary depending on the machine on which 
              you are working. You can also customize the prompt to be anything 
              you like.</p>
<p>Unlike some other operating systems, Linux is case sensitive. The 
              command <span class="InputCode">date</span> is not the same as the 
              command <span class="InputCode">DATE</span>. You must always use 
              the proper case when running Linux commands. Fortunately, this is 
              simple, as virtually all Linux commands are lower case.</p>
<h3><a id="xtocid274595" name="xtocid274595"> A Few Simple Useful Utilities</a></h3>
<p>Below are some simple, useful commands that you can run right away. 
              Try these:</p>
<p class="InputCode">&gt; cal</p>
<p>displays the calendar for the current month. To see a calendar 
              for the whole year, try:</p>
<p class="InputCode">&gt; cal 1997</p>
<p>In this example, "1997" is a parameter to the command 
              cal: it is telling <span class="InputCode">cal</span> to give information for all of 1997, instead 
              of giving the default information for the current month. Be sure 
              to use the "19" or <span class="InputCode">cal</span> 
              will display the calendar for the year 97, not the year 1997.</p>
<p class="InputCode">&gt; cal 12 1997</p>
<p>displays the calendar for the month of December, 1997. Here, <span class="InputCode">cal</span> 
              is taking two parameters. The first parameter is the month and the 
              second parameter is the year.</p>
<p class="InputCode">&gt; who</p>
<p>displays a list of users currently logged into that computer, also 
              giving the time that the user logged in.</p>
<p class="InputCode">&gt; uptime</p>
<p>This extremely useful command tells the current time, how long 
              the computer has been up, how many users are currently logged on, 
              and how busy the computer has been for the last one, five, and 15 
              minutes. This is the "load average", the average number 
              of jobs that were waiting to run in that time increment. To understand 
              how to interpret the load average, see the <a href="#xtocid215407">System 
              Load </a> section later in this handbook.</p>
<p class="InputCode">&gt; hostname</p>
<p>displays the name of the computer on which you are working.</p>
<p class="InputCode">&gt; clear</p>
<p>clears your screen and puts a prompt on the top line of the screen.</p>
<p class="InputCode">&gt; lookup Gary Sandefur</p>
<p>The <span class="InputCode">lookup</span> command looks into the
               UW-Madison student, faculty, and staff information database and
               displays information about the person you are looking up. In the
               command above, information about UW-Madison Dean of the College of Letters and Science, Gary Sandefur, will be displayed, as well as information
              about any other person on campus with these names. </p>
<p>Most of the above commands were simple commands to run. Only one 
              of them required parameters (lookup) and none required options. 
              Later, commands will be introduced that require options to provide 
              important information. The critical point about these commands can 
              be seen from these examples: the command comes first; spaces separates 
              parameters from the command and parameters from each other.</p>
<h3><a id="xtocid274596" name="xtocid274596"> How Linux Stores Files: The Linux File 
              System</a></h3>
<p>All computers store files in some type of file system. These file 
              systems largely resemble each other: individual files are referenced 
              through folders or directories, terms that can be used interchangeably. 
              The term "directory" is preferred by Linux users.</p>
<p>Two features distinguish the Linux file system from Windows:</p>
<p>1. Linux uses a forward slash, instead of a backslash to indicate 
              the existence of a directory. For example, Windows might refer to 
              a file as:</p>
<p class="InputCode"> F:\home\r\rdimond\saswork\data</p>
<p>but Linux would refer to a file as:</p>
<p class="InputCode"> /home/r/rdimond/saswork/data</p>
<p>The items "home", "r", "rdimond", 
              and "saswork" are all directories, but the names are separated 
              by forward slashes in Linux, not backslashes, as in Windows.</p>
<p>2. Linux does not start a file name with the name of a disk. On 
              a Windows machine, the start of any file name is a disk name, such 
              as C: for the main hard disk or A: for the floppy. Linux attempts 
              to hide disks from the user. For instance, a directory might be 
              called:</p>
<p class="InputCode"> /home/r/rdimond</p>
<p>This path name refers to a directory called rdimond. The rdimond 
              directory is in the directory called r; the r directory is in the 
              directory called home; the home directory is in the directory called 
              root, and displayed as a preceding forward slash, the "/" 
              at the beginning of the name. The root directory is the starting 
              directory on Linux, from which all other files and directories are 
              descended. All files and directories on Linux exist at some place 
              relative to the root directory. The full path name of a file always 
              begins with a forward slash, with a reference to the root.</p>
<h3><a id="xtocid274597" name="xtocid274597">File Names under Linux</a></h3>
<p>File and directory names under Linux are quite freeform. (In this 
              section, we will use the expression "file names" to mean 
              "file or directory names".) All numbers and letters of 
              the alphabet are allowed in file names, as are several special characters 
              such as "." (dot) and "_" (underscore). Linux 
              has no naming regulations, such as the requirement that a dot appear 
              in the name. However, despite having few formal rules, the following 
              guidelines will assist you in working with files.</p>
<ul>
<li>The first character of a file name should be a letter of the 
                alphabet or a number. Do not use a special character, such as 
                a dot, a plus sign or a minus sign. Any of these could lead to 
                difficulties when attempting to manipulate the file or directory.</li>
<li>Do not use spaces or tabs in file names.</li>
<li>File names with multiple periods such as filename.ext.ext are 
                valid.</li>
<li>Keep in mind that Linux is case sensitive: the names outfile,
                Outfile and OutFile represent three different files. However,
                it is not wise to create files in which the only difference among
                names is the case, as this can confuse PCs if you ever map your
                Linux home directory as a network drive on a PC. </li>
<li>Although virtually all file names are legal, there are a few 
                names that should be avoided: core and .rhosts. The system uses 
                the name core for a dump of certain data when a command fails. 
                (If you ever see one of these files in one of your directories, 
                the file can be safely removed.) If you create a file called .rhosts 
                you may unintentionally permit others to access your home directory. 
                Of course, this is an uncommon name, and one that you are not 
                likely to create accidentally.</li>
<li>Filenames starting with a period are special files called "hidden 
                files" and will only be displayed in a directory listing 
                if you use <span class="InputCode">ls</span> with the <span class="InputCode">-f</span> 
                or <span class="InputCode">-a</span> option.</li>
</ul>
<p>File naming conventions are only conventions and are not used to 
              distinguish file type. Some commonly-used conventions are:</p>
<p>             </p>
<table align="center" border="0" width="75%">
<tr>
<td>.do (Stata command files)<br/>
                  .dta (data files stored in Stata format) <br/>
                  .gif (graphics file)<br/>
                  .gz (compressed file)<br/>
                  .htm (Web page)<br/>
                  .html (Web page)<br/>
                  .jpg (graphics file)<br/>
                  .jpeg (graphics file)<br/>
                  .log (SAS or Stata log file)<br/>
                .lst (SAS listing)<br/> </td>
<td>pdf (Adobe pdf file)<br/>
                  .ps (PostScript file)<br/>
                  .sas (SAS source file)<br/>
                  .sas7bdat (data files stored in SAS format)<br/>
                  .sps (SPSS source file)<br/>
                  .tar (archive file)<br/>
                  .tex (TeX file)<br/>
                  .zip (compressed file)<br/>
                .Z (compressed file)</td>
</tr>
</table>
<h3><a id="xtocid274598" name="xtocid274598"> Home Directories and the Present Working 
              Directory</a></h3>
<p>All user accounts have a part of the file system that is their 
              own. This is called their home directory. When you first log in, 
              Linux makes your home directory your present working directory. 
              Your present working directory is the directory where files and 
              directories will be listed, created, changed, or removed by default, 
              unless you instruct the computer to perform the action in another 
              location (examples to follow, below).</p>
<p>Home directories are located in a subdirectory of the directory 
              called /home. /home consists of a series of directories, one for 
              each letter of the alphabet. Home directories are under the letter 
              of the alphabet corresponding to the first letter of your login 
              name. For instance, the home directory of the user account named 
              swald is at /home/s/swald and the home directory of the user account 
              named mcdermot is at /home/m/mcdermot.</p>
<p>Home directories are the place for you to put your files. You can 
              control access permissions for files in your home directory, allowing 
              others to see files, or to change files, or denying them these privileges.</p>
<h3><a id="xtocid274599" name="xtocid274599"> Manipulating The File System</a></h3>
<p>The Linux tools used most often by users are the commands that 
              allow users to manipulate files and directories. These commands 
              include:</p>
<table align="center" border="0" width="75%">
<tr>
<td width="23%">ls</td>
<td width="77%">display the tables of a directory</td>
</tr>
<tr> </tr>
<tr>
<td width="23%">pwd</td>
<td width="77%">display the full path name of the present working 
                  directory</td>
</tr>
<tr>
<td width="23%">cd</td>
<td width="77%">change present working directory</td>
</tr>
<tr>
<td width="23%">mkdir</td>
<td width="77%">create a new directory</td>
</tr>
<tr>
<td width="23%">rmdir</td>
<td width="77%">remove a directory</td>
</tr>
<tr>
<td width="23%">cp</td>
<td width="77%">copy a file</td>
</tr>
<tr>
<td width="23%">mv</td>
<td width="77%">move or rename a file</td>
</tr>
<tr>
<td width="23%">rm</td>
<td width="77%">remove a file</td>
</tr>
</table>
<p>             </p>
<h4><a id="xtocid2745910" name="xtocid2745910">Changing Your Present Working Directory 
              </a></h4>
<p>To determine your present working directory, use the <span class="InputCode">pwd</span> 
              command:</p>
<p class="InputCode">&gt; pwd<br/>
              /home/r/rdimond</p>
<p>To change your present working directory, use the <span class="InputCode">cd</span> 
              command. For example, to change to the /tmp directory (the system 
              directory for temporary files):</p>
<p class="InputCode">&gt; cd /tmp</p>
<p>Remember that a space separates the command (<span class="InputCode">cd</span>) 
              from the parameter (<span class="InputCode">/tmp</span>). If the 
              command is successful, it will not display any information; it will 
              simply return a command prompt. To confirm that you really did change 
              to the /tmp directory, issue the <span class="InputCode">pwd</span> 
              command. For instance:</p>
<p class="InputCode">&gt; cd /tmp<br/>
              &gt; pwd<br/>
              /tmp</p>
<p>To return back to your home directory from any other directory, 
              enter the <span class="InputCode">cd </span>command without a parameter. 
              For instance: </p>
<p class="InputCode">&gt; cd<br/>
              &gt; pwd<br/>
              /home/r/rdimond</p>
<h4><a id="xtocid2745911" name="xtocid2745911">Listing directories</a></h4>
<p>Once you change directories, one of the first things you will want 
              to do is look at the tables of the directory. To do this, use 
              the <span class="InputCode">ls</span> command. For instance:</p>
<p class="InputCode">&gt; ls<br/>
              bin README            </p>
<p>There are two items in the present working directory, called 
              bin and README.  To determine if these items are files or directories,
              you must ask for a long listing. To do this, use the <span class="InputCode">-l</span> 
              option (long listing) to the <span class="InputCode">ls</span> command.
               Options in Linux begin with minus signs and are usually one letter
               long. For instance:</p>
<pre>
&gt; ls -l
total 52<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:13 README
</pre>
<p>The dash "-" in the first column of the README line indicates 
              that this is a file. The "d" in the first column of the 
              bin line indicates that this is a directory. The "total" 
              line indicates how many blocks are taken up by items in this directory. 
              It is not usually useful and can be safely ignored.</p>
<p>Let's look at the long listing of the README file more closely:</p>
<pre>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:13 README
1  2        3   4       5       6     7           8
</pre>
<p>The long listing provides a lot of information about the file in 
              a single line. As stated, the first character is the file type (labeled 
              1 above). Generally, this will either be a dash or a d, indicating 
              that it is an ordinary file or a directory. Following the file type 
              are nine characters (labeled 2 above) indicating the file permissions 
              (file permissions will be discussed in a later <a href="#xtocid2154036">section</a>). 
              The number following this (labeled 3 above) can be ignored; it is 
              for use by advanced Linux users. The next two fields (labeled 4 
              and 5 above) are the owner of the file and the group affiliation 
              of the file. All files on the Linux file system are owned by someone 
              and have some group affiliation. Next is the size of the file in 
              bytes (labeled 6 above). A byte is the equivalent of a single character. 
              Next comes the date and time that the file was modified (labeled 
              7 above). Finally comes the file name (labeled 8 above).</p>
<p>You can also list the tables of a directory without changing 
              to it. To do this, give the directory name that you want listed 
              as a parameter to the <span class="InputCode">ls</span> command. 
              For instance:</p>
<pre>&gt; ls -l /tmp
total 629
-rw-------   1 rdimond  system    147456 Aug  6 22:16 Ex25804
-rw-------   1 rdimond  system     81920 Aug  6 22:15 Rx25804
-rw-r--r--   1 root     system        59 Aug  6 13:34 lpq.00125519
-rw-------   1 flory    system    825012 Aug  5 11:54 ng5chi.dat
-rw-r--r--   1 tpan     system      3086 Aug  6 10:43 rrn.16443
-rw-r--r--   1 tpan     system    355337 Aug  6 10:43 rrnact.16443
drwxr-xr-x   2 pkovatch system       512 Aug  1 04:20 spss_125
</pre>
<p>Other useful options for the <span class="InputCode">ls</span> 
              command are listed below:</p>
<table align="center" border="0" width="75%">
<tr>
<td class="InputCode" width="17%">ls -a</td>
<td width="83%">(all) Include "dot" files, those beginning 
                  with a dot</td>
</tr>
<tr>
<td class="InputCode" width="17%">ls -F</td>
<td width="83%">(File types) Identify file types with codes;
                  / for directories, * for executables, and @ for symbolic links</td>
</tr>
<tr>
<td class="InputCode" width="17%">ls -R</td>
<td width="83%">(Recursive) Recursively list all subdirectories</td>
</tr>
<tr>
<td class="InputCode" width="17%">ls -r</td>
<td width="83%">(reverse) Sort in reverse order</td>
</tr>
<tr>
<td class="InputCode" width="17%">ls -s</td>
<td width="83%">(size) Display the size in kilobytes</td>
</tr>
<tr>
<td class="InputCode" width="17%">ls -t</td>
<td width="83%">(time) Sort by time modified</td>
</tr>
<tr>
<td class="InputCode" width="17%">ls -u</td>
<td width="83%">(used) Show time of last access</td>
</tr>
</table>
<br/>
<h4><a id="xtocid2745912" name="xtocid2745912">Making and Removing Directories</a></h4>
<p>Within your home directory, you have the ability to organize your 
              files as you please. This means that you can create subdirectories 
              within your home directory. To do this, use the <span class="InputCode">mkdir</span> 
              command. For instance:</p>
<pre>&gt; ls -l<br/>total 52<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:13 README<br/>&gt; mkdir homework<br/>&gt; ls -l<br/>total 56<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:24 homework<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:13 README</pre>
<p>In this example, a new directory was created called "homework". 
              Use <span class="InputCode">cd</span> to change to the homework 
              directory. For instance:</p>
<pre>&gt; pwd
/home/g/guest12
&gt; cd homework
&gt; pwd
/home/g/guest12/homework
</pre>
<p>If you decided that this directory was not needed after all, you 
              could remove the directory using the <span class="InputCode">rmdir</span> 
              command. For instance:</p>
<pre>&gt; ls -l<br/>total 56<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:24 homework<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:13 README<br/>&gt; rmdir homework<br/>&gt; ls -l<br/>total 52<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:13 README</pre>
<p>The homework directory is now gone. This only works if the directory 
              is empty, that is, it has no files or directories within it.</p>
<h4><a id="xtocid2745913" name="xtocid2745913">Copying, Moving, Renaming, and Removing 
              Files</a></h4>
<p>Files are created in a number of ways. You can use an editor,
              such  as EMACS or PICO to create a file; statistical programs,
              such as  SAS or SPSS create files; you might create files using
              a PC application like TextPad,  with your Linux home directory
              as a network drive. In any case, once files are created, it is
              often necessary to copy, move, rename, or remove them.</p>
<p>To copy a file, use the <span class="InputCode">cp</span> command. 
              For instance, if you have a file called README and you wish to copy 
              it to readme.new, you would do this:</p>
<pre>&gt; cp README readme.new<br/>&gt; ls -l<br/>total 92<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:13 README<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:32 readme.new</pre>
<p>The original file has not been changed in any way, but a new file 
              has been created. This new file is a copy of the original, with 
              a different name. Also, because Linux is case sensitive, the file 
              names were specified with the appropriate cases. The new file name 
              has a dot in the name, and a suffix. As stated earlier, suffixes 
              to Linux are entirely unimportant (although they may be important 
              to particular applications!). There may be as many letters before 
              or after the dot as desired. Finally, note that the last modification 
              date on the new file is different from the last modification date 
              on the old file. The new file's modification date is the creation 
              date.</p>
<p>Now, let's create a directory called Documentation and move the 
              new file to that directory using the <span class="InputCode">mv</span> 
              command:</p>
<pre>&gt; mkdir Documentation<br/>&gt; mv readme.new Documentation<br/>&gt; ls -l Documentation<br/>total 40<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:32 readme.new</pre>
<p>The readme.new file is now in the Documentation directory (again, 
              notice that the D in Documentation is capitalized).</p>
<p>The <span class="InputCode">cp</span> command can also be used 
              to make a copy of a file, using the same file name as the original, 
              but placing it in a different directory. For instance:</p>
<pre>&gt; cp README Documentation<br/>&gt; ls -l Documentation<br/>total 80<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:35 README<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:32 readme.new</pre>
<p>In this example, the file called README is copied to the directory 
              called Documentation, the name not changing.</p>
<p>The <span class="InputCode">mv</span> command can be used to rename 
              a file. For instance:</p>
<pre>&gt; mv readme.new oldreadme<br/>&gt; ls -l<br/>total 80<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:32 oldreadme<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:35 README</pre>
<p>A note of caution about using the <span class="InputCode">cp</span> 
              and <span class="InputCode">mv</span> commands: If you copy or move 
              a file to a file name that already exists, the existing file will 
              be overwritten without notice. </p>
<p>Now the Documentation directory has two copies of the same file 
              with two different names. You can remove a file using the <span class="InputCode">rm</span> 
              command. For instance:</p>
<pre>&gt; cd Documentation<br/>&gt; rm oldreadme<br/>&gt; ls -l<br/>total 40<br/>-rw-r-----  1 guest12 guest12 38331 Feb 18 11:35 README
            </pre>
<p>You can also remove the Documentation directory and all of its 
              tables, but you cannot use the <span class="InputCode">rmdir</span> 
              command, which is only for removing empty directories. To remove 
              a directory, including all of its tables, use the <span class="InputCode">-r</span> 
              option to the <span class="InputCode">rm</span> command. For example:</p>
<pre>&gt; cd<br/>&gt; rm -r Documentation<br/>&gt; ls -l<br/>total 52<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin
            </pre>
<p>This will remove the Documentation directory and all of its tables 
              with no questions asked. This is somewhat dangerous. A better way 
              to use <span class="InputCode">rm</span> is to use the <span class="InputCode">-i</span> 
              option also, which forces you to confirm that you really want to 
              remove each file or directory. For example:</p>
<pre>
&gt; cd
&gt; rm -r -i Documentation
rm: remove Documentation/README? y
rm: remove Documentation? y
&gt; ls -l
total 52<br/>drwxrwx---  2 guest12 guest12  4096 Feb 18 11:09 bin
            </pre>
<p>The <span class="InputCode">rm</span> command now asks you to confirm 
              that you really want to remove each item. You can answer y or Y 
              (or any other answer that begins with a y or Y, such as yes, yep 
              or yessireebob) and the item will be removed. Any other answer and 
              the item will not be removed.</p>
<p>One warning about removing Linux files: once a file is removed, 
              it may be gone forever. When a user accidentally removes a file, 
              SSCC staff can sometimes restore the file from the nightly backups, 
              but this is not always possible. Use the <span class="InputCode">-i</span> 
              option when using the <span class="InputCode">rm</span> command 
              to protect your data.</p>
<h3><a id="xtocid2745914" name="xtocid2745914"> Viewing The Contents of Files</a></h3>
<p>To view the tables of a file, you can use the <span class="InputCode">more</span> 
              command:</p>
<p class="InputCode">&gt; more filename</p>
<p> Replace "filename" with the name of the file you wish 
              to view. The file will be displayed one screenful at a time. There 
              are many subcommands within <span class="InputCode">more</span>, 
              but the following are the most useful:</p>
<table align="center" border="0" width="75%">
<tr>
<td width="13%">space</td>
<td width="87%">scroll down a full screen</td>
</tr>
<tr>
<td width="13%">Enter</td>
<td width="87%">scroll down a single line</td>
</tr>
<tr>
<td width="13%">b</td>
<td width="87%">scroll up a full screen</td>
</tr>
<tr>
<td width="13%">q</td>
<td width="87%">quit out of <span class="InputCode">more</span> and return to the command line</td>
</tr>
</table>
<p>To use a subcommand, simply type in the command when the system 
              pauses after displaying a screen of information.</p>
<h3><a id="xtocid2745915" name="xtocid2745915">Using Pipes to View The Output of Commands</a></h3>
<p>Very often, the information scrolling across the screen is not 
              the tables of a file, but other information, such as the long 
              listing of a directory. You can still use the <span class="InputCode">more</span> 
              command to view the output, but you use it through a special Linux 
              feature called a pipe. To use a pipe, type the command as you usually 
              would, but after the command, instead of pressing Enter, place the 
              pipe symbol "|", depicted on your keyboard as a solid 
              or broken line and then type the <span class="InputCode">more</span> 
              command. This will take the output of the <span class="InputCode">ls</span> 
              command and place it in the <span class="InputCode">more</span> 
              command. For instance:</p>
<p class="InputCode">&gt; ls -l /tmp | more</p>
<p>This can be used with any command that displays more than a screen 
              full of information. For example:</p>
<p class="InputCode">&gt; cal 1997 | more</p>
<p>This command would display the calendar for 1997, but it would 
              be displayed within the <span class="InputCode">more</span> command, 
              allowing you to scroll up or down, as desired.</p>
<p>Pipes are one of the most powerful features of Linux.</p>
<h3><a id="xtocid2745916" name="xtocid2745916"> Using Pipes to Print the Output of Commands</a></h3>
<p> Linux pipes give the user the ability to print any data 
              that can be displayed on the screen. For instance, if you wish to 
              print out a listing of your home directory, do the following:</p>
<p class="InputCode">&gt; ls -l | enscript</p>
<p>In this example, no listing is printed to the screen; the computer 
              returns a prompt to you without showing you the listing. The output 
              of the <span class="InputCode">ls</span> command is sent to the 
              default printer. </p>
<h3><a id="xtocid2745924" name="xtocid2745924"> Command Shortcuts</a></h3>
<p>Once users begin to use Linux commands with some regularity, they 
              rapidly start to desire certain shortcuts for some operations. Linux 
              provides shortcuts and alternative methods for performing actions 
              in abundance. This section introduces some relatively simple shortcuts 
              that are not necessary for users to perform their work, but may 
              be useful to beginning level students.</p>
<h4><a id="xtocid2745925" name="xtocid2745925"></a>Wildcard Characters</h4>
<p>Wildcard characters allow you to specify many files at once, or 
              to specify a single file concisely. The wildcard characters are 
              the asterisk (*), the question mark (?), and the square brackets 
              ([]). You can use wildcard characters with commands like<span class="InputCode"> 
              ls</span>, <span class="InputCode">cp</span>, <span class="InputCode">mv</span> 
              and <span class="InputCode">rm</span> to perform an action on several 
              files. Below are examples of the use of wildcard characters with 
              the <span class="InputCode">ls</span> command:            </p>
<p class="InputCode">&gt; ls R*<br/>
              README<br/>
              README.old</p>
<p>The asterisk means "zero or more of any character." In 
              this example, the <span class="InputCode">ls</span> command listed 
              two files beginning with an R.</p>
<p><span class="InputCode">&gt; ls *.old<br/>
              hmwork1.old <br/>
              README.old</span><br/>
<br/>
              Wild card characters can appear anywhere in a file name: in the 
              beginning, middle, or end. In this example, the <span class="InputCode">ls</span> 
              command listed two files ending with .old.</p>
<p class="InputCode">&gt; ls *old*
              <br/>
              hmwork1.old <br/>
              oldnotes <br/>
              README.old</p>
<p>Multiple wild card characters can be used. In this example, the 
              <span class="InputCode">ls</span> command listed three files that 
              had old somewhere within the file name.</p>
<p class="InputCode">&gt; ls hmwork?<br/>
              hmwork1<br/>
              hmwork2<br/>
              hmwork3<br/>
              hmwork4</p>
<p>A question mark stands for one character within the list or range 
              shown. In this example, the <span class="InputCode">ls</span> command 
              listed four files that started with hmwork and then had a single 
              character following.</p>
<p class="InputCode">&gt; ls hmwork[2-4]<br/>
              hmwork2<br/>
              hmwork3<br/>
              hmwork4</p>
<p>The <span class="InputCode">ls</span> command listed three files 
              that started with hmwork and then had a single character following 
              in the range of 2 to 4. This range might have been a to z (including 
              all lower case letters), or N to m (including the second half of 
              capitalized letters and the first half of lower case letters).</p>
<p>Any of these wild card characters can be used multiple times, and 
              in combination with each other.</p>
<h4><a id="xtocid2745926" name="xtocid2745926">Home Directory Abbreviation: The Tilde 
              (~)</a></h4>
<p>As configured for new SSCC users, Linux allows you to use the
              tilde (~) as an abbreviation for your home directory. In any command
              where  you want to specify your home directory, you may use the
              tilde instead.  For example:</p>
<p class="InputCode">&gt; cd ~/data <br/>
              &gt; ls ~</p>
<p>The user changes to the data subdirectory of her home directory 
              and then listed the tables of her home directory.</p>
<p>The tilde followed immediately by a user's login name is an abbreviation 
              for that user's login directory. For example:</p>
<p class="InputCode">&gt; ls ~smith <br/>
              &gt; cd ~jones/sas</p>
<p>This will list the directory called /home/s/smith and then change
               to the directory called /home/j/jones/sas provided the proper
              permissions are set on the directories. </p>
<h4><a id="xtocid2745931" name="xtocid2745931"></a>Path Abbreviations: The . and ..</h4>
<p>Two other abbreviations, the .. and the . are shortcuts that can 
              save you keystrokes. .., also called dot-dot, can be used to refer 
              to the directory up one level from the current directory. For example:</p>
<pre>&gt; pwd
/home/g/guest12/homework
&gt; cd ..
&gt; pwd
/home/g/guest12
&gt; cd ..
&gt; pwd
/home/g
&gt; cd
&gt; pwd
/home/g/guest12 </pre>
<p>Each <span class="InputCode">cd ..</span> command moved the present 
              working directory up one level. The <span class="InputCode">cd</span> 
              command without a parameter moved the present working directory 
              back to the home directory, as we saw before. </p>
<p>., also called dot, is a shortcut used to refer to the current
              directory.  For example:</p>
<pre>&gt; mv /project/sandefur/wave9/ameier/2003/readme.new .</pre>
<p>moves the file readme.new from the location specified to the users 
              current working directory. </p>
<h4><a id="xtocid2745928" name="xtocid2745928">Rerunning Commands and Editing the Command 
              Line</a></h4>
<p>As configured for new SSCC users, Linux allows users to edit the 
              command line. This can be as simple as rerunning the previous command 
              to making modifications in the command currently on the screen. 
              This is performed using the arrow keys. Use the up arrow to display 
              previous commands. Each strike of the up arrow key will step backwards 
              through the list of previous commands. When you find the command 
              that you want to rerun, simply press Enter. If you go past the command, 
              use the down arrow to step forward through commands.</p>
<p>If you find a command that you want to rerun, but it is slightly 
              off, use the left and right arrows to move across the command line, 
              use the backspace key to remove a character, and add any character 
              you wish. When the command is properly displayed, press Enter to 
              execute the command.</p>
<p>The exclamation point can also run a previous command. Type an 
              exclamation point followed by the first letters of a command and 
              the last command that began with those letters will be rerun. For 
              example:</p>
<p class="InputCode">&gt; !emacs</p>
<p>This will run the last <span class="InputCode">emacs</span> command. 
              This might be quite useful if, for instance, the last <span class="InputCode">emacs</span> 
              command was something like:</p>
<p class="InputCode">&gt; emacs ~jones/progs/oldstuff/dissert.dat</p>
<h3><a id="xtocid2745929" name="xtocid2745929"> Getting Help</a></h3>
<p>On-line help is available on Linux through the command called <span class="InputCode">man</span>,
               which is short for manual pages. The <span class="InputCode">man</span> 
              command displays reference pages on the screen. These pages can
               be written obscurely. If you do not understand a reference page,
               contact SSCC's help desk for assistance.</p>
<p>If you don't know exactly what command you need to use, you can 
              find a command using the <span class="InputCode">-k</span> option 
              to the <span class="InputCode">man</span> command. The <span class="InputCode">-k</span> 
              option searches for key words in the NAME section of the man page. 
              For example:</p>
<p class="InputCode">&gt; man -k compare </p>
<p>will list on the screen Linux commands that can be used to compare 
              files. </p>
<h3><a id="xtocid2745930" name="xtocid2745930"> In Case of Emergency: What to Try When 
              Things Go Wrong</a></h3>
<p>Sometimes the system just stops working properly for no reason 
              apparent to the new user. When this happens, here are a few keystrokes 
              that might help you.</p>
<p>The <b>&lt;<span class="InputCode">Ctrl-C</span>&gt;</b> keystroke 
              is the interrupt command. It should cancel the current operation 
              and return the prompt to the screen.</p>
<p>The <b>&lt;<span class="InputCode">Ctrl-S</span>&gt;</b> keystroke 
              stops items from displaying on the screen temporarily. This is not 
              useful to a beginning Linux user, but users may accidentally type 
              this, perhaps when intending to type an upper case S. The <b>&lt;<span class="InputCode">Ctrl-Q</span>&gt;</b> 
              keystroke will override the &lt;<span class="InputCode">Ctrl-S</span>&gt; 
              keystroke, allowing the screen to begin displaying again.</p>
<p>Some times, the computer is taking input and waiting for the end 
              of the input. A <b>&lt;<span class="InputCode">Ctrl-D</span>&gt;</b> 
              is the end of file (or end of input) character. Type this keystroke 
              if the system is awaiting input from you and you have given it all 
              the input. This may happen when, for instance, you use the <span class="InputCode">cat</span> 
              command, but forget to give the file name. The system will wait 
              for you to type in what you want printed to the screen. It will 
              take as many characters as you can type, including returns and will 
              not return the prompt to you until it gets the end of file character, 
              the &lt;<span class="InputCode">Ctrl-D</span>&gt;.<br/>
</p>
<h2><a id="xtocid2154024" name="xtocid2154024">4. Managing Disk Space </a></h2>
<p>In this section you will learn about the disk space available to 
              you at SSCC and how to manage it.</p>
<h3><a id="xtocid2154025" name="xtocid2154025"> Categories of Disk Space</a></h3>
<p>SSCC provides two categories of storage space for individual users:
            	home directory space and short term disk
            	space. Both types of individual disk space are described in the SSCC's <a href="https://www.ssc.wisc.edu/sscc/pubs/intro.htm#xtocid2714138">Member Handbook</a> including quotas and backup policies.</p>
<p>If you are working on a research project with a group of people,                 we can provide you with separate storage space on Windows or Linux                that you can all share.  If you'd like project space you may <a href="https://www.ssc.wisc.edu/sscc_jsp/account/project">fill out the online form</a>. If you need your account added to a research  project space, ask the person who set up the project (usually a faculty  member) to contact SSCC's Help Desk on your behalf.</p>
<p>Please help keep costs down by using disk space wisely:</p>
<ul>
<li>Compress large files.<br/>
</li>
<li>Remove unneeded files.<br/>
</li>
<li>Move files to project disks, if appropriate.<br/>
</li>
<li>Do not make copies of standard data files archived by CDE or 
                other agencies or individuals.</li>
</ul>
<h3><a id="xtocid2154026" name="xtocid2154026">Determining How Much Disk Space You are 
              Using </a></h3>
<p>To determine how much disk space you are using, use the <span class="InputCode">quota</span> 
              command. For example</p>
<pre>&gt; quota  <br/>Disk quotas for user rdimond (uid 1931):  <br/>     Filesystem  blocks   quota   limit   grace   files   quota   limit     grace  <br/>griffon:/home/t  936904  1024000 1024000            8119       0       0     <br/></pre>
<p>In the column labeled "Used" is the amount of disk space 
              you are using, in kilobytes. The quota column tells what your current 
              disk quota is. </p>
<p>Often, this is not sufficient information. You want to know specifically 
              which directories are using the disk space. To determine this, use 
              the <span class="InputCode">du</span> command, which will tell you 
              how many kilobytes are in each of your subdirectories. For example:            </p>
<pre>&gt; du -k ~
29414 /home/s/somerset/data
8 /home/s/somerset/News
240 /home/s/somerset/Stuff
224 /home/s/somerset/Personal/gifs
77 /home/s/somerset/Personal/letters
2329 /home/s/somerset/Personal
164 /home/s/somerset/docs/reqs
703 /home/s/somerset/docs/faqs
13 /home/s/somerset/docs/tmp
42 /home/s/somerset/docs/soc361
1569 /home/s/somerset/docs/soc365
339 /home/s/somerset/docs/olddocs/homework
19878 /home/s/somerset/docs/olddocs
9049 /home/s/somerset/docs/travel
35343 /home/s/somerset/docs
202 /home/s/somerset/jobsearch/apps/old
221 /home/s/somerset/jobsearch/apps
238 /home/s/somerset/jobsearch
8336 /home/s/somerset/saslib
155 /home/s/somerset/practice
80024 /home/s/somerset</pre>
<p>This user is using 80 MB of disk space. Most of the disk space 
              usage is in the docs subdirectory, particularly in the olddocs subdirectory 
              of the docs directory. Also, a lot of disk space is being used by 
              the data directory. </p>
<p>You can also get a complete listing of the sizes of all files using 
              the <span class="InputCode">-a </span>option to the <span class="InputCode">du</span> 
              command. For example, below might be the output of the <span class="InputCode">du 
              -ak</span> command, after the output has been sorted (numerically, 
              and in descending order) and the first ten lines requested (the 
              <span class="InputCode">head</span> command): </p>
<pre>&gt; du -ak ~ | sort -n -r | head
80024 /home/s/somerset
35343 /home/s/somerset/docs
29414 /home/s/somerset/data
19878 /home/s/somerset/docs/olddocs
11088 /home/s/somerset/docs/olddocs/thesis
9049 /home/s/somerset/docs/travel
8336 /home/s/somerset/saslib
7712 /home/s/somerset/data/brazil
6208 /home/s/somerset/saslib/course.ssd04
5264 /home/s/somerset/docs/olddocs/diagrams</pre>
<p>This output includes both files and directories. A comparison with 
              the output from the <span class="InputCode">du -k</span>, above, 
              shows that the largest files are ~somerset/docs/olddocs/thesis, 
              ~somerset/data/brazil, ~somerset/saslib/course.ssd04, and ~somerset/docs/olddocs/diagrams. 
              In the interest of conserving disk space, user somerset may want 
              to delete or compress some of these files. </p>
<p>To determine the amount of disk space available on a project disk, 
              use the <span class="InputCode">df</span> command. For example, 
              if you own a directory called /project/irp/bozeman, you can determine 
              the total amount of free space by running this <span class="InputCode">df</span> 
              command:</p>
<p class="InputCode">&gt; df -k /project/irp/bozeman<br/>
              Filesystem 1024-blocks Used Available Capacity Mounted on<br/>
              irp1#irp 8220960 1692974 6507568 21% /project/irp</p>
<p>In this example, about 6.5 GB of disk space is available. Again, 
              the units are kilobytes, which was requested when the <span class="InputCode">-k</span> 
              flag was used.</p>
<h3><a id="xtocid2154027" name="xtocid2154027"> Compressing Large Files </a></h3>
<p>A good way to save disk space is to compress files. A compression
               savings rate of 75% is typical and even 95% is achievable, particularly
               for ordinary data files. </p>
<p>Two compression programs are commonly used on Linux: <span class="InputCode">compress</span> 
              and <span class="InputCode">gzip</span>. The syntax for both is 
              basically the same: issue the command, followed by the name of the 
              file you wish to compress. The <span class="InputCode">-v</span> 
              option is useful, as the compression commands will tell you the 
              percentage of file space you saved by compressing the file. For 
              example: </p>
<p class="InputCode">&gt; compress -v vt20.alpha.tar<br/>
              vt20.alpha.tar:Compression:74.18% - replaced with vt20.alpha.tar.Z</p>
<p>or </p>
<p class="InputCode">&gt; gzip -v vt20.alpha.tar <br/>
              vt20.alpha.tar: 89.2% -- replaced with vt20.alpha.tar.gz </p>
<p>The compression commands will change the names of the files, the 
              <span class="InputCode">compress</span> command adding a ".Z" 
              suffix, and the <span class="InputCode">gzip</span> command adding 
              a ".gz" suffix. </p>
<p>To uncompress files, use the commands <span class="InputCode">uncompress</span> 
              or <span class="InputCode">gunzip</span>: </p>
<p class="InputCode">&gt; uncompress vt20.alpha.tar.Z</p>
<p>or </p>
<p class="InputCode">&gt; gunzip vt20.alpha.tar.gz</p>
<p>The compressed file will be replaced by an uncompressed file without 
              the suffix. </p>
<p>Once compressed, files can be uncompressed and then used. However, 
              it is inefficient, both with respect to SSCC computing resources 
              and your time, to constantly uncompress and then recompress files, 
              particularly large data files. There are two ways to use compressed 
              files without uncompressing them. First, some data analysis programs 
              allow you to read in compressed data. Second, some programs that 
              cannot use compressed data can read data from a special type of 
              file called a named pipe. </p>
<p>Programs such as SAS, SPSS, and STATA allow data to be read from 
              the output of commands. Using the <span class="InputCode">zcat</span> 
              command or the <span class="InputCode">gunzip -c</span> command, 
              the compressed file can be printed to standard output so that software 
              programs can read the files. For instructions on how to use compressed 
              data with commercial software programs, see SSCC Knowledge Base articles on 
              the use of these programs available on SSCC's web site.</p>
<h2><a id="xtocid215401" name="xtocid215401">5. Choosing the Proper Linux Computer </a></h2>
<p>In addition to the three Linstat servers, SSCC also has a Condor Flock and High Performance Computing cluster for running large jobs. When selecting a Linux computer on which to run a job, you must                 consider which machines have the software that you want to use and                 which machines have the computing resources necessary for your project. Visit our <a href="https://www.ssc.wisc.edu/sscc/pubs/computing_resources.htm">Computing Resources at the SSCC web page</a>               for details.</p>
<h3><a id="xtocid215403" name="xtocid215403">Condor </a></h3>
<p>SSCC has a cluster of Linux servers for running large STATA,
               SAS, R, MatLab, Fortran, and C/C++ programs. This cluster has a powerful
              batch pooling utility installed called Condor which was developed
              at UW-Madison's Computer Science Department. For more information
              on Condor, refer  to the SSCC Knowledge Base article, <a href="https://www.ssc.wisc.edu/sscc/pubs/7-1.htm">An
               Introduction to Condor</a>.</p>
<h3><a id="flash" name="flash">High Performance Computing  Cluster</a></h3>
<p>The SSCC has a High Performance Computing cluster called FLASH.    See <a href="https://www.ssc.wisc.edu/sscc/pubs/flash.htm">Using the SSCC's High Performance Computing Cluster</a> for instructions on using these machines. If                 you have parallelized C/C++, Fortran, or R programs you'd like                 to run on this cluster, please contact <a href="mailto:rhorrisb@ssc.wisc.edu">Ryan                   Horrisberger</a>. </p>
<h3><a id="xtocid215405" name="xtocid215405"> Software </a></h3>
<p>Almost all the software installed on Linstat is installed on all three   Linstat servers. The two exceptions (due to licensing restrictions) are   SPSS and Stat/Transfer. They are installed on Linstat1. If you run SPSS   or Stat/Transfer on another Linstat server they will automatically   connect to Linstat1 and run your job there, but if you need to manage   that job later you'll need to log in to Linstat1 to do so. </p>
<p>Software availability information for all of SSCC's computers can  be found on <a href="https://www.ssc.wisc.edu/sscc_jsp/software/">SSCC's 
              Software Availability web page</a>.</p>
<h3><a id="xtocid215406" name="xtocid215406">CPU Power</a></h3>
<p> The three Linstat servers have very
              similar processors. However, for large jobs that will take more than a
              few minutes to run, Condor is ideal. Please see <a href="https://www.ssc.wisc.edu/sscc/pubs/7-1.htm">An
               Introduction to Condor</a>.</p>
<h3><a id="xtocid215407" name="xtocid215407">System Load</a></h3>
<p>If you are going to use the computer intensively, for a STATA
              program,  for example, then you should look for a machine that
              is not busy.  There are several ways to determine if a machine
              is busy, and, if  it is busy, what it is doing. Going to <a href="https://www.ssc.wisc.edu/sscc_jsp/status.jsp">SSCC's
               Server Status web page</a>               is the easiest way to get a quick snapshot of how busy a system
              is.            </p>
<p>The Linux operating system provides its own set of commands to 
              get the same information. For example: </p>
<pre>&gt; uptime
13:33  up 1 day,  2:34,  4 users,  load average: 3.36, 3.31, 3.47
</pre>
<p>The <span class="InputCode">uptime</span> command tells the current 
              time, the length of time the computer has been running (in this 
              example, one day, two hours, 34 minutes), how many users are currently 
              logged onto the system and the load average for the past one, five, 
              and 15 minutes. The load average is the average number of jobs waiting 
              to run over the particular time increment. The higher the number, 
              the busier the system. A Linstat server is busy if its load 
              average exceeds four and is very busy if their load average exceeds 
              six. </p>
<p>To find out how busy Condor is, use the <span class="InputCode">condor_status</span> 
              command. </p>
<p>Another excellent command for monitoring system activity is the 
              <span class="InputCode">top</span> command. The <span class="InputCode">top</span> 
              command lists jobs currently running, ordered by CPU usage, with 
              the command using the greatest amount of CPU time on top of the 
              list. The output of the <span class="InputCode">top</span> command 
              looks like this: </p>
<pre> load averages:   0.16,  0.24,  0.23                       15:33:03
94 processes:  1 running, 1 waiting, 15 sleeping, 75 idle,2stopped
Cpu states: 10.0% user,  0.0% nice,  7.9% system, 82.0% idle
Memory:Real:471M/767M act/tot Virtual:16M/2243M use/tot Free: 181M

  PID USERNAME PRI NICE  SIZE   RES STATE   TIME    CPU COMMAND
 9124 esimpson  42    0 8192K 1327K WAIT    4:27 10.50% sas
10235 odrucker  42    0 7736K 4128K sleep   0:03  1.80% stata<pine>
 9387 mcdermot  44    0 2504K  393K run     0:00  0.40% top
  896 root      44    0 1704K  229K sleep   0:01  0.10% telnetd
   77 root      42    0 1600K   57K sleep  19:30  0.00% update
  488 root      44    0 1728K  122K sleep   0:38  0.00% snmpd
  365 root      44    0 2032K  335K sleep   0:22  0.00% rpc.lockd
  561 root      44    0 1992K  106K sleep   0:17  0.00% httpd
 8463 swald     42    0 4488K  180K sleep   0:12  0.00% xterm
  484 root      44    0 2432K  204K sleep   0:11  0.00% os_mibs
    1 root      44    0  440K   40K sleep   0:07  0.00% init
32490 root      44    0 1704K   40K sleep   0:05  0.00% telnetd
  150 root      44    0 1656K  122K sleep   0:02  0.00% syslogd
  452 root      32  -12 2072K  270K sleep   0:02  0.00% xntpd
 8459 mcdermot  44    0 4464K  729K sleep   0:01  0.00% xterm
</pine></pre>
<p>The listing is updated every few seconds. The load averages are 
              on the first line. Next is a list of how many processes are currently 
              running (94 in this example). The third line shows the percent of 
              time the CPU is spending in various modes. The most important item 
              in this line is the idle percentage. If the idle percentage is non-zero, 
              then the computer is not busy at all. The fourth line shows how 
              much memory is in use. </p>
<p>The table at the bottom is the most interesting part of <span class="InputCode">top</span> 
              output. It lists jobs that are currently running. In this snapshot, 
              user esimpson is running SAS, using about 10% of CPU time. User 
              odrucker is running Stata. He is taking about 2% of the 
              CPU time. The <span class="InputCode">top</span> command is taking 
              about half a percent and other commands are taking trivial amounts.            </p>
<p>Because the Linstat servers have multiple CPUs, the percent of 
              CPU used may total as much as 800%. Enter <span class="InputCode">q</span> 
              to exit the <span class="InputCode">top</span> command.</p>
<h2><a id="xtocid215409" name="xtocid215409">6. Running Jobs </a></h2>
<p>Any time you give Linux something to do, you've created a job. 
              Of course many Linux commands execute almost instantly (<span class="InputCode">cd</span>, 
              <span class="InputCode">ls</span>, etc.), but others may run for 
              hours, days, or even longer. In these cases, how a job is run will 
              impact both what you can do and how the system performs for all 
              other users. The SSCC's Linux servers are a shared resource, and 
              it is up to each member to share nicely.            </p>
<h3><a id="xtocid2154010" name="xtocid2154010"> Command Input and Output in Linux </a></h3>
<p>Linux was designed to have many tools that do specialized tasks. 
              In the Linux model, data flows from one command to another command, 
              each command doing what it does best. To implement this model, every 
              Linux command has three files associated with it. These files are 
              called: </p>
<ul>
<li>standard input </li>
<li>standard output </li>
<li>standard error </li>
</ul>
<p>Standard input is the place from which commands get their data. 
              By default, this is the keyboard. Standard output is the place that 
              commands put their output. By default, this is the screen. Standard 
              error is the place that commands put their error messages. By default, 
              this is the screen, also. But it is important to note that standard 
              output and standard error are not the same thing. It just happens 
              that, by default, they send data to the same place. Collectively, 
              these are called standard input and output, or standard I/O, abbreviated 
              stdio. <br/>
</p>
<table align="center" border="1" width="75%">
<tr>
<td><b>Stdio Elements</b></td>
<td><b>Default</b></td>
<td><b>Abbreviation</b></td>
</tr>
<tr>
<td>standard input</td>
<td>keyboard</td>
<td>stdin</td>
</tr>
<tr>
<td>standard output</td>
<td>screen</td>
<td>stdout</td>
</tr>
<tr>
<td>standard error</td>
<td>screen</td>
<td>stderr</td>
</tr>
</table>
<p>Standard I/O can be redirected so that it comes from, or goes to, 
              any place. Standard input can come from the keyboard, or from a 
              file, or from another command. Standard output can be sent to the 
              screen, or to a file, or into another command (as standard input 
              to that command). This is the power of the standard I/O system.            </p>
<p>The symbols used to redirect output are: <br/>
</p>
<table align="center" border="0" width="75%">
<tr>
<td width="11%">&gt; </td>
<td width="89%">redirect stdout from command to a file</td>
</tr>
<tr>
<td width="11%">&gt;&gt; </td>
<td width="89%">redirect stdout from command to a file, appending</td>
</tr>
<tr>
<td width="11%">&gt;&amp; </td>
<td width="89%">redirect stdout and stderr from command to a file</td>
</tr>
<tr>
<td width="11%">&gt;&gt;&amp; </td>
<td width="89%">redirect stdout and stderr from command to a file, 
                  appending</td>
</tr>
<tr>
<td width="11%">&lt; </td>
<td width="89%">redirect stdin from file to a command</td>
</tr>
<tr>
<td width="11%">|</td>
<td width="89%"> pipe the stdout of one command into the stdin 
                  of another command</td>
</tr>
</table>
<p>             </p>
<h4><a id="xtocid2154012" name="xtocid2154012">Redirection of Standard Output </a></h4>
<p>One of the most common ways to manipulate standard I/O is to redirect 
              standard output from a command into a file. For example, if you 
              want to save a long listing of one of your directories, you can 
              do this: </p>
<p class="InputCode">% ls -l Documentation &gt; doc.list</p>
<p>The "greater than" sign (&gt;) redirects data from the 
              <span class="InputCode">ls</span> command to a file called doc.list. 
              Without the redirection, the listing would appear on the screen, 
              but with the redirection, the command only returns the prompt, with 
              no listing. If the file doc.list already exists, then it will be 
              overwritten by the data from the <span class="InputCode">ls</span> 
              command. To append data to the file, instead of overwriting the 
              current data, use two "greater than" signs: </p>
<p class="InputCode">% ls -l Documentation &gt; doc.list<br/>
              % ls -l Programs &gt;&gt; doc.list</p>
<p>In this example, the first command redirected the listing of the 
              Documentation directory into the file called doc.list, creating 
              a new file or overwriting an existing file. Then, the second command 
              appended the listing of the Programs directory into the doc.list 
              file. The doc.list file contains listings for both directories, 
              now. </p>
<h4><a id="xtocid2154014" name="xtocid2154014">Redirection of Standard Input </a></h4>
<p>Some commands can take information from sources other than the 
              keyboard. They use standard input. For instance, if you wanted to 
              mail the doc.list file to someone, you could use the <span class="InputCode">Mail</span> 
              command to do so, instead of invoking pine or another mailer: </p>
<p class="InputCode">% Mail -s "Documentation Listing" odrucker 
              &lt; doc.list</p>
<p>In this example, the <span class="InputCode">Mail</span> command 
              is used. Mail is sent to odrucker with the subject line "Documentation 
              Listing" (the parameter to the <span class="InputCode">-s</span> 
              option) and the tables of the mail message is the doc.list file.            </p>
<h4><a id="xtocid2154015" name="xtocid2154015">Pipes </a></h4>
<p>The most common use of redirection of standard I/O is with pipes,
              which take the output of one command and give it to the input of
              another command. Some common uses are exemplified below: </p>
<p class="InputCode">% ls -l Documentation | enscript</p>
<p>In this example, the listing of the Documentation directory is 
              sent directly to the <span class="InputCode">enscript</span> command 
              so that the file can be printed. The listing is never saved on disk 
              or displayed on the screen. </p>
<p class="InputCode">% ls -lR | more</p>
<p>The <span class="InputCode">-R</span> option to ls instructs <span class="InputCode">ls</span> 
              to recursively list all directories and subdirectories. This could 
              lead to a very long list. In this example, the output of the <span class="InputCode">ls</span> 
              command is piped through the <span class="InputCode">more</span> 
              command, allowing you to read the listing one screen at a time.            </p>
<h3><a id="xtocid2154016" name="xtocid2154016">Running Jobs in the Foreground and Background 
              </a></h3>
<p>Normally when you type a command, it is processed and you see the 
              results (if any) before the cursor returns and you can type a new 
              command. These jobs are said to be running in the foreground, and 
              that may be exactly what you want if your job will run very quickly 
              or you cannot proceed until you have your results. But you can tell 
              Linux not to wait. When you put a job in the background, the cursor 
              returns immediately and you can keep giving commands and doing other 
              work while the your job is running. When it finishes, a message 
              will appear on your screen.</p>
<p>To run a job in the background, simply add an ampersand (&amp;) 
              at the end of the command line. For example:</p>
<p class="InputCode">&gt; stata -b do myprogram</p>
<p> Stata will start and run <span class="InputCode">myprogram.do</span> 
              in the foreground. Thus the session will be unavailable until the 
              job is done. On the other hand,</p>
<p class="InputCode">&gt; stata -b do myprogram &amp;</p>
<p>will start Stata in the background. The cursor returns immediately,
              and the user can  edit other programs, organize files, etc. while
              waiting for the job to finish. When it is done you will see: </p>
<pre class="InputCode">[1]    Done                          stata -b do myprogram</pre>
<p>Note that a job which creates a separate window (emacs, for example) 
              will be completely functional in the background. What makes it a 
              background process is that your shell (the main session window) 
              is ready for more commands. On the other hand if a program without 
              a window is running in the background and needs input from you (for 
              example if SAS runs out of resources), it will halt until you put 
              in the foreground and give it the input it needs.</p>
<p>Note that a job running in the background will keep running even 
              if you log out, so it is quite possible to start a long job before 
              you leave in the evening, log out, and get the results the next 
              morning. Remember that Linstat is actually a cluster of three servers and when you log in   you're assigned to a server randomly (to try to balance the load between   them). However, you can choose to connect to a specific server to monitor   a job you started previously or if the server you're assigned to turns   out to be particularly busy.</p>
<p>To switch to a different server, type:</p>
<p> ssh server</p>
<p>where server can be linstat1, linstat2 or linstat3. Alternatively you can set up your client program to log in to one of those three servers directly.</p>
<h3 class="PageBreak"><a id="xtocid2154017" name="xtocid2154017"></a>Switching Between 
              Foreground and Background</h3>
<p>If you have a job running in the foreground and you want to do 
              something else, simply press <span class="InputCode">CTRL-z</span> 
              (note that if the current job has opened a window of some sort, 
              you must return to your shell window before pressing <span class="InputCode">CTRL-z</span>). 
              The current job will be suspended and you will get your cursor back. 
              If you want the job to run while you are doing other things, type 
              <span class="InputCode">bg</span> to put it in the background. You 
              can also type <span class="InputCode">fg</span> to move it back 
              to the foreground, either from being suspended or from the background.</p>
<h3><a id="xtocid2154018" name="xtocid2154018"></a>Managing Background Jobs</h3>
<p>It can be very easy to lose track of jobs you have running in the 
              background, but there are several commands that can tell you about 
              them.</p>
<p><span class="InputCode">jobs</span> will list all the jobs you 
              started this session that are not yet complete. For example:</p>
<pre class="InputCode">&gt; jobs<br/>[1]  - Running                       emacs<br/>[2]  + Suspended                     emacs</pre>
<p>The number in brackets is the job number, and you can use that 
              number preceded by a percent sign (%) to refer to the job. Naming 
              a job will move it to the foreground, so in this case <span class="InputCode">%2</span> 
              is similar to <span class="InputCode">fg</span> (except you don't 
              have to keep track of which job is considered the "current" 
              job). Adding an ampersand moves it to the background, so <span class="InputCode">%2 
              &amp;</span> is similar to <span class="InputCode">bg</span>.</p>
<p>You can list jobs started in a previou session using the <span class="InputCode">ps</span> 
              command (think processes). The syntax is <span class="InputCode">ps x
              -u <span class="Parameter">username</span></span>. For example:</p>
<pre>&gt; ps -u rdimond<br/>  PID TTY          TIME CMD<br/>29413 pts/30   00:00:00 tcsh<br/> 1601 pts/30   00:00:00 emacs<br/> 1602 pts/30   00:00:00 emacs<br/> 1605 pts/30   00:00:00 ps</pre>
<p>Note how the bracketed numbers have been replaced by the PID (Process 
              IDentification) and the list is more complete, including your shell 
              (in this case the <span class="InputCode">tcsh</span> shell), and 
              the <span class="InputCode">ps</span> command itself. Note that 
              PID's cannot be used to move things from foreground to background. 
              On the other hand this is the only way to check on jobs from previous 
              sessions.</p>
<h3><a id="xtocid2154019" name="xtocid2154019"></a>Killing a Job</h3>
<p>Sometimes you will change your mind about a job, and occasionally 
              things even go wrong. In these cases, the <span class="InputCode">kill</span> 
              command can be invaluable. Simply type <span class="InputCode">kill</span> 
              and then the job number or PID. For example:</p>
<p class="InputCode">&gt; kill %2</p>
<p>or </p>
<p class="InputCode">&gt; kill 1602</p>
<p>This doesn't actually stop the job, it merely requests that it 
              shut down, giving the program an opportunity to clean up temporary 
              files and such. Unfortunately both SAS and SPSS will not do so, 
              so if you kill one of these jobs, please go to the <span class="InputCode">/tmp</span> 
              directory and manually delete all files and directories belonging 
              to you. On the other hand, adding the <span class="InputCode">-9</span> 
              signal to the <span class="InputCode">kill</span> command will kill 
              a program immediately with or without its consent. Thus:</p>
<p class="InputCode">&gt; kill -9 1602</p>
<p><strong>will</strong> kill process 1602.</p>
<h3><a id="xtocid2154021" name="xtocid2154021"></a>Running Multiple Jobs</h3>
<p>Linux will allow you to put as many jobs as you want in the background, 
              and it will try to work on them all at once. This means it is quite 
              possible for a single user to run so many jobs that everyone else 
              is "crowded out." If necessary SSCC staff will intervene 
              to stop this. On the other hand, Condor handles multiple jobs very 
              efficiently and has plenty of available capacity. So if you are 
              planning on doing any resource intensive computing, you really should 
              check out Condor.</p>
<p>The general rule on the interactive (non-Condor) Linstat servers is that
               you should only have one major job running at a time on each server.
              Text editors, email, etc. are not a problem, but Stata, SAS, SPSS,
              and most user-written programs are resource intensive and will
              affect others. Keep in mind that Linux will split the available
              CPU time among all the running jobs. So if you run three jobs simultaneously,
              they will  each take three times as long to run, saving you no
              time but making  much less CPU time available for others (the one
              exception to this  would be if the server has an idle CPU, but
              you shouldn't count  on this).</p>
<p>If you have multiple jobs to run, please read <a href="https://www.ssc.wisc.edu/sscc/policies/server_usage.htm">SSCC's
              CPU Usage Policy</a>. </p>
<h3><a id="xtocid2154022" name="xtocid2154022"></a>Condor</h3>
<p>Condor is designed to process large numbers of jobs. For full details 
              please see <a href="https://www.ssc.wisc.edu/sscc/pubs/7-1.htm">An 
              Introduction to Condor</a>, 
              but the essence of Condor is that we have a pool of Linux servers 
              which only run jobs submitted to them through the Condor program. 
              Unlike standard Linux jobs, Condor jobs never interfere with each 
              other, since each job gets exclusive use of a CPU. Thus if you submit 
              your jobs to Condor, they will not slow down the server for anyone 
              else (or be slowed down by anyone else).</p>
<p>The price is that it takes about 30 seconds for Condor to process
               a job and assign it to a machine. Thus if you are running a 20
              second  job and will be waiting for the results, it would be counterproductive
               to use Condor. But if you have many jobs to run, or a single big
               job, Condor is a great tool. It's not quite a panacea since it
              can  only be used for Stata, R, MatLab, and most user-written C/C++
              and FORTRAN code, but that covers the bulk of the computing done
              at the SSCC.            </p>
<p>We have written several scripts which make submitting Stata jobs 
              to Condor almost identical to running them as usual. The standard 
              command for running a Stata do file in batch mode is stata -b do 
              dofile (where dofile would be replaced by the name of the do file 
              you want to run. To submit the job to Condor instead, simply replace 
              stata with one of the following:</p>
<p class="InputCode">&gt; condor_stata -b do dofile</p>
<p>condor_stata is the command you'll normally use. It will send your 
              job to a multi-processor machine if one is available, but if not 
              it will send your job to the first available machine. </p>
<p>If you want to run programs other than Stata using Condor, or want 
              to submit many jobs at once, please see <a href="https://www.ssc.wisc.edu/sscc/pubs/7-1.htm">An 
              Introduction to Condor</a>.</p>
<h3><a id="xtocid2154023" name="xtocid2154023"></a>Scripts</h3>
<p>Consider the following two scripts. Both run three SAS jobs. The 
              one on the left will tie up the server it is run on, the one on 
              the right will not. And it will execute in about the same amount 
              of time:</p>
<table align="center" border="1" cellpadding="5">
<tr>
<th nowrap="nowrap" scope="col">Bad Script</th>
<th nowrap="nowrap" scope="col">Good Script</th>
</tr>
<tr>
<td nowrap="nowrap" valign="top" width="50%"> <p class="InputCode">sas 
                    prog1 &amp;<br/>
                    sas prog2 &amp;<br/>
                    sas prog3 &amp;</p></td>
<td nowrap="nowrap" valign="top" width="50%"> <p class="InputCode">sas 
                    prog1<br/>
                    sas prog2<br/>
                sas prog3</p></td>
</tr>
</table>
<p>The bad script places all three jobs in the background, so they 
              all run at the same time and compete for resources. The good script 
              runs them in the foreground, so they will run one at a time. However 
              you do not need to wait for them: simply run the script itself in 
              the background and your shell will be available for other work.            </p>
<p>Of course if you could use Condor those three SAS programs would 
              be run on three different CPUs and thus execute in one third the 
              time.</p>
<h3><a id="xtocid2154030" name="xtocid2154030"></a>Running a Job Later</h3>
<p>The <span class="InputCode">at</span> command allows you to run 
              a job at a time you specify. For example, you could run a big, resource 
              intensive job at 1:00 AM when no one is likely to be on. There are 
              several ways to use <span class="InputCode">at</span>.</p>
<p>If you want to just type in the job you want to run later, type</p>
<p class="InputCode">&gt; at <span class="Parameter">time</span></p>
<p>and you can then enter the command(s) at the prompt (<span class="InputCode">at&gt;</span>). 
              When you are done, press <span class="InputCode">CTRL-D</span>. 
              The time parameter will understand just about any reasonable format, 
              including <span class="InputCode">at 1:00</span>, <span class="InputCode">at 
              1:00am</span>, <span class="InputCode">at 1am</span>, <span class="InputCode">at 
              13:00</span> (1:00pm), <span class="InputCode">at noon</span>, <span class="InputCode">at 
              midnight</span>, or <span class="InputCode">at teatime</span> (4:00pm). 
              Note that if you do not specify <span class="InputCode">am</span> 
              or <span class="InputCode">pm</span>, it is assumed you are using 
              24-hour time.</p>
<p>You can also put the commands you want executed in a file. To do 
              this type:</p>
<p class="InputCode">&gt; at time -f <span class="Parameter">file</span></p>
<p>To list the jobs currently waiting to run, type:</p>
<p class="InputCode"> &gt; atq</p>
<p>To remove a job, type:</p>
<p class="InputCode">&gt; atrm <span class="Parameter">job</span></p>
<p> where <span class="Parameter"><span class="InputCode">job</span></span> 
              is an ID obtained by listing your jobs. </p>
<p>Note that if you submit your jobs to Condor, they will not affect 
              other users and will get plenty of resources no matter when you 
              run them.</p>
<h2><a id="xtocid215432" name="xtocid215432">7. Summary of Commands</a></h2>
<p>The table below is a quick reference for the most common Linux 
              commands. Following the link will take you to a more in-depth explanation 
              of the command.</p>
<table align="center" border="1" width="80%">
<tr>
<td width="30%"><b>Command Name</b></td>
<td width="100%"><b>Command Description</b></td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154030">at</a></td>
<td width="100%">run a job at a specified time</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745910">cd</a></td>
<td width="100%">change directory</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid274595">clear</a></td>
<td width="100%">clear the terminal screen</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154027">compress, uncompress</a></td>
<td width="100%">compress and expand file</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid215407">condor_status</a></td>
<td width="100%">lists state of SSCC's Condor flock</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745913">cp</a></td>
<td width="100%">copy files and directories</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154026">df</a></td>
<td width="100%">report file system disk space usage</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154026">du</a></td>
<td width="100%">estimate file space usage</td>
</tr>
<tr>
<td width="30%"><a href="https://www.ssc.wisc.edu/sscc/pubs/intro.htm#xtocid2714129">enscript</a></td>
<td width="100%">print file(s)</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid274592">exit</a></td>
<td width="100%">log off</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154027">gzip, gunzip</a></td>
<td width="100%">compress and expand file</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid274595">hostname</a></td>
<td width="100%">display name of computer logged into</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154018">jobs</a></td>
<td width="100%">display status of jobs in the current session</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154019">kill</a></td>
<td width="100%">terminate a job</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid274595">lookup</a></td>
<td width="100%">display information about UW employees and students</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745911">ls</a></td>
<td width="100%">list directory tables</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745929">man</a></td>
<td width="100%">display the on-line help pages</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745912">mkdir</a></td>
<td width="100%">create a directory</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745914">more</a></td>
<td width="100%">display a file one screenful at a time</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745913">mv</a> </td>
<td width="100%">move or rename files</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154018">ps</a></td>
<td width="100%">display job status</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745910">pwd</a></td>
<td width="100%">display present working directory</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2154026">quota</a></td>
<td width="100%">display disk usage and limits</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745913">rm</a></td>
<td width="100%">remove (delete) files or directories</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid2745912">rmdir</a></td>
<td width="100%">remove (delete) directories</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid215405">soft</a></td>
<td width="100%">list SSCC software availability</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid274592">ssh</a></td>
<td width="100%">remote login and remote execution of commands</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid215407">top</a></td>
<td width="100%">display top CPU processes</td>
</tr>
<tr>
<td width="30%"><a href="#xtocid215407">uptime</a></td>
<td width="100%">tell how busy the system is</td>
</tr>
</table>
<h2><a id="xtocid215433" name="xtocid215433">Other Sources of Information</a></h2>
<p>Many resources are available to learn about the Linux operating
               system, both at SSCC and at your local book store. SSCC staff
              maintain  numerous on-line Knowledge Base articles on Linux topics including
              the use  of editors, such as EMACS and PICO, and use of statistical
              software  like SAS, STATA, and SPSS. All of SSCC's Knowledge Base articles
              are available  online at <a href="https://www.ssc.wisc.edu/sscc/pubs">https://www.ssc.wisc.edu/sscc/pubs</a>.</p>
<p>SSCC also teaches mini-courses, ranging from one-hour courses,
               to classes that meet for half a day, or for an hour a week for
              several  weeks. See BROADCAST, SSCCNEWS, or <a href="https://www.ssc.wisc.edu/sscc_jsp/training/index.jsp">SSCC's
               training web pages</a>               for registration and other information about these courses.</p>
<p> </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Articles on Using OS X</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>
<!-- InstanceBeginEditable name="Content" -->
<p>This page lists articles on using OS X
                    operating system with SSCC resources.</p>
<p><a href="https://ssc.wisc.edu/sscc/pubs/printfrommac.htm">Using SSCC Printers from Macs</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/diskfrommac.htm">Using SSCC Network Disk Space from Macs</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat_from_mac.htm">Connecting to Linstat from a Mac</a><br/>
<span class="news"><a href="https://ssc.wisc.edu/sscc/pubs/winstat.htm">Using Winstat</a></span><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/working_from_home.htm">Working From Home and Other Remote Locations</a> <br/>
<a href="https://ssc.wisc.edu/sscc/pubs/screen_sharing.htm">Connecting to Your Office Computer Using Screen Sharing (Mac)</a> </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Running Mplus Jobs on Linstat</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Mplus is now available on Linstat, the SSCC's Linux computing cluster, where it can use up to 16 cores and much more memory than on Winstat. This can make large Mplus jobs run much more quickly. Running jobs on Linstat is probably easier than you think. If you've never used Linstat before, start by reading <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a>.                </p>
<p></p>
<p>Linstat is a cluster of of Linux servers. If you log in to "Linstat" you could be assigned to any of the individual servers, which helps spread the load among them. However, our Mplus license only allows us to install it on three servers, Linstat1, Linstat2, and Linstat3. Thus if your goal is to run Mplus you should log in directly to one of these servers rather than just Linstat. <a href="https://ssc.wisc.edu/sscc/pubs/5-2.htm">Connecting to SSCC Linux Computers using X-Win32</a> and <a href="https://ssc.wisc.edu/sscc/pubs/linstat_from_mac.htm">Connecting to Linstat from a Mac</a> have instructions.</p>
<p>We are also only allowed to have one Mplus job running on each server at a time. If you are told it is currently in use on all three servers we're afraid you'll have to wait. (If this happens to you a lot, let the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">Help Desk</a> know and we'll look into transferring more licenses from Winstat to Linstat.)</p>
<p>Any files you want to use on Linstat need to be stored on the SSCC's Linux file system. If you're using a Windows computer on the SSCC network, the Z:\ drive is your Linux home directory and the V:\ drive is Linux project space. The Mplus editor is not available for Linux, but you can write your input files using Mplus on Winstat and then save them on Z:\ or V:\. <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm#GettingStartedonLinstat">Getting Started On Linstat</a> will teach you how to organize your files for easy use in Linux programs.</p>
<p>Once everything is set up, running an Mplus program is very easy. Just type:</p>
<p class="InputCode">mplus <span class="Parameter">myinputfile</span>.inp</p>
<p>where <span class="Parameter">myinputfile</span><span class="InputCode">.inp</span> should be replaced by the actual name of your input file.</p>
<p>You'll see Mplus open several terminal windows. The way Mplus uses multiple cores is unusual in that rather than having the program start additional processes directly, it launches additional terminal sessions that then start additional processes. Unfortunately this means that you need to stay logged in to Linstat the entire time the program is running. Mplus will also continue to write output to your original Linux terminal, so there's no point in running it in the background. Create a new Linstat session if you want to do additional work, but keep in mind you won't be able to start another Mplus job.                </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Articles for New Users</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>
<!-- #BeginEditable "Content" -->
<p>This page lists articles of particular interest to new SSCC users.
	  			While there is no "required reading" <i>per se</i>, a little
	  			 time spent perusing this section could save you a lot of confusion
	  			down	
		the road. It could also be useful for those seeking basic information
	  			about using SSCC resources.</p>
<h2>Welcome!</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/welcome.htm">Welcome to the SSCC! (For SSCC Members)</a><span class="news"><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/welcomelab.htm">Welcome to the SSCC! (For Lab Users)</a></span><br/>
</p>
<h2>What the SSCC Provides</h2>
<p><a href="https://ssc.wisc.edu/sscc/statconsult.htm">Statistical Consulting</a><br/>
<a href="https://ssc.wisc.edu/sscc_jsp/software/">SSCC Software</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/computing_resources.htm">Computing Resources at the SSCC<br/>
</a><a href="https://ssc.wisc.edu/sscc/pubs/disk.htm">Network Disk Space at the SSCC</a></p>
<h2>Your Account</h2>
<p><a href="https://ssc.wisc.edu/sscc_jsp/password/">Change Your Password</a><br/>
<a href="https://ssc.wisc.edu/sscc_jsp/password/reset.jsp">Reset Your Password </a><br/>
<a href="https://ssc.wisc.edu/sscc_jsp/software/"></a> </p>
<h2>Using SSCC Servers</h2>
<p><span class="news"><a href="https://ssc.wisc.edu/sscc/pubs/winstat.htm">Using Winstat </a></span><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/silo.htm">Using the Silo LDS Environment</a></p>
<h2>Setting Up Your Computer</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/5-24.htm">Setting Up Network Printers in Windows</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/softwarecenter.htm">Installing New Software using Software Center<br/>
</a><a href="https://ssc.wisc.edu/sscc/pubs/printfrommac.htm">Using SSCC Printers from Macs</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/diskfrommac.htm">Using SSCC Network Disk Space from Macs</a></p>
<h2>Remote Access</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/working_from_home.htm">Working From Home and Other Remote Locations<br/>
</a></p>
<h2>Statistical Software</h2>
<p><a href="https://ssc.wisc.edu/sscc/pubs/sfr-intro.htm">Stata for Researchers</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">R for Researchers</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/sfs/">Stata for Students<br/>
</a><a href="https://ssc.wisc.edu/sscc/pubs/spss/classintro/spss_students1.html">SPSS  for the Classroom</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/4-17.htm">Using	Stat/Transfer</a> </p>
<h2>Policies</h2>
<p>See our <a href="https://ssc.wisc.edu/sscc/policies/home.htm">policies page</a> for a full list, but these are some some of the most
	  		important:</p>
<p><a href="https://ssc.wisc.edu/sscc/policies/desktopsupp.htm">Desktop Support Policy</a><br/>
<a href="https://ssc.wisc.edu/sscc/policies/server_usage.htm">Server Usage Policy</a><br/>
<a href="https://ssc.wisc.edu/sscc/policies/backup.htm">SSCC Data Integrity</a><br/>
<a href="https://ssc.wisc.edu/sscc/policies/privacy.pdf">Privacy Standards for SSCC Staff</a></p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using NVivo on Winstat</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>For the most part, using NVivo on Winstat is no different from using it on any other computer. (Unfortunately, SSCC staff cannot give general advice on how to use NVivo, though we can sometimes answer specific questions. The SSCC does not have any expertise in qualitative research.) However, there is one setting change that everyone who uses NVivo on Winstat should make.</p>
<p>Click <span class="MenuOutput">File</span>, <span class="MenuOutput">Options</span>, and under the <span class="MenuOutput">General</span> tab change <span class="MenuOutput">Update projects on network drives</span> from <span class="MenuOutput">On close</span> to <span class="MenuOutput">On save</span>.</p>
<table border="0" cellpadding="3" class="noBorder">
<tr>
<td><img align="middle" alt="Choose On save" height="687" src="https://ssc.wisc.edu/sscc/pubs/screenshots/nvivo/nvivo1.png" width="730"/></td>
</tr>
</table>
<p>The problem here is not really Winstat; it's that when using Winstat you save everything on network drives like <span class="MenuOutput">U:</span>. When you open an NVivo project that's saved on a network drive, NVivo makes a copy of the project on your local hard drive and works with the copy rather than the original. If you leave <span class="MenuOutput">Update projects on network drives</span> set to the default of <span class="MenuOutput">On close</span>, then even when you tell NVivo to save your work it only saves it in the local copy. Nothing is saved to the network until you close NVivo. If Nvivo crashes (which it does all too frequently) then all your work is lost even though you thought you were saving it. Veteran NVivo users know that this is a big problem, but setting <span class="MenuOutput">Update projects on network drives</span> to <span class="MenuOutput">On save</span> eliminates it completely.</p>
<p> Unfortunately, due to the way NVivo stores settings there is no way for SSCC staff to change this setting for everyone. If you use NVivo, please take a moment to change it right now. If you work with other NVivo users, and especially if you teach others to use NVivo, please be sure they make this change as well.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/nvivo/nvivo1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Upgrading to Office 2013 using SSCC's Software Center</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>If your University-owned  PC running Windows 7 or 8 logs in to the SSCC's domain (PRIMO), you can upgrade to Office 2013 very easily using Software Center. This article will show you how.</p>
<p>Click on the Windows logo or <span class="MenuOutput">Start</span> button, <span class="MenuOutput">All Programs</span>, <span class="MenuOutput">Microsoft System Center 2012 R2</span>, <span class="MenuOutput">Configuration Manager</span>, and then <span class="MenuOutput">Software Center</span>. (If Software Center is not available then you cannot use this method.) This will give you a list of software you can install using Software Center. Check the box next to <span class="MenuOutput">Microsoft Office 2013 x86</span> and  click <span class="MenuOutput">Install Selected</span>.</p>
<p><img alt="Software Center" height="418" src="https://ssc.wisc.edu/sscc/pubs/screenshots/office2013/office2013_1.png" width="600"/></p>
<p>Software Center will then install the new version—feel free to use other programs while it does. When the <span class="MenuOutput">STATUS</span> of Office 2013 changes to <span class="MenuOutput">Installed</span> you can close Software Center.</p>
<p>The first time you use Office 2013 you will be asked to activate it. Just choose to activate over the Internet and the process will be completed automatically.</p>
<p>If you have the 64-bit version of Office 2010 (or any 64-bit components) Software Center will not be able to remove them automatically. You can uninstall Office 2010 yourself and then restart Software Center (you may have to press F5 to refresh the list of available programs), or contact the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">Help Desk</a> to have SSCC staff install it for you.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/office2013/office2013_1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Installing the pbnm Package</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#source-install-from-x-drive">Source install from X drive</a></li>
<li><a href="#source-install-from-internet">Source install from Internet</a></li>
</ul>
</div>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>The pbnm package is an R package which contains functions to perform a parametric bootstrap. The package supports bootstraps on the coefficients from models constructed using lm, glm, lmer, or glmer functions.</p>
<p>The pbnm package is available as a source package on the SSCC's website. The install procedure for a source package is different than installing a package from CRAN. This article describes how to install the pbnm package.</p>
</div>
<div class="section level2" id="source-install-from-x-drive">
<h2>Source install from X drive</h2>
<p>If you have access to the X drive on the SSCC network, use the following instructions to install pbnm.</p>
<ul>
<li><p>Open a new file explorer window.</p></li>
<li><p>Navigate to the X:\SSCC Tutorials\pbnm\downloads folder.</p></li>
<li><p>Find the most recent version of the .tar.gz file.</p></li>
<li><p>Open R or RStudio.</p></li>
<li><p>Enter the following command in the console window. You will need to replace "pbnm_0.3.0.9001" with the name of the most recent .tar.gz file found in the pbnm\downloads folder.</p>
<p>install.packages("X:/SSCC Tutorials/pbnm/downloads/pbnm_0.3.0.9001.tar.gz", repos=NULL,type="source")</p></li>
<li><p>The pbnm package is finished installing when the following is displayed in the console.</p>
<pre><code>* DONE (pbnm)</code></pre></li>
</ul>
</div>
<div class="section level2" id="source-install-from-internet">
<h2>Source install from Internet</h2>
<p>If you do not have access to the X drive on the SSCC network, use the following instructions to install pbnm.</p>
<ul>
<li><p>Open a browser.</p></li>
<li><p>Navigate to the <a class="uri" href="https://www.ssc.wisc.edu/sscc/pubs/pbnm/downloads/">https://www.ssc.wisc.edu/sscc/pubs/pbnm/downloads/</a>.</p></li>
<li><p>Find the most recent version of the .tar.gz file.</p></li>
<li><p>Click on the file and select the Save File option. Click the Ok button to save the file Save the file to a known folder. On a windows machine this can be your download folder.</p></li>
<li><p>Open R or RStudio.</p></li>
<li><p>Enter the following command in the console window. You will need to replace "pbnm_0.3.0.9001" with the name of the most recent .tar.gz file found in the pbnm\downloads folder. You will need to replace path with the path to the folder that you saved the .tar.gz file to.</p>
<p>install.packages("path/pbnm_0.3.0.9001.tar.gz", repos=NULL,type="source")</p></li>
<li><p>The pbnm package is finished installing when the following is displayed in the console.</p>
<pre><code>* DONE (pbnm)</code></pre></li>
</ul>
<p>Last Revised: 6/24/2016</p>
</div>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>SSCC - Social Science Computing Cooperative</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Malicious software or "malware" is now a profitable business and today's computers face a wide variety of threats. This article will help you secure your Windows PC against some of the most common threats we're seeing in the summer of 2010. Unfortunately, the threat environment is constantly changing and other steps will no doubt be necessary in the future.</p>
<p>Computers in the Sewell Social Science Building that connect to the SSCC's Windows Domain (PRIMO) are kept secure by SSCC staff. You do not need to update them. However, you should reboot your office PC regularly so the patches we install can be applied. You are responsible for securing your laptop and/or home PC, but SSCC staff will be happy to assist you if you run into problems.</p>
<p>Computers running Mac OS are currently less vulnerable, primarily because it is more profitiable to find ways to compromise Windows PCs. Mac owners should still run <a href="#InstallSymantecEndPointProtection">anti-virus software</a> and keep it and their operating system up-to-date, and take other basic precautions.</p>
<h2><a id="AvoidThreatsontheWeb" name="AvoidThreatsontheWeb"></a>Avoid Threats on the Web</h2>
<p>Some of the most common threats today involve placing malicious code in a Flash file or other media displayed by a browser plugin. The file can be placed on a web site controlled by the hacker, or in a web advertisement to be run on completely legitimate web sites. When the file is viewed, the malicious code takes advantage of flaws in the player to infect the computer.                </p>
<h3>Update Plugins</h3>
<p>Many of these flaws have been fixed, but you need to download and install the latest version of the plugin to be protected. You can check whether you have the latest versions of your plugins by visting Mozilla's <a href="http://www.mozilla.com/en-US/plugincheck/">Plugin Check</a>. This works for all the major web browsers, not just Firefox. If you need to update some of your plugins it will direct you to the appropriate web site.</p>
<h3>Consider Blocking Flash</h3>
<p>Flash is the most frequent vector for plugin-based attacks, and unfortunately it's not unusual for there to be malicious Flash files on the web exploiting flaws that have not yet been corrected. If  you use Mozilla Firefox, you can greatly reduce your exposure to such attacks by installing an Add-on called FlashBlock. It replaces all Flash objects with a "Play" button and only shows the Flash if you click the button. Some people find it makes browsing the web more pleasant as well as more secure.</p>
<p> To install FlashBlock, click <span class="MenuOutput">Tools</span>, <span class="MenuOutput">Add-ons</span>, <span class="MenuOutput">Get Add-ons</span> and then search for FlashBlock.</p>
<h3>Avoid Dubious Web Sites and Downloads</h3>
<p>Hackers often set up web sites offering pirated movies, pornography or other inducements. The real purpose is to infect the computers of visitors. Sometimes you get what you pay for.</p>
<p>Be even more cautious about downloading and installing free programs you find on the web. There are many legitimate and useful free programs available on the web (R comes to mind), but there are others that act as "trojan horses" to install malware.  Searching the web for reviews of any programs you're considering installing is a wise precaution.</p>
<h2><a id="UpdateWindows" name="UpdateWindows"></a>Update Windows</h2>
<p>Malware continues to take advantage of flaws in Windows itself. Thus it's still vital that you keep Windows up-to-date. Windows mostly updates itself now, but you should verify that it is doing so successfully. It's also important to reboot your computer on a regular basis (ideally at the end of each day) so that patches can be applied. Even computers the SSCC secures need to be rebooted so the patches we install can take effect.</p>
<p>To check that Windows is being updated, go to <a href="http://windowsupdate.microsoft.com">windowsupdate.microsoft.com</a> and run the <span class="MenuOutput">Express</span> update. It should not find any "High Priority" updates to install (they should have been installed for you automatically). It should also say <span class="MenuOutput">Automatic Updates: Turned ON</span>.</p>
<p>Windows 7 is significantly more secure than Windows XP. If your computer can run Windows 7, consider upgrading. You can purchase Windows 7 from the <a href="http://wiscsoftware.wisc.edu/wisc/">WISC catalog</a>.</p>
<h2><a id="InstallSymantecEndPointProtection" name="InstallSymantecEndPointProtection"></a>Install Symantec Endpoint Protection</h2>
<p>Anti-virus software is not as effective as it once was, but it is still an important part of keeping your PC secure. The University has purchased a site license for Symantec Endpoint Protection so it is free for all UW faculty, staff and students to install on their computers. You can download it from the <a href="http://www.cio.wisc.edu/security/antivirus.aspx">UW CIO's Security</a> web site.</p>
<h2><a id="ScanYourPC" name="ScanYourPC"></a>Scan Your PC</h2>
<p>There are  many free programs for detecting malware on your PC (plus a few that pretend they will and then actually install malware). Which is best changes rapidly because malware authors find ways to avoid the most popular detection programs.</p>
<p>Right now we suggest using <a href="http://www.malwarebytes.org/">Malwarebytes</a> to scan your PC. It is free and easy to install and use.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Articles on Printing</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>
<!-- #BeginEditable "Content" -->
<p>This page lists articles regarding printing.</p>
<p><a href="https://ssc.wisc.edu/sscc/pubs/5-24.htm">Setting Up Network Printers	in Windows</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/printfrommac.htm">Using SSCC Printers from Macs</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/7-28.htm">Printing	from Linux</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/printfromlinux.htm">Using SSCC Network  Printers from Personal Linux Computers</a> <br/>
<a href="https://ssc.wisc.edu/sscc/pubs/goprint.htm">Paying for Printing in the SSCC Labs</a> <br/>
</p>
<p> </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using SSCC Network Printers from Personal Linux Computers</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>This article will show you how to use the SSCC's network printers from your personal computer running Linux. The details and pictures apply to Ubuntu 10.4, but the general procedure should work on any desktop-oriented Linux distribution.                </p>
<p>Go to <span class="MenuOutput">System</span> -&gt; <span class="MenuOutput">Administration</span> -&gt; <span class="MenuOutput">Printing</span>. Click <span class="MenuOutput">Add</span> to add a new printer.</p>
<p><img alt="Printing screen" height="250" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux1.png" width="450"/></p>
<p> Next expand <span class="MenuOutput">Network Printer</span> and  select <span class="MenuOutput">Windows Printer via Samba</span>.</p>
<p><img alt="Select Device" height="519" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux2.png" width="600"/></p>
<p>Type the name of the printer you want to use in the box under <span class="MenuOutput">SMB Printer</span>.</p>
<table align="center" border="1" cellpadding="3">
<caption align="top">
<a id="Names" name="Names"></a>SSCC Network Printers
                  </caption>
<tr>
<th scope="col">Room</th>
<th scope="col">Printer Name</th>
</tr>
<tr>
<td align="center">4218</td>
<td align="center" class="InputCode">primo/print/sscc4218</td>
</tr>
<tr>
<td align="center">3218</td>
<td align="center" class="InputCode">primo/print/sscc3218</td>
</tr>
<tr>
<td align="center">2470</td>
<td align="center" class="InputCode">primo/print/sscc2470</td>
</tr>
</table>
<p>Select <span class="MenuOutput">Set authentication details now</span> and type your SSCC username and password. If your password contains any special characters (<span class="InputCode">&amp;</span>, <span class="InputCode">@</span>, etc.) type a backslash (<span class="InputCode">\</span>) before that character.</p>
<p><img alt="Enter printer information" height="519" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux3.png" width="600"/></p>
<p>Click <span class="MenuOutput">Verify</span> and your computer will confirm that it can connect with the printer. Then click <span class="MenuOutput">Forward</span> and your computer will search for appropriate printer drivers but fail. Instead type <span class="InputCode">lexmark</span> in the <span class="MenuOutput">Make and model</span> box and click <span class="MenuOutput">Forward</span>.</p>
<p><img alt="Download printer driver by name" height="430" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux6v2.png" width="650"/></p>
<p>Select <span class="MenuOutput">Postscript-Lexmark</span> under <span class="MenuOutput">Downloadable Drivers</span> and and click <span class="MenuOutput">Forward</span> to download and install it.</p>
<p><img alt="Download drivers" height="430" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux6_5.png" width="650"/></p>
<p>Next it will ask you which options to use. Set <span class="MenuOutput">Trays</span> to <span class="MenuOutput">Tray1+2+3</span>. (If you leave it at the default it will only be able to use tray 1, which is the colored paper used for cover sheets.)</p>
<p><img alt="Installable Options" height="434" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux7.png" width="650"/></p>
<p>Give the printer a short name and optional description and location and click <span class="MenuOutput">Apply</span>. Do not print a test page at this time.</p>
<p><img alt="Name the printer" height="434" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux8.png" width="650"/></p>
<p>Before actually using the printer, you need to tell it to use tray 3 rather than tray 1 (which contains colored paper). Right-click on the printer and choose <span class="MenuOutput">Properties</span>, then click <span class="MenuOutput">Printer Options</span> on the left and set  <span class="MenuOutput">Media source</span> to <span class="MenuOutput">Tray 3</span>.</p>
<p><img alt="Printer Properties" height="350" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux10.png" width="629"/></p>
<p>Click <span class="MenuOutput">OK</span> and you're ready to print to the SSCC's printers.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux6v2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux6_5.png, https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux7.png, https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux8.png, https://ssc.wisc.edu/sscc/pubs/screenshots/printfromlinux/printfromlinux10.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Using SSCC Printers from Macs</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>This article will show you how to use the SSCC's network printers from your  computer running OS X. </p>
<ol>
<li>If you are not plugged into the wired network in the Sewell Social Science Building, you first need to establish a <a href="https://ssc.wisc.edu/sscc/pubs/vpn.htm">VPN connection</a> to the SSCC network.</li>
<li>You'll next need to know the name of the printer you are connecting to. Please see the <a href="https://ssc.wisc.edu/sscc/downloads/download-printer-list.php" target="new" title="List of Printer Names on SSCC">list of printer names</a> to find your printer info. If you need help gathering this information,  speak with the department that hosts the printer or SSCC staff. </li>
<li>Open the <span class="MenuOutput">System Preferences</span> by clicking the Apple icon in the upper left of the screen and choosing <span class="MenuOutput">System Preferences</span></li>
<li>Click <span class="MenuOutput">Printers &amp; Scanners</span></li>
<li>Click the <span class="MenuOutput">+ </span>button on the lower left to add a printer.</li>
<li>If you see an <span class="MenuOutput">Advanced</span> button, skip to step 7. Otherwise, Control-click on the box just above <span class="MenuOutput">More Printers</span>, choose <span class="MenuOutput">Customize Toolbar</span>, drag the <span class="MenuOutput">Advanced</span> icon from this box onto the toolbar and click <span class="MenuOutput">Done</span>.</li>
<img alt="" class="CenterImage" height="482" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfrommac/10_9_1B_new.jpg" width="547"/>
<li>Click <span class="MenuOutput">Advanced</span></li>
<li>Change the <span class="MenuOutput">Type</span> of the printer to <span class="MenuOutput">Windows</span></li>
<li>Type the <span class="MenuOutput">URL</span>, <span class="MenuOutput">Name </span>and <span class="MenuOutput">Location</span> of the printer you want to use.  The info for the printers in the SSCC labs is as follows:  
                    <table border="1" cellpadding="3">
<tr>
<th>Name</th>
<th>Location</th>
<th>URL</th>
</tr>
<tr>
<td>SSCC4218</td>
<td>Room 4218</td>
<td>smb://print.ads.ssc.wisc.edu/sscc4218</td>
</tr>
<tr>
<td>SSCC3218</td>
<td>Room 3218</td>
<td>smb://print.ads.ssc.wisc.edu/sscc3218</td>
</tr>
<tr>
<td>SSCC2470</td>
<td>Room 2470</td>
<td>smb://print.ads.ssc.wisc.edu/sscc2470 </td>
</tr>
</table>
<img alt="" height="485" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfrommac/10_9_2B.jpg" width="547"/> <br/>
</li>
<li>Click on<strong>  Choose a Driver...</strong> and then select<strong> Generic PCL Driver</strong>. The generic driver is sufficient for most printers, but if you need access to special features please contact the SSCC Help Desk for assistance in installing drivers specific to your printer. <br/>
</li>
<li>Click <span class="MenuOutput">Add</span>. You may be asked to configure additional available options for your printer, including duplexing and paper handling. </li>
</ol>
<p>The first time you print to the printer you'll be asked for your username and password. Set <span class="MenuOutput">Connect as: </span>to <span class="MenuOutput">Registered User</span>, for your <span class="MenuOutput">Name</span> type your SSCC username and give your SSCC password.  Check <span class="MenuOutput">Remember this password in my keychain</span> and you won't be asked to give it again when you print in the future.</p>
<p><img alt="Giving your username and password" class="CenterImage" height="394" src="https://ssc.wisc.edu/sscc/pubs/screenshots/printfrommac/10_9_3B.jpg" width="576"/></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/printfrommac/10_9_1B_new.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/printfrommac/10_9_2B.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/printfrommac/10_9_3B.jpg</img_base_url>
</kb_document>
<kb_document>
<kb_title>Running Python on Linstat</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Python and Jupyter Notebook are available on Linstat. This article will show you how to set them up and use them.</p>
<h2>Setting Up</h2>
<p>Some setting up is required before you can (easily) run Python or Jupyter Notebook. We've created a script that does this for you, so all you need to do is log into Linstat and run:</p>
<p class="InputCode">setup_python</p>
<p>You then need to log out of Linstat and log back in so the new settings can take effect.</p>
<h2>Running Jupyter Notebook</h2>
<p>To run Jupyter Notebook, type:</p>
<p class="InputCode">jupyter notebook</p>
<p>This will first start a local web server that will do the actual work and then start a Chromium web browser (the open source version of Chrome) to interface with it. When you're done using Jupyter Notebook, you need to both close the web browser and shut down the web server. You can close the web browser in the usual way by closing its window. Then close the web server by pressing <span class="InputCode">Ctrl-c</span>. If you started Jupyter in the background or no longer have the session you started it in available, you can shut it down with:</p>
<p class="InputCode">jupyter notebook stop</p>
<p>Jupyter will start in your current working directory. Note that Jupyter can only see files and directories that are underneath the directory that it starts in, so make sure you're in or above the directory you want to work in before you start Jupyter. For example, if you start Jupyter in your home directory (the initial working directory when you log in) it will only be able to see files and directories in your home directory. If you want to work with files in a project directory, <span class="InputCode">cd</span> to that directory before starting Jupyter.</p>
<h2>Running Python Scripts</h2>
<p>You can run a Python script (.py file) by typing:</p>
<p class="InputCode">python <span class="Parameter">myscript</span>.py &amp;</p>
<p>Where <span class="Parameter">myscript</span> should be replaced by the actual name of your script. This will put the job in the background, which means you can do other work with your Linux session or log out completely and your job will continue running. For more information, see <a href="https://ssc.wisc.edu/sscc/pubs/linstat_jobs.htm">Managing Jobs on Linstat</a>.</p>
<h2 class="MenuOutput">Installing Packages</h2>
<p>Python distinguishes between packages that are installed globally (meaning all users of a given computer have access to them) and packages that are installed for a particular user. Linstat has all the packages that are part of the Anaconda distribution installed globally, including pandas, matplotlib, numpy, scipy and many others. Individual users cannot install packages globally, or change packages that were installed globally. However, users can install packages for themselves, including updated versions of globally installed packages.These packages will be stored in your home directory.</p>
<p>Packages should be installed using <span class="InputCode">pip</span>. To install a package for yourself type:</p>
<p class="InputCode">pip install --user <span class="Parameter">packagename</span></p>
<p>where <span class="Parameter">packagename</span> should be replaced by the name of the package you want to install (for example, <span class="InputCode">pip install --user pandas-datareader</span>). </p>
<p>You can install more current versions of globally installed packages with:</p>
<p class="InputCode">pip install --user --upgrade <span class="Parameter">packagename</span></p>
<p>You should only do so, however, if you need the latest version of a package immediately, as packages can take substantial space in your home directory. SSCC staff update the Python installation on Linstat each semester.</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Installing Python Packages on Winstat</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>SSCC members who use Python on Winstat are welcome to install any packages they need, but need to be mindful that the Winstat environment is not quite the same as a regular Windows PC.</p>
<p>Python distinguishes between packages that are installed globally (meaning all users of a given computer have access to them) and packages that are installed for a particular user. Winstat has all the packages that are part of the Anaconda distribution installed globally, including pandas, matplotlib, numpy, scipy and many others. Individual users cannot install packages globally, or change packages that were installed globally. However, users can install packages for themselves, including updated versions of globally installed packages. These packages will be stored on your U: drive.</p>
<p>Packages should be installed using <span class="InputCode">pip</span>. (Unfortunately, <span class="InputCode">conda</span> is currently not compatible with Winstat.) You can run <span class="InputCode">pip</span> by first starting the Anaconda Prompt, which you can find under <span class="MenuOutput">Anaconda</span> in the programs list or by typing <span class="InputCode">anaconda</span> in the search box.</p>
<p><img alt="" class="CenterImage" height="113" src="https://ssc.wisc.edu/sscc/pubs/screenshots/python_winstat/anaconda_prompt.PNG" width="251"/></p>
<p>This will give you a command line interface. To install a package for yourself type:</p>
<p class="InputCode">pip install --user <span class="Parameter">packagename</span></p>
<p>where <span class="Parameter">packagename</span> should be replaced by the name of the package you want to install (for example, <span class="InputCode">pip install --user pandas-datareader</span>). The package will be installed in <span class="InputCode">U:\python</span>, which will be created automatically if necessary.</p>
<p>You can install more current versions of globally installed packages with:</p>
<p class="InputCode">pip install --user --upgrade <span class="Parameter">packagename</span></p>
<p>You should only do so, however, if you need the latest version of a package immediately, as packages can take substantial space in your U: drive. SSCC staff update the Python installation on Winstat each semester.<br/>
</p>
<div></div>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/python_winstat/anaconda_prompt.PNG</img_base_url>
</kb_document>
<kb_document>
<kb_title>Installing R on Your Personal Computer</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>R is an open-source statistical package commonly used by statisticians developing new statistical methods. While it is more difficult to learn and use than Stata, SAS or SPSS, some cutting-edge techniques have only been implemented in R.</p>
<p>R is already installed on Winstat, on the SSCC Linux servers and in the SSCC computer labs. But  since R is open-source, you are free to download, install and use R on your computer as well. This article will help you to do so on either a Windows computer or a Mac.                </p>
<h2>Windows</h2>
<p>Go to the <a href="http://cran.r-project.org/bin/windows/base/">R for Windows download page</a>, then click <span class="MenuOutput">Download R </span><span class="Parameter">#.#.#</span><span class="MenuOutput"> for Windows</span>, where  <span class="Parameter">#.#.#</span> will be the version number of the current version. Your browser will then download the file <span class="MenuOutput">r-</span><span class="InputCode">#.#.#</span><span class="MenuOutput">-win32.exe</span>. When the download is complete, double-click on the file to start the installation.</p>
<h2>Mac</h2>
<p>Go to the <a href="http://cran.r-project.org/bin/macosx/">R for Mac OS X download page</a>, then click on <span class="MenuOutput">R-</span><span class="Parameter">#.#.#</span><span class="MenuOutput">.dmg</span> where <span class="Parameter">#.#.#</span> will be the version number of the current version. When that file has finished downloading, double-click on it to start the installation.</p>
<h2>Packages</h2>
<p>If your computer is always connected to the SSCC network, you may want to store your packages on your <span class="MenuOutput">U:</span> drive. Then if you ever want to run R on Winstat or in the SSCC computer labs your packages will already be installed. See <a href="https://ssc.wisc.edu/sscc/pubs/r-packages.htm">Using R Packages on SSCC Computers</a> for instructions.</p>
<h2>Updating R</h2>
<p>To update R, uninstall it and then install the latest version as described above.</p>
<p>If you had R store your packages on the <span class="MenuOutput">U:</span> drive, they'll  be available immediately. Otherwise they are stored with the program and you'll need to move them from the old version's  folder to the new version's. In Windows the default library location is <span class="InputCode">C:\Program Files\R\R-#.#.#\library</span> and it is similar on a Mac. For example, to move packages installed under R 2.9.1 to R 2.9.2, take the  <span class="InputCode">library</span> folder in <span class="InputCode">C:\Program Files\R\R-2.9.1</span> and put it under <span class="InputCode">C:\Program Files\R\R-2.9.2</span>.</p>
<p>This is a good time to make sure your packages are up to date: click <span class="MenuOutput">Packages</span>, <span class="MenuOutput">Update Packages</span>.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using R Packages on SSCC Linux Servers</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Much of R's utility comes from packages that users have written. Base R comes with some packages, but you may need to install more.                </p>
<h2><a id="InstallingandLoadingPackages" name="InstallingandLoadingPackages"></a>Installing and Loading Packages</h2>
<p>In Windows R, you  install a package by clicking <span class="MenuOutput">Packages</span>, <span class="MenuOutput">Install Package(s)</span>. You'll then be asked the mirror to install from (it makes little difference, but the nearest to Madison is probably <span class="MenuOutput">USA (IA)</span>, located in Iowa) and the package you want to install. You'll get a warning that the program can't modify an HTML file that keeps a list of installed packages, but that won't prevent you from using the package.</p>
<p>In Linux R type:</p>
<p class="InputCode">install.packages("<span class="Parameter">package</span>")</p>
<p>where <span class="Parameter">package</span> should be replaced by the name of the package you want to install. You'll again be asked for the mirror to install from.</p>
<p>To load the package in Windows R, click <span class="MenuOutput">Packages</span>, <span class="MenuOutput">Load Package</span> and then the name of the package you want to load.</p>
<p>In Linux R, type:</p>
<p class="InputCode">library(<span class="Parameter">package</span>)</p>
<p>In future sessions you'll only need to  load the package, not install it again.</p>
<h2><a id="UpdatingPackages" name="UpdatingPackages"></a>Updating Packages</h2>
<p>You should check periodically to see if any of the packages you use have been updated.</p>
<p>In Windows R, click <span class="MenuOutput">Packages</span>, <span class="MenuOutput">Update Packages</span>.</p>
<p> In Linux R, type:</p>
<p class="InputCode">update.packages()</p>
<h2><a id="ManagingPackages" name="ManagingPackages"></a>Managing Packages</h2>
<p>By default, R on SSCC computers puts packages in your home directory (<span class="MenuOutput">U:</span> in Windows or <span class="MenuOutput">~</span> in Linux). If you work with a lot of packages this will clutter  your home directory. You can change where R packages are stored by doing the following:</p>
<h3>Create a Directory                </h3>
<p>First make a directory to store packages. In Windows, create a folder call <span class="InputCode">R_packages</span> on your <span class="MenuOutput">U:</span> drive. In Linux, create a directory called <span class="InputCode">R_packages</span> in your home directory by typing: </p>
<p class="InputCode">mkdir ~/R_packages</p>
<h3>Configure R to Use the Directory</h3>
<p>For Windows R, open a text editor like TextPad or Notepad (not Word). Type:</p>
<p class="InputCode">.libPaths("U:/R_packages")</p>
<p>Note that the slash is a forward slash, not the backslash normally used in Windows. Save the file on your <span class="MenuOutput">U:</span> drive as <span class="InputCode">.Rprofile</span>,  making sure the file name doesn't have <span class="InputCode">.txt</span> at the end.</p>
<p>For Linux R, open your preferred Linux text editor if you have one, or TextPad in Windows. Type</p>
<p class="InputCode">.libPaths("~/R_packages")</p>
<p>then save the file as <span class="InputCode">.Rprofile</span> in your Linux home directory. If you're using TextPad that means you must save it on your<span class="MenuOutput"> Z:</span> drive.</p>
<p>Once this file is created, packages will be saved in the directory <span class="InputCode">R_packages</span> instead of your home directory. If you have  installed packages previously, move them into <span class="InputCode">R_packages</span> or install them again.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Stata Tools for Reading Data from Web Page</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>A great deal of data can be found in web pages, and "web scraping" is the process of turning those web pages into usable data sets. Stata's capabilities in this area are limited, but SSCC staff have written several programs that can carry out simple web scraping tasks. This article will introduce you to the <span class="InputCode">readhtml</span> package we've developed. You can get it by starting Stata and typing:</p>
<p class="InputCode">net install readhtml, from(https://ssc.wisc.edu/sscc/stata/)</p>
<p>Alternatively, type:</p>
<p class="InputCode">net from https://ssc.wisc.edu/sscc/stata/</p>
<p>Then click on the <span class="MenuOutput">readhtml</span> link and  <span class="MenuOutput">click here to install</span>.</p>
<p>(If you get an error trying to use one of the above commands, try replacing <span class="InputCode">https</span> with <span class="InputCode">http</span>.)</p>
<p>The <span class="InputCode">readhtml</span> package is in the early stages of development, so you should check its results carefully—though if something goes wrong it's usually obvious. If you find it does not work properly for a given web page (keeping in mind it only reads tables and lists) please let us know by emailing <a href="mailto:helpdesk@ssc.wisc.edu">helpdesk@ssc.wisc.edu</a>, but it will never be able to handle every web page. If you need to parse a web page <span class="InputCode">readhtml</span> can't handle, the code for the main programs may give you some ideas for how to do it.</p>
<h2>The readhtml package</h2>
<p>The <span class="InputCode">readhtml</span> package contains two main programs and two utility programs.</p>
<h3>readhtmltable</h3>
<p> The <span class="InputCode">readhtmltable</span> program reads a web page, identifies any tables it contains, and turns them into a data set. Try scraping the SSCC's training schedule with:</p>
<p class="InputCode">readhtmltable https://ssc.wisc.edu/sscc_jsp/training/</p>
<p>You can tell it to use the first row as variable names with:</p>
<p class="InputCode">readhtmltable https://ssc.wisc.edu/sscc_jsp/training/, varnames</p>
<p>The <span class="InputCode">varnames</span> option can be abbreviated to just <span class="InputCode">v</span>. This gives you a usable data set containing the SSCC's training schedule for the current semester.</p>
<h3>readhtmllist</h3>
<p>The <span class="InputCode">readhtmllist</span> program reads a web page, identifies any lists it contains, and turns them into a data set. Try:</p>
<p class="InputCode">readhtmllist https://ssc.wisc.edu/sscc/ssccnews/</p>
<p>This gives you a data set containing all the issues of SSCC News. Note that each year's issues are in a separate list, so <span class="InputCode">readhtmllist</span> created a variable for each list. In this case it might make sense to combine all the lists, but that won't always be true. The <span class="InputCode">readhtmltable</span> program will do something similar if a page contains multiple tables.</p>
<p>If you're interested in the links to the issues as well as their names, you can tell <span class="InputCode">readhtmllist</span> not to remove HTML markup with the <span class="InputCode">html</span> option:</p>
<p class="InputCode">readhtmllist https://ssc.wisc.edu/sscc/ssccnews/, html</p>
<p>Parsing the results and extracting the URL is left to the reader. Note that these are relative links, so to use them you'd have to put <span class="InputCode">https://ssc.wisc.edu/sscc/ssccnews/</span> before each one.</p>
<h3>Utility Programs</h3>
<p>The <span class="InputCode">readhtml</span> package also contains two utility programs which were written for the use of the other programs in the package, but you are welcome to use them independently. The <span class="InputCode">striphtml</span> program removes all HTML markup from a string—the <span class="InputCode">html</span> option tells <span class="InputCode">readhtmltable</span> or <span class="InputCode">readhtmllist</span> <em>not</em> to run <span class="InputCode">striphtml</span>. The <span class="InputCode">striphtmlcomments</span> program removes all HTML comments from a string. The <span class="InputCode">readhtmltable</span> and <span class="InputCode">readhtmllist</span> programs use it to remove content the web page author never meant to be seen, presumably for a reason. For example, the source code for the SSCC training schedule still contains code for some special classes we no longer teach, but they're "commented out" so they're not visible, and you would not want to include them in a data set of SSCC classes.</p>
<p>Acknowledgment: The <span class="InputCode">readhtml</span> package, and the names of the key programs, were inspired by R's <a href="https://cran.r-project.org/web/packages/XML/XML.pdf">XML package</a>.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Open Records and SSCC Email</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Recent events have reminded many SSCC members that their University email is subject to Open Records requests. This article will introduce some of the basic concepts of Open Records law and discuss technical aspects of SSCC email that are relevant to it.</p>
<p> Please keep in mind that SSCC staff are neither records managers nor lawyers. This article  includes links to authoritative sources on Open Records law and how to comply with it; for more information  please refer to <a href="http://archives.library.wisc.edu/records/">UW Records Management</a> or contact the <a href="http://archives.library.wisc.edu/records/contact-recmngt.html">University Records Officer</a>.</p>
<h2>Open Records Law                </h2>
<p>As a public institution, the University of Wisconsin-Madison is subject to Wisconsin's Open Records law. The University has created <a href="http://www.uwsa.edu/gc-off/records/training.htm">training materials</a> to help you understand your obligations under the law and what would need to be released in response to an Open Records request. The following discussion is based on that material.</p>
<h3>What is a Record?</h3>
<p>State law (Chapter 16.61) defines records as "all books, papers, maps, photographs, films, recordings, or other             documentary materials, regardless of their physical form or   characteristics,           produced or received by any state agency or   its officers or employees           in connection with the transaction   of public business." While this definition was written before email was in use, it is very broad and has been held to include email.</p>
<p>If you work for the University, then your job duties are "public business" and information related to your job duties will generally be a public record. "In other words, regardless of how you create or receive the information, if the information is related to your work for the University, and it is memorialized or recorded in any format, then it is a public record." (<a href="http://www.uwex.uwc.edu/admin-services/audit/records/">Public Records Fundamentals</a>) Thus, with certain exceptions, email related to your job duties is a public record. The inverse, that email not related to your job duties is not a public record, is more controversial.</p>
<h3>Record Retention</h3>
<p>Public records must be retained for an appropriate period. The appropriate period depends on the nature and table of the record, and is specified by Records Schedules which have been created by the University Records Officer and approved by the Wisconsin Public Records Board. Most SSCC email will fall under the <a href="http://archives.library.wisc.edu:2784/records/schedules/06.16.2008.UWS.General.Records.Schedule.Business.Communication.FINAL.pdf">Business Communication</a> schedule. It defines two types of business communication: "Routine" and "Transitory."</p>
<p> Routine communication is  substantial, but does not "set forth university policies, guidelines, procedures, or directives." Routine communication should be retained for "six months after a business activity or project is completed."</p>
<p> Transitory communication "has no business value after the information contained in the message has been conveyed or superseded, or the event to which the message is related has occurred." Transitory communication is the kind of thing you would have talked  about in person if email weren't so convenient. The retention instructions for transitory communication are "Retain for seven days or destroy when obsolete because the communication has been superseded or the related event has transpired." (See the <a href="http://archives.library.wisc.edu:2784/records/schedules/06.16.2008.UWS.General.Records.Schedule.Business.Communication.FINAL.pdf">schedule</a> for more details.)</p>
<p>Other records fall under different schedules. For example, the <a href="http://archives.library.wisc.edu:2784/records/schedules/GRS_StudentRec.pdf">Student Records</a> schedule<a href="http://archives.library.wisc.edu:2784/records/schedules/GRS_DeptAcadAdmin.pdf"></a> specifies that "Faculty records of grades given in whatever form" must be retained for five years. For more information see the list of <a href="http://archives.library.wisc.edu:2784/records/rda.html#general-records">General Records Schedules</a>.</p>
<p>Any records that are the subject of an Open Records request must be retained regardless of their regular schedule until the request has been completed.</p>
<h2>Open Records Requests</h2>
<p>If you receive an Open Records request, you should contact the <a href="http://legal.wisc.edu/">Office of Administrative Legal Services</a> (<abbr>OALS</abbr>) for assistance. They will help you determine what should be released. While "[t]he law specifically declares that it is the public policy of this state   that all persons are entitled to the greatest possible information" the law also "identifies certain information that cannot be released." (<a href="http://legal.wisc.edu/reference/public-records.html">OALS Public Records web page</a>) There are exceptions to the definition of a record, legal requirements to protect privacy such as FERPA and HIPAA, and other public interests that must be balanced against the public interest in disclosure. Former Chancellor Biddy Martin said the following on releasing the results of an Open Records request for a faculty member's email:</p>
<p> <em>I announced that the university would comply with the law and, as we   do in all cases, apply the kind of balancing test that the law allows,   taking such things as the rights to privacy and free expression into   account. We have done that analysis and will release the records later   today that we believe are in compliance with state law.</em></p>
<p><em>We are excluding records involving students because they are   protected under FERPA. We are excluding exchanges that fall outside the   realm of the faculty member's job responsibilities and that could be   considered personal pursuant to Wisconsin Supreme Court case law. We are   also excluding what we consider to be the private email exchanges among   scholars that fall within the orbit of academic freedom and all that is   entailed by it. Academic freedom is the freedom to pursue knowledge and   develop lines of argument without fear of reprisal for controversial   findings and without the premature disclosure of those ideas.</em> (<a href="http://www.news.wisc.edu/19190">Chancellor’s message on academic freedom and open records</a>, see Senior University Legal Counsel John Dowling's <a href="http://www.news.wisc.edu/19196">response to the requestor</a> for more details about what was excluded.)</p>
<p>The Wisconsin Supreme Court case law she refers to is almost certainly <a href="http://www.wicourts.gov/sc/opinion/DisplayDocument.pdf?table=pdf&amp;seqNo=52285">Schill vs. Wisconsin Rapids</a> where the Supreme Court ruled 5-2 that the Wisconsin Rapids school district should not release the personal emails  teachers  sent or received using their school district email accounts in response to an open records request. However, it is a complicated decision. Three justices ruled that personal emails on government accounts are not public records, with reasoning similar to that found in the University's training materials. Two ruled that they are public records, but that the public interest in giving employees  privacy overrides the public interest in disclosure. Two justices ruled that personal emails on government accounts are public records and should be disclosed. On the other hand, all parties agreed that there is no duty to retain personal emails.</p>
<h3>Other Legal Requests for Email</h3>
<p>Email can also become evidence in trials or other legal proceedings, and can be subpoenaed or demanded in discovery. In these cases it does not matter whether a given message is a record under Open Records law or not.</p>
<h2>Deleting SSCC Email</h2>
<p>Deleting email   that either is not a record or no longer needs to be retained makes   responding to Open Record requests much easier. Deleting unneeded email also saves disk space and improves email performance. However, selecting a message and pressing Delete does not necessarily make it disappear.</p>
<h3>Deleted Messages and Your Email Program</h3>
<p>Most email programs recognize that people sometimes delete messages by mistake and provide a way to recover deleted messages for a time, for example by moving it to a Trash folder rather than deleting it immediately. However, if a message is available in a Trash folder it must still be produced in response to an Open Records request. Thus you need to be aware of what your email program actually does when you press Delete.</p>
<h4>Thunderbird</h4>
<p>Thunderbird provides several options, which you can see by clicking <span class="MenuOutput">Tools</span>, <span class="MenuOutput">Account Settings</span>, <span class="MenuOutput">Server Settings</span> and looking under <span class="MenuOutput">When I delete a message</span>. The default is <span class="MenuOutput">Move it to this Folder: Trash</span>. SSCC automatically deletes messages from Trash folders after 30 days (see <a href="https://ssc.wisc.edu/sscc/policies/inbox.htm">Email Storage Limitations</a>). You can make sure it is deleted sooner by checking <span class="MenuOutput">Empty Trash on Exit</span>. The next option is <span class="MenuOutput">Just mark it as deleted</span>. If you select it, deleted email is not actually removed  until you "expunge" your Inbox. However, this is what Thunderbird actually does behind the scenes regardless of the setting you choose--the other settings just hide messages that are marked as deleted. <em>Thus it's very important that you leave</em> <span class="MenuOutput">Clean up ("Expunge") Inbox on exit</span> <em>checked or email will never actually be deleted from your Inbox.</em> The third option, <span class="MenuOutput">Remove it immediately</span>, is ideal for mass deletions of old messages where you're reasonably confident you won't change your mind.</p>
<p>Most other email programs provide similar options.</p>
<h4>SSCC Webmail</h4>
<p>By default SSCC Webmail moves messages to your Trash folder when they are deleted, and completely removes them from your Inbox at the same time. You can change this behavior if you want to by clicking <span class="MenuOutput">Settings</span>, <span class="MenuOutput">Server Settings</span>.                </p>
<h3>Deleted Messages and SSCC Backups</h3>
<p>Each night,  all messages on the SSCC email server except those in Trash folders are backed up. These backups are retained for one month and then deleted (the tapes are reused). If someone files an Open Records request for email, email that is available on backups must  be produced even if the original has been deleted. Note that WiscMail (@wisc.edu addresses) and other email providers have very different backup policies.</p>
<h3>Scenarios</h3>
<ul>
<li>You receive an email and delete it. Your email program is set to move deleted email to Trash, and not to delete trash automatically (the defaults). The email is available in your Trash folder for 30 days, and then it is automatically deleted by the SSCC.</li>
<li>You receive an email and delete it. Your email program is set to remove deleted messages immediately. The email is no longer available.</li>
<li>You receive an email and delete it the next day. Because it was on the server when nightly backups were created, it is available for one month from the SSCC backup tapes, and may also be available in your Trash for 30 days.</li>
<li>You receive an email and delete it several weeks, months, or years later. It is available from the SSCC backup tapes for one month from the night before it was deleted, and may also be available in your Trash for 30 days.</li>
</ul>
<p>We emphasize that you should not delete email that constitutes a record that must be retained. If you have any questions about what must be retained, or about Open Records in general, please contact <a href="http://archives.library.wisc.edu/records/">UW Records Management</a>.</p>
<h2>More Information</h2>
<ul>
<li><a href="http://archives.library.wisc.edu/">University Archives and Records Management</a></li>
<li><a href="http://archives.library.wisc.edu/records/resource.html#tutorials">Records Management Tutorials</a></li>
<li><a href="http://www.uwex.uwc.edu/admin-services/audit/records/">Public Records Fundamentals</a></li>
<li><a href="http://www.uwex.uwc.edu/admin-services/audit/businessComm/">Business Communication</a></li>
<li><a href="http://archives.library.wisc.edu:2784/records/rda.html#general-records">Records Schedules</a></li>
<li><a href="http://legal.wisc.edu/reference/public-records.html">OALS Public Records web site</a></li>
<li><a href="http://www.news.wisc.edu/19190">Chancellor’s message on academic freedom and open records</a></li>
<li> <a href="http://www.wicourts.gov/sc/opinion/DisplayDocument.pdf?table=pdf&amp;seqNo=52285">Schill vs. Wisconsin Rapids Decision</a></li>
</ul>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Articles on Remote Computing</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>
<!-- #BeginEditable "Content" -->
<p>This page lists articles dealing with using 
                                the SSCC Computing resources from home or anywhere 
                                else away from campus.</p>
<p><a href="https://ssc.wisc.edu/sscc/pubs/working_from_home.htm">Working From Home and Other Remote Locations</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/winstat.htm">Using Winstat</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/5-2.htm">Connecting to SSCC Linux Computers using X-Win32</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/linstat_from_mac.htm">Connecting to Linstat from a Mac</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/vpn.htm">Connecting to the SSCC Network via VPN</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/5-26.htm">Mapping a Drive to a Network Share in Windows</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/diskfrommac.htm">Using SSCC Network Disk Space from a Mac</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/remote_desktop.htm">Connecting to Your Office Computer Using Remote Desktop (Windows)</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/screen_sharing.htm">Connecting to Your Office Computer Using Screen Sharing (Mac)</a> <br/>
<a href="https://ssc.wisc.edu/sscc/pubs/5-35.htm">Transferring Files Using SecureFX</a><br/>
<a href="https://ssc.wisc.edu/sscc/pubs/1-11.htm">Using SFTP</a> </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Connecting to Your Office Computer Using Remote Desktop (Windows)</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Remote Desktop allows you to connect to your office computer from home or another remote location. The result is similar to logging in to Winstat, though Winstat will generally give you better performance and stability. However, if you have software on your office computer that is not available on Winstat, remote desktop will allow you to use that software from home. Macs can also use Remote Desktop to connect to office computers running Windows (Macs connecting to Macs use <a href="https://ssc.wisc.edu/sscc/pubs/screen_sharing.htm">Screen Sharing</a> instead). Connecting to your office computer using Remote Desktop is  a great back-up plan in case you can't log in to Winstat, and we suggest all SSCC members learn how to do so.</p>
<p>If you have a Remote Desktop connection already set up that requires you start VPN before using it, you can modify it so VPN is no longer required. In Windows, open the connection then click on <span class="MenuOutput">Options</span> as described <a href="#add_gateway_win">here</a>. On a Mac, edit your connection and then add a new gateway as described <a href="#add_gateway_mac">here</a>.</p>
<h2>Setting Up Your Office Computer to Allow Remote Desktop</h2>
<p><strong>In order to allow Remote Desktop connections to your office PC, you will need to contact the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm" target="new" title="SSCC Help Desk">SSCC Help Desk</a> for us to enable this functionality on each of your devices</strong>. </p>
<p>You can simply email the Help Desk with your computer's name and we will enable Remote Desktop for you, no need to set up an office call. </p>
<p>To find your computer name, click <strong>Start</strong> and start typing "name" to search. Open <strong>View Your PC Name</strong> from the menu and look under<strong> Device Specifications</strong> for<strong> Device Name</strong>. The full name of your computer is what you see there plus <span class="InputCode">.ads.ssc.wisc.edu</span> (e.g. <span class="InputCode">damask</span> becomes <span class="InputCode">damask.ads.ssc.wisc.edu</span>). Computer names are not case-sensitive.</p>
<h2>Connecting to Your Office Computer            </h2>
<h3>Windows</h3>
<p>Click the Windows logo button, <span class="MenuOutput">All Programs</span>, <span class="MenuOutput">Accessories</span> and <span class="MenuOutput">Remote Desktop Connection</span>.            </p>
<p> You'll then need to type in the name 
              of your office computer.            </p>
<p><img alt="" height="253" src="https://ssc.wisc.edu/sscc/pubs/screenshots/RDP_Win10.PNG" width="407"/></p>
<p id="add_gateway_win">Select <span class="MenuOutput">Show Options</span> from the lower right hand corner.</p>
<p><img alt="" height="253" src="https://ssc.wisc.edu/sscc/pubs/screenshots/RDG1.jpg" width="407"/></p>
<p>Select the <span class="MenuOutput">Advanced</span> tab, then in the <em>Connect from anywhere</em> section click the <span class="MenuOutput">Settings</span> button.</p>
<p><img alt="" height="474" src="https://ssc.wisc.edu/sscc/pubs/screenshots/RDG2.jpg" width="407"/></p>
<p>Select <span class="MenuOutput">Use these RD Gateway server serttings</span> and in the <span class="MenuOutput">Server name</span> box enter <span class="InputCode">rdg.ssc.wisc.edu</span>. Under <em>Login settings</em>, check the box for <span class="MenuOutput">Use my RD Gateway credentials for the remote computer</span> and click <span class="MenuOutput">OK</span>. </p>
<p><img alt="" height="440" src="https://ssc.wisc.edu/sscc/pubs/screenshots/RDG3.jpg" width="407"/></p>
<p>You are then ready to connect to your remote computer.            </p>
<p>Once you connect, you'll see that the remote connection takes over 
              your screen and you can almost forget that you're not sitting in 
              your office. If you want to go back to using the computer you're 
              connecting from, click on the minimize button in the toolbar across 
              the top of the screen. When you're done, log out of your office computer as usual.</p>
<h3>Mac</h3>
<p>Remote Desktop Connection software can be downloaded and installed for free from the <a href="http://www.apple.com/osx/apps/app-store" target="new" title="Mac App Store">Mac App Store</a>. Once installed, it can be found in the <span class="MenuOutput">Applications</span> folder. </p>
<p id="add_gateway_mac">To set up your connection, click <span class="MenuOutput">New</span> in the upper left hand corner. Enter a name for the connection (ex. "My SSCC Desktop"), and the name of your office computer.  Enter the name of your office computer and your SSCC credentials (using <span class="InputCode">primo\</span><span class="Parameter">username</span> in the <span class="MenuOutput">User Name</span> field). From the <span class="MenuOutput">Gateway</span> dropdown box select <span class="MenuOutput">Add Gateway</span> to open the Gateway Preferences.</p>
<p><img alt="" height="776" src="https://ssc.wisc.edu/sscc/pubs/screenshots/RDG_MacOS.png" width="576"/></p>
<p>To add a new gateway, select <strong>Add Gateway</strong> from the drop down menu. In the <span class="MenuOutput">Gateway Name</span> field enter <span class="MenuOutput">SSCC RDG</span>. In <span class="MenuOutput">Server name</span> enter <span class="InputCode">rdg.ssc.wisc.edu.</span> Choose <strong>Use Desktop User Account</strong> and click <strong>Add</strong>. </p>
<p><img alt="" height="778" src="https://ssc.wisc.edu/sscc/pubs/screenshots/RDG_MacOS_2.png" width="576"/></p>
<p>Select the newly created gateway from the drop down menu and then close the <span class="MenuOutput">Edit Remote Desktops</span> window. You can now select the connection and <span class="MenuOutput">Start</span> to begin your remote desktop session.                </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/RDP_Win10.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/RDG1.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/RDG2.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/RDG3.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/RDG_MacOS.png, https://ssc.wisc.edu/sscc/pubs/screenshots/RDG_MacOS_2.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>SAS and Excel Files on Winstat</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>This document explains how to use  Excel files in SAS on Winstat. Over the years, there have been many  versions of Excel, many versions of SAS, and many versions of the operating  systems on which they are used. As a  result the details of reading and writing Excel files in SAS have changed  often. Instructions you find elsewhere may or may not work on Winstat.</p>
<p>                  Some unsolicited advice:  if you have the option, working with files in comma-separated value  format (<em>csv</em>) is much more straightforward than working with Excel files. The relative simplicity of the <em>csv</em> format  means that methods of reading and writing these files are very stable, and it  will be possible to reproduce your work easily regardless of how Excel, SAS,  and Windows may change in the future.</p>
<p>                There are two methods we generally use for reading and  writing Excel files using SAS on Winstat: <span class="InputCode">PROC IMPORT</span> (and <span class="InputCode">PROC EXPORT</span>), and <em>libnames</em>. <span class="InputCode">PROC IMPORT</span> is what you use  when you use the Import Wizard, and is excellent for one-time file conversions. <em>Libnames</em> allow you to write data steps that access Excel files directly.</p>
<ul>
<li><a href="#PROCIMPORT">PROC IMPORT (and PROC EXPORT)</a></li>
<li><a href="#_LIBNAME_xxx_PCFILES">LIBNAMES</a></li>
</ul>
<h2><a id="PROCIMPORT" name="PROCIMPORT"></a>PROC IMPORT (and PROC EXPORT)</h2>
<p><span class="InputCode">PROC IMPORT</span> (and <span class="InputCode">PROC EXPORT</span>) can be used either by writing your own procedure code or by calling on the Import Wizard.</p>
<h3><a id="_Procedure_Code" name="_Procedure_Code"></a>Procedure Code</h3>
<p>The key to getting <span class="InputCode">PROC IMPORT</span> and <span class="InputCode">PROC EXPORT</span> to work  properly on Winstat is to choose the correct <span class="InputCode">DBMS=</span> option. The preferred <span class="InputCode">DBMS</span> is <span class="InputCode">EXCELCS</span>. For example:</p>
<p class="InputCode">PROC IMPORT OUT= class <br/>
<span class="indent3">DATAFILE= "<span class="Parameter">myfile.xls</span>" </span><br/>
<span class="indent3">DBMS=EXCELCS REPLACE;</span><br/>
<span class="indent3">RANGE="Data$"; </span><br/>
<span class="indent3">SCANTEXT=YES;</span><br/>
<span class="indent3">USEDATE=YES;</span><br/>
<span class="indent3">SCANTIME=YES;</span><br/>
   RUN;</p>
<p><span class="Parameter"><span class="Parameter">myfile.xls</span></span> should be replaced by the actual name of your Excel file, most likely including its location (e.g. <span class="InputCode">u:\myfolder\myfile.xls</span>). This works for both <span class="Parameter">xls</span> and <span class="Parameter">xlsx</span> files.</p>
<p>Specifications that do NOT work in current (64-bit) SAS are: EXCEL, EXCEL97, EXCEL2000, EXCEL2002,  EXCEL2003, EXCEL2007, or EXCEL2010. Two  other specifications that work, but have always had limited functionality, are:  XLS, and XLSX.</p>
<p>For more information, click <span class="MenuOutput">Help</span>, <span class="MenuOutput">SAS Help and Documentation</span> and go to the <span class="MenuOutput">Contents</span> tab. Then expand <span class="MenuOutput">SAS Products</span>, <span class="MenuOutput">SAS/Access 9.3</span>, <span class="MenuOutput">SAS/Access 9.3 Interface to PC Files: Reference</span>, and <span class="MenuOutput">Import and Export Wizards and Procedures</span>.</p>
<h3><a id="_Import_Wizard" name="_Import_Wizard"></a>Import Wizard</h3>
<p>To use the Import wizard, click <span class="MenuOutput">File</span>, <span class="MenuOutput">Import Data</span>. The key to using it successfully, just like when writing procedure code, is to choose the correct data source  option. Although the default option is  <span class="MenuOutput">Microsoft Excel Workbook (*.xls, *.xlsb, *.xlsm, *.xlsx)</span>, this does NOT work on Winstat. Instead, choose  <span class="MenuOutput">Microsoft Excel Workbook on PC Files Server</span>.<br/>
<img border="0" height="328" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sas_excel/clip_image001.jpg" width="516"/></p>
<h2><a id="_LIBNAME_xxx_PCFILES" name="_LIBNAME_xxx_PCFILES"></a>LIBNAMES</h2>
<p>Using <em>libnames</em> to access data in Excel spreadsheets is a  relatively new feature of SAS. The <em>libname</em> specification that works in SAS on Winstat is:</p>
<p class="InputCode">LIBNAME <span class="Parameter">myxls</span> PCFILES 
                    PATH='<span class="Parameter">myfile.xls</span>'; </p>
<p><span class="Parameter">myfile.xls</span> should be replaced by the actual name of your Excel file, most likely including its location (e.g. <span class="InputCode">u:\myfolder\myfile.xls</span>). This works for both <span class="Parameter">xls</span> and <span class="Parameter">xlsx</span> files. <span class="Parameter">myxls</span> can be replaced by any name you choose.</p>
<p>Accessing an Excel file via a <em>libname</em> treats the  file as if it were a folder or  directory, and then allows you to address individual worksheets or named ranges  within the file as if they were SAS data sets.</p>
<p>                There is one further detail to which you need to pay  attention. Worksheets in Excel are  identified to SAS with a dollar sign in their names, e.g. <span class="InputCode">Data$</span>. In order for SAS to interpret data sets names containing  characters it does not normally allow, you need to enclose the worksheet name  in quotes and then add a trailing <span class="InputCode">n</span>, like this:</p>
<p class="InputCode">data temp;<br/>
<span class="indent3">set myxls.'Data$'n;</span><br/>
<span class="indent3">bmi=(weight/height**2)*703;</span><br/>
                run; <br/>
</p>
<p>To read a named range, address it as if it were a SAS data  set (no quotes needed), like this:</p>
<p class="InputCode">data temp;<br/>
<span class="indent3">set myxls.range1;</span><br/>
<span class="indent3">bmi=(weight/height**2)*703;</span><br/>
run;</p>
<p>When writing data sets to an Excel file, both a spreadsheet  and a named range are created, regardless of which you specify.</p>
<p class="InputCode">data myxls.'test'n;<br/>
<span class="indent3">set temp;</span><br/>
                run;</p>
<p>                  In the SAS explorer, worksheets and named ranges appear as  SAS data sets.</p>
<p><img border="0" height="314" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sas_excel/clip_image002.jpg" width="263"/><img border="0" height="188" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sas_excel/clip_image003.jpg" width="262"/><br/>
                One final thing to note is that you will not be able to open  the Excel file outside of SAS until you clear the LIBNAME.</p>
<p class="InputCode">                  libname myxls clear;</p>
<p>For more information, click <span class="MenuOutput">Help</span>, <span class="MenuOutput">SAS Help and Documentation</span> and go to the <span class="MenuOutput">Contents</span> tab. Then expand <span class="MenuOutput">SAS Products</span>, <span class="MenuOutput">SAS/Access 9.3</span>, <span class="MenuOutput">SAS/Access 9.3 Interface to PC Files: Reference</span> and <span class="MenuOutput">LIBNAME  PCFILES Engine and PC Files Server on Microsoft Windows</span>.</p>
<p></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sas_excel/clip_image001.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/sas_excel/clip_image002.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/sas_excel/clip_image003.jpg</img_base_url>
</kb_document>
<kb_document>
<kb_title>Launching SAS Files from Windows Explorer</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Most SAS files can be opened directly from  Windows  Explorer (aka the “Computer” icon on your Winstat desktop), either by  double-clicking, or by right-clicking and selecting an action from the pop-up  context menu. However, SAS has many components, and as a result the context menu has many options. This article will explain what those options mean.</p>
<p>One advantage of launching SAS files in this way rather than starting SAS by itself is that the working directory is automatically set to the location of the file. A possible disadvantage is that if you have written an <span class="InputCode">autoexec.sas</span> file it will not be run (unless you choose Batch Submit).</p>
<p>It's possible to change what SAS does when you double-click on a SAS file, but we don't recommend you do so. It's very complicated, and it's very difficult to undo mistakes!</p>
<h2>Launching Program Files</h2>
<p>When you double-click on a SAS program file (any file with  the extension <span class="InputCode">.sas</span>), it opens in the classic SAS interface (also known as the  SAS Display Manager) in the usual Editor window (the Enhanced Editor) using 64-bit SAS.                </p>
<p>If you right-click on a SAS program file, you'll get the following context menu:</p>
<p><img alt="Context menu for SAS programs" height="418" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sas_launch/sas_launch_1.jpg" width="322"/></p>
<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th valign="top">Menu Item</th>
<th valign="top">Action</th>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open</td>
<td valign="top">Opens the program in the Enhanced Editor (same as double-click)</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Batch Submit with SAS 64 Bit</td>
<td valign="top">Runs the program as a batch job after running <span class="InputCode">autoexec.sas</span>. Any output is saved as files.</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open with SAS Enterprise Guide</td>
<td valign="top">Open the program as a Program object in SAS Enterprise Guide</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open with SAS 32 Bit</td>
<td valign="top">Opens the program in the Enhanced Editor using 32-bit SAS</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Print</td>
<td valign="top">Prints the program to your default printer.</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Submit with SAS 9.3</td>
<td valign="top">Opens the program in the Program Editor, and runs it. Output appears in regular SAS windows.</td>
</tr>
</table>
<h2>Launching Data Files</h2>
<p>Double-clicking on a SAS data file (a file with the  extension <span class="InputCode">.sas7bdat</span>) opens it in the Display Manager interface in a Viewtable  window. However, if the data set has variables that are formatted with user-defined formats, SAS will not be able to find those formats and will refuse to open the data set.</p>
<p>                  If your data set has user-defined formats, you have two  options:</p>
<ol>
<li>Launch SAS from the Start  button, tell SAS where to find the formats using either <span class="InputCode">libname library</span> or <span class="InputCode">options fmtsearch</span>, then open the data set either from the SAS  Explorer or the Windows Explorer.</li>
<li>Launch the data set in SAS Enterprise  Guide from the context menu.  Enterprise  Guide will strip the user-defined formats out of your data set.</li>
</ol>
<p>If you right-click on a SAS data file, you'll get the following context menu:</p>
<p><img alt="Context menu for a SAS data set" height="365" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sas_launch/sas_launch_2.jpg" width="321"/></p>
<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th valign="top"><p> </p>
<p>Menu item</p></th>
<th valign="top">Action</th>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open</td>
<td valign="top">Opens the data set in a Viewtable—fails if it has user-defined formats (same as double-click)</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open with SAS Enterprise Guide</td>
<td valign="top">Open the data set as a Data object—ignores user-defined formats</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open with SAS 32 bit</td>
<td valign="top">Opens the data set in a Viewtable—fails if there are user-defined formats. Uses 32-bit SAS.</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Print</td>
<td valign="top">Prints the entire data set to your default printer—fails if there are user-defined formats</td>
</tr>
</table>
<h2>Launching Output Files</h2>
<p>SAS “list” output files (files with the extension <span class="InputCode">.lst</span>)  are text files that can be opened with any suitable text editor or word  processor.  This is the default form of  output for SAS batch submissions, and is the  form of output that the SAS Display Manager produces the most quickly (although the slower html output is now the  default).  A downside of these list output files is  that they are produced with SAS fonts, and often look awful in other programs.  However, they remain a staple of “draft”  quality output. To view these files using SAS fonts, it is convenient to  open them in the SAS Display Manager.</p>
<p>                  Double-clicking on a SAS output file opens it in a Preview  window in the Display Manager.</p>
<p>If you right-click on a SAS output file, you'll get the following context menu:</p>
<p><img alt="Context menu for SAS output files" height="345" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sas_launch/sas_launch_3.jpg" width="320"/></p>
<table border="1" cellpadding="05" cellspacing="0">
<tr>
<th valign="top">Menu item</th>
<th valign="top">Action</th>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open</td>
<td valign="top">Opens the file in Preview window, uses SAS fonts (same as double-click)</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open with SAS Enterprise Guide</td>
<td valign="top">Open the file as a Text object, does NOT use SAS fonts</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Open with SAS 32 bit</td>
<td valign="top">Opens the file in Preview window, uses SAS fonts. Uses 32-bt SAS</td>
</tr>
<tr>
<td class="MenuOutput" valign="top">Print</td>
<td valign="top">Prints the output file from SAS to your default printer</td>
</tr>
</table>
<p> </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sas_launch/sas_launch_1.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/sas_launch/sas_launch_2.jpg, https://ssc.wisc.edu/sscc/pubs/screenshots/sas_launch/sas_launch_3.jpg</img_base_url>
</kb_document>
<kb_document>
<kb_title>Managing Output in SAS 9.3</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>SAS makes it possible to save your statistical tables and  graphs in many different forms, including text (ASCII) files, rich text (RTF or  Word) files, PDF files, Excel tables, LaTeX files, HTML (web page) files, and  for graphics a variety of graphics file formats.  You can save your results to some of these  output destinations using the SAS Display Manager, the standard graphical user  interface.  All of these output  destinations can be reached via SAS commands as well.</p>
<p>                  If you are primarily interested in saving your tables and  graphs in a Word file, skip ahead to the “RTF Output” section.</p>
<ul>
<li><a href="#_New_Default_Output">New Default Output Settings</a></li>
<li><a href="#_How_do_I">How do I get my old defaults back?</a></li>
<li><a href="#_HTML_Output_Style">HTML Output Style</a></li>
<li><a href="#_HTML_(&amp;_Graphics)">HTML (&amp; Graphics) File  Locations</a></li>
<li><a href="#_RTF_Output">RTF Output</a></li>
<li><a href="#_Combining_Log_and">Combining Log and Listing  Output</a></li>
</ul>
<h2><a href="#_New_Default_Output"></a><a href="#_Combining_Log_and"></a><a id="_New_Default_Output" name="_New_Default_Output"></a>New Default Output Settings</h2>
<p>In  version 9.3 or later of SAS, the default form of  output  changed from text (“Listing” output in SAS jargon) to HTML.  Additionally, ODS graphics is now on by  default, where previously it was off.</p>
<p>                  There are two main advantages to HTML output.  First, you get statistical tables and graphs  all integrated into one output stream.   (This is also an advantage of RTF or PDF output.)  Second, it makes it easy to cut-and-paste  selected tables from SAS to Word without having to worry as much about  formatting and using SAS monospace fonts in Word (also an advantage of RTF  output). An advantage of using ODS graphics is that a good graphic  can help you more quickly understand your data.</p>
<p>  A disadvantage of ODS graphics is that creating all those graphics may slow down the  execution of your SAS job. If your job creates large amounts of output, even HTML output can slow the job significantly.</p>
<h2><a id="_How_do_I" name="_How_do_I"></a>How do I get my old defaults back?</h2>
<p>There are two good ways to get Listing output and turn off HTML  output and ODS graphics.  One is to  change your SAS registry settings (i.e. the things you get by clicking <span class="MenuOutput">Tools</span>, <span class="MenuOutput">Options</span>), the other is to put several commands in an  autoexec file.  Both will work every time  you start a new SAS session, so you only need to make this change once.</p>
<p>                  Registry settings have the advantage that they are set  through SAS’s menus and dialog boxes, so you don’t need to learn any new  code.  Autoexec files have the advantage  that they are capable of executing any type of SAS command, and they are more likely to successfully carry over to a new version of SAS.</p>
<h3>SAS Registry Settings</h3>
<p>To change your registry settings to the old defaults, click  on  <span class="MenuOutput">Tools</span>,  <span class="MenuOutput">Options</span>, <span class="MenuOutput">Preferences</span>, and then the <span class="MenuOutput">Results</span> tab.</p>
<p>                  Check <span class="MenuOutput">Create listing</span>, and uncheck both <span class="MenuOutput">Create HTML</span> and  <span class="MenuOutput">Use ODS Graphics</span>.  Click <span class="MenuOutput">OK</span>.<br/>
                  You will notice that it is possible to have both Listing and  HTML output at the same time, although it is hard to image how that would be  useful most of the time.  There are a  couple of other, useful settings that are discussed below.</p>
<p> If you use both 64-bit and 32-bit versions of SAS, you will  need to make these changes once for each version.  (Your settings for 32-bit SAS are saved in  your <span class="InputCode">U:\SAS</span> folder.  For 64-bit SAS  they are in your <span class="InputCode">U:\SAS64</span> folder.)</p>
<p><img alt="SAS preferences changed to the old defaults" border="0" height="374" src="https://ssc.wisc.edu/sscc/pubs/screenshots/sas_output_1.jpg" width="469"/><br/>
</p>
<h3>Autoexec.sas commands</h3>
<p>You can put commands you want to run at the beginning of every  SAS session in a file named <span class="InputCode">autoexec.sas</span> in the root folder of your <span class="InputCode">U:\</span>  drive or in the SAS startup folder.  For  32-bit SAS the SAS startup folder is <span class="InputCode">U:\SAS</span>, for 64-bit SAS it is <span class="InputCode">U:\SAS64</span>.  These are otherwise just ordinary SAS command  files.  (If you use the appropriate startup  folders you may have a different <span class="InputCode">autoexec.sas</span> for each version.)</p>
<p>                  A set of three commands will return you to the old output  defaults:</p>
<p class="InputCode">                  ods listing;<br/>
                  ods html close;<br/>
                  ods graphics off;</p>
<p>                  (As with SAS registry settings, there are a number of other configurations  you could consider here.)</p>
<h2><a id="_HTML_Output_Style" name="_HTML_Output_Style"></a>HTML Output Style</h2>
<p>If you are using HTML output, there are at least two reasons  you might consider changing the default style of HTML output from <span class="InputCode">htmlblue</span> to  something else. First, if you are simply cutting-and-pasting a few tables from  your results to a Word document, you lose all the internal table lines, the  cell borders.  (The color scheme  shouldn't concern you too much if you cut-and-paste, because the color does not  paste into Word.)   Second, if you are  saving complete files of HTML output and editing them in some other software  like Word, the blue color scheme will then carry over into your final document.</p>
<p>                  You can change the output style either via the registry  (Click <span class="MenuOutput">Tools</span>, <span class="MenuOutput">Options</span>, <span class="MenuOutput">Preferences</span>, <span class="MenuOutput">Results</span>) or your autoexec.sas file.  Two styles you might consider are <span class="InputCode">minimal</span> and <span class="InputCode">journal</span>.</p>
<p class="InputCode">                  ods html  style=minimal;</p>
<h2><a id="_HTML_(&amp;_Graphics)" name="_HTML_(&amp;_Graphics)"></a>HTML (&amp; Graphics) File Locations</h2>
<p>By default your HTML and ODS graphics files are saved in  your temporary WORK library, and are deleted when you close your SAS session.  As with Listing output, the Log, and the  Program Editor, you can save your HTML results through the menus:  <span class="MenuOutput">File</span>, <span class="MenuOutput">Save As</span>.  You can save your HTML output either as an  archive (a single file) or as regular HTML (which may be a collection of files  if you have any graphics).</p>
<p>                  You can also automatically save your HTML output to a  permanent location, either through registry settings or through autoexec code:</p>
<p class="InputCode">                  ods html  path='u:\' body='sashtml.htm' style=journal;</p>
<p>                  Note, however, that the settings or code above will  overwrite any existing file(s) with the same name(s) when you start a new SAS  session: using <span class="MenuOutput">File,</span> <span class="MenuOutput">Save As</span> is a safer practice for most of us.</p>
<h2><a id="_RTF_Output" name="_RTF_Output"></a>RTF Output</h2>
<p>If you are interested in using your results in a Word  document, why not just save them in a Word-friendly format to begin with?</p>
<p>                  As you would expect by now, there are two ways to get your  results into an RTF document: via the display manager interface, or via ods  commands.  However, in the case of RTF  output these produce quite different documents, and most people will prefer the  RTF documents produced by ods commands.</p>
<p>                  To save an RTF file using the menus, first note that you can  only save Listing output (from the Output window).  You cannot save HTML output or graphics this  way.  With the Output window active,  select <span class="MenuOutput">File, </span><span class="MenuOutput">Save As</span>,  then change the file type to RTF, and save your  file.</p>
<p>                  The resulting document is essentially a text file that has  been formatted with SAS monospace fonts.   Tables are not really tables, they are drawn with font characters, and  if you try to use this document on a computer that does not have SAS installed,  the document will look awful.<br/>
</p>
<p>The better way to save RTF files is through the pair of ODS  commands:</p>
<p class="InputCode">                  ods rtf file='u:\example.rtf'  style=journal;<br/>
<br/>
                  /* your SAS PROCs go here */<br/>
<br/>
                ods rtf close;</p>
<p>                  The resulting document has tables that can be edited as  tables in Word (so changing font face, size, or spacing does not misalign your  table), and uses a Times Roman font.</p>
<h2><a id="_Combining_Log_and" name="_Combining_Log_and"></a>Combining Log and Listing Output</h2>
<p>When you are trying to debug a lengthy SAS command file,  sometimes it is useful to have both the SAS code and the results it produces in  one output stream (like in Stata or SPSS), so that you can see which output  table matches just which PROC.</p>
<p>                  To do this, you must have Listing output turned on, and  redirect your output as well as your log to a file.</p>
<p class="InputCode">                  ods listing;<br/>
                  proc printto print='u:\singlefile.txt’  log=’u:\singlefile.txt';<br/>
                run;<br/>
<br/>
                /* your SAS PROCs go here */<br/>
<br/>
                  proc printto; /*Send your output and  log back to their default windows */<br/>
                  run;</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/sas_output_1.jpg</img_base_url>
</kb_document>
<kb_document>
<kb_title>Connecting to Your Office Computer Using Screen Sharing (Mac)</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Screen Sharing allows you to connect to your office Mac using another Mac from home or another remote location. The result is similar to logging in to Winstat, though Winstat will generally give you better performance and stability. However, if you have software on your office computer that is not available on Winstat, Screen Sharing will allow you to use that software from home. Connecting to your office computer using Screen Sharing is also a great back-up plan in case you can't log in to Winstat, and we suggest all SSCC Mac users learn how to do so.</p>
<p>If your office computer runs Windows, you can connect to it from a Mac using <a href="https://ssc.wisc.edu/sscc/pubs/remote_desktop.htm">Remote Desktop</a>.</p>
<h2>Setting Up Your Office Computer to Allow Screen Sharing</h2>
<p>The first step is to set up your office computer so it will share its screen. Go to <span class="MenuOutput">Apple</span>, <span class="MenuOutput">System Preferences</span>, <span class="MenuOutput">Sharing</span> and check <span class="MenuOutput">Screen Sharing</span>. While you're here, note the address you'll use to connect to your Mac (it will start with <span class="InputCode">vnc://</span>).</p>
<h2>Connecting to your Office Computer</h2>
<p>In order to connect to an SSCC computer using Screen Sharing, you must first establish a VPN 
              connection to the SSCC network. Otherwise your attempts to connect 
              will be blocked by the SSCC's firewall. <a href="https://ssc.wisc.edu/sscc/pubs/vpn.htm">Connecting 
              to the SSCC Network via VPN</a> has full instructions. </p>
<p>Once VPN is set up, start the VPN connection. Then open the <span class="MenuOutput">Finder</span> and click <span class="MenuOutput">Go</span>, <span class="MenuOutput">Connect to Server</span> (or <kbd>⌘ command</kbd>+<kbd>K</kbd>). In the <span class="MenuOutput">Server Address</span> box, type the address of your office Mac and click <span class="MenuOutput">Connect</span>. Click the plus sign (<span class="MenuOutput">+</span>) to save the connection in your <span class="MenuOutput">Favorite Servers</span>.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
</kb_documents>