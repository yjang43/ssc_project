<?xml version="1.0"?>
<kb_documents>
<kb_document>
<kb_title>R for Researchers: Data exploration</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#numeric-representations">Numeric representations</a></li>
<li><a href="#correlation-between-variables">Correlation between variables</a></li>
<li><a href="#graphical-representations">Graphical representations</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to some common functions used to explore a data set numerically and graphically. One of the important tools introduced in this article is the ggplot set of functions used for graphing. The ggplot functions will be used in several other articles in this series.</p>
<p>This article will demonstrate the R functions using the Salary data set created in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep.html">Data preparation</a> article. The focus is on the use of R for data exploration, not the statistical methods which might be used. As such only minimal comments will be made on the interpretation of the results.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercise will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Open your SalAnalysis script.</li>
<li>Run all the commands in SalAnalysis script.</li>
</ul>
</div>
<div class="section level2" id="numeric-representations">
<h2>Numeric representations</h2>
<p>We will start by adding a code block to demarcate the start of the exploration section of our script.</p>
<ul>
<li><p>Enter the following commands at the bottom of your script and run them.</p>
<pre><code>#####################################################
#####################################################
##
##   Exploration section
##
#####################################################
#####################################################</code></pre></li>
</ul>
<div class="section level3" id="summary-statistics">
<h3>Summary statistics</h3>
<p>Summary statistics are a good place to start when looking at a new dataset. The summary() function provides the summary of each variable in a data.frame.</p>
<ul>
<li><p>The syntax and use of the <strong>summary()</strong> function</p>
<p>summary(<em>object</em>)</p>
<p>Returns a table with a column for each of the variables in a data.frame.</p>
<p>For factor, logical, and character variables, the frequency of occurrences is returned. Low frequency levels will be combined in an "other" category if there are too many levels to be displayed.</p>
<p>For numeric variables, the five number summary (median, first quartile, third quartile, min, and max) and the mean are returned.</p></li>
</ul>
<p>We will look at the summary of the salary dataset.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>summary(salary)</code></pre></li>
<li><p>The results are shown below.</p>
<pre><code>        rank     dscpl       yrSin           yrSer           sex     
 AssocProf: 64   A:181   Min.   : 1.00   Min.   : 0.00   Female: 39  
 AsstProf : 67   B:216   1st Qu.:12.00   1st Qu.: 7.00   Male  :358  
 Prof     :266           Median :21.00   Median :16.00               
                         Mean   :22.31   Mean   :17.61               
                         3rd Qu.:32.00   3rd Qu.:27.00               
                         Max.   :56.00   Max.   :60.00               
     salary          logSal         salLev   
 Min.   : 57.8   Min.   :4.057   high  :100  
 1st Qu.: 91.0   1st Qu.:4.511   low   : 98  
 Median :107.3   Median :4.676   middle:199  
 Mean   :113.7   Mean   :4.700               
 3rd Qu.:134.2   3rd Qu.:4.899               
 Max.   :231.5   Max.   :5.445               </code></pre></li>
<li><p>The range of values seems to be reasonable for college professors.</p></li>
</ul>
</div>
</div>
<div class="section level2" id="correlation-between-variables">
<h2>Correlation between variables</h2>
<p>Another useful method to explore the relationships within a dataset is to examine the correlation between the variables.</p>
<ul>
<li><p>The syntax and use of the <strong>cor()</strong> function</p>
<p>cor(<em>object</em>)</p>
<p>Returns a matrix of the correlations.</p>
<p>The object passed to cor needs to be a two dimensional object with a type of numeric.</p></li>
</ul>
<p>The salary data.frame is a two dimensional object, though not all the variables are numeric. We will need to change the type of the non-numeric variables to numeric or exclude the non-numeric variables from our call to cor().</p>
<p>What we have found is that we need to do some data preparation work as we are exploring the data. This is a fairly normal occurrence. It is best to keep the code that does data preparation together. The following code to create a numeric data.frame should be added to the data preparation section of the script.</p>
<p>We will change the factor variables to type numeric. To convert a factor to a meaningful numeric variable there needs to be a meaningful order to the levels. In our example we will need the levels of professor rank to be ordered according to increasingly higher levels of rank. We will use the levels parameter of the factor function for this.</p>
<ul>
<li><p>The syntax and use of the <strong>levels</strong> parameter to factor()</p>
<p>factor(<em>variable</em>,levels=<em>levelsVector</em>)</p>
<p>The order of the levels in <em>levelsVector</em> is the order of the level values used in the factor variable.</p>
<p>The first level in <em>levelsVector</em> will be the reference level.</p></li>
</ul>
<p>We will order the ranks from lowest rank to highest rank.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salary$rank &lt;- factor(salary$rank, 
                      levels = c("AsstProf","AssocProf","Prof")
                      )</code></pre></li>
<li><p>There are no console results from this command.</p></li>
</ul>
<p>We do not want to permanently change the variables in salary. So we will make a copy of the salary data.frame, called salaryNum, to make the variables numeric.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salaryNum &lt;- salary</code></pre></li>
</ul>
<p>The change of type can be done to each variable individually. For a data set of this size that would be fairly easy to do, but we will do it with a for loop.</p>
<ul>
<li><p>The syntax and use of <strong>for</strong> loop</p>
<pre><code>for (*var* in *vector*) {  
    *repeatedCommands*  
    }  </code></pre>
<p>The set of <em>repeatedCommands</em> will be run once for each element in <em>vector</em>.</p>
<p><em>var</em> will be set to successive values of the elements of <em>vector</em> on each iteration of the loop.</p></li>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>for (i in colnames(salary)) {
  salaryNum[,i] &lt;- as.numeric(salary[,i])
  }</code></pre></li>
</ul>
<p>Now that we have the dataset in the form we need, we can use the cor() function.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>round( cor(salaryNum[,-c(8)]), 3)</code></pre></li>
<li><p>The results of the above command is shown below</p>
<pre><code>         rank  dscpl  yrSin  yrSer   sex salary logSal
rank    1.000 -0.107  0.701  0.608 0.139  0.617  0.667
dscpl  -0.107  1.000 -0.218 -0.165 0.004  0.156  0.174
yrSin   0.701 -0.218  1.000  0.910 0.149  0.419  0.426
yrSer   0.608 -0.165  0.910  1.000 0.154  0.335  0.341
sex     0.139  0.004  0.149  0.154 1.000  0.139  0.148
salary  0.617  0.156  0.419  0.335 0.139  1.000  0.988
logSal  0.667  0.174  0.426  0.341 0.148  0.988  1.000</code></pre></li>
</ul>
<p>From the correlation table, the column for log salary values are a little higher than those of salary. This indicates that the data may be a little better fit to log salary than to salary. The correlation between yrs.since.phd and yrs.service is about .9. This correlation is not surprising.</p>
<div class="section level3" id="group-sizes">
<h3>Group sizes</h3>
<p>Group size is an important consideration in regression. We will look at the group sizes using two different functions. The first is table(), which makes a frequency table.</p>
<ul>
<li><p>The syntax and use of the <strong>table()</strong> function</p>
<p>table(<em>vector1</em>,<em>vector2</em>,...,<em>vectorn</em>)</p>
<p>Returns a table of the frequency counts of combinations of groups from the <em>vectors</em>. If 2 vectors are provided, a two by two contingency table is created.</p>
<p>Each of the <em>vectors</em> needs to be a <strong>grouping variable</strong>. A grouping variable is a variable of type factor or a variable whose values identify groups of interest.</p></li>
</ul>
<p>Lets look at the group sizes formed by unique combinations of rank, discipline, and sex.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>table(salary$rank,salary$dscpl,salary$sex) </code></pre></li>
<li><p>The results are shown below.</p>
<pre><code>, ,  = Female


              A   B
  AsstProf    6   5
  AssocProf   4   6
  Prof        8  10

, ,  = Male


              A   B
  AsstProf   18  38
  AssocProf  22  32
  Prof      123 125</code></pre></li>
</ul>
<p>From the results you can see that the table R constructed is 3 dimensional. There is one dimension for each of the grouping variables used in the table() function. Table() is convenient if there are one or two grouping variables of interest.</p>
<p>We also will use the aggregate function to get the size of the groups.</p>
<ul>
<li><p>The syntax and use of the <strong>aggregate()</strong> function</p>
<p>aggregate(<em>aggVec</em>, by = list(<em>grpVec1</em>,...,<em>grpVecn</em>), FUN = <em>function</em> )</p>
<p>Returns a data.frame. There is a row for each unique combinations of groups in the list of <em>grpVec</em>. There is a column for each <em>grpVec</em> in the list. There is also a column with the frequency count for each of the unique combinations.</p>
<p><em>AggVec</em> is the variable with the elements which will be aggregated using <em>function</em>. A multi-column structure can also be used for <em>AggVec</em> and each column of the structure will be aggregated.</p>
<p>The by list is used to determine what subsets of the <em>aggVec</em> the <em>function</em> is applied to. Each <em>grpVec</em> in the list is a grouping variable.</p>
<p><em>Function</em> is any R function which takes a vector as its parameter and returns a single value. This is typically a summary statistic function such as mean, sum, etc.</p></li>
</ul>
<p>To use aggregate, we need a function which will give us the number of elements in a group. We will use the length() function.</p>
<ul>
<li><p>The syntax and use of the <strong>length()</strong> function</p>
<p>length(<em>vector</em>)</p>
<p>Returns the number of elements of <em>vector</em></p></li>
</ul>
<p>Putting the aggregate() and length() functions together we can get the desired frequency counts.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>aggregate(salary$salary, 
          by = list(rank=salary$rank,
                    dscpl=salary$dscpl,
                    gender=salary$sex
                    ),
          FUN = length
          )</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>        rank dscpl gender   x
1   AsstProf     A Female   6
2  AssocProf     A Female   4
3       Prof     A Female   8
4   AsstProf     B Female   5
5  AssocProf     B Female   6
6       Prof     B Female  10
7   AsstProf     A   Male  18
8  AssocProf     A   Male  22
9       Prof     A   Male 123
10  AsstProf     B   Male  38
11 AssocProf     B   Male  32
12      Prof     B   Male 125</code></pre></li>
</ul>
<p>As you can see from the output, both functions return the same frequency counts for each group. The table() function is the quickest way to get a look at frequency counts of groups. The table() function also produces a good visual representation of the frequency counts. The aggregate() function has greater flexibility in what it can do. The single column form of the aggregate() results is useful if further programming is to be done with the frequency counts.</p>
<div class="section level4" id="exercise">
<h4>Exercise</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<ol style="list-style-type: decimal">
<li><p>Do a summary of the data.frame alfalfa.</p></li>
<li><p>Do a cor of the shade, irrig, and yield variables. Use only the variables which have a sensible order.</p></li>
<li><p>Create a frequency table for shade and irrig.</p></li>
<li><p>Use aggregate to find the mean of the inoculum groups.</p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_Sol.html">Solutions</a></p>
</div>
</div>
</div>
<div class="section level2" id="graphical-representations">
<h2>Graphical representations</h2>
<p>There are several graphics packages available in R. We will primarily be using the ggplot graphics functions from the ggplot2 package. We will also use a few object-specific plotting functions. These object-specific plots are quick and useful. They are designed to give you a quick look at relationships which are of common interest. These plots will be introduced as they are used in the articles. The object-specific plot functions are typically built on the base graphics functions, the plotting packages included in the core R packages. No background on the base graphics package is needed to use these object specific plotting functions, they typically only need to be given the object to make the desired plot.</p>
<p>The ggplot package is a more current graphics package than the base graphics package. It is based on the grammar of graphics which provides some structure to how plots are specified. The structure of ggplot will be introduced first and then examples will be provided. The examples will show how easy it is to use ggplot(). So push ahead even if the definitions seem a little difficult.</p>
<p>There are minimally four objects which are needed to produce a plot with ggplot.</p>
<ol style="list-style-type: decimal">
<li>An empty plot. This is the canvas on which the plot will be created. This is an object in R. Like all R objects it can be be given a name through the assignment operator. This allows multiple plots to be worked on in parallel and plots to be refined later.</li>
<li>A data.frame containing the data to be plotted.</li>
<li>The geometric object to be plotted. This may be points, lines, bars, etc.</li>
<li>Aesthetics which provide the information needed to plot the geometric objects, such as x and y locations for points or lines.</li>
</ol>
<p>To start a plot you create the empty plot. This is the canvas on which the plot will be constructed. The ggplot() function is used to create the empty plot.</p>
<ul>
<li><p>The syntax and use of the <strong>ggplot()</strong> function</p>
<p>ggplot(data = <em>data.frame</em>, aes(<em>parameters</em>))</p>
<p>Returns a list of plot objects. If the ggplot() function is on the right side of an assignment statement, the list is saved as an object and no plot is generated. If the ggplot() object is passed to the print function (typically through an implied print) the plot is generated.</p>
<p>The returned object does not have a geometry and will not produce a plot on its own.</p>
<p>The <em>data.frame</em> identifies the source of the data which will be used in the plot. The <em>data.frame</em> parameter can be any object which can be coerced to a data.frame.</p>
<p>The aesthetics in the aes <em>parameters</em> are described below. Aesthetics which are declared in the ggplot() function apply to all graphed objects, the <strong>scope</strong> of the aesthetic is <strong>global</strong>.</p></li>
</ul>
<p><strong>Aesthetics</strong> are parameters which control where an object is graphed and the how the graphed object will look. Some of the common aesthetics parameters are</p>
<ul>
<li>x is the x position</li>
<li>y is the y position</li>
<li>color is the outline color</li>
<li>fill is the inside color</li>
<li>shape is the shape of what is to be plotted</li>
<li>size is the size of the plotted shape object</li>
<li>linetype is the line type (solid, dashed, etc.) for line objects</li>
</ul>
<p>A single value can be used for each of these aesthetics and this value will be applied to all the objects within its scope. Setting color, fill, shape, or size to a grouping variable will result in a unique aesthetics for each group.</p>
<ul>
<li><p>An example of the <strong>aes()</strong> parameter.</p>
<p>aes(x = myX, y = myY, color = "red")</p>
<p>This would add objects with the x and y positions determined by the variables myX and myY and the objects would all have an outline color of red.</p></li>
</ul>
<p>Graphical objects are added in <strong>layers</strong>. Each of these layers will add geometric objects on top of what has already been drawn. A layer may hide (plot over top of) objects plotted in prior layers. Lower layer objects being hidden is typically only an issue in complicated graphs, which are not typically needed. Some of the common geometric objects are:</p>
<ul>
<li>geom_point()</li>
<li>geom_line()</li>
<li>geom_histogram()</li>
<li>geom_bar()</li>
<li>geom_boxplot()</li>
</ul>
<p>Each of these is a function which will add the geometric shape implied by the function's name.</p>
<ul>
<li><p>The syntax and use of the <strong>geom_object()</strong> functions</p>
<p><em>geom_object</em>(aes(<em>parameters</em>))</p>
<p>Where <em>geom_object</em> is one of the geom's in the above list.</p>
<p>Used with the ggplot() function. This function is added to an expression which starts with ggplot().</p>
<p>The function modifies the layer element of the ggplot() object list. This modification of the layer element is its typical returned value.</p>
<p>Geom aesthetics are specified in the geom_object() function in the same way as they are in ggplot(). Geom aesthetics will have a <strong>local scope</strong>. That is they will only apply to this geom. Local aesthetics take precedence over globally defined aesthetics.</p></li>
<li><p>An example of the ggplot functions used to create a scatter plot is</p>
<p>ggplot(data=myData, aes(x = myX, y = myY, color = "red")) +<br/>
<span class="math inline">\(\ \ \ \ \)</span>geom_point()</p>
<p>Notice, it is the plus sign that is used to add the graph parts together to make the plot.</p></li>
</ul>
<p><strong>Theme</strong> objects include titles, axes, background colors, grid lines, margins, legends, etc. This is basically everything that is not a graphic object. These can be thought of as objects associated with the canvas or the frame around the canvas. The theme functions we will use to add theme objects are</p>
<ul>
<li>ggtitle()</li>
<li>xlab()</li>
<li>ylab()</li>
<li>theme_bw()</li>
<li>theme()</li>
</ul>
<p>The formatting options we will use for themes are</p>
<ul>
<li>axis.title.x</li>
<li>axis.title.x</li>
<li>plot.title</li>
<li>strip.background</li>
<li>legend.position</li>
</ul>
<p>The default theme for ggplot is a dark background with light colored objects. This is not always what is desired. We will be using a white background for the plots we create.</p>
<ul>
<li><p>A white background is produced by adding the <strong>theme_bw()</strong> function.</p>
<p>theme_bw()</p></li>
</ul>
<p>Using ggplot is easier than these definitions make it seem. It will be easy to see what each of these parts do by looking at a few examples. The first example is a scatter plot of salary and years of service.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>ggplot(data = salary, aes(x = yrSer, y = salary)) +
  geom_point() +
  theme_bw() +
  ggtitle("Professor's salaries from 2008-9") </code></pre>
<p>The ggplot() function opens a new canvas, connects the salary data.frame to the canvas. It also sets which variables to use for the x and y location on the graph.</p>
<p>The geom_point() function plots circles, the default shape, at the (x,y) pair locations.</p>
<p>Theme_bw() changes the background color.</p>
<p>The ggtitle() function adds a title to the plot.</p></li>
<li><p>Select the Plots tab in RStudio</p></li>
<li><p>The following graph will be displayed in the Plots tab of RStudio.</p>
<div class="figure">
<img alt="Plot tab" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DE_PlotTab.png"/>
<p class="caption">Plot tab</p>
</div>
<p>The left and right arrows allow you to scroll back and forth through plots you have generated.</p>
<p>The Zoom icon opens the current plot in a separate window. The plot can be rescaled and saved using the plot zoom window.</p>
<p>The export icon opens another window with menu items to assist you in saving the plot.</p></li>
</ul>
<p>The plot axis labels could use some improvement and more space between the title and the plot would be nice. We will add functions to provide our own axis labels and provide extra space for the title and axis labels.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>ggplot(data = salary, aes(x = yrSer, y = salary)) +
  geom_point() +
  theme_bw() +
  ggtitle("Professor's salaries from 2008-9") +
  theme( plot.title = element_text(vjust=1.0) ) +
  xlab("Years of service") +
  theme( axis.title.x = element_text(vjust=-.5) ) +
  ylab("Salary in thousands of dollars") +
  theme( axis.title.y = element_text(vjust=1.0) ) </code></pre>
<p>The vjust parameter used in the theme functions moves the text objects vertically relative to its orientation. Here positive values moved the the title and y label up, which is away from the graph. The x label had a negative value and moved it down, which is also away from the graph.</p></li>
<li><p>The following plot will be displayed in the Plots tab.</p>
<p><img src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-10-1.png" style="display: block; margin: auto;" width="480"/></p></li>
</ul>
<p>This plot required a number of functions to produce it. Each of these functions has a clearly identifiable effect on the plot. So even though there are a number of functions, the code is simple if you remember the basics we covered above.</p>
<p>I am interested in seeing if there is a different relationship between salary and years of service based on rank. I would like to see a separate graph for each rank. This is done in ggplot with <strong>facets</strong>. Faceting a graph produces a separate plot for each value in a grouped variable. There are two facet functions</p>
<ul>
<li><p>The syntax and use of the <strong>facet_grid()</strong> and <strong>facet_wrap()</strong> functions</p>
<p>facet_grid(<em>verticalGroup</em>~<em>horizontalGroup</em>)<br/>
facet_wrap(~<em>horizontalGroup</em>)</p>
<p>The facet_grid() function organizes the facets in rows and columns.</p>
<p>The facet_wrap() function organizes the facets in a horizontal row. If there is not enough space to show all the facets on one row, the facets will wrap to the following rows as needed. Hence its name.</p></li>
</ul>
<p>We have only one variable, rank, we want to facet on, so we will use facet_wrap. The prior plotting code is used again with the facet added to the plot.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>plotSalFacRank &lt;- ggplot(data = salary, aes(x = yrSer, y = salary)) +
  geom_point() +
  theme_bw() +
  ggtitle("Professor's salaries from 2008-9") +
  theme( plot.title = element_text(vjust = 1.0) ) +
  xlab("Years of service") +
  theme( axis.title.x = element_text(vjust = -.5) ) +
  ylab("Salary in thousands of dollars") +
  theme( axis.title.y = element_text(vjust = 1.0) ) +
  facet_wrap(~rank) +
  theme(strip.background = element_rect(fill = "White"))
plotSalFacRank</code></pre>
<p>Notice in the above code the plot object was saved as a variable. This allows the plot object to be used later. To get the plot to be displayed, the implied print command was used.</p>
<p>The theme strip.background was also set to white, the default background for ggplot is dark.</p></li>
<li><p>The following plot will be displayed.</p>
<p><img src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-11-1.png" style="display: block; margin: auto;" width="480"/></p></li>
</ul>
<p>Another way this relationship could be visualized is using a different color for each of the ranks. This approach plots all the observations on the same graph. We create this plot by setting the color aesthetic to rank in the geom_point layer. A legend will be created by ggplot for the levels of rank. We will use <strong>legend.position</strong> parameter to put the legend at the bottom of the plot.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>ggplot(data = salary, aes(x = yrSer, y = salary)) +
  geom_point(aes(color = rank)) +
  theme_bw() +
  ggtitle("Professor's salaries from 2008-9") +
  theme( plot.title = element_text(vjust = 1.0) ) +
  xlab("Years of service") +
  theme( axis.title.x = element_text(vjust = -.5) ) +
  ylab("Salary in thousands of dollars") +
  theme( axis.title.y = element_text(vjust = 1.0) ) +
  theme(legend.position = "bottom")</code></pre></li>
<li><p>The following plot will be displayed.</p>
<p><img src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-12-1.png" style="display: block; margin: auto;" width="480"/></p></li>
</ul>
<p>The last two graphs were simpler to make using ggplot than they would have been with base graphics. This is typical of using ggplot. That is it will take a few more functions to set up a plot. But, once you have the plot set up in ggplot, it is easy to explore the data in interesting ways. And again, with the background above the functions tie directly to visual effects in the plot.</p>
<p>The final thing you need to know about using ggplot is that it requires your data to be in what is known as <strong>long form</strong>. A data.frame is in long form if each row is one observation. If you have data in <strong>wide form</strong>, more than one observation per row, you can change the shape of the data using the <strong>reshape()</strong> function. Reshape() will be covered in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Regression Diagnostics</a> article.</p>
<p>The plot function from the base graphics package can accept a data.frame as an object to be plotted. It will produce a matrix of pairwise scatter plots of the variables in the data.frame. We will use it to get a quick overview of what relationships we might see in a dataset. Let's use it to take a look at the salary data set.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>plot( salary[,-c(8)] )</code></pre>
<p>Note the use of -c(8) removes the eighth column variable from the plot.</p></li>
<li><p>The following graph will be displayed.</p>
<p><img src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-13-1.png" style="display: block; margin: auto;" width="672"/></p></li>
</ul>
<p>Commit your changes to SalAnalysis and SalDoc files.</p>
<div class="section level4" id="exercise-1">
<h4>Exercise</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script.</p>
<ol start="6" style="list-style-type: decimal">
<li><p>Use plot to create pairwise plots for the alfalfa data.frame.</p></li>
<li><p>Use ggplot to plot to create a scatter plot of the yield vs. inoc. Use a white background and color the observations based on shade level.</p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_Sol.html">Solutions</a></p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres.html">Data presentation</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep.html">Data preparation</a></p>
<p>Last Revised: 10/18/2016</p>
</div>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DE_PlotTab.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-10-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-11-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-12-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_files/figure-html/unnamed-chunk-13-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Data exploration solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<p>These solutions require the solutions from the prior lesson be run in your R session.</p>
<div class="section level4" id="exercise-solutions">
<h4>Exercise solutions</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<ol style="list-style-type: decimal">
<li><p>Do a summary of the alfalfa data.frame.</p>
<pre class="r"><code>summary(alfalfa)</code></pre>
<pre><code>     shade       irrig      inoc       yield       shadeLev 
 Min.   :1   Min.   :1   A    :5   Min.   :24.40   full: 5  
 1st Qu.:2   1st Qu.:2   B    :5   1st Qu.:33.20   part:15  
 Median :3   Median :3   C    :5   Median :34.60   none: 5  
 Mean   :3   Mean   :3   cntrl:5   Mean   :34.11            
 3rd Qu.:4   3rd Qu.:4   D    :5   3rd Qu.:36.90            
 Max.   :5   Max.   :5             Max.   :39.10            </code></pre></li>
<li><p>Do a cor of the shade, irrig, and yield variables. Use only the variables which have a sensible order.</p>
<pre class="r"><code>cor(alfalfa[,-c(3,5)])  </code></pre>
<pre><code>          shade      irrig      yield
shade 1.0000000  0.0000000  0.5205662
irrig 0.0000000  1.0000000 -0.2233344
yield 0.5205662 -0.2233344  1.0000000</code></pre></li>
<li><p>Create a frequency table for shade and irrig.</p>
<pre class="r"><code>table(alfalfa$shade,alfalfa$irrig)</code></pre>
<pre><code>
    1 2 3 4 5
  1 1 1 1 1 1
  2 1 1 1 1 1
  3 1 1 1 1 1
  4 1 1 1 1 1
  5 1 1 1 1 1</code></pre></li>
<li><p>Use aggregate to find the mean of the inoculate groups.</p>
<pre class="r"><code>aggregate(alfalfa$yield, by=list(alfalfa$inoc),FUN=mean)</code></pre>
<pre><code>  Group.1     x
1       A 35.76
2       B 35.04
3       C 35.68
4   cntrl 29.16
5       D 34.90</code></pre></li>
<li><p>Commit your changes to AlfAnalysis.</p>
<p>There is no code associated with the solution to this problem.</p></li>
<li><p>Use plot to create pairwise plots for the alfalfa data.frame.</p>
<pre class="r"><code>plot(alfalfa)</code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_Sol_files/figure-html/unnamed-chunk-6-1.png" title="" width="672"/></p></li>
<li><p>Use ggplot to plot to create a scatter plot of the yield vs. inoc. Use a white background and color the observations based on shade level.</p>
<pre class="r"><code>ggplot(alfalfa) +
  geom_point(aes(x=inoc, y=yield, color=shadeLev)) +
  theme_bw()</code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_Sol_files/figure-html/unnamed-chunk-7-1.png" title="" width="672"/></p></li>
<li><p>Commit your changes to AlfAnalysis.</p>
<p>There is no code associated with the solution to this problem.</p></li>
</ol>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl.html">Data exploration</a> article.</p>
<p>Last Revised: 2/9/2015</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_Sol_files/figure-html/unnamed-chunk-6-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl_Sol_files/figure-html/unnamed-chunk-7-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Data preparation</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#importing-data">Importing data</a></li>
<li><a href="#object-types-and-structures">Object types and structures</a></li>
<li><a href="#missing-data">Missing data</a></li>
<li><a href="#changing-types-and-creating-new-variables">Changing types and creating new variables</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to commands which are useful in preparing data for analysis. This includes commands to import your data, check for missing data and other errors, create new variables, and change the types of variables. The result of data preparation is a dataset which is in the form needed for your analysis.</p>
<p>The code to import a data set typically follows the session set up code. We recommend that all the code to clean up a data set be kept together following the code which imports the raw data set. It is common to discover additional data preparation needs throughout the analysis of a data set. When these additional data preparation needs are discovered, add the code to the data preparation section of your script rather than the exploration or analysis section you are working on. This will make your code easier to work with.</p>
<p>Understanding the data in a data set as well as the analysis which is to be done is necessary to prepare a data set for analysis. In this article, the understanding of the data set has been provided. The data preparation work included in this article was chosen to demonstrate the general approach and introduce some common functions. It is not meant to be a complete data preparation for this data set.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercises will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Open the SalAnalysis script. You started this script in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a> article.</li>
<li>Run all the commands in the script.</li>
</ul>
<p>The instructions for adding the datasets folder to your RFR project are in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a> article.</p>
</div>
<div class="section level2" id="importing-data">
<h2>Importing data</h2>
<p>There are a number of R functions which import data. This article series focus on the most common approach, which is to import datasets which are organized with variables as columns in the data set. The R function we will use is read.table(). The file types we will import data from are text (.txt file type) or comma separated values (.csv file type).</p>
<p>R allows multiple datasets to be loaded simultaneously. Each dataset must be given a name when it is loaded to distinguish it from other datasets.</p>
<ul>
<li><p>Syntax and parameters for the <strong>read.table()</strong> function</p>
<p><em>name</em> &lt;- read.table("<em>filePath</em>",<em>parameters</em>).</p>
<p>Returns a <strong>data.frame</strong>. A data.frame is a two dimensional structure organized in rows and columns. A data.frame is the equivalent of Stata's dataset.</p>
<p><em>Name</em> is the name you are giving the dataset in R.</p>
<p><em>FilePath</em> is the path and name of the data file on your computer. If the file is in the work directory, then only the file name, with the file extension, is needed. If the file is in another folder, the path to the folder needs to be provided with the file name.</p>
<p>The ", <em>parameters</em>" is an optional list of parameters.</p>
<p>Some commonly used parameters are</p>
<p><strong>header</strong> set to FALSE indicates no column names are present. TRUE indicates column names are in the first row. Header has no default value. If header is not present in the call, the presence of a header row is determined from the first row of the data file. If the first row has one less value than the rest of the data, the first row is assumed to be column names.</p>
<p><strong>sep</strong> is a character string and defaults to "". "" indicates that any white space is used as a separator.</p>
<p><strong>col.names</strong> is a set of character strings used as the column names. col.names has no default. The more common coding practice is to provide column names after the file has been imported.</p>
<p>Other parameters can be explored using the help() function.</p></li>
</ul>
<p>If you are not sure if your data has a header row or not, open the file in a text editor and check for column names.</p>
<p>The read.csv() function is a "wrapper" to the read.table() function with the parameter defaults set for .csv files. Sometimes it is convenient to use read.csv(), but read.table() can always be used.</p>
<p>If the data you are provided is in a document with other text, copying and pasting the portion of the file with the data to a .txt file usually results in a file which R can read.</p>
<p>The Salaries dataset will be used for the examples in this article.</p>
<ul>
<li><p>Enter the following commands into your SalAnalysis script.</p>
<pre><code>#####################################################
#####################################################
##
##   Import Data
##
#####################################################
#####################################################

SalariesIn &lt;- read.table("Datasets/Salaries.csv", 
                         sep=",",header=TRUE
                         )
SalariesIn &lt;- read.table("Datasets/Salaries.txt" ) </code></pre></li>
<li><p>There are no console results from read.table().</p></li>
<li><p>The Salaries data set was imported twice. The first import was from a .csv file and the second was from a .txt file. The second import overwrote the SalariesIn object in R.</p></li>
<li><p>No errors were produced from either call to read.table. So the dataset was successfully imported on both calls to read.table.</p></li>
<li><p>The import from the .txt file did not use the header option. R correctly determined the file contained headers.</p></li>
</ul>
<div class="section level4" id="exercise">
<h4>Exercise</h4>
<p>Do the following exercise in the AlfAnalysis script.</p>
<ol style="list-style-type: decimal">
<li>Import the dataset in alfalfa.txt from your RFR project's Dataset folder.</li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep_Sol.html">Solutions</a></p>
</div>
</div>
<div class="section level2" id="object-types-and-structures">
<h2>Object types and structures</h2>
<p>Anything in R which has a name, i.e. a means to reference it, is an <strong>object</strong>. Variables, functions, data structures, etc. are all objects. The term "object" will be used in these articles when referring to variables as well as structures.</p>
<p>To be able to prepare data you need to know a little bit about R's object types and structures.</p>
<div class="section level3" id="object-types">
<h3>Object types</h3>
<p>Data objects have a <strong>type</strong> and can be organized in <strong>structures</strong>. A type is the form of what is being stored. Structures provide the relations between what is stored. This can be thought of as: a type defines which atom is used and the structure defines what is built from a set of atoms.</p>
<p>R is loosely typed. This means that R will <strong>coerce</strong> a variable to the type needed, if it can. What R does for a coerced variable is create a new variable with the needed type and passes this new variable to the function or expression. The original variable's type is not changed. So object types in R are a little less restrictive than in some other languages.</p>
<p>The variable types we will be using in these articles are listed below.</p>
<ul>
<li><strong>Numeric</strong> which is a collection of types. R internally uses Integer, double, num, etc. for numeric variables. You will typically not need to be concerned about integer versus double, etc., since R will coerce where needed.</li>
<li><strong>Character</strong> variables are a string of characters.</li>
<li><strong>Logical</strong> variables take the value of either TRUE or FALSE, abbreviated as T and F. Numeric values coerced to logical assign FALSE for 0 and TRUE for all other values.</li>
<li><strong>Factor</strong> variables are stored as integer values. Depending where it is used, a factor may be used as either a numeric, character, or a set of indicator variables.</li>
</ul>
<p>R has functions which allow you to test what type an object is and also to coerce it to a specified type. The is.<em>type</em>() functions are used to test the type of an object, where <em>type</em> is one of the types above. Similarly as.<em>type</em>() is used to coerce objects.</p>
<p>The following example shows the test to determine if a variable x is numeric and coerces x to numeric.</p>
<ul>
<li><p>Enter the following commands at the console.</p>
<pre><code>x &lt;- "15"
is.numeric(x)
as.numeric(x)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre class="r"><code>&gt; x &lt;- "15"
&gt; is.numeric(x)
[1] FALSE
&gt; as.numeric(x)
[1] 15</code></pre></li>
<li><p>False is returned from is.numeric() since x's type is character.</p></li>
<li><p>15 is returned from as.numeric() since the character string "15" can be coerced to numeric.</p></li>
</ul>
</div>
<div class="section level3" id="object-structures">
<h3>Object structures</h3>
<p>Structures are made of <strong>elements</strong>. An element has a specific type (numeric, character, etc.) and holds a single value. In the structures we will be using, the elements are organized in row and columns.</p>
<ul>
<li>A <strong>vector</strong> is a one dimensional structure of elements. The elements of the vector must be of the same type. A vector is a single column and the elements of the vector are the rows of the column. Vectors can be of any length.</li>
<li>A data.frame is a two dimensional structure, even if there is only a single column in the data.frame. The columns of the data.frame are vectors. The vectors need to be the same length. The vectors do not need to be of the same type and often are not. It is common for a data set to be organized such that the vectors are the variables and each row is an observation.</li>
</ul>
<p>Other common structures are lists, matrices, and arrays. The use of these structures is similar to vectors and data.frames and can be read about in the help files as needed.</p>
<p>The str() function displays information about the type and structure of an object.</p>
<ul>
<li><p>Syntax and use of the <strong>str()</strong> function.</p>
<p>str(<em>object</em>)</p>
<p>str() does not return an object. It will display information about the type and structure of <em>object</em> in the console.</p>
<p><em>object</em> is any object.</p></li>
</ul>
<p>Lets look at the structure of the SalariesIn dataset.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>str(SalariesIn)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre class="r"><code>&gt; str(SalariesIn)
'data.frame':   397 obs. of  6 variables:
 $ rank         : Factor w/ 3 levels "AssocProf","AsstProf",..: 3 3 2 3 3 1 3 3 3 3 ...
 $ discipline   : Factor w/ 2 levels "A","B": 2 2 2 2 2 2 2 2 2 2 ...
 $ yrs.since.phd: int  19 20 4 45 40 6 30 45 21 18 ...
 $ yrs.service  : int  18 16 3 39 41 6 23 45 20 18 ...
 $ sex          : Factor w/ 2 levels "Female","Male": 2 2 2 2 2 2 2 2 2 1 ...
 $ salary       : int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...</code></pre></li>
<li><p>You can see that SalariesIn is of type data.frame. The name and type of each variables is also displayed.</p></li>
</ul>
<p>Vectors can be constructed using the c() function. Scalar values as well as vectors can be appended together to create a vector.</p>
<ul>
<li><p>Syntax and use of the <strong>c()</strong> function.</p>
<p>c(<em>object1</em>, <em>object2</em>, . . .)</p>
<p>Returns a vector of a type which all the <em>objects</em> can be coerced to.</p></li>
<li><p>Enter the following commands at the console.</p>
<pre><code>aa &lt;- c(1,7,4,9)
aa
bb &lt;- c("alpha","beta")
bb
c(1,bb,4)
c("first",aa,"last")</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre class="r"><code>&gt; aa &lt;- c(1,7,4,9)
&gt; aa
[1] 1 7 4 9
&gt; bb &lt;- c("alpha","beta")
&gt; bb
[1] "alpha" "beta" 
&gt; c(1,bb,4)
[1] "1"     "alpha" "beta"  "4"    
&gt; c("first",aa,"last") 
[1] "first" "1"     "7"     "4"     "9"     "last" </code></pre></li>
<li><p>Both c(1,bb,4) and c("first",aa,"last") result in vectors of type character. Type character is what all the elements in each lists could be coerced to.</p></li>
</ul>
</div>
<div class="section level3" id="subsetting-structures">
<h3>Subsetting structures</h3>
<p>R allows you to use all or just some of the elements of a structure together. There are several methods for referencing some of elements of a structure. One method to subset a structure is to use [<em>row</em>,<em>column</em>] indexing. Another method, when a column is named, is to use <em>object</em>$<em>ColumnName</em> indexing. Let's look at a few examples.</p>
<ul>
<li><p>Subsetting using <em>row</em> and <em>column</em> numbers.</p>
<p>Run the following commands in the console.</p>
<pre><code>SalariesIn[4,3]           # row 4, column 3
SalariesIn[2,]            # second row, observation 2
SalariesIn[2:6,]          # observations 2 through 6
SalariesIn[c(7,9,16),]    # observations 7, 9, and 16</code></pre></li>
<li><p>The results are shown below.</p>
<pre class="r"><code>&gt; SalariesIn[4,3]           # row 4, column 3
[1] 45
&gt; SalariesIn[2,]            # second row, observation 2
  rank discipline yrs.since.phd yrs.service  sex salary
2 Prof          B            20          16 Male 173200
&gt; SalariesIn[2:6,]          # observations 2 through 6
       rank discipline yrs.since.phd yrs.service  sex salary
2      Prof          B            20          16 Male 173200
3  AsstProf          B             4           3 Male  79750
4      Prof          B            45          39 Male 115000
5      Prof          B            40          41 Male 141500
6 AssocProf          B             6           6 Male  97000
&gt; SalariesIn[c(7,9,16),]    # observations 7, 9, and 16
   rank discipline yrs.since.phd yrs.service  sex salary
7  Prof          B            30          23 Male 175000
9  Prof          B            21          20 Male 119250
16 Prof          B            12           3 Male 117150</code></pre></li>
<li><p>SalariesIn[4,3] selects the 4th observation of the 3rd variable. This is a single value, a scalar.</p></li>
<li><p>SalariesIn[2,] selects the second observation, all columns because no columns were specified. This is a data.frame of one row.</p></li>
<li><p>The last two examples above, SalariesIn[2:6,] and SalariesIn[c(7,9,16),], use a vector of integers to specify a range of rows. This can also be done to select a range of columns.</p></li>
<li><p>Subsetting using column names.</p>
<p>Run the following commands in the console.</p>
<pre><code>SalariesIn$yrs.service        # yrs.service variable
SalariesIn[5,"yrs.service"]   # row 5 of the yrs.service variable
SalariesIn$discipline[6]      # 6th observation of the 
                              # discipline variable</code></pre>
<p>The results are</p>
<pre class="r"><code>&gt; SalariesIn$yrs.service        # yrs.service variable
  [1] 18 16  3 39 41  6 23 45 20 18  8  2  1  0 18  3 20 34 23 36 26 31 30
 [24] 19  8  8 23  3  0  8  4  2  9  2  2  0 21  4 31  9  2 23 27 38 19 15
 [47] 28 19 25  1 28 11  3  9 11  5 21  8  9  3  8  2 31 11  3  8 12 31 17
 [70] 36  2 45 19 34 23  3  3 19  1  2 28 16 20  2 18 14 37  2 25  7  5  7
 [93]  7 38 20  0 12  7 14 26 25 23  5 14 10 28  8  8  8 31 16 16  1 37  0
[116]  9 29 36  1  3 14 32 22 22 22 49 26  0 30  2  9 57  8  1 25 18 14 14
[139]  7 18  8 10 11  3 27 28  4 27 26  3 12  4  9 10  0 21 18  0  6 16  2
[162] 19  7  3  0  8 16 19  6 18  5 19 24 20  6 25  7  9 14  3 11  5  8 22
[185] 23 30 10 10 28 19  9 22 18 19 53  7  4  4 33 22  4 40 17 17  5  2 33
[208] 18  2 20  3 39  7 19  1 11 11 22  7 11 21 10  6 20 35 20  1  7 11 38
[231] 27 24 19 19  3 17 25  6 40  6  3 30 37 23 23 11 23 18 23  7 39  8 12
[254]  2  7  8 22 23  3 30 33 45 26 31 35 30 43 10 44  7 40 18  1  4  3  6
[277] 48 27 18 46 38 27 51 43  6 49 27  0 27  5  7 28  9  1  7 36 18 11 43
[300] 39 36 16 13  4 44 31  4 28  0 15  7  9 19 35  6  3  9 45 16 15 23  9
[323] 11 15 31  4 15 37 10 23 60  9 10 19  6 38 23 12 25 15 11 17 38 31 35
[346] 10 27 33  3 28 49 38 27 20  1 21 40 35 14  4 11 15 30 17 43 40 10  1
[369] 30 31  8 20  7 26 19 26  1  3 38  8  3 23  5 44 21  9 27 15 36 18 19
[392] 19 30 19 25 15  4
&gt; SalariesIn[5,"yrs.service"]   # row 5 of the yrs.service variable
[1] 41
&gt; SalariesIn$discipline[6]      # 6th observation of the 
[1] B
Levels: A B
&gt;                               # discipline variable</code></pre>
<ul>
<li>SalariesIn$yrs.service selects the yrs.service vector.</li>
<li>The last two examples above, SalariesIn[5,"yrs.service"] and SalariesIn$discipline[6], select a single element from the data structure. The first of these uses the column name with the square bracket reference to rows and columns. The second uses the fact that the <em>columnName</em> reference returns a vector and then selects an observation from this vector. This is an example of nesting functions. The $ was used to return a column vector and [] was then used to select a row.</li>
</ul></li>
</ul>
<p>In R both square brackets, [], and parentheses, (), can immediately follow an object name. The square brackets are only used for subsetting data and the parentheses only for function parameters. This allows you to identify an object as either data or a function by the type of bracket that follow it. Functions always have (), even if there are no parameters. An object with square brackets or no brackets or parentheses following it is a data object.</p>
</div>
</div>
<div class="section level2" id="missing-data">
<h2>Missing data</h2>
<p>Checking for missing data is the start of our data preparation code. We demarcate the start of this section with a comment block.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>#####################################################
#####################################################
##
##   Data preparation section
##
#####################################################
#####################################################</code></pre></li>
</ul>
<p>It is good practice to check for missing data in a data set before using the data. There are a several ways R can identify a missing element, if it knows the element is missing. If the type of the data element is character, missing can be identified as either <strong>NA</strong> or "". If the type of the data element is numeric, NA is used. Numeric data may be stored as type character, so it is important to check the element type or check for both NA and "".</p>
<p>It is also fairly common for data sets to have their own unique identifier for a missing value of a variable. As an example of this, survey data will sometimes use -9 for an unanswered question. To fully check for missing data in a data set you need to understand what data you have been given and what the values of the elements mean.</p>
<p>We will use a combination of two functions to check the SalariesIn data set for values missing to R.</p>
<ul>
<li><p>Syntax and use of the <strong>is.na()</strong> function.</p>
<p>is.na(<em>object</em>).</p>
<p>Returns an object of the same structure as <em>object</em> and the same dimensions as <em>object</em>. Each element of the returned object will be either TRUE or FALSE. There are similar functions of the form is.type() and as.type(). These functions test for or coerce to the the type given it the function name.</p></li>
<li><p>syntax and use of the <strong>sum()</strong> function</p>
<p>sum(<em>object</em>)</p>
<p>Returns a single numeric value which is the sum of the values in the object.</p></li>
<li><p>Nesting these two functions provides</p>
<p>sum(is.na(<em>object</em>))</p>
<p>Returns the number of NA's in the object. Since TRUE is coerced to 1, the sum of the number of TRUEs is the number of NA's in the object.</p></li>
<li><p>To check for blanks in an object, use a logical test for "".</p>
<p><em>object</em> == ""</p></li>
</ul>
<p>We will check the SalariesIn data set for missing data.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>sum( is.na(SalariesIn) )
sum( SalariesIn == "" )</code></pre></li>
<li><p>The following results are displayed in the console</p>
<pre><code>[1] 0
[1] 0</code></pre></li>
</ul>
<p>There were no NAs or blanks in the data, since both sums were 0.</p>
<p>It is important to note the use of the functions above. The is.na() function is called from within the sum() function. Much of the power of R comes from the ability to combine simpler functions together like this to perform useful tasks. This practice will be demonstrated further through these articles.</p>
</div>
<div class="section level2" id="changing-types-and-creating-new-variables">
<h2>Changing types and creating new variables</h2>
<p>When a dataset is not too large (where too large is determined by your computer's memory), it is useful to keep the original dataset unchanged and prepare the dataset in another data.frame in the R environment. We will do this by creating a new dataset to which we will make our changes.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salary &lt;- SalariesIn</code></pre></li>
</ul>
<div class="section level3" id="changing-variables">
<h3>Changing variables</h3>
<p>A variable is changed by assigning a new value to it. Since a variable is typically a vector of values the assignment is a new vector and not a single value. If the variable is in a data.frame, the reference to the variable will need to identify both the data.frame and the variable.</p>
<p>The first thing we will do to the salary data.frame is change the units for salary. Salaries are typically measured in thousands of dollars. We were given dollars.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salary$salary &lt;- salary$salary / 1000</code></pre></li>
<li><p>There is nothing displayed in the console. The assignment operator produces no displayable results.</p></li>
<li><p>The name of the data.frame, salary, and the variable, salary, are the same. This is not an issue for R since it know what each of the names are by its position in the command.</p></li>
</ul>
<p>Subsets of a vectors value may be changed by assigning new values to the subset of interest.</p>
</div>
<div class="section level3" id="creating-new-variables">
<h3>Creating new variables</h3>
<p>A new variable is created whenever something is assigned to a name which has not been used before. If the new name is used as a reference to a column in an object, the variable is added as a column of that object. If the variable is not associated with an object, the variable is stored in the work space.</p>
<p>We are going to create our new variables in the work space. After we have all the variables we need, the variables will be added to the salary data.frame. Adding vectors to a data.frame will be covered below.</p>
<p>We may want the log of salary, since the distribution of salaries are often skewed.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>logSalary &lt;- log(salary$salary)</code></pre></li>
</ul>
</div>
<div class="section level3" id="change-variable-types">
<h3>Change variable types</h3>
<p>R's ability to coerce types reduces the need to do much type changing of your data. The areas where you will likely need to do some work are grouping and factor variables.</p>
<p>There are two common approaches to creating grouping variables, ifelse() and cut().</p>
<ul>
<li><p>Syntax and use of the <strong>ifelse()</strong> function</p>
<p>ifelse(<em>condition</em>,<em>trueValue</em>,<em>falseValue</em>)</p>
<p>Returns a vector. The vector uses the value from <em>trueValues</em> for each observation for which <em>condition</em> is true and from <em>falseValues</em> for all others.</p>
<p><em>Condition</em> is a vector of type logical. This is TRUE or FALSE for each observation in the variable.</p>
<p><em>TrueValue</em> and <em>falseValue</em> are vectors. If a scalar value is provided, it will be repeated for each observation.</p></li>
<li><p>Syntax and use of the <strong>cut()</strong> function</p>
<p>cut(<em>vector</em>,<em>breakValues</em>,labels=<em>labels</em>)</p>
<p>Returns a character variable.</p>
<p><em>Vector</em> is the variable for which each of its elements are to be assigned to groups.</p>
<p>The <em>breakValues</em> are used to determine which group each element in <em>vector</em> is assign to. An element is assigned to a group if its value falls between two of the <em>breakValues</em>. R has a special value inf which is the largest value a variable can take. It is often convenient to use inf as bounds in cut().</p>
<p>The <em>labels</em> are the names of the groups formed by <em>breakValues</em>.</p></li>
</ul>
<p>It may also be useful to consider groups of salary levels for the professors. We will create groups for high (over 135,000), low (below 91,000), and middle salaries. We will demonstrate both of the approaches given above to create the new variable.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salaryLevel &lt;- ifelse(salary$salary&gt;134, "high",
              ifelse(salary$salary&lt;91, "low","middle"
                     ) )
salaryLevel2 &lt;- cut(salary$salary,c(0,91,134,Inf),
                   labels=c("low","middle","high")
                   )</code></pre></li>
<li><p>There are no console results for these commands.</p></li>
</ul>
<p>Lets check to see if the two variables are the same.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>sum( salaryLevel != salaryLevel2 )</code></pre></li>
<li><p>The results displayed in the console are</p>
<pre><code>[1] 2</code></pre></li>
<li><p>The line of code provides the count of the number of levels which are not the same. Here we have found 2 observations which have been assigned to different groups.</p></li>
</ul>
<p>Knowing that there are two differences in the way we generated the salary groups does not tells us why. We will use the which() function to determine which observations are different.</p>
<ul>
<li><p>The syntax and use of the <strong>which()</strong> function.</p>
<p>which(<em>vectorLogical</em>)</p>
<p>Returns a vector of integers identifying which values in <em>vectorLogical</em> are TRUE.</p></li>
</ul>
<p>We will use the which() function with subsetting to find which values of salary were assigned different groups.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salary$salary[ which( salaryLevel != salaryLevel2 ) ]</code></pre></li>
<li><p>The results displayed in the console are.</p>
<pre><code>[1] 91 91</code></pre></li>
</ul>
<p>The differences occur at the 91 cut point. To make them the same we could either change the &lt; 91 to &lt;= 91 in the ifelse() function or increase 91 to 91.0001 in the cut function. Since we do not need both of these variables, we will use the salaryLevel vector as it is.</p>
<p>We will do a str() on salaryLevel to examine the type.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>str(salaryLevel)</code></pre></li>
<li><p>The results displayed in the console are.</p>
<pre><code> chr [1:397] "high" "high" "low" "middle" "high" "middle" ...</code></pre></li>
</ul>
<p>It is a character vector. We will want this to be of type factor.</p>
<ul>
<li><p>The syntax and use of the <strong>factor()</strong> function is</p>
<p>factor(<em>vector</em>)</p>
<p>Returns a factor variable.</p>
<p>The type of <em>vector</em> does not matter. Factor creates a level for each unique value in the vector.</p></li>
</ul>
<p>We will use the factor function to coerce the type of salaryLevel.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salaryFactor &lt;- factor(salaryLevel)</code></pre></li>
</ul>
</div>
<div class="section level3" id="combining-objects-into-a-data.frame">
<h3>Combining objects into a data.frame</h3>
<p>The data.frame() function is used to combine objects into a data set.</p>
<ul>
<li><p>Syntax and use of the <strong>data.frame()</strong> function.</p>
<p>data.frame(<em>object1</em>,<em>object2</em>, <span class="math inline">\(\dots\)</span>)</p>
<p>Returns a data.frame</p>
<p><em>object1</em>,<em>object2</em>, <span class="math inline">\(\dots\)</span> is a list of objects which are either a vector or a structure with columns, such as an existing data.frame.</p>
<ul>
<li><p>The names of the variables in the data.frame are taken from the vector names or the names in their current object.</p></li>
<li><p>Names for the variables in the data.frame can be provided for vector objects. This is done using <em>nameI</em> = <em>vectorI</em>, where "<em>nameI</em>" is the name given to variable with values taken from <em>vectorI</em>.</p></li>
</ul></li>
</ul>
<p>We will add the two new variables to the salary data.frame.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salary &lt;- data.frame(salary,
                     logSalary = logSalary,
                     salaryLevels = factor(salaryLevel)
                     )</code></pre></li>
<li><p>This uses the current variable names from the salary data.frame and assigns logSalary and salaryLevels as the names of the two added variables.</p></li>
</ul>
<p>It is also helpful to set the variable names in a data set to fairly short names. This makes working with the variables easier for the rest of the analysis.</p>
<ul>
<li><p>Syntax and use of the <strong>colnames()</strong> function.</p>
<p>colnames(<em>object</em>) &lt;- <em>vector</em></p>
<ul>
<li><p>Note this is a special kind of function which can be on the left side of an assignment statement.</p></li>
<li><p>The colnames() function can also be used on the right side of an assignment statement. In this case it returns the column names of <em>object</em>.</p></li>
</ul>
<p>The length of <em>vector</em> must match the number of columns of <em>object</em>.</p></li>
</ul>
<p>We are going to shorten the names of the variables and take a final look at the structure of the salary data.frame.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>colnames(salary) &lt;- c("rank","dscpl","yrSin","yrSer","sex",
                      "salary","logSal","salLev")
str(salary)</code></pre></li>
<li><p>The results in the console are</p>
<pre><code>'data.frame':   397 obs. of  8 variables:
 $ rank  : Factor w/ 3 levels "AssocProf","AsstProf",..: 3 3 2 3 3 1 3 3 3 3 ...
 $ dscpl : Factor w/ 2 levels "A","B": 2 2 2 2 2 2 2 2 2 2 ...
 $ yrSin : int  19 20 4 45 40 6 30 45 21 18 ...
 $ yrSer : int  18 16 3 39 41 6 23 45 20 18 ...
 $ sex   : Factor w/ 2 levels "Female","Male": 2 2 2 2 2 2 2 2 2 1 ...
 $ salary: num  139.8 173.2 79.8 115 141.5 ...
 $ logSal: num  4.94 5.15 4.38 4.74 4.95 ...
 $ salLev: Factor w/ 3 levels "high","low","middle": 1 1 2 3 1 3 1 1 3 3 ...</code></pre></li>
<li><p>The variables in this data set will be used in later lessons.</p></li>
</ul>
<p>The cleaned up data set is typically not saved if the code to create it runs fairly quickly. If it takes a long time to create the cleaned up data set, the cleaned up data set can be saved as a data file. Then the cleaned up data set can be imported into R for subsequent R sessions. The <strong>write.table()</strong> function is used to save a data.frame to a file. The use of write.table is similar to read.table and the proper usage of it can be found in the help file. We will not save our cleaned up data set since the code to create it runs quickly. There are also internal storage formats which can be used to save datasets from the workspace. These will not be covered by this series.</p>
<p>We are done with our work on this script for this lesson.</p>
<ul>
<li>Commit the changes you have made to this file with the commitment message "Added data prep to salAnalysis".</li>
</ul>
</div>
<div class="section level3" id="naming-conventions">
<h3>Naming conventions</h3>
<p>R packages use a variety of naming conventions for variable and function names. Some of these use dots or underscores between words. Other use camel coding (lower case letters except for the first letter in words after the first word, such as numVar.) Words are abbreviated differently, some using the first letters and others using just consonants. While none of these approaches are inherently bad, some do cause problems if the code is used with other systems (periods might have other meaning, etc.) We recommend the following naming conventions for variables.</p>
<ul>
<li>Use at least 2 characters. Never use T or F as variable names. This will overwrite the special definitions they have in R.</li>
<li>Use abbreviations where they are clear. For example numObs for the number of observations.</li>
<li>Be consistent in your use of abbreviation. If obs is the abbreviation you use for observations, use obs as the abbreviation in all variables where it is used.</li>
<li>Use camel code names (avoiding the use of . and _ in names.)</li>
</ul>
<p>Commit your changes to SalAnalysis.</p>
<div class="section level4" id="exercises">
<h4>Exercises</h4>
<p>Do the following exercise in the AlfAnalysis script. Use the data set alfalfa.txt you imported above for these exercises.</p>
<ol start="2" style="list-style-type: decimal">
<li><p>Change the variable names to "shade","irrig", "inoc", and "yield"</p></li>
<li><p>Create a new variable for shade level (shadeLev) from the shade variable by setting 1 to "full", 5 to "none", and the rest to "part".</p></li>
<li><p>Change the type of shadeLev to factor.</p></li>
<li><p>Include shadeLev in the alfalfa data.frame.</p></li>
<li><p>Change inoculate level E to control. This is a more challenging problem.</p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep_Sol.html">Solutions</a></p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl.html">Data exploration</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a></p>
<p>Last Revised: 4/21/2014</p>
</div>
</div>
</div>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Data preparation solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<div class="section level4" id="exercise-solutions">
<h4>Exercise solutions</h4>
<p>Do the following exercise in the AlfAnalysis script.</p>
<ol style="list-style-type: decimal">
<li><p>Import the dataset in alfalfa.txt from the course Dataset folder.</p>
<pre class="r"><code>#######################################################
#######################################################
##
##   Import Data
##
#######################################################
#######################################################

alfalfaIn &lt;- read.table("Datasets/alfalfa.txt", header=TRUE)
str(alfalfaIn)</code></pre>
<pre><code>'data.frame':   25 obs. of  4 variables:
 $ shade     : int  1 1 1 1 1 2 2 2 2 2 ...
 $ irrigation: int  1 2 3 4 5 1 2 3 4 5 ...
 $ inoculum  : Factor w/ 5 levels "A","B","C","D",..: 1 2 4 3 5 4 5 2 1 3 ...
 $ yield     : num  33.8 33.7 30.4 32.7 24.4 37 28.8 33.5 34.6 33.4 ...</code></pre>
<pre class="r"><code>alfalfa &lt;- alfalfaIn</code></pre></li>
<li><p>Change the variable names to "shade","irrig", "inoc", and "yield"</p>
<pre class="r"><code>colnames(alfalfa) &lt;- c("shade","irrig","inoc","yield")</code></pre></li>
<li><p>Create a new variable for shade level (shadeLev) from the shade variable by setting 1 to "full", 5 to "none", and the rest to "part".</p>
<pre class="r"><code>shadeLev &lt;- cut( alfalfa$shade, 
                 c(0,1.5,4.5,6),
                 labels=c("full","part","none")
                 )
str(shadeLev)</code></pre>
<pre><code> Factor w/ 3 levels "full","part",..: 1 1 1 1 1 2 2 2 2 2 ...</code></pre></li>
<li><p>Change the type of shadeLev to factor.</p>
<pre class="r"><code>shadeLev &lt;- factor(shadeLev)</code></pre></li>
<li><p>Include shadeLev in the alfalfa data.frame.</p>
<pre class="r"><code>alfalfa &lt;- data.frame(alfalfa,
                      shadeLev=shadeLev
                      )</code></pre></li>
<li><p>Change inoculate level E to control. This is a more challenging problem.</p>
<pre class="r"><code>alfalfa$inoc &lt;- ifelse(alfalfa$inoc=="E","cntrl",
                       as.character(alfalfa$inoc)
                      )
alfalfa$inoc &lt;- factor(alfalfa$inoc)
str(alfalfa)</code></pre>
<pre><code>'data.frame':   25 obs. of  5 variables:
 $ shade   : int  1 1 1 1 1 2 2 2 2 2 ...
 $ irrig   : int  1 2 3 4 5 1 2 3 4 5 ...
 $ inoc    : Factor w/ 5 levels "A","B","C","cntrl",..: 1 2 5 3 4 5 4 2 1 3 ...
 $ yield   : num  33.8 33.7 30.4 32.7 24.4 37 28.8 33.5 34.6 33.4 ...
 $ shadeLev: Factor w/ 3 levels "full","part",..: 1 1 1 1 1 2 2 2 2 2 ...</code></pre></li>
<li><p>Commit your changes to AlfAnalysis.</p>
<p>There is no code associated with the solution to this problem.</p></li>
</ol>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres.html">Data presentation</a> article.</p>
<p>Last Revised: 2/9/2015</p>
</div>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for researchers: Data presentation</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#include-r-scripts-in-rmd-files">Include R scripts in Rmd files</a></li>
<li><a href="#metadata-options">Metadata options</a></li>
<li><a href="#including-text-results">Including text results</a></li>
<li><a href="#table-and-graph-numbering-in-r-markdown">Table and graph numbering in R Markdown</a></li>
<li><a href="#table-formatting">Table formatting</a></li>
<li><a href="#xtable">xtable()</a></li>
<li><a href="#presentation-of-graphs">Presentation of graphs</a></li>
<li><a href="#htlm-documents">HTLM documents</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article introduces sourcing R script files, formatting character variables, and formatting tables and graphs for documents. This article also will expand on the use of the R Markdown commands introduced in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown.html">R Markdown</a> article.</p>
<p>The R chunks used in this article contain some option lists which are rather long. These chunk options can not be split across multiple lines. As you read this article in your web browser, you will see that the long chunk options extend beyond their display box. There is a slider bar at the bottom of these display boxes which will allow you to scroll to the right to see the remainder of the chunk option list.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercise will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Open your SalAnalysis script.</li>
<li>Run all the commands in SalAnalysis script.</li>
</ul>
<p>We will use markdown to document some of the results from our evaluation of the Salaries dataset. Use the following steps to create a new markdown file and get it ready for use.</p>
<ul>
<li>Open a new R markdown file with the Default Output Format of PDF. Use the title "Analysis of Professor Salaries".</li>
<li>Save the markdown file as SalDoc</li>
<li>Delete the example text and code (the text following the metadata section.)</li>
<li><p>Where the example text was, enter</p>
<pre><code>## Data overview


The Salaries data set is the basis for this analysis.
It is a sample of academic salaries of Professors at
United States universities from the 2008-9 school year.
The salary information was collected to monitor the
difference in salaries between men and women.</code></pre></li>
<li><p>Knit the markdown file</p></li>
<li><p>The pdf previewer will open and the text you entered will be displayed.</p></li>
</ul>
</div>
<div class="section level2" id="include-r-scripts-in-rmd-files">
<h2>Include R scripts in Rmd files</h2>
<p>We want the markdown document to make use of your SalAnalysis code. There are two general approaches which can be used to include code. The first is to pull only the parts of the R code which are needed into the markdown file. This makes the markdown file run efficiently. The drawback is that you must either make another copy of part of your code or you must break your script into smaller scripts so that just the needed script files can be included in the markdown. The other approach is to include all of your script in your Markdown file. This is the easiest approach and is the approach we will use.</p>
<p>The R function to run code from another file is the source() function.</p>
<ul>
<li><p>Syntax and use of the <strong>source()</strong> function</p>
<p>source(<em>file</em>)</p>
<p>Returns all commands and results from the <em>file</em> to the console by default.</p>
<p>The <em>file</em> parameter here is like the file parameter in read.table().</p>
<p>The source() function can also be used to include a script within another script.</p></li>
</ul>
<p>We do not want to see the code or any of its output right here in the document. We will use the following R chunk options to source the file quietly.</p>
<pre><code>echo=FALSE, results="hide", message=FALSE, warning=False, fig.show="hide"</code></pre>
<p>Using source() with these options will allow the R Markdown session to have access to all data objects and functions defined and loaded by the included script without showing any of this information in the document.</p>
<ul>
<li><p>Enter the following lines right after the metadata section of SalDoc (before the text starts.)</p>
<pre><code>```{r, echo=FALSE, results="hide", message=FALSE, warning=FALSE, fig.show="hide"}  
source("SalAnalysis.R")  
```</code></pre></li>
<li><p>Knit the document again to make sure your script runs. The document should be generated again. There should be no change in the document. It should look the same as it did after the prior knit.</p>
<p>If your script does not run, use the Clear Workspace function in the Sessions drop down menu. This will clear the session of the variables you have already loaded. This will not close your session or any of your files. Then source your script in the console to find your error.</p></li>
</ul>
</div>
<div class="section level2" id="metadata-options">
<h2>Metadata options</h2>
<p>Metadata options allow for some control over how your final document is created.</p>
<p>We will set several pandoc and output options. Pandoc is the program which creates the .pdf file from the .md file created during knit. The pandoc options control how the pdf file is created. The output options control how the md file is created. These two processes together make up the knit process for a pdf target document.</p>
<ul>
<li><p>Pandoc options</p>
<p>fontsize: <em>size</em>pt<br/>
geometry: margin=<em>mar</em>in<br/>
documentclass: <em>type</em></p>
<p>Fontsize sets the size of the font to <em>size</em>.</p>
<p>The geometry: margin options sets all page margins to <em>mar</em>.</p>
<p>Documentclass: sets the <em>type</em> of pdf document to be created. We will use "article" for the type.</p></li>
<li><p>Output options</p>
<pre><code>fig_caption: yes</code></pre>
<p>Fig_caption enables the display of figure captions in the document. The default for fig-caption is no.</p></li>
<li><p>Replace the metadata section with the following.</p>
<pre><code>---
title: "Analysis of Professor Salaries"
fontsize: 12pt
geometry: margin=1in
documentclass: article

output: 
  pdf_document:
    fig_caption: yes
---</code></pre></li>
<li><p>Knit the document again to check for errors. You should see the font size increase in the viewer. No other changes should be noticeable at this point in the development of the document.</p></li>
</ul>
</div>
<div class="section level2" id="including-text-results">
<h2>Including text results</h2>
<p>In the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown.html">R Markdown</a> article we have already seen how to include text results from the console in line. The text we need in our document may not be as readily available as the examples from the R Markdown lesson. Creating character variables to use as text is a common solution. The paste() function is a useful tool for putting together character variables. The paste() function is also useful for creating and modifying variables during data preparation.</p>
<p>The paste function concatenates a set of character elements into one character element/scalar.</p>
<ul>
<li><p>Syntax and use of the <strong>paste()</strong> function</p>
<p>paste(<em>char1</em>, <em>char2</em>, ..., <em>charn</em>, sep=<em>sepChar</em>, collapse=<em>colChar</em>)</p>
<p>Returns a scalar or vector of type character.</p>
<p>The <em>char1</em>, <em>char2</em> through <em>charn</em> are scalars or vectors which can be coerced to character. If one of the <em>char</em> parameters is a vector, all the <em>char</em> parameters are coerced to vectors of the same length. Any scalar will be repeated for each element of the vector.</p>
<p>The <em>sepChar</em> is a character scalar which is placed between each of the <em>char</em> elements. If <em>char</em> are vectors, then <em>sepChar</em> is placed between each of the elements in a row across the vectors. The default value for <em>sep</em> is " ", one space.</p>
<p>The <em>colChar</em> is used when <em>char</em> are vectors. The character of <em>colChar</em> will be placed between the concatenated rows. This results in a character scalar being returned. The default is NULL, no collapsing of the rows. If the rows of the vector are not collapsed, the vector of characters is returned.</p></li>
</ul>
<p>We are going to use paste() to concatenate a vector of names. Since we want the names to read as a list in the document we will collapse the names using ", " ( a comma followed by a space) as the separator. The last element in a list should have " and" before it instead of ", ". To achieve this, we will collapse all but the last element in the vector and add that element after the ", and". We will create character vectors for the set of names we want to use.</p>
<ul>
<li><p>Enter the following text in the SalDoc file after the current paragraph. This means that there should be at least one blank line after the existing paragraph of text in the SalDoc file.</p>
<pre><code>```{r, echo=FALSE, results="hide", message=FALSE, warning=FALSE, fig.show="hide"}  
vars &lt;- colnames(SalariesIn)  
dscplNames &lt;- levels(salary$dscpl)
rankNames &lt;- levels(salary$rank)
```

The data set included `r length(salary$salary)` professors.
The variables included in the data set are 
`r paste(vars[-length(vars)],collapse=", ")`,
and `r vars[length(vars)]`. 
The sampled professors had ranks of
`r paste(rankNames[-length(rankNames)],collapse=", ")`,
and `r rankNames[length(rankNames)]`
and were from disciplines 
`r paste(dscplNames[-length(dscplNames)],collapse=", ")`
and `r dscplNames[length(dscplNames)]`.</code></pre></li>
<li><p>The code chunk created the three vectors of names we are interested in. This chunk produces no text in the SalDoc.</p></li>
<li><p>The paste(vars[-length(vars)],collapse=", ") code uses the first <em>n</em>-1 elements of the vector <em>vars</em>. It returns a character by collapsing the elements of the vector using collapse.</p></li>
<li><p>Knit the document.</p></li>
<li><p>The new paragraphs should look the the following</p>
<p>The data set included 397 professors. The variables included in the data set are rank, discipline, yrs.since.phd, yrs.service, sex, and salary. The sampled professors had ranks of AsstProf, AssocProf, and Prof and were from disciplines A and B.</p></li>
</ul>
</div>
<div class="section level2" id="table-and-graph-numbering-in-r-markdown">
<h2>Table and graph numbering in R Markdown</h2>
<p>R Markdown does not have commands to provide captions or numbering for tables and figures. Remember that one of the advantage of Markdown is that it is easy to use due to its small command set. Features such as numbering tables and figures would complicate the syntax of Markdown.</p>
<p>There are several methods for referencing table and figure numbers in the text. The first is to enter the numbers as text. Although this approach is easy, it is error prone as tables get added, deleted, or moved within a document. Another approach is to write and use R functions to automatically number the tables and figures and another function to reference them. Although this is the most like to be error free, it is complicated to implement. The approach we are going to take balances the above two approaches.</p>
<p>We recommend the use of a code chunk at the beginning of the file which assigns a table or figure number to a variable for each table and figure. The variable can then be used in the document text. If a figure or table is added, deleted, or moved there is only one place in the document that needs to be edited to change the numbering. The rest of the document is generated from these variables. While this approach still requires some manual maintenance, the effort is fairly small. This solution is suitable for modest size documents, such as for articles. More involved documents are best done using a formatting program such as LaTeX.</p>
<p>The tables and figures that will be used in our document have already been determined. We can enter the code chunk listing all the table and figure variables now. Typically the variables for the table and figure numbers would be added as the tables are created.</p>
<ul>
<li><p>Add the following R chunk after the metadata section and before other code chunks or text.</p>
<pre><code>```{r, echo=FALSE}
#
# table numbers
#
tabNumRankByDscpl &lt;- 1

#
# figure numbers
#
FigNumYrsFacRank &lt;- 1
FigNumBoxDscplFacRank &lt;- 2
FigNumGenYrsFacDscpl &lt;- 3
FigNumBoxGenRankFacDscpl &lt;- 4
```</code></pre></li>
<li><p>Knit the document to check for errors.</p></li>
<li><p>There should be no change in the document from this code chunk being added. We'll use variables later.</p></li>
</ul>
</div>
<div class="section level2" id="table-formatting">
<h2>Table formatting</h2>
<p>The <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl.html">Data exploration</a> article introduced the table() and aggregate() functions. The presentation tools that are introduced below can be applied to the results from table(), aggregate(), or any other object which is two dimensional.</p>
<div class="section level3" id="table-totals">
<h3>Table totals</h3>
<p>We will include in SalDoc a table of the count of professors by rank and discipline. We will add the totals for each rank and discipline to the table which is produced by table(). We will use the rowSums() and colSums() functions.</p>
<ul>
<li><p>Syntax and use of <strong>rowSums()</strong> and <strong>colSums()</strong> functions.</p>
<p>rowSums(<em>X</em>)<br/>
colSums(<em>X</em>)</p>
<p>Returns a vector of the sums of either rows or columns of <em>X</em>.</p>
<p><em>X</em> is typically two dimensional object. These functions can be used on objects with dimensions higher than 2.</p>
<p>There are similar functions for the means of row and column.</p></li>
<li><p>Add the following commands to your SalAnalysis script.</p>
<pre><code>tempTab &lt;- table(salary$rank,salary$dscpl)
rankByDscpl &lt;- as.data.frame.matrix(tempTab)
rankByDscpl$Totals &lt;- rowSums(tempTab)
rankByDscpl["Totals",] &lt;- colSums(rankByDscpl)
rankByDscpl</code></pre></li>
<li><p>The table() function creates the two dimensional object of type table. The as.data.frame.matrix() changes the type to a data.frame. The colSums() includes the column with the row totals, thus creating a cumulative total element.</p></li>
<li><p>Run these commands from the script.</p></li>
<li><p>The following will be displayed on the console</p>
<pre><code>            A   B Totals
AsstProf   24  43     67
AssocProf  26  38     64
Prof      131 135    266
Totals    181 216    397</code></pre></li>
<li><p>The table is now ready to be formatted for the document.</p></li>
</ul>
</div>
<div class="section level3" id="kable">
<h3>kable()</h3>
<p>There are two functions we will look at for formatting tables. The first is the kable() function. This function will produce markdown formatting for tables. This formatting, like all of markdown, is basic, but kable() formatted tables will be appropriate for many documents.</p>
<ul>
<li><p>Syntax and use of the <strong>kable()</strong> function</p>
<pre><code>kable(*object*,  
      format=*formatting*,  
      digits=*num*,  
      align=*colAlgn*,  
      caption=*cap*  
      )</code></pre>
<p>Returns plain text. The plain text includes the formatting commands that will be processed by R Markdown to produce the table in the formatted document.</p>
<p><em>tab</em> is an object with a 2 dimensional structure. The contents of the <em>tab</em> become the displayed table.</p>
<p>The <em>object</em> parameter is the 2 dimensional structure from which the table with be made.</p>
<p><em>formatting</em> specifies what formatting command set to use. The values it can take are "latex", "html", and "markdown". This parameter is not needed when kable is used in a knit Rmd document. Knitr manages this parameter for you.</p>
<p>Digits is an optional parameter. <em>num</em> is the maximum number of digits for numeric columns. It can also be a vector containing the column widths for all columns.</p>
<p>Align is an optional parameter. <em>colAlgn</em> is a vector of type character. Each element is "r", "c", or "l" for right, center, or left alignment. The vector has length equal to the number of columns of data in the table.</p>
<p>Caption is an optional parameter. <em>cap</em> is a character scalar. The tables are not automatically numbered in HTML documents.</p></li>
</ul>
<p>As an example we will use kable() to format the rankByDscpl data.frame.</p>
<ul>
<li><p>Add the following code at the bottom of the SalDoc.</p>
<pre><code>```{r, echo=FALSE}
capRankByDscpl &lt;- "Count of Professors by discipline and Rank"
kable(rankByDscpl, caption = capRankByDscpl)
```</code></pre></li>
<li><p>Knit the SalDoc.</p></li>
<li><p>The following table will follow the last paragraph in the pdf document.</p>
<table>
<caption>Table 1: Count of Professors by discipline and Rank</caption>
<thead>
<tr class="header">
<th align="left"></th>
<th align="right">A</th>
<th align="right">B</th>
<th align="right">Totals</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">AsstProf</td>
<td align="right">24</td>
<td align="right">43</td>
<td align="right">67</td>
</tr>
<tr class="even">
<td align="left">AssocProf</td>
<td align="right">26</td>
<td align="right">38</td>
<td align="right">64</td>
</tr>
<tr class="odd">
<td align="left">Prof</td>
<td align="right">131</td>
<td align="right">135</td>
<td align="right">266</td>
</tr>
<tr class="even">
<td align="left">Totals</td>
<td align="right">181</td>
<td align="right">216</td>
<td align="right">397</td>
</tr>
</tbody>
</table></li>
<li><p>In your pdf document the table will have different formatting than in this html document and the caption will be below the table.</p></li>
</ul>
</div>
</div>
<div class="section level2" id="xtable">
<h2>xtable()</h2>
<p>The xtable() function, like kable(), returns text with the formatting for the table. Xtable() provides LaTeX or HTML formatting commands, but not Markdown table commands. This allows xtable() to have greater control of the formatting of the table.</p>
<p>Both kable() and xtable() return plain text with formatting commands. R Markdown and kable() are built to work together. R Markdown passes the kable results directly into the .md file. To get xtable() results passed directly into the .md file, the "asis" chunk option needs to be set to TRUE.</p>
<ul>
<li><p>This would look like</p>
<p>```{r, results="asis"}</p></li>
<li><p>Other chunk options my be included as needed.</p></li>
</ul>
<p>We will use the print.xtable() function with xtable() to create the table in our generated document. The print() function can be used in place of print.xtable(). We will use print.xtable() to make it clear which print function we are using and to make it easier to use help() on it. There are options for print.xtable() which are needed for formatting the xtable() tables.</p>
<ul>
<li><p>The syntax and use of the <strong>xtable()</strong> function.</p>
<pre><code>xtable(*object*, 
       digits=*num*, 
       align=*colAlgn*, 
       caption=*cap*, 
       display=*dis*
       )</code></pre>
<p>Returns plain text. The plain text includes the formatting commands to produce the table in the formatted document.</p>
<p>The <em>object</em> parameter is the 2 dimensional structure from which the table with be made.</p>
<p>Digits is an optional parameter. <em>Num</em> is the maximum number of digits for numeric columns. It can also be a vector of the column widths for all columns.</p>
<p>Align is an optional parameter. <em>ColAlgn</em> is a vector of type character. Each element is "r", "c", or "l" for right, center, or left alignment. The vector has length equal to the number of columns of data in the table. Vertical lines can be included in the table by including "|" in the list of alignment characters where the vertical line are to be placed.</p>
<p>Caption is an optional parameter. <em>Cap</em> is a character scalar. The tables are not automatically numbered in HTML documents.</p>
<p>Display is an optional parameter. The common values for <em>dis</em> are "s" for character, "d" for integers, "f" for floating point.</p></li>
<li><p>The syntax and use of the <strong>print.xtable()</strong> function.</p>
<pre><code>print.xtable(*xtable*,
             type=*formatting*,
             caption.placement=*loc*, 
             hline.after=*lines*,
             comment=*logical* 
             )</code></pre>
<p>Returns text. The text is the source formatting code and table content.</p>
<p><em>formatting</em> is either "html" or "latex". There is no support for R Markdown tables. Remember Markdown consist of a small set of formatting commands. Controlling the formatting of tables typically requires more control than is simply done with markdown.</p>
<p>Caption.placement is optional. The value of <em>loc</em> is either "top" or "bottom".</p>
<p>Hline.after is optional. The vector <em>lines</em> contains the numbers of the rows which will have horizontal lines after them. Use -1 to produce a line before row 0.</p>
<p>comment is optional. You will need this set to FALSE to prevent extra text from being displayed in your document.</p></li>
</ul>
<p>Since one of our goals for using R markdown is to have source code which can easily switch target types, such as pdf (done using Latex) or html, we will make an R variable to use for the type of formatting.</p>
<ul>
<li><p>Insert the following R command in the code chunk which has the table and figure number variables. This keeps all the R variables we need to manage for this document together at the top of the source file.</p>
<pre><code>targetType &lt;- "latex"  </code></pre></li>
</ul>
<p>We will now use xtable() to format the rankByDscpl data.frame, replacing the kable() version.</p>
<ul>
<li><p>Add the following code right after the last paragraph in the document. Add the text with no blank lines so that it is a continuation of the last paragraph.</p>
<pre><code>The numbers of professors from each of these groups is
displayed in table `r tabNumRankByDscpl`.
There are about 20 percent more members of discipline B
included in the sample than of discipline A.
The table shows there are a greater proportion of Discipline B 
members with a rank of associate or assistant professor.

```{r, echo=FALSE, results="asis"}
xtab &lt;- xtable(rankByDscpl,
                   caption="Count of Professors by discipline and Rank",
                   display=c("s","d","d","d"),
                   align="|r|rr|r|"
                   )
print(xtab, 
      type=targetType, 
      caption.placement="top", 
      hline.after=c(-1,0,3,4),
      comment=FALSE
      )
```</code></pre></li>
<li><p>Remove the code chunk with the kable() function.</p></li>
<li><p>Knit SalDoc</p></li>
<li><p>The updated paragraph should look the the following</p>
<p>The data set included 397 professors. The variables included in the data set are rank, discipline, yrs.since.phd, yrs.service, sex and salary. The sampled professors had ranks of AsstProf, AssocProf and Prof and were from disciplines A and B. The numbers of professors from each of these groups is displayed in table 1. There are about 20 percent more members of discipline B included in the sample than of discipline A. The table shows there are a greater proportion of Discipline B members with a rank of associate or assistant professor.</p>
<table border="1">
<caption align="top">
Table 1: Count of Professors by discipline and Rank
</caption>
<tr>
<th>
</th>
<th>
A
</th>
<th>
B
</th>
<th>
Totals
</th>
</tr>
<tr>
<td align="right">
AsstProf
</td>
<td align="right">
24
</td>
<td align="right">
43
</td>
<td align="right">
67
</td>
</tr>
<tr>
<td align="right">
AssocProf
</td>
<td align="right">
26
</td>
<td align="right">
38
</td>
<td align="right">
64
</td>
</tr>
<tr>
<td align="right">
Prof
</td>
<td align="right">
131
</td>
<td align="right">
135
</td>
<td align="right">
266
</td>
</tr>
<tr>
<td align="right">
Totals
</td>
<td align="right">
181
</td>
<td align="right">
216
</td>
<td align="right">
397
</td>
</tr>
</table></li>
<li><p>The formatting of the table and caption of the table will be a little different in the pdf document than in this HTML document.</p></li>
</ul>
</div>
<div class="section level2" id="presentation-of-graphs">
<h2>Presentation of graphs</h2>
<p>The graphs we produced using ggplot in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl.html">Data exploration</a> article are ready to be published. We will apply additional formatting to fit them into the final document. This formatting will size them for the document and control the amount of empty space around them.</p>
<p>The margins around a figure are controlled with the plot.margin parameter of the theme plot element. We will shrink the amount of white space around the plots.</p>
<ul>
<li><p>The following function is added to the ggplot to shrink the white space.</p>
<pre><code>theme(plot.margin=unit(c(.1,.5,0,.5),"lines"))</code></pre></li>
</ul>
<p>We will be adding four graphs to the SalDoc. The code to create these graphs is provided below.</p>
<ul>
<li><p>Add the following commands to your SalAnalysis script.</p>
<pre><code>plotYrsFacRank &lt;- ggplot(data=salary, aes(x=yrSer, y=salary)) +
  geom_point(aes(color=dscpl)) +
  facet_wrap(~rank) +
  theme_bw() +
  ggtitle("Salaries for each discipline") +
  theme( plot.title=element_text(vjust=1.0) ) +
  xlab("Years of service") +
  theme( axis.title.x = element_text(vjust=-.25) ) +
  ylab("Salary in $1000") +
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(strip.background = element_rect(fill = "White")) +
  theme(plot.margin=unit(c(.1,.5,.15,.5),"lines")) +
  theme(legend.position = "right")

boxDscplFacRank &lt;- ggplot(data=salary, aes(x=dscpl, y=salary)) +
  geom_boxplot(aes(color=dscpl)) +
  facet_wrap(~rank) +
  theme_bw() +
  ggtitle("Salary summary by discipline and rank") +
  theme( plot.title=element_text(vjust=1.0) ) +
  xlab("Years of service") +
  theme( axis.title.x = element_text(vjust=-.25) ) +
  ylab("Salary in $1000") +
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(strip.background = element_rect(fill = "White")) +
  theme(plot.margin=unit(c(.1,.5,.15,.5),"lines")) +
  theme(legend.position = "right") 

plotYrsFacDscpl &lt;- ggplot(data=salary, aes(x=yrSer, y=salary)) +
  geom_point(aes(color=sex)) +
  facet_wrap(~dscpl) +
  theme_bw() +
  ggtitle("Salaries for each gender") +
  theme( plot.title=element_text(vjust=1.0) ) +
  xlab("Years of service") +
  theme( axis.title.x = element_text(vjust=-.25) ) +
  ylab("Salary in $1000") +
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(strip.background = element_rect(fill = "White")) +
  theme(plot.margin=unit(c(.1,.5,.1,.5),"lines")) +
  theme(legend.position = "right")

boxGenRankFacDscpl &lt;- ggplot(data=salary, 
                             aes(x=rank, y=salary)) +
  geom_boxplot(aes(color=sex)) +
  facet_wrap(~dscpl) +
  theme_bw() +
  ggtitle("Salary summary by gender and discipline") +
  theme( plot.title=element_text(vjust=1.0) ) +
  xlab("Rank of professor") +
  theme( axis.title.x = element_text(vjust=-.25) ) +
  theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
  ylab("Salary in $1000") +
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(strip.background = element_rect(fill = "White")) +
  theme(plot.margin=unit(c(.1,.5,0,.5),"lines")) +
  theme(legend.position = "right")</code></pre></li>
</ul>
<p>The display size of a plot in the target document is controlled through the R chunk options. These chunk options were provided in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown.html">R Markdown</a> article. We will use fig.cap, fig.height, and fig.width to provide figure captions and control the size of the figure.</p>
<p>Figure captions will not be displayed in the target document unless the fig_caption metadata option is set to "yes". This was already done for the SalDoc.</p>
<ul>
<li><p>Add the following code after the table R chunk in SalDoc.</p>
<pre><code>The relationship between years of service and salary can be
seen in figure `r FigNumYrsFacRank`.
The panels seem to indicate that for associate and assistant 
professors most of the members of discipline B have higher 
salaries than most of the members of discipline A, at the
same rank.
The box plots, figure `r FigNumBoxDscplFacRank`, also supports 
this observation.

```{r, echo=FALSE, fig.cap="Salaries  by discipline and rank", fig.height=2.75, fig.width=5.5 } 
plotYrsFacRank
```

```{r, echo=FALSE, fig.cap="Salaries summarized by discipline and rank", fig.height=2.75, fig.width=5.5 } 
boxDscplFacRank
```        

The plots of salaries with color indicators for gender, figure
`r FigNumGenYrsFacDscpl`, indicates there may be a gender
difference in salary in discipline A.
The box plots in figure `r FigNumBoxGenRankFacDscpl`
indicate that the difference between the genders in
discipline A is greatest at the rank of assistant professor.

The plots of salaries with color indicators for gender, figure
`r FigNumGenYrsFacDscpl`, indicates there may be a gender
difference in salary in discipline A.
The box plots in figure `r FigNumBoxGenRankFacDscpl` indicate
that the difference between the genders in discipline A is 
greatest at the rank of assistant professor.

```{r, echo=FALSE, fig.cap="Salaries by gender and discipline", fig.height=2.75, fig.width=5.5 } 
plotYrsFacDscpl
```

```{r, echo=FALSE, fig.cap="Salaries summarized by gender and discipline", fig.height=3, fig.width=5.5 } 
boxGenRankFacDscpl
```</code></pre></li>
<li><p>Knit SalDoc</p></li>
</ul>
<p>The complete SalDoc.Rmd file can be seen at <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres_SalDoc.html">SalDoc.Rmd</a>.</p>
<p>Commit your changes to SalAnalysis and SalDoc files.</p>
</div>
<div class="section level2" id="htlm-documents">
<h2>HTLM documents</h2>
<p>Most of the techniques from this article work the same way for HTML documents. The most significant exception is that captions for tables and figures are not supported through R Markdown. There are also a few differences in tables generated by xtable() due to the differences between HTML and LaTex.</p>
<p>Table and figure captions can be created in HTML documents by writing the caption as its own paragraph and starting the paragraph with "Table" or "Figure". The table or figure number can be added using inline R code just as was done in the references done above.</p>
<ul>
<li><p>Example of a table caption in HTLM.</p></li>
<li><p>The following R markdown code</p>
<pre><code>**Table `r tabNumRankByDscpl`:** My caption text.</code></pre></li>
<li><p>Results in the following displayed in the document</p>
<p><strong>Table 1:</strong> My caption text.</p></li>
</ul>
<p>This will not center the caption. Although this solution is less than ideal, the resulting document is quite usable and it correctly identifies the tables and figures.</p>
<p>There is a new package, called printr, which will support captions for tables. This package is not in CRAN at the time of the writing of this document. R Markdown is still evolving. There will likely be other solutions which will make R Markdown useful for a wider set of documents in the future.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Regression.html">Regression (ordinary least squares)</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl.html">Data exploration</a></p>
<p>Last Revised: 8/26/2015</p>
</div>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for researchers: Final SalDoc</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<p>This article has the completed SalDoc.Rmd file. The material explaining the construction of this table are contained in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres.html">Data presentation</a> article.</p>
<p>The R chunk options can not be split across multiple lines. These chunk options extend beyond the display box. There is a slider bar at the bottom of the display box which will allow you to scroll to the right to see the remainder of the content.</p>
<ul>
<li><p>The completed SalDoc.Rmd files should look similar to the following</p>
<pre><code>---
title: "Analysis of Professor Salaries"
fontsize: 12pt
geometry: margin=1in
documentclass: article

output: 
  pdf_document:
    fig_caption: yes
---

```{r, echo=FALSE}
targetType &lt;- "latex"

#
# table numbers
#
tabNumRankByDscpl &lt;- 1

#
# figure numbers
#
FigNumYrsFacRank &lt;- 1
FigNumBoxDscplFacRank &lt;- 2
FigNumGenYrsFacDscpl &lt;- 3
FigNumBoxGenRankFacDscpl &lt;- 4
```

```{r, echo=FALSE, results="hide", message=FALSE, warning=FALSE, fig.show="hide"}  
source("SalAnalysis.R")  
```

## Data overview


The Salaries data set is the basis for this analysis.
It is a sample of academic salaries of Professors at
United States universities from the 2008-9 school year.
The salary information was collected to monitor the
difference in salaries between men and women.

```{r, echo=FALSE, results="hide", message=FALSE, warning=FALSE, fig.show="hide"}  
vars &lt;- colnames(SalariesIn)  
dscplNames &lt;- levels(salary$dscpl)
rankNames &lt;- levels(salary$rank)
```

The data set included `r length(salary$salary)` professors.
The variables included in the data set are 
`r paste(vars[-length(vars)],collapse=", ")`,
and `r vars[length(vars)]`. 
The sampled professors had ranks of
`r paste(rankNames[-length(rankNames)],collapse=", ")`,
and `r rankNames[length(rankNames)]`
and were from disciplines 
`r paste(dscplNames[-length(dscplNames)],collapse=", ")`
and `r dscplNames[length(dscplNames)]`.
The numbers of professors from each of these groups is
displayed in table `r tabNumRankByDscpl`.
There are about 20 percent more members of discipline B
included in the sample than of discipline A.
The table shows there are a greater proportion of Discipline B 
members with a rank of associate or assistant professor.

```{r, echo=FALSE }
tempTab &lt;- table(salary$rank,salary$dscpl)
rankByDscpl &lt;- as.data.frame.matrix(tempTab)
rankByDscpl$Totals &lt;- rowSums(tempTab)
rankByDscpl["Totals",] &lt;- colSums(rankByDscpl)
rankByDscpl
```

```{r, echo=FALSE, results="asis"}
xtab &lt;- xtable(rankByDscpl,
                   caption="Count of Professors by discipline and Rank",
                   display=c("s","d","d","d"),
                   align="|r|rr|r|"
                   )
print(xtab, 
      type=targetType, 
      caption.placement="top", 
      hline.after=c(-1,0,3,4),
      comment=FALSE
      )
```

The relationship between years of service and salary can be
seen in figure `r FigNumYrsFacRank`.
The panels seem to indicate that for associate and assistant 
professors most of the members of discipline B have higher 
salaries than most of the members of discipline A, at the
same rank.
The box plots, figure `r FigNumBoxDscplFacRank`, also supports 
this observation.

```{r, echo=FALSE, fig.cap="Salaries  by discipline and rank", fig.height=2.75, fig.width=5.5 } 
plotYrsFacRank
```

```{r, echo=FALSE, fig.cap="Salaries summarized by discipline and rank", fig.height=2.75, fig.width=5.5 } 
boxDscplFacRank
```        

The plots of salaries with color indicators for gender, figure
`r FigNumGenYrsFacDscpl`, indicates there may be a gender
difference in salary in discipline A.
The box plots in figure `r FigNumBoxGenRankFacDscpl`
indicate that the difference between the genders in
discipline A is greatest at the rank of assistant professor.

The plots of salaries with color indicators for gender, figure
`r FigNumGenYrsFacDscpl`, indicates there may be a gender
difference in salary in discipline A.
The box plots in figure `r FigNumBoxGenRankFacDscpl` indicate
that the difference between the genders in discipline A is 
greatest at the rank of assistant professor.

```{r, echo=FALSE, fig.cap="Salaries by gender and discipline", fig.height=2.75, fig.width=5.5 } 
plotYrsFacDscpl
```

```{r, echo=FALSE, fig.cap="Salaries summarized by gender and discipline", fig.height=3, fig.width=5.5 } 
boxGenRankFacDscpl
```</code></pre></li>
</ul>
<p>Return to: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres.html">Data presentation</a></p>
<p>Last Revised: 2/16/2015</p>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for researchers: Diagnostics</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#review-of-model-from-regression-ols-article">Review of Model from Regression OLS article</a></li>
<li><a href="#model-form-diagnostics">Model form diagnostics</a></li>
<li><a href="#linearity-in-each-variable-diagnostics">Linearity in each variable diagnostics</a></li>
<li><a href="#independence">Independence</a></li>
<li><a href="#normality-of-residuals-diagnostics">Normality of residuals diagnostics</a></li>
<li><a href="#sensitivity-to-data-diagnostics">Sensitivity to data diagnostics</a></li>
<li><a href="#examining-leverage-and-influence-observations">Examining leverage and influence observations</a></li>
<li><a href="#multicollinearity">Multicollinearity</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to some of the functions commonly used to create model diagnostics. The article includes the use of the reshape() and merge() functions in preparing diagnostics. These two functions are also useful in preparing data sets.</p>
<p>Model diagnostics are typically done as models are being constructed. Model construction and diagnostics were separated into separate articles to provide a focus on the each of these important areas of modelling data. We recommend doing model diagnostics as models are being constructed.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercise will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Open your SalAnalysis script.</li>
<li>Run all the commands in SalAnalysis script.</li>
</ul>
</div>
<div class="section level2" id="review-of-model-from-regression-ols-article">
<h2>Review of Model from Regression OLS article</h2>
<p>We will start our diagnostics using the model that we fit in the Regression (OLS) article. This model was saved as the outSin3 model object. All of the model terms, other than sex, are significant using the criteria of a nested F-test. The coefficients of the outSin3 model are shown below.</p>
<pre><code>                 Estimate  Std. Error   t value     Pr(&gt;|t|)
(Intercept)   60.37876235 5.329187300 11.329826 6.450180e-26
dscplB        14.19990425 2.331060758  6.091606 2.682402e-09
sexMale        5.23359783 3.860948265  1.355521 1.760360e-01
rankAssocProf  5.55108100 5.033353169  1.102859 2.707683e-01
rankProf      34.10087790 6.184018504  5.514356 6.382629e-08
yrSin          1.51262460 0.565502985  2.674830 7.791372e-03
yrSinSqr      -0.02503732 0.009508336 -2.633196 8.794875e-03</code></pre>
</div>
<div class="section level2" id="model-form-diagnostics">
<h2>Model form diagnostics</h2>
<p>An OLS model is assumed to be linear with respect to the predicted value with constant variance. This is typically checked visually with a plot of the residuals to the fitted values. The model form is accepted as correct if there are no observable change in the variance of the residuals (constant variance) and there is no pattern to the residuals (linear with respect to the predicted values.) The plot() function provides a residual plot for the model.</p>
<ul>
<li><p>Syntax and use of the <strong>plot()</strong> function for model objects.</p>
<p>plot(<em>modObj</em>, which=<em>plotId</em>)</p>
<p>There is no returned object. Diagnostics plots are generated by this function.</p>
<p><em>plotId</em> can take values from 1 through 6. The three plots we will examine are, 1 for a residual plot, 2 for the normal q-q of residuals, and 5 for the residual versus leverage plots. The default for <em>plotId</em> is c(1,2,3,5). When there are multiple plots produced from one call to plot, you will be prompted in the console pane to hit enter for each of these plots. This is to allow you time to view and possibly save each plot before the next plot is displayed.</p></li>
</ul>
<p>This set of prepared diagnostic plots provides an initial look at all the major model assumptions and is a good place to start the evaluation of the fit of a model.</p>
<p>The following code produces the residual plot.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>plot(outSin3, which=1)</code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-4-1.png" title="" width="672"/></p></li>
</ul>
<p>The residual plot shows increasing residual variance with increases in predicted salary. This is a concern with the form of our model.</p>
<div class="section level3" id="correcting-the-model-form">
<h3>Correcting the model form</h3>
<p>What we have learned from this first diagnostic check is that the model we built in the last article is not appropriate. We will need to correct the model form.</p>
<p>There are many ways to correct the form of a model. We will correct the issues with the inconsistent variance using a weighted fit. We will use the assumption that there is a known variance for each rank and discipline groups. While this does not appear to fully explain the inconsistency in variance in our current model, the majority of the variance differences can be attributed to the group. We will estimate the known variance without accounting for this in our results. This short-cut of not correcting for the estimates of group variance and the simplifying assumption of the group variance being known are used in this article to allow the article to focus on the diagnostics. As with all models, the user is expected to understand the statistical theory for the model and use the model appropriately.</p>
<p>The variance of the groups are calculated using the aggregate() function. The data.frame returned from aggregate() has a row for each group and we need a value for each observation in salary. The merge() function can be used to add a variable to a data.frame when the new data does not have the same number of row as the data set.</p>
<ul>
<li><p>Syntax and use of the <strong>merge()</strong> function.</p>
<p>merge(<em>data1</em>,<em>data2</em>,by=<em>col</em>)</p>
<p>Returns a data.frame.</p>
<p>This function merges <em>data1</em> and <em>data2</em> into one data.frame.</p>
<p><em>col</em> is the columns to use for the merge. The default is to use all columns in <em>data1</em> and <em>data2</em> which have the same name.</p></li>
</ul>
<p>The following code calculates the group variances and merges the variance variable with the salary data.frame. The weight variable is then added and the model is then fit with weights.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>wGrp &lt;- aggregate(list(var=salary$salary),
          by=list(rank=salary$rank,dscpl=salary$dscpl),
          FUN=var
          )        # find variance of groups

salWeight &lt;- merge(salary,wGrp)   # add var to data set
salWeight$wght &lt;- (1/salWeight$var) /  mean((1/salWeight$var))

salMod &lt;- lm(salary~dscpl + sex + rank + yrSin + yrSinSqr,
             weights=wght,
             data=salWeight
             )
summary(salMod)$coefficients             </code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>                  Estimate  Std. Error    t value      Pr(&gt;|t|)
(Intercept)   70.851719534 2.128797183 33.2825128 5.242589e-116
dscplB        12.207552540 1.232182099  9.9072633  8.693466e-21
sexMale        2.135076469 1.611549370  1.3248595  1.859935e-01
rankAssocProf 13.386841228 2.194176989  6.1010763  2.541256e-09
rankProf      47.835983162 3.339265328 14.3253017  1.075425e-37
yrSin          0.161353128 0.290856911  0.5547509  5.793831e-01
yrSinSqr      -0.005143292 0.005478514 -0.9388115  3.484086e-01</code></pre></li>
</ul>
<p>The significance of yrSinSqr has been reduced to a level which would not be significant. Although the model could be reduced further, we will preliminarily accept this model to focus on the diagnostics in this article.</p>
<p>The residual plot generated by plot() uses the residuals on the scale of the variable. To check the fit of salMod we need to examine the residuals on the weighted scale. We will need to use an extractor function to obtain the weighted residuals.</p>
</div>
<div class="section level3" id="extractor-functions">
<h3>Extractor functions</h3>
<p>R has a number of extractor functions for model objects. Using extractor functions is a good programming practice, as opposed to directly getting the values from an object. If the underlying object is ever changed, your code will not need to be changed if you are using the extractor functions.</p>
<p>We will use a number of these extractor functions to obtain information about the model fit.</p>
<ul>
<li><p>Syntax and use of model object <strong>extractor</strong> functions</p>
<p>Most of these extractors return a vector with an element for each observation which was used in the model fit. The model fit may have fewer observations than the data if there are observations with missing values or other problems with result in an observation failing to be included.</p>
<p>fitted(<em>modelObj</em>)</p>
<p>Returns a vector of the predicted y values.</p>
<p>residuals(<em>modelObj</em>)<br/>
rstandard(<em>modelObj</em>)<br/>
rstudent(<em>modelObj</em>)<br/>
weighted.residuals(<em>modelObj</em>)</p>
<p>Returns a vector of the residuals, standardized residuals, studentized residuals, or the residuals on the weighted scale respectively.</p>
<p>hatvalues(<em>modelObj</em>)</p>
<p>Returns as a vector the diagonal of the projection matrix (hat matrix.) This is a measure of leverage.</p>
<p>cooks.distance(<em>modelObj</em>)</p>
<p>Returns a vector of the Cook's distance. This is a measure of influence.</p>
<p>vcov(<em>modelObj</em>)</p>
<p>Returns the variance covariance matrix for the coefficients.</p>
<p>The diagonals of this matrix are the square of the standard error reported in the the model summary.</p></li>
</ul>
<p>We will create a new data.frame containing the variables used in the model and some diagnostic variables. We will name this data.frame salModDiag.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salModDiag &lt;- salWeight[,c("rank","dscpl","yrSin","yrSinSqr","sex","salary","wght")]
salModDiag$fit &lt;- fitted(salMod)
salModDiag$res &lt;- weighted.residuals(salMod)
salModDiag$cooks &lt;- cooks.distance(salMod)
salModDiag$lev &lt;- hatvalues(salMod)</code></pre></li>
<li><p>There are no console results from these commands.</p></li>
</ul>
</div>
<div class="section level3" id="plotting-weighted-residuals">
<h3>Plotting weighted residuals</h3>
<p>We will now create a residual plot using the weighted residuals.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>ggplot(salModDiag, aes(x=fit,y=res) ) +
  geom_point() +
  theme_bw()           </code></pre></li>
<li><p>There are no console results from these commands. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-7-1.png" title="" width="672"/></p></li>
</ul>
<p>The model exhibits a much more consistent variance. There are no serious issues with model from with this weighted fit. We will continue our diagnostics using salMod.</p>
</div>
</div>
<div class="section level2" id="linearity-in-each-variable-diagnostics">
<h2>Linearity in each variable diagnostics</h2>
<p>It is also important to check for patterns in the plots of the residuals versus each of the variables of the model. We will use ggplot's faceting feature to make a residual plot for each of the variables.</p>
<div class="section level3" id="reshaping-a-data.frame-to-long-form">
<h3>Reshaping a data.frame to long form</h3>
<p>The variables we would like to facet on are columns of the salModDiag data.frame. These columns are shown below. The many rows of data between 1 and <span class="math inline">\(n\)</span> are represented with a single row of ".".</p>
<!-- html table generated in R 3.1.1 by xtable 1.7-4 package -->
<!-- Mon Oct 05 10:30:33 2015 -->
<table border="1">
<tr>
<th>
res
</th>
<th>
rank
</th>
<th>
dscpl
</th>
<th>
yrSin
</th>
<th>
yrSinSqr
</th>
<th>
sex
</th>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_1\)</span>
</td>
<td align="center">
rank<span class="math inline">\(_1\)</span>
</td>
<td align="center">
dscpl<span class="math inline">\(_1\)</span>
</td>
<td align="center">
ysSin<span class="math inline">\(_1\)</span>
</td>
<td align="center">
ysSinSqr<span class="math inline">\(_1\)</span>
</td>
<td align="center">
sex<span class="math inline">\(_1\)</span>
</td>
</tr>
<tr>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_n\)</span>
</td>
<td align="center">
rank<span class="math inline">\(_n\)</span>
</td>
<td align="center">
dscpl<span class="math inline">\(_n\)</span>
</td>
<td align="center">
ysSin<span class="math inline">\(_n\)</span>
</td>
<td align="center">
ysSinSqr<span class="math inline">\(_n\)</span>
</td>
<td align="center">
sex<span class="math inline">\(_n\)</span>
</td>
</tr>
</table>
<p>The salModDiag data.frame is in <strong>wide form</strong> with multiple model variables in a row with each observed residual value. We will need salModDiag in <strong>long form</strong>, also sometimes called tall form, with a separate row for each variable-observation pairing in the data.frame. This can be thought of as stacking each column of the variables into a single new column. In addition to this new column variable, we need a variable to identify which variable the long (stacked) observation belongs to. Long form would look like below.</p>
<!-- html table generated in R 3.1.1 by xtable 1.7-4 package -->
<!-- Mon Oct 05 10:30:33 2015 -->
<table border="1">
<tr>
<th>
res
</th>
<th>
var
</th>
<th>
id
</th>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_1\)</span>
</td>
<td align="center">
rank<span class="math inline">\(_1\)</span>
</td>
<td align="center">
"rank"
</td>
</tr>
<tr>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_n\)</span>
</td>
<td align="center">
rank<span class="math inline">\(_n\)</span>
</td>
<td align="center">
"rank"
</td>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_1\)</span>
</td>
<td align="center">
dscpl<span class="math inline">\(_1\)</span>
</td>
<td align="center">
"dscpl"
</td>
</tr>
<tr>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_n\)</span>
</td>
<td align="center">
dscpl<span class="math inline">\(_n\)</span>
</td>
<td align="center">
"dscpl"
</td>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_1\)</span>
</td>
<td align="center">
yrSin<span class="math inline">\(_1\)</span>
</td>
<td align="center">
"ysSin"
</td>
</tr>
<tr>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
</tr>
<tr>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
</tr>
<tr>
<td align="center">
.
</td>
<td align="center">
.
</td>
<td align="center">
.
</td>
</tr>
<tr>
<td align="center">
<span class="math inline">\(r_n\)</span>
</td>
<td align="center">
sex<span class="math inline">\(_n\)</span>
</td>
<td align="center">
"sex"
</td>
</tr>
</table>
<p>Long form maintains the residual-variable pairing for each observation in the regression. That is in the long form there is row for the first residual paired with the rank of that model observation, a row for the first residual paired with dscpl of that model observation, and this is repeated for all the variables and all the observations in the model. There is no loss of information when converting between the two forms.</p>
<p>The reshape function is useful to change between wide (what we have) and long (what we want) or from long to wide form. We are going from wide to long so our use of reshape is</p>
<ul>
<li><p>Syntax and use of the <strong>reshape()</strong> function.</p>
<p>reshape(<em>df</em>,varying=<em>wide</em>,v.names=<em>rep</em>,<br/>
<span class="math inline">\(\qquad\)</span> timevar=<em>id</em>,times=<em>lev</em>,<br/>
<span class="math inline">\(\qquad\)</span> drop=<em>excld</em>,<br/>
<span class="math inline">\(\qquad\)</span> direction=<em>dirct</em><br/>
<span class="math inline">\(\qquad\)</span> )</p>
<p>Returns a data.frame.</p>
<p><em>wide</em> is character vector containing the names of the repeated variables in wide form. These are the variables which will be stacked in the long form.</p>
<p><em>rep</em> is the name of the combined variable in the long data.frame.</p>
<p><em>id</em> is the name of the identifier variable for the combined variable.</p>
<p><em>excld</em> is a character vector of the names of variables in the data.frame which are to be excluded from the reshaped data.frame.</p>
<p><em>dirct</em> is either "long" or "wide" and indicates which form to reshape to.</p></li>
</ul>
<p>To create the single variable for the val column shown above, we need all the variables to be of the same type. As done in the Data exploration article we will changing the type of all the variables to numeric.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salModDiagNum &lt;- salModDiag
for(i in colnames(salModDiagNum)) {
  salModDiagNum[,i] &lt;- as.numeric(salModDiagNum[,i])
  }</code></pre></li>
<li><p>There are no console results from these commands.</p></li>
</ul>
<p>We will reshape using res, lev, and cooks as varying variables. We are including lev and cooks since we will plot these later in the article. This will create a column in long form for each of these three variables. The following code reshapes salModDiag to long form.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salModDiagTall &lt;- reshape(salModDiagNum, 
                 varying=c("rank","dscpl","sex","yrSin","yrSinSqr"),
                 v.names="varVal",
                 timevar="variable",
                 times=c("rank","dscpl","sex","yrSin","yrSinSqr"),
                 drop=c("salary","fit"),
                 direction="long"
                 )
str(salModDiagTall)</code></pre></li>
<li><p>The following is the console results from these commands.</p>
<pre><code>'data.frame':   1985 obs. of  7 variables:
 $ wght    : num  1.14 1.14 1.14 1.14 1.14 ...
 $ res     : num  -4.87 -14.5 -11.34 -8.36 17.69 ...
 $ cooks   : num  0.000547 0.005427 0.004593 0.00276 0.007552 ...
 $ lev     : num  0.0216 0.0241 0.0328 0.036 0.0226 ...
 $ variable: chr  "rank" "rank" "rank" "rank" ...
 $ varVal  : num  2 2 2 2 2 2 2 2 2 2 ...
 $ id      : int  1 2 3 4 5 6 7 8 9 10 ...
 - attr(*, "reshapeLong")=List of 4
  ..$ varying:List of 1
  .. ..$ varVal: chr  "rank" "dscpl" "sex" "yrSin" ...
  .. ..- attr(*, "v.names")= chr "varVal"
  .. ..- attr(*, "times")= chr  "rank" "dscpl" "sex" "yrSin" ...
  ..$ v.names: chr "varVal"
  ..$ idvar  : chr "id"
  ..$ timevar: chr "variable"</code></pre></li>
</ul>
</div>
<div class="section level3" id="plotting-residuals-versus-each-variable">
<h3>Plotting residuals versus each variable</h3>
<p>We can now plot the residuals against each of the model variables.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>ggplot(salModDiagTall, aes(x=varVal, y=res) ) +
  geom_point() +
  facet_wrap(~variable, scales="free_x") +
  theme_bw() +
  theme(strip.background = element_rect(fill = "White"))</code></pre></li>
<li><p>There are no console results from these commands. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-12-1.png" title="" width="672"/></p></li>
</ul>
<p>There is no significant indication of non-linearity in any of the variables. While there is some slight indication of inconsistent variance with respect to yrSin, we will continue to use our model based on the simplifying assumption made above.</p>
</div>
</div>
<div class="section level2" id="independence">
<h2>Independence</h2>
<p>The independence of observations assumption has limited diagnostics. This assumption is mainly examined by considering the randomization used in the study design. A check for autocorrelation is sometimes done. We will not cover autocorrelation tools in this series.</p>
</div>
<div class="section level2" id="normality-of-residuals-diagnostics">
<h2>Normality of residuals diagnostics</h2>
<p>Normality of the residuals is typically checked with with a q-q plot (quantile-quantile.) Linearity of the observations and symmetric scales indicate little concern for deviations from normality.</p>
<p>A q-q plot of the residuals is produced by the plot() function.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>plot(salMod,2)</code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-13-1.png" title="" width="672"/></p></li>
</ul>
<p>The above plot uses the residuals from the original scale. We need to examine the weighted residuals (the scale that was used in the fit.) We will do this using the qqnorm() function.</p>
<ul>
<li><p>Syntax and use of the <strong>qqnorm()</strong> function.</p>
<p>qqnorm(<em>vec</em>)</p>
<p>There are no returned results for this function. A plot is generated from the function.</p>
<p><em>vec</em> is the vector of values to be compared to normality.</p></li>
</ul>
<p>The code for our weighted residuals is shown below.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>qqnorm(salModDiag$res)</code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-14-1.png" title="" width="672"/></p></li>
</ul>
<p>The quantile plot (also called a normal probability plot) does not raise any significant concern with normality of the weighted residuals.</p>
</div>
<div class="section level2" id="sensitivity-to-data-diagnostics">
<h2>Sensitivity to data diagnostics</h2>
<p>It is important to check that your model is not influenced by one or a small set of observations. This might indicate your model is over fit.</p>
<p>The residuals vs. leverage plot from the model object plot provides a good view of the sensitivity of the model to a single or a small set of observations. The <strong>leverage</strong> of the observations is plotted on the x-axis. The leverage measure used is the diagonal of the hat matrix and is a measure of the distance of the observation from the mean observation of the set. The <strong>cooks distance</strong> for the observations are given in interval bands in the plot.</p>
<p>The residual vs. leverage plot for our model is generate with the plot() function.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>plot(salMod,5)</code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-15-1.png" title="" width="672"/></p></li>
</ul>
<p>The residuals in this plot are the standardized residuals from the scale of the variable. This is not the weighted scale that is of interest. This does not detract from our ability to use the leverage and Cook's distance from the plot.</p>
<p>In our plot you can see in the upper right corner the band for a cooks distance of 0.5. There are no observations close to this band; the Cook's distances are generally small. There is no indication that any single observation is exerting influence. There are several observations with slightly higher leverage values than the rest of the observations. The investigation of these observations follows.</p>
</div>
<div class="section level2" id="examining-leverage-and-influence-observations">
<h2>Examining leverage and influence observations</h2>
<p>The plots of leverage and influence to each of the model variables can be useful to visually examine if there is a cluster of observations influencing the fit.</p>
<p>We have leverage and Cooks distance in long form in the salModDiagTall data.frame. So, we can plot these diagnostics faceted by the model variables.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>ggplot(salModDiagTall, aes(x=varVal, y=lev) ) +
  geom_point() +
  facet_wrap(~variable, scales="free_x") +
  theme_bw() +
  theme(strip.background = element_rect(fill = "White"))</code></pre>
<pre><code>ggplot(salModDiagTall, aes(x=varVal, y=cooks) ) +
  geom_point() +
  facet_wrap(~variable, scales="free_x") +
  theme_bw() +
  theme(strip.background = element_rect(fill = "White"))</code></pre></li>
<li><p>There are no console results from this command. The following plots are produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-16-1.png" title="" width="672"/></p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-17-1.png" title="" width="672"/></p></li>
</ul>
<p>There are two observations with higher leverage values that have the same rank and sex. There is also two observations with a slightly higher Cook's distance, though not high enough to individually be of concern.</p>
<div class="section level3" id="excluding-observations-to-examine-sensitivity-of-the-model">
<h3>Excluding observations to examine sensitivity of the model</h3>
<p>It is important to investigate the sensitivity of a model to an observation or set of observations with either higher influence, higher leverage, or residual outliers. There were no residual outliers on the weighted scale in our model. We will examine the sensitivity of the model to the cluster of observations seen in the leverage and Cook's distance plots above.</p>
<p>To know if an observation, or set of observations, is impacting the fit of a model, the observations can be removed and the model refit. The difference between the two models can be examined to determine if any change is of concern. Removing the observation is solely for the purpose of evaluating the sensitivity of the fit to the data. It is not recommended to remove observations from a model to improve the fit.</p>
<p>We will remove the three observations which had leverage values higher than .145. We will use the which() function to identify these observations.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salModLevId &lt;- which(salModDiag$lev &gt;= .145)
salModDiag[salModLevId,c("salary","rank","dscpl","sex","yrSin")]</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>   salary      rank dscpl  sex yrSin
8    81.8 AssocProf     A Male    49
44   90.0 AssocProf     B Male    48</code></pre></li>
</ul>
<p>We can now run the same model with these three observations removed.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salModLev &lt;- lm(salary~dscpl + sex + rank + yrSin + yrSinSqr,
                weights=wght,
                data=salModDiag[-salModLevId,])
summary(salModLev)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>
Call:
lm(formula = salary ~ dscpl + sex + rank + yrSin + yrSinSqr, 
    data = salModDiag[-salModLevId, ], weights = wght)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-30.640  -7.931  -1.326   7.448  45.265 

Coefficients:
               Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   70.870042   2.136867  33.165  &lt; 2e-16 ***
dscplB        12.254717   1.239995   9.883  &lt; 2e-16 ***
sexMale        2.135023   1.615298   1.322    0.187    
rankAssocProf 13.412374   2.202293   6.090 2.72e-09 ***
rankProf      47.530649   3.428175  13.865  &lt; 2e-16 ***
yrSin          0.149705   0.293727   0.510    0.611    
yrSinSqr      -0.004484   0.005777  -0.776    0.438    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 11.87 on 388 degrees of freedom
Multiple R-squared:  0.6895,    Adjusted R-squared:  0.6847 
F-statistic: 143.6 on 6 and 388 DF,  p-value: &lt; 2.2e-16</code></pre></li>
</ul>
<p>Since both models were run with the same variables in the same order, we can directly compare the vectors of coefficients. We will calculate the difference in the coefficients between the two models. Then scale this difference using the standard error from the model with all the observations to standardize the differences.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salModLevCD &lt;- data.frame(change=(coef(salModLev) - coef(salMod)),
                         se=sqrt(diag(vcov(salMod)))
                         )
rownames(salModLevCD) &lt;- names(coef(salMod))
salModLevCD$multiples &lt;- salModLevCD$change / salModLevCD$se
salModLevCD</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>                     change          se     multiples
(Intercept)    1.832236e-02 2.128797183  8.606906e-03
dscplB         4.716442e-02 1.232182099  3.827715e-02
sexMale       -5.378637e-05 1.611549370 -3.337556e-05
rankAssocProf  2.553279e-02 2.194176989  1.163661e-02
rankProf      -3.053338e-01 3.339265328 -9.143741e-02
yrSin         -1.164779e-02 0.290856911 -4.004644e-02
yrSinSqr       6.595420e-04 0.005478514  1.203870e-01</code></pre></li>
</ul>
<p>The changes in all the coefficients are within the confidence intervals for the coefficients. These changes are not large enough to cause a concern about the model being sensitivity to these observations. There is no indication that the model is being overly influenced by these observations.</p>
<p>We will repeat the same examination of the two higher Cook's distance observations.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salModCooksId &lt;- which(salModDiag$cooks &gt;= .06)
salModDiag[salModCooksId,c("salary","rank","dscpl","sex","yrSin")]

salModCooks &lt;- lm(salary~dscpl + sex + rank + yrSin + yrSinSqr,
                weights=wght,
                data=salModDiag[-salModCooksId,])

salModCooksCD &lt;- data.frame(change=(coef(salModCooks) - coef(salMod)),
                         se=sqrt(diag(vcov(salMod)))
                         )
rownames(salModCooksCD) &lt;- names(coef(salMod))
salModCooksCD$multiples &lt;- salModCooksCD$change / salModCooksCD$se
salModCooksCD</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>   salary     rank dscpl    sex yrSin
71   85.0 AsstProf     A   Male     2
75   63.1 AsstProf     A Female     7</code></pre>
<pre><code>                    change          se   multiples
(Intercept)   -0.108445154 2.128797183 -0.05094199
dscplB         0.303529370 1.232182099  0.24633483
sexMale       -1.155809111 1.611549370 -0.71720366
rankAssocProf -0.874136926 2.194176989 -0.39838943
rankProf      -1.339983427 3.339265328 -0.40128091
yrSin          0.178159890 0.290856911  0.61253449
yrSinSqr      -0.002970411 0.005478514 -0.54219275</code></pre></li>
</ul>
<p>There is no indication that the model is overly influenced by these two observations with higher Cook's distance.</p>
<p>If there were residual outliers, their effect on the model would be checked using the same approach.</p>
</div>
</div>
<div class="section level2" id="multicollinearity">
<h2>Multicollinearity</h2>
<p>The vif() function will return the variance inflation factor for the model variables. There are two versions of vif() in the packages we have loaded. We are using the version from the cars package; it has overwritten the version from the faraway package.</p>
<ul>
<li><p>Syntax and use of the <strong>vif()</strong> function.</p>
<p>vif(<em>modelObj</em>)</p>
<p>Returns a matrix with a row for each model term.</p></li>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>vif(salMod)</code></pre></li>
<li><p>The results of the above command are shown below</p>
<pre><code>              GVIF Df GVIF^(1/(2*Df))
dscpl     1.074880  1        1.036764
sex       1.030136  1        1.014956
rank      4.233630  2        1.434426
yrSin    23.514956  1        4.849222
yrSinSqr 15.442166  1        3.929652</code></pre></li>
</ul>
<p>The vif scores are elevated for the two variables based on yrSin. We would expect these two variables to have higher vif scores since the variables are correlated. If vif is a concern, it would be more informative to check vif on the model which uses poly() for higher order terms.</p>
<div class="section level4" id="exercises">
<h4>Exercises</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<p>Note, we will use the shade and irrig variable as continuous variables for these exercise. They could also be considered as factor variables. Since both represent increasing levels we first try to use them as scale.</p>
<p>Use the model you selected as the best model from the prior article's exercises.</p>
<ol style="list-style-type: decimal">
<li><p>Use plot to generate the prepared diagnostic plots.</p></li>
<li><p>Create a data.frame which includes the model variables as well as the fitted, residuals, Cook's distance, and leverage.</p></li>
<li><p>Reshape the data.frame from problem 3 to long form.</p></li>
<li><p>Plot Cook's distance verse the model variables faceted by the model variables.</p></li>
<li><p>Rerun the model with the observation with the highest Cook's distance removed.</p></li>
<li><p>Compare the changes in the model coefficients.</p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol.html">Solutions</a></p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM.html">Regression (generalized linear models)</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Regression.html">Regression (ordinary least squares)</a></p>
<p>Last Revised: 8/28/2015</p>
</div>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-4-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-7-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-12-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-13-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-14-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-15-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-16-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_files/figure-html/unnamed-chunk-17-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Diagnostic solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<p>These solutions require the solutions from the prior lesson be run in your R session.</p>
<div class="section level4" id="exercise-solutions">
<h4>Exercise solutions</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<p>Note, we will use the shade and irrig variable as continuous variables for these exercise. They could also be considered as factor variables. Since both represent increasing levels we first try to use them as scale.</p>
<p>Use the model you selected as the best model from the prior exercises.</p>
<ol style="list-style-type: decimal">
<li><p>Use plot to generate the prepared diagnostic plots.</p>
<pre class="r"><code>plot(out5)</code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-1.png" title="" width="672"/><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-2.png" title="" width="672"/><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-3.png" title="" width="672"/><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-4.png" title="" width="672"/></p></li>
<li><p>Create a data.frame which includes the model variables as well as the fitted, residuals, Cook's distance, and leverage.</p>
<pre class="r"><code>out5Diag &lt;- alfalfa[,c("irrig","inoc","shade","yield")]
out5Diag$fit &lt;- fitted(out5)
out5Diag$res &lt;- rstudent(out5)
out5Diag$cooks &lt;- cooks.distance(out5)
out5Diag$lev &lt;- hatvalues(out5)
str(out5Diag)</code></pre>
<pre><code>'data.frame':   25 obs. of  8 variables:
 $ irrig: int  1 2 3 4 5 1 2 3 4 5 ...
 $ inoc : Factor w/ 5 levels "cntrl","A","B",..: 2 3 5 4 1 5 1 3 2 4 ...
 $ shade: int  1 1 1 1 1 2 2 2 2 2 ...
 $ yield: num  33.8 33.7 30.4 32.7 24.4 37 28.8 33.5 34.6 33.4 ...
 $ fit  : num  34.3 33 32.4 32.6 25.5 ...
 $ res  : num  -0.393 0.479 -1.505 0.073 -0.887 ...
 $ cooks: num  0.012999 0.014684 0.117548 0.000345 0.063994 ...
 $ lev  : num  0.36 0.3 0.28 0.3 0.36 0.3 0.24 0.22 0.24 0.3 ...</code></pre></li>
<li><p>Reshape the data.frame from problem 3 to tall form.</p>
<pre class="r"><code>out5DiagNum &lt;- out5Diag
for(i in colnames(out5DiagNum)) {
  out5DiagNum[,i] &lt;- as.numeric(out5DiagNum[,i])
}

out5DiagT &lt;- reshape(out5Diag, varying=c("irrig","inoc","shade"),
           v.names="varVal",
           timevar="variable",
           times=c("irrig","inoc","shade"),
           drop=c("yield","fit"),
           direction="long"
           )
str(out5DiagT)</code></pre>
<pre><code>'data.frame':   75 obs. of  6 variables:
 $ res     : num  -0.393 0.479 -1.505 0.073 -0.887 ...
 $ cooks   : num  0.012999 0.014684 0.117548 0.000345 0.063994 ...
 $ lev     : num  0.36 0.3 0.28 0.3 0.36 0.3 0.24 0.22 0.24 0.3 ...
 $ variable: chr  "irrig" "irrig" "irrig" "irrig" ...
 $ varVal  : chr  "1" "2" "3" "4" ...
 $ id      : int  1 2 3 4 5 6 7 8 9 10 ...
 - attr(*, "reshapeLong")=List of 4
  ..$ varying:List of 1
  .. ..$ varVal: chr  "irrig" "inoc" "shade"
  .. ..- attr(*, "v.names")= chr "varVal"
  .. ..- attr(*, "times")= chr  "irrig" "inoc" "shade"
  ..$ v.names: chr "varVal"
  ..$ idvar  : chr "id"
  ..$ timevar: chr "variable"</code></pre></li>
<li><p>Plot Cook's distance verse the model variables faceted by the model variables.</p>
<pre class="r"><code>ggplot(out5DiagT, aes(x=varVal, y=cooks) ) +
  geom_point() +
  facet_wrap(~variable, scales="free_x") +
  theme_bw() +
  theme(strip.background = element_rect(fill = "White")) </code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-5-1.png" title="" width="672"/></p></li>
<li><p>Rerun the model with the observation with the highest Cook's distance removed.</p>
<pre class="r"><code>out5DiagCkId &lt;- which(out5Diag$cooks &gt;= .5)
out5DiagCkId</code></pre>
<pre><code>[1] 21</code></pre>
<pre class="r"><code>out5Ck &lt;- lm(yield~irrig+inoc+shade, data=alfalfa[-c(out5DiagCkId),])
summary(out5Ck)</code></pre>
<pre><code>
Call:
lm(formula = yield ~ irrig + inoc + shade, data = alfalfa[-c(out5DiagCkId), 
    ])

Residuals:
    Min      1Q  Median      3Q     Max 
-1.6745 -0.7559  0.0625  0.8065  2.0385 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  26.9880     0.8561  31.526  &lt; 2e-16 ***
irrig        -0.7855     0.1716  -4.578 0.000268 ***
inocA         6.6000     0.7235   9.122 5.85e-08 ***
inocB         7.0875     0.7780   9.110 5.96e-08 ***
inocC         6.5200     0.7235   9.012 6.96e-08 ***
inocD         5.7400     0.7235   7.934 4.09e-07 ***
shade         1.5095     0.1716   8.797 9.79e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.144 on 17 degrees of freedom
Multiple R-squared:  0.9249,    Adjusted R-squared:  0.8984 
F-statistic: 34.88 on 6 and 17 DF,  p-value: 1.206e-08</code></pre></li>
<li><p>Compare the changes in the model coefficients.</p>
<pre class="r"><code>out5CoefDiff &lt;- (coef(out5Ck) -coef(out5) ) / sqrt(diag(vcov(out5)))
names(out5CoefDiff) &lt;- names(coef(out5))
out5CoefDiff</code></pre>
<pre><code>  (Intercept)         irrig         inocA         inocB         inocC 
 1.790134e-14 -1.073174e+00  1.323822e-14  1.199845e+00  3.530192e-15 
        inocD         shade 
 3.530192e-15  1.073174e+00 </code></pre></li>
<li><p>Commit your changes to AlfAnalysis.</p>
<p>There is no code associated with the solution to this problem.</p></li>
</ol>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Diagnostics</a> article.</p>
<p>Last Revised: 3/2/2015</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-2.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-3.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-2-4.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics_Sol_files/figure-html/unnamed-chunk-5-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Introduction</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#about-this-series">About This Series</a></li>
<li><a href="#materials-for-these-articles">Materials for these articles</a></li>
<li><a href="#r-versus-rstudio">R versus RStudio</a></li>
<li><a href="#running-r-at-the-sscc">Running R at the SSCC</a></li>
<li><a href="#running-r-rstudio-and-git-on-your-own-computer">Running R, RStudio and Git on your own computer</a></li>
</ul>
</div>
<p><a href="http://www.r-project.org/">R</a> is an extremely powerful programming language for statistical computing and graphics generation. It's flexibility, extensibility, and no cost have contributed to R's wide use in academic environments and among statisticians. R is a good choice for large or small statistical projects.</p>
<p>R is open source and is supported by an extensive user community. The R Development Core Team and <a href="http://cran.r-project.org/mirrors.html">CRAN</a> are at the center of the user community. The core team oversees the evolution of the base set of functionality which is included when R is installed. CRAN, the Comprehensive R Archive Network, is a repository of additional functionality, called packages. CRAN packages are tested with each new core package and have user documentation available. All CRAN packages are supported by a member of the R user community. Any issues with a package are reported to and are addressed by the supporting member. This support provides a level of stability and quality to users. A great deal of additional functionality is available through CRAN.</p>
<p><a href="http://www.rstudio.com/">RStudio</a> provides an integrated development environment (IDE) for R users. This IDE provides support for project organization, source control, and document generation. RStudio will help you write R code faster and more efficiently. The use of RStudio is integrated into this article series.</p>
<div class="section level2" id="about-this-series">
<h2>About This Series</h2>
<p>The goal of the R for Researchers article series is to provide you with a solid foundation in the use of the R language and the RStudio development environment. You will be able to build on this foundation to become an expert R user.</p>
<p>R for Researchers includes the following articles:</p>
<ol style="list-style-type: decimal">
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Projects.html">R Projects</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown.html">R Markdown</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep.html">Data preparation</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl.html">Data exploration</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres.html">Data presentation</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Regression.html">Regression (ordinary least squares)</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Regression Diagnostics</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM.html">Regression (generalized linear models)</a></li>
<li><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference.html">Regression Inference</a></li>
</ol>
<p>These articles can be grouped into three chapters. The first chapter, articles two through four, are an introduction to the RStudio tools which are useful for researchers. The tools include source control, integrating R results into documents, and the use of R projects and script for reproducible research. This is the background necessary to be productive writing R code. The second chapter, articles five through seven, covers importing data, data types and structures, numerical and graphical summaries of data, and formatting data summaries for publication. These tools will equip you to prepare data for analysis. The third chapter, articles eight through the end, cover R functions used in building regression models.</p>
<p>The articles on RStudio tools and preparing data for analysis require little statistical knowledge. The regression articles demonstrate statistical regressions methods and assume the reader has prior statistical knowledge of regression methods. If you have a background in regression techniques, you will be prepared to apply them using R when you are done. If you are new to some or all of the statistical techniques, these articles will help you gain experience in the R commands used for regression and the general approach of regression in R. The Regression (GLM) article and the GLM sections in the the Regression inference article maybe skipped if you do not have exposure to GLM models. We recommend prior training in a statistics technique before applying the technique using R.</p>
<p>These articles are meant to be read in order. The material in each article builds on prior articles. Data sets are used across multiple articles. Examples and exercises in the articles build on the work of prior examples and exercises. This provides experience with the work flow of doing an analysis.</p>
<p>Each lesson includes examples and exercises, with solutions given for most of them. If you get stuck on an exercise it's probably best to review the provided solution. Reading other solutions is a great way to learn, even when you are able to do all the exercises yourself.</p>
<p>These articles cover some of the common commands used in data preparation and statistical analysis. It would be impossible to show all of what R can do, or what you might want to do, in these articles. With the skills from these articles you will have the background needed to add specific commands and options as you need them.</p>
</div>
<div class="section level2" id="materials-for-these-articles">
<h2>Materials for these articles</h2>
<p>The instruction for loading the datasets needed to work the examples and exercises in these articles is included in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep.html">Data preparation</a> article.</p>
<p>The instruction for the installing the packages used in the examples and exercises in these articles is included in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a> article.</p>
</div>
<div class="section level2" id="r-versus-rstudio">
<h2>R versus RStudio</h2>
<p>Both R (sometimes called base R) and RStudio execute the same R commands. Scripts and programs written in either tool will run in the other. Thus in many ways they are equivalent.</p>
<p>RStudio's IDE provides a set of convenient tabs to access many tool such as viewing plots or variables, package status and installation, and Git commands for source control. RStudio also supports the integration of R code and output into a variety of document formats. Base R can do all of this as well. However, these activities and tools must be managed and controlled individually in base R. You will likely find RStudio is a better environment for writing new R code.</p>
<p>Base R does have its uses as well. Base R is useful for batch jobs. Long jobs which are run on Linstat use base R. Base R is also useful for jobs which require management of very large amounts of data or for timing the execution of commands.</p>
</div>
<div class="section level2" id="running-r-at-the-sscc">
<h2>Running R at the SSCC</h2>
<p>The SSCC makes both R and RStudio available on Winstat and in our computer labs. R is also available on Linstat and Condor. Most SSCC members run R or RStudio on Winstat, but some jobs require different resources. For details about the capabilities of the SSCC's servers see Computing Resources at the SSCC.</p>
<div class="section level3" id="windows-vs.-linux">
<h3>Windows vs. Linux</h3>
<p>R scripts run and act the same whether they are running on Windows or Linux. However, Linstat (the SSCC's Linux computing cluster) has much more memory than Winstat (the SSCC's Windows terminal server farm), and is better suited for long jobs. Running R jobs on Linstat is probably easier than you think: see Using Linstat to learn how. Winstat is where initial data exploration is done and scripts would typically be developed (even if the scripts would be run on Linstat.) Winstat is also well suited for running small to moderate size jobs.</p>
<p>The SSCC Condor flock is ideal for running very long jobs (jobs that will take days, weeks or even longer) or for running multiple jobs at the same time.</p>
</div>
</div>
<div class="section level2" id="running-r-rstudio-and-git-on-your-own-computer">
<h2>Running R, RStudio and Git on your own computer</h2>
<p>R, RStudio, and Git are all needed on your computer for this article series. They are all free downloads and run on Windows and Macs. Using RStudio on your own computer can be very effective. It is important to remember that files that are not on the SSCC network are not backed up by the SSCC. We recommend that you regularly save your files to the SSCC network. RStudio can make this easy through its integration with source control, see the central repository section of the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a> article.</p>
<ul>
<li><p>It is best to install Git prior to R and RStudio. This reduces the amount of configuration required in RStudio.</p></li>
<li><p>R can be installed from the r-project website, <a href="http://www.r-project.org/">R</a>. You will need to click on the download R link and select a CRAN repository to download R from. Note: do not install R into a directory that includes a space in it's name. Installing R in the C:R_Program_Files directory on a PC avoids the space in the path issue.</p></li>
<li><p>RStudio can be installed from the <a href="http://www.rstudio.com/">RStudio</a> website. You will need to click on the Download RStudio link. Note: install RStudio in same directory that you installed R in, see above.</p></li>
<li><p>Git can be installed from <a href="http://www.git-scm.com/">Git</a>. This is all the Git functionality that is needed for this article series. Note: install Git in the default program directory and not with R and RStudio.</p>
<p>You can also install a Git GUI, which will provide a user interface for Git functionality beyond what is supported by RStudio. There are a number of free Git GUIs available. They all can be used to support your work in RStudio. We recommend <a href="http://www.sourcetreeapp.com/">SourceTree</a> for use on individual computers. Winstat has <a href="https://code.google.com/p/gitextensions/">Git Extensions</a> installed, for technical reasons unique to WinStat.</p></li>
</ul>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Projects.html">R Projects</a></p>
<p>Last Revised: 4/13/2015</p>
</div>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Projects</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#running-rstudio">Running RStudio</a></li>
<li><a href="#rstudio-window">RStudio window</a></li>
<li><a href="#git-integration-with-rstudio">Git integration with RStudio</a></li>
<li><a href="#projects">Projects</a></li>
<li><a href="#organizing-project-files-in-folders">Organizing project files in folders</a></li>
<li><a href="#git-version-control">Git version control</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to <a href="http://www.rstudio.com/">RStudio</a>, a programming environment for writing R code, and Git, a version control program. These tools will help you work more efficiently and enhance reproducibility.</p>
<p>RStudio provides an integrated development environment (IDE) for R users. This IDE provides support for project organization, source control, and document generation. While RStudio can work with individual files which are not in a project, you will likely find it quicker to develop R code using projects.</p>
<p>Git tracks all the changes made to an R project and allows you to switch between versions at will. Git allows you to reproduce your research at prior states, which is an important part of reproducible research. RStudio's has integrated support for Git with projects.</p>
<p>RStudio, Projects, and Git work together to provide an efficient and reproducible development environment. Their use is integrated into this article series.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercises will further enhance your skills with the material.</p>
</div>
<div class="section level2" id="running-rstudio">
<h2>Running RStudio</h2>
<p>RStudio is started on Winstat, or another Windows computer, similarly to other programs.</p>
<p>We will start RStudio now.</p>
<ul>
<li><p>Click the Windows logo button in the lower left corner of the screen.</p></li>
<li><p>From the menu select All Programs. Then select the RStudio folder. Then select the RStudio program.</p></li>
<li><p>The navigation to this program is displayed in the following image.</p>
<p><img alt="RStudio Start screen" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_Start.png"/></p></li>
</ul>
</div>
<div class="section level2" id="rstudio-window">
<h2>RStudio window</h2>
<p>The RStudio Window is divided into panes. There are four panes which can be displayed in RStudio's window. The top left pane may not be displayed in your window.</p>
<ul>
<li><p>RStudio's window with four panes displayed.</p>
<p><img alt="RStudio IDE screen" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_IDE.png"/></p></li>
</ul>
<p>The <strong>source pane</strong> is on the left side on top. This is where you will write and edit your R programs and documents. The pane will have a tab for each open file. Here there are two files opened, Untitled1 and Untitled2. This pane is only present if there are files opened in the editor.</p>
<p>The <strong>Console pane</strong> is on the left side on the bottom. This is where results are displayed. The console tab is opened when RStudio is opened. Additional tabs are opened if another program type is used, such as an R markdown file. This pane might be full height on the left side if no file is open in the source pane.</p>
<p>There are two <strong>Tab panes</strong> on the right side, one on top and the other on the bottom. These panes contains tabs which allow quick access to additional tools. The tabs are for the following functions.</p>
<ul>
<li><strong>Environment</strong> displays data objects defined in the current R session.</li>
<li><strong>History</strong> is a list of prior commands which have been executed.</li>
<li><strong>Git</strong> is used for version control.</li>
<li><strong>Files</strong> is a folder browser.</li>
<li><strong>Plots</strong> displays plots you create.</li>
<li><strong>Packages</strong> is where packages can be installed and loaded from.</li>
<li><strong>Help</strong> is where help on R commands can be found.</li>
<li><strong>Viewer</strong> is where web content can be viewed. This series will not cover the use of the viewer.</li>
</ul>
<p>The location of the four panes within the window can be changed using the Pane Layout window. This window is accessed by selecting Global Options from the Tools drop down menu. The tool tabs can be moved between the two tab panes using this window as well.</p>
<p>The size of the panes can be adjusted by moving the grey lines which separate the four panes. The panes can be minimized or maximized using the icons on the right side of the grey bar at the the top of each pane.</p>
</div>
<div class="section level2" id="git-integration-with-rstudio">
<h2>Git integration with RStudio</h2>
<p>RStudio provides integrated support for several version control programs. The SSCC recommends the use of <a href="http://git-scm.com/">Git</a> for version control with RStudio. This article and the other articles in this series will use Git for version control. If you do not have Git installed on your computer, you will need to do that now. See the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article for more information on installing Git.</p>
<p>RStudio must be configured to work with the Git software. If you are on Winstat or using one of the SSCC's lab computers, RStudio has been configured to use Git for version control for you. If you are running RStudio on another computer, you need to confirm RStudio is configured for Git.</p>
<ul>
<li><p>From the Tools menu (which is along the top of the RStudio window), select Global Options.</p>
<p><img alt="IDE Tools menu" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_ToolsMenu.png"/></p></li>
<li><p>An Options window will open. From the Options window's left menu, select Git/SVN.</p>
<p><img alt="IDE Global Options" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GlbOptn.png"/></p></li>
<li><p>If the Git executable: box does not have a path to git.exe, use the browse button to locate git.exe and set the path.</p></li>
<li><p>Confirm that the Enable version control interface for RStudio projects box is checked.</p></li>
<li><p>Click the OK button at the bottom left in the Option's window.</p></li>
</ul>
<p>RStudio is now configured to support version control.</p>
</div>
<div class="section level2" id="projects">
<h2>Projects</h2>
<p>A <strong>project</strong> in RStudio is a collection of work organized in a work folder. RStudio provides tools that will help you manage your work on projects. RStudio remembers what files you had open and what tabs were displayed, when you close a project. When you open the project again, RStudio will open the same files and display the same tabs. This will allow you to quickly pick up your work again. RStudio can be configured to save and restore the session memory. The default is to start a new session when you open a project, so some previously executed commands may need to be run again.</p>
<p>Almost any R work can be structured as a project. You might consider creating a project for an individual class, thesis, or research project.</p>
<p>We will create a project to organize the work for the article examples and exercises in the RFR series.</p>
<ul>
<li><p>From the file menu (which is along the top of the RStudio window), select New Project.</p>
<p><img alt="IDE Existing Project" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_FileMenu.png"/></p></li>
<li><p>A New Project window will be opened with three options for creating a new project. We will use a new directory for this project, so select the New Directory icon.</p>
<p><img alt="IDE New Project menu" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_NewProj.png"/></p></li>
<li><p>The menu in the New Project window will now display options for the type of project to start. We are starting an empty project, select the Empty project icon.</p>
<p><img alt="IDE New Project new directory" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_NP_NDir.png"/></p></li>
<li><p>The New Project menu will change again. We will use RFR for the project name, enter this in the Directory name: dialog box. Use the Browse button to navigate to the folder in which the new project will be started. We will put this project on our U drive. If you are working on a computer without a U drive, you can use your Documents folder instead.<br/><strong>Important</strong>: Confirm that the Create a git repository button is checked.</p>
<p><img alt="IDE New Project done" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_NP_NP.png"/></p></li>
<li><p>Click the Create Project button when you have completed these steps.</p></li>
<li><p>Confirm that you have a tab labeled Git in one of RStudio's tab panes.</p></li>
</ul>
<p>The option to create a project in an existing directory is used when R programs have already been written and saved in a directory. To do this, you would open the New Project window as was done above. You would select Existing Directory from the menu in the New Project window instead of New Directory option. This will create the RStudio project (the .Rproj file), but does not set up source control for this project. You will need to use a Git GUI to setting up source control for this project.</p>
<p>The Version Control option is used to start a local project folder from an existing project, provided the existing project is using Git. This is often a project which is shared by researchers. We will create a project using the version control option in the Central repositories section of the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a> article.</p>
<p>Opening an existing project is also done from the File menu.</p>
<ul>
<li><p>From the file menu in RStudio, select Open Project or Open Project in New Window.</p>
<p><img alt="IDE Open Project" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_File_OP.png"/></p></li>
<li><p>An Open Project window will be displayed. Navigate to the project folder. Select the file with extension .Rproj.</p>
<p><img alt="IDE Open Project done" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_OP_Done.png"/></p></li>
<li><p>Click open.</p></li>
<li><p>The project will be opened with the source files you had open when the project was closed.</p></li>
</ul>
<div class="section level4" id="exercise">
<h4>Exercise</h4>
<ol style="list-style-type: decimal">
<li>Open the RFR project you have just created in a new window. Do this from the RStudio window you currently have open. After you have been able to open the RFR project in a new window, close it as it is not needed for the remaining exercises of this article.</li>
</ol>
</div>
</div>
<div class="section level2" id="organizing-project-files-in-folders">
<h2>Organizing project files in folders</h2>
<p>If your project is small, keeping all your files in the one project folder created by RStudio is convenient. For larger projects with multiple documents, scripts, figures, etc., using subfolders to organize your work will make life easier.</p>
<p>Some suggestions for organizing folders within a project.</p>
<ul>
<li>Create a sub-folder for your original data</li>
<li>Use a sub-folder for cleaned-up data</li>
<li>Use a sub-folder for your scripts</li>
<li>Use a folder for each document</li>
<li>Use a folder if you need to save figures</li>
<li>Use relative paths to reference files. Examples of relative paths are ..\DataProc\DataSet.R to read a data file from an R script or ..\code\Analysis.R to reference a script from an R Markdown file in its own folder.</li>
</ul>
</div>
<div class="section level2" id="git-version-control">
<h2>Git version control</h2>
<p>Many of us have saved a copy of file we are about to make changes to. We do this just in case we need to go back to this prior version. Anyone who has ever saved a copy for later use will benefit from a version control system.</p>
<p>Git is the version control system the SSCC uses with RStudio. Git, like most version control systems, tracks changes made to files. Git's real advantage over other version control systems is its distributed nature. This allow any project member to work on the project anywhere, without being connect to the network.</p>
<p>A Git <strong>repository</strong> is where a project history is saved. The repository is contained in a hidden folder, called .git, in RStudio's project directory. This folder contains a collection of files and folders which Git uses to manage the project's history. You will not need to look inside the repository or be familiar with it's contents. Git manages all of the repository internals behind the scenes. You will do your version control through the RStudio user interface. RStudio's Git interface provides many of the common functions needed to do version control. If you find you need a Git function not supported by RStudio, you can open the Git project using a Git GUI by referencing the path to the .git repository.</p>
<p>RStudio's Git tab displays what has not been saved to the repository. You can think of this tab as your version control "to do" list.</p>
<ul>
<li><p>Select the Git tab in RStudio. The following will be displayed in the pane.</p>
<p><img alt="Git Empty Repo" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_EmptyRepo.png"/></p></li>
<li><p>You will see two files in the window with question marks in a yellow box. A yellow box with the question marks inside indicate that the file has not been included in the Git repository.</p></li>
</ul>
<p>The state of the project is saved with what is called a <strong>commit</strong>. A commit is done whenever your project is at a state you may wish to return to. This may be a major event such as saving an analysis that supports a paper you are submitting. It can also be minor events such as saving the current version before experimenting with a new approach to some code or analysis. Typically a commit is done whenever some additional functionality is added or repaired. Frequent commits provide more projects states in the project history, more points you can recover to. Too frequently committing makes it more difficult to find the state you want to recover to, though Git provides tools to help you manage project history and find changes in files. With some experience using Git, you will be able to determine the optimal commit points for your projects.</p>
<p>Commits are done at the file level. If a file is to be included in a commit, all changes made to that file since the last commit will be included in the commit. You control what is committed by determining which files will be included in the commit. This step of identifying the files to commit is called <strong>staging</strong> the files.</p>
<p>Version control practice is to save only source code files to the repository. This is why these systems are also called source control. Some common files not included in source control are:</p>
<ul>
<li>Any file which is generated from source code. These files can be be generated again, if lost or corrupted. Generated files include graphics, pdf files, and such.<br/></li>
<li>Data files are typically either static, not changing, or generated. The original data is expected to be static, any back up copy will be the same. Any reformatted data sets can be regenerated by the source code.</li>
<li>Files containing information which does not influence results. An example is the RFR.Rproj file, as seen in the Git tab. It contains project status which would be recreated if the project state was restored.</li>
</ul>
<p>Git <strong>ignore</strong> is used to identify files which you do not intend to include in source control. Ignoring a files removes it from the Git Status display, in the Git tab. This is removing it from the source control to do list. This makes it easier to see the files of interest.</p>
<p>We will ignore the RFR.Rproj file.</p>
<ul>
<li>Select the RFR.Rproj file in the Git tab.<br/></li>
<li><p>From the tools menu in the Git tab (the icon which looks like a gear or cog) select Ignore.</p>
<p><img alt="Git Ignore" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitIgnore.png"/></p></li>
<li><p>A Git Ignore window will be displayed.</p>
<p><img alt="Git Ignore Save" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitIgnoreSave.png"/></p></li>
<li><p>Click save in the Git Ignore window.</p></li>
<li><p>The Git Ignore window will disappear and the RFR.Rproj file will no longer be displayed in the Git tab pane.</p></li>
</ul>
<p>A <strong>branch</strong> is a series of commits, each of which is a change in the project from the prior commit. The progression of a project's development is recorded in a branch. Our repository does not have a branch as yet. This is indicated by "(No branch)" being displayed next to the tools icon (cog) in the Git tab. A branch is created with the first commit. The default branch name is <strong>Master</strong>, and it is what we will use in these articles.</p>
<p>We will commit the .gitignore file.</p>
<ul>
<li>Select the Git tab in RStudio.</li>
<li><p>Click on the check box in the staged column for the .gitignore file. This stages the .gitignore file in RStudio.</p>
<p><img alt="Git Staged" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitStaged.png"/></p></li>
<li>The A in the green box indicates that this file is to be <strong>added</strong> to the list of files in source control. The file is now staged.<br/></li>
<li>Click the commit icon in the Git tab.</li>
<li>A window opens with RStudio: Review Changes in the title. In the top left pane you will see the staged files. In the bottom pane you will see the changes in the staged files (changes from what was committed before.) If there were multiple files being committed, this lower pane would display the changes for the file that is selected in the top left pane.<br/></li>
<li><p>Write a commit message in the commit message pane (top right pane.) We will use "Initial commit" for the message. This is a common message to use when initializing a repository.</p>
<p><img alt="Git Commit Message" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GITCommitMsg.png"/></p></li>
<li>Then click the Commit button on the bottom right of the Commit message pane.</li>
<li><p>A Git Commit window opens to show you what you have committed.</p>
<p><img alt="Git Commit conf" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitCommitConf.png"/></p></li>
<li>Click the Close button when you have read the summary of the commit.<br/></li>
<li>Click the X button in the top right corner of the Review Changes window to close it.<br/></li>
<li>The .gitignore will no longer be displayed in the Git tab.</li>
<li><p>Note the branch name is now master. This is seen by master being displayed next to the tools icon (cog) in the Git tab.</p></li>
</ul>
<p><strong>Commit messages</strong> are a reminder to you, and possibly others, of what changed in the project with this commit. It should be short (think tweet) since it will most often be viewed as a single line in a log of commits. The convention we will use in these articles is to start the commit message with the action, which is typically "added", "changed", or "removed". The action will be followed with what the action applied to. So examples would be "Added x feature" and "Changed y function's parameters".</p>
<p>The project history is summarized in a <strong>log</strong>.</p>
<p>We will display the log of our project.</p>
<ul>
<li>Click on the history icon (looks like a clock and is left of the tools icon) in the Git tab.<br/></li>
<li><p>The Review Changes window will be opened.</p>
<p><img alt="Git History" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitHistory.png"/></p></li>
<li>The master branch is displayed in the top pane. There is currently only one commit on the master branch. RStudio displays the branch, commit message text, who made the commit, date of commit, and an SHA identifier for each commit. The SHA identifier is useful when using Git commands from a shell. We will not need these SHA identifiers in RStudio. We will see more of the logs in the following articles.<br/></li>
<li>The lower pane displays the changes to the files made with the selected commit. This is the same pane that we saw when we committed the .gitignore file.<br/></li>
<li>The view in the Review Changes window can be changed between the history view (our current view) and the changes view (the view we used to commit.) To change the view click on the Changes or History button in the top left corner of the window.<br/></li>
<li><p>Click the red X in the upper right corner of the Review Changes window to close the window.</p></li>
</ul>
<p>The next articles will cover several additional Git functions. These are:</p>
<ul>
<li><strong>diff</strong>, displays what has changed between commits<br/></li>
<li><strong>revert</strong>, undo commits<br/></li>
<li><strong>Central repository</strong>, support for a back up of your project on the network. This is useful when you work on a project while not connected to the network, such as when using a laptop.</li>
</ul>
<p>The Git functionality supported in RStudio provides what is needed for day to day to source control. This functionality is only a small set of Git's features. All of Git's functionality can be used with R projects. The additional Git functions would need to be accessed using a Git GUI program such as SourceTree. See the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article for information on Git GUI's.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown.html">R Markdown</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a></p>
<p>Last Revised: 4/13/2015</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_Start.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_IDE.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_ToolsMenu.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GlbOptn.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_FileMenu.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_NewProj.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_NP_NDir.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_NP_NP.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_File_OP.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_OP_Done.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_EmptyRepo.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitIgnore.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitIgnoreSave.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitStaged.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GITCommitMsg.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitCommitConf.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_GitHistory.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: R Markdown</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#files-types">Files types</a></li>
<li><a href="#markdown-and-r-markdown">Markdown and R Markdown</a></li>
<li><a href="#creating-an-r-markdown-file">Creating an R Markdown file</a></li>
<li><a href="#file-tab">File tab</a></li>
<li><a href="#text-formatting-using-markdown-syntax">Text formatting using Markdown syntax</a></li>
<li><a href="#mathematical-equation-formatting-commands-using-latex-syntax">Mathematical equation formatting commands using LaTeX syntax</a></li>
<li><a href="#r-code-formatting-commands-using-r-markdown-syntax">R code formatting commands using R Markdown syntax</a></li>
<li><a href="#git-diff">Git diff</a></li>
<li><a href="#latex-documents">LaTeX documents</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to <a href="http://rmarkdown.rstudio.com/">R Markdown</a>, a document writing program, and demonstrates using RStudio's Git diff, a tool to examine when prior changes were made to a project. These tools are part of RStudio's development environment. They help you work more efficiently.</p>
<p>R Markdown has two advantages that are of interest to a researcher. The first is it allows the results of R code to be directly inserted into formatted documents. The second advantage is it is incredibly easy to use. This ease is a result of R Markdown only using a small set of features and this reduces the complexity of the needed commands. This set of features supports the most commonly used formatting, resulting in the ability to create most documents. These features make R Markdown documents easy to write and the process less error prone.</p>
<p>Git diff allows you to look at what has changed in a file, or files, between any two saved project states. This can be very helpful in determining why results have changed.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercise will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Confirm that there is a Git tab in one of the tab panes.</li>
</ul>
</div>
<div class="section level2" id="files-types">
<h2>Files types</h2>
<p>RStudio is able to work with a variety of programming languages. This article series covers two of these program languages, R and R Markdown. This article provides an introduction to <strong>R Markdown</strong> files, which have a file type of .Rmd. R Programs are called <strong>R scripts</strong>, which have file type .R. The next article introduces <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a>.</p>
<p>This article series will use .txt and .csv files for datasets. These are the common file types used to import text datasets. The use of these file types will be covered in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep.html">data preparation</a> article. This article series will not make use of R's dedicated data file type for data, .RData.</p>
</div>
<div class="section level2" id="markdown-and-r-markdown">
<h2>Markdown and R Markdown</h2>
<p><strong>Markdown</strong> is a tool used to create formatted documents. Markdown source files, file type .md, contain text and formatting commands. Markdown's formatting commands are simpler than most other formatting languages, such as LaTeX or HTML, because it has a smaller number of features. This small set of features supports the most commonly used formatting. The source files are also easier to read than LaTeX or HTML. Markdown is a good choice to format most documents.</p>
<p><a href="http://rmarkdown.rstudio.com/">R Markdown</a> is an extension of Markdown. R Markdown adds a few features which include R code and results in the formatted document. This allow you write documents which integrate results from your analysis. Incorporating R results directly into your documents is an important step in reproducible research. Any changes that occur in either your data set or the analysis are automatically updated in your document the next time the document is created. There is no more going back through documents trying to find every thing that needs to be fixed when an analysis is rerun. This results in not only greater efficiency, but also fewer errors in documents.</p>
<p>RStudio creates a document, this is called <strong>knitting</strong>, from an .Rmd file in two steps. In the first step, the R commands are run. The results of the R commands are incorporated with the text and Markdown commands from the .Rmd file. The result of the first step is a .md file. The second step uses the Markdown formatting commands to format the final document. These steps are done together for you by simply pushing the knit button in RStudio.</p>
<p>R Markdown files can be knit to html, pdf, or Word documents. The knitted documents should not be changed by hand. Any edits that are made by hand will be lost when the document is knit again. We do not recommend knitting to Word, because a Word document is a form that is tempting to edit. We recommend knitting to either pdf or HTML files. Programs to read .html and .pdf files are widely available at no cost. In this article series we will generate HTML files.</p>
<p>Writing R Markdown documents is a little different process than with "What You See Is What You Get" (WYSIWYG) editors, such as Microsoft Word. The examples and exercises in this article series are designed to give you the practice and experience needed to be comfortable with this type of document creation process. As you start working with R Markdown, you may find it convenient to knit your document often. As you gain experience with R Markdown, you will knit much less frequently.</p>
</div>
<div class="section level2" id="creating-an-r-markdown-file">
<h2>Creating an R Markdown file</h2>
<p>To start a document we need to create a new R Markdown file.</p>
<ul>
<li><p>From the File menu, select New File and then R Markdown from the drop down menus.</p>
<p><img alt="IDE New File" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_New_File.png"/></p></li>
<li><p>A New R Markdown window will open. Enter a title, here we will use "R Markdown Examples". This is the title which will be displayed in the document and is not the name of the file.</p>
<p><img alt="IDE New File" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_NewRMarkdown.png"/></p></li>
<li><p>Click the OK button in the New R Markdown window.</p></li>
<li><p>This new R Markdown file is now open in RStudio. The file has not been named or saved. Click the save icon, which looks like a floppy disk, in the source pane.</p></li>
<li><p>A Save File window will open. Since we are in a project, RStudio sets the folder to the project folder. If you want the file saved in another folder, such as a sub folder of the project, you navigate to the desired folder. We will use the default of the project folder. Enter the name of the file, here we will use "RmdExamples". Click the Save button.</p></li>
<li><p>In the Git tab you can see that the Git status of RmdExamples.Rmd has not been established. That is because we have not either added this file to the Git repository or told Git to ignore it. We will commit this file after we have modified it.</p></li>
</ul>
<div class="section level4" id="exercises">
<h4>Exercises</h4>
<ol style="list-style-type: decimal">
<li><p>Open a new R Markdown file with an output format of HTML. Give the document the title "My RFR class notes".</p></li>
<li><p>Save the file created in exercise 1 as "Notes" in the RFR project folder.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown_Sol.html">Solutions</a></p>
</div>
</div>
<div class="section level2" id="file-tab">
<h2>File tab</h2>
<p>Notice in the Files tab that the files RmdExamples.Rmd and Notes.Rmd are now seen in the the RFR project folder.</p>
<ul>
<li><p>If the Files tab is not displayed, click on the tab labeled Files.</p>
<p><img alt="IDE File tab" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_FileTab.png"/></p></li>
</ul>
<p>The File tab can be used to open and move files similarly to the Windows Explorer window in the Microsoft Windows environment. If subfolders are added to the project folder, navigating to these folders is also the same as in Windows.</p>
</div>
<div class="section level2" id="text-formatting-using-markdown-syntax">
<h2>Text formatting using Markdown syntax</h2>
<p>Markdown files can be written using any plain text editor such as notepad. We will write our Markdown files using RStudio's editor.</p>
<p>R Markdown files start with a set of lines which begin with --- on a line and end similarly with a line containing --- . This set of lines between and including the lines with ---, is called the <strong>metadata section</strong>. Markdown commands and text will be added after the metadata section. The RmdExamples file, which is opened in the source pane, has the following metadata section.</p>
<pre><code>---  
title: "R Markdown Examples"  
output: html_document  
---  </code></pre>
<p>This article series will not change or edit the metadata section. For more information on the metadata section see <a href="http://rmarkdown.rstudio.com/html_document_format.html">html metadata section</a> and <a href="http://rmarkdown.rstudio.com/pdf_document_format.html">pdf metadata section</a>.</p>
<p>Markdown uses #, *, blank lines, and indented lines for the most common formatting commands. This makes Markdown documents easy to type and makes it easy to read the unformatted document. We will look at a simple example as an introduction to the Markdown syntax.</p>
<ul>
<li><p>Let's say we wish to create a document with an introductory paragraph followed by a sub header, another paragraph, and finally a list.</p></li>
<li><p>The following Markdown source text is one way to write this example.</p>
<pre><code>Introductory paragraph text.  

#### Sub header text  

Another paragraph text.  

1. List item one text  
2. List item two text </code></pre></li>
<li><p>The above Markdown produces the following in the knitted document.</p>
<p>Introductory paragraph text.</p>
<h4 id="sub-header-text">Sub header text</h4>
<p>Another paragraph text.</p>
<ol style="list-style-type: decimal">
<li>List item one text<br/>
</li>
<li>List item two text</li>
</ol></li>
</ul>
<p>This example uses just a few formatting commands. Blank lines indicate the end of a paragraph. Placing one to six # at the beginning of a line indicate what follows is a header with the header level being the number of # used. Starting a line with 1. starts a numbered list.</p>
<p>Run this example code in your RmdExample file.</p>
<ul>
<li>Delete all the lines which follow the metadata section in the RmdExample file.</li>
<li>Copy the Markdown source text from the example above and paste the source text in the RmdExample file after the metadata section. It is best to leave at least one blank line after the metadata section before your code starts.</li>
<li>Click on the knit button in the source pane.</li>
<li>A viewer window will open with your example document displayed. Your viewer should display the title of the document, which is "R Markdown Examples" here. Following the title should be the text formatted similarly to what is shown above. Note there will be some differences in formatting due to the styles associated with the web site of this article.</li>
</ul>
<p>Now that we have made some changes to the RmdExamples file, we will do some source control work.</p>
<ul>
<li><p>Add RmdExamples.html to gitignore. Remember this is done by selecting RmdExamples.html in the Git tab and then selecting Ignore from the tools drop down menu.</p></li>
<li><p>Stage RmdExamples.Rmd and gitignore. Remember this is done by clicking the staged box in front of each file in the Git tab.</p></li>
<li><p>Commit the files with the commit message "Added Markdown examples". Remember this is done by clicking the commit icon in the Git tab and then entering the message in the Commit message box.</p></li>
<li><p>Close the Git commit and RStudio Review Changes windows</p></li>
</ul>
<div class="section level3" id="markdown-syntax">
<h3>Markdown syntax</h3>
<p>A <strong>paragraph</strong> is started and ended with a blank line before and after the paragraph text. There can be no blank line within the text of a paragraph. Alternately, the end of a paragraph can be indicated with two blank spaces at the end of a line of text.</p>
<p>There are six <strong>header</strong> levels. The number of # determines the header level. A blank line is required prior to the line which starts a header. Examples of headers one through three are shown below. Note the formatting in your document may be slightly different due to the styles applied to this web site.</p>
<ul>
<li><p>Header examples</p>
<pre><code># header 1  </code></pre>
<p>results in</p>
<h1 id="header-1">header 1</h1>
<pre><code>## header 2  </code></pre>
<p>results in</p>
<h2 id="header-2">header 2</h2>
<pre><code>### header 3  </code></pre>
<p>results in</p>
<h3 id="header-3">header 3</h3></li>
</ul>
<p>There are several <strong>font modifications</strong> which can be used in your documents. The number of "*"s are used to determine italic and bold fonts. These font modifications are shown in the following example.</p>
<ul>
<li><p>Font modification examples</p>
<pre><code> *italic* **bold**  ***bold and italic***  ~~strikethrough~~  </code></pre>
<p>results in</p>
<p><em>italic</em> <strong>bold</strong> <strong><em>bold and italic</em></strong> <del>strikethrough</del></p></li>
</ul>
<p>There are two <strong>list</strong> types, <strong>enumerated</strong> and <strong>unordered</strong>. Unordered list items are identified with the * symbol at the beginning of a paragraph. This means there must be a blank before the list item or the prior line must end with two blank spaces. An enumerated list item is identified with an integer number followed by a period at the beginning of a paragraph. The first number of the list is the integer number provided for the first item in the list. The following items are numbered sequentially from the start number regardless of the number used to identify the subsequent enumerated items.</p>
<ul>
<li><p>Unordered list example</p>
<pre><code>* unordered item
* another unordered item  </code></pre>
<p>results in</p>
<ul>
<li>unordered item</li>
<li>another unordered item</li>
</ul></li>
<li><p>Enumerated list example, starting with number 1</p>
<pre><code>1. numbered item  
1. another numbered item  </code></pre>
<p>results in</p>
<ol style="list-style-type: decimal">
<li>numbered item<br/>
</li>
<li>another numbered item</li>
</ol></li>
</ul>
<p>Text can be <strong>indented</strong> two ways depending on if the indent is within a list or not. Within a list, four spaces at the begin of the line indicates the text is to be indented one nesting level. Use four additional spaces for each additional nesting level. To indent text which is not in a list, use a block quote. This is done by starting a line with four spaces.</p>
<ul>
<li><p>Indented text example</p>
<p>Indenting a block quote</p>
<pre><code>    indented text  </code></pre>
<p>results in</p>
<blockquote>
<p>indented text</p>
</blockquote>
<p>Indenting a text within a list</p>
<pre><code>* List item
    indented text  </code></pre>
<p>results in</p>
<ul>
<li>List item<br/>
indented text</li>
</ul></li>
</ul>
<p><strong>Links</strong> to other documents make use of [] for the displayed text and () for the path to the document.</p>
<ul>
<li><p>link example</p>
<pre><code>[link text](link path)  </code></pre>
<p>results in</p>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/link%20path">link text</a></p></li>
</ul>
<p>Information on additional Markdown formatting commands can be found at <a href="http://rmarkdown.rstudio.com/authoring_basics.html">Markdown Basics</a>.</p>
<div class="section level4" id="exercises-1">
<h4>Exercises</h4>
<p>These exercises are to be done in the Notes.Rmd file that you created above.</p>
<ol start="3" style="list-style-type: decimal">
<li><p>Remove all of the document text and commands after the metadata section.</p></li>
<li><p>Add a level 2 header with the title of this article.</p></li>
<li><p>Following the header created in the exercise above, write a note to remind yourself of at least one thing about formatting using Markdown.</p></li>
<li><p>In the text you wrote for the exercise above, use a text modifier (bold, italic, etc.) to highlight a key work or phrase from the text.</p></li>
<li><p>Ignore the Notes.html file and commit the Notes.Rmd and .gitignore files with the commit message "Added notes for R Markdown article".</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown_Sol.html">Solutions</a></p>
</div>
</div>
</div>
<div class="section level2" id="mathematical-equation-formatting-commands-using-latex-syntax">
<h2>Mathematical equation formatting commands using LaTeX syntax</h2>
<p>Mathematical expressions and equations can be formatted using LaTeX math formatting. LaTeX math formatting can be used for all three output formats, HTML, pdf, and Word documents. Information of formatting mathematics in LaTeX can be found at <a href="http://en.wikibooks.org/wiki/LaTeX/Mathematics">LaTeX/Mathematics</a>.</p>
<p>HTML pages which include LaTeX formatting use mathjax and javascript for this formatting. Readers may be prompted to allow javascript to run when the webpage is opened.</p>
<p>The syntax to start and end LaTeX math formatting is done with either $ or $$.</p>
<ul>
<li><p>LaTeX formatting examples</p>
<pre><code>Inline LaTeX equation $y = 3 + 2x$     </code></pre>
<p>results in</p>
<p>Inline LaTeX equation <span class="math inline">\(y = 3 + 2x\)</span></p>
<pre><code>LaTeX equation $$y = 3 + 2x$$  </code></pre>
<p>results in</p>
<p>LaTeX equation <span class="math display">\[y = 3 + 2x\]</span></p></li>
</ul>
</div>
<div class="section level2" id="r-code-formatting-commands-using-r-markdown-syntax">
<h2>R code formatting commands using R Markdown syntax</h2>
<p>R code can be included in a document as inline code or as a <strong>chunk</strong>. A code chunk is a block of code which is rendered in the document as a separate element in the document, not part of a paragraph of text. This may be a figure or a block of block of code and results. Inline R code displays only the text results of the R code in the document. The text returned by R will receive the same formatting as the text it is inline with (paragraph, header, etc.) Any graphics or other non-text results from inline code will not be included in the document.</p>
<p>We will look at a simple example as an introduction to including R code in R Markdown.</p>
<ul>
<li><p>As an example, lets say we have a document which is to have the value of the constant <span class="math inline">\(e\)</span> and a scatter plot.</p></li>
<li><p>The document text might be.</p>
<pre><code>#### Example of integrated R results  

This is inline code to produce the constant $e$, `r exp(1)`.

This is an R chunk which produces a graph.

```{r }
plot(1:10,(1:10+rnorm(10)) )
```</code></pre></li>
<li><p>Add the lines above to your RmdExamples file. Add these new lines at the bottom of the file, after the lines for the Markdown example from above.</p></li>
<li><p>Knit RmdExamples document and you should see the following lines having been added to the HTML file.</p>
<h4 id="example-of-integrated-r-results">Example of integrated R results</h4>
<p>This is inline code to produce the constant <span class="math inline">\(e\)</span>, 2.7182818.</p>
<p>This is an R chunk which produces a graph.</p>
<pre class="r"><code>plot(1:10,(1:10+rnorm(10)) ) </code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown_files/figure-html/unnamed-chunk-3-1.png" title="" width="672"/></p></li>
<li><p>Commit the changes to RmdExmples.Rmd with the commit message of "Added R chunk example to RmdExamples".</p></li>
</ul>
<div class="section level3" id="r-code-syntax">
<h3>R code syntax</h3>
<p>Inline code is identified with a back tick (above the tab key on a keyboard) followed by r and ends with a back tick.</p>
<ul>
<li><p>Example</p>
<pre><code>$\pi$ = `r pi`  </code></pre>
<p>results in</p>
<p><span class="math inline">\(\pi\)</span> = 3.1415927</p></li>
</ul>
<p>Chunks start with ```{r <em>name</em>, <em>options</em>} and end with ```. The <em>name</em> is an optional identifier for the chunk and <em>options</em> allow for control of the execution and formatting of the R chunk and it's results.</p>
<ul>
<li><p>Example</p>
<p>```{r }<br/>
 pi<br/>
 ```<br/>
results in</p>
<pre class="r"><code>pi </code></pre>
<pre><code>## [1] 3.141593</code></pre></li>
</ul>
</div>
<div class="section level3" id="chunk-options">
<h3>Chunk options</h3>
<p>Chunk options allow control over the display of both the source R code and R's results. The following is a list of some common chunk options. We will use most of these options in this article series.</p>
<ul>
<li><strong>echo</strong> controls the display of the R source code. When set to FALSE, the R source code is not included in the document. The formatting of R's results is not affected by this option.</li>
<li><strong>comment</strong> controls what characters are displayed in front of R text results. When set to NA, no characters are displayed.</li>
<li><strong>results</strong> controls if text results are display and if they are formatted. When set to "hide", text results are not included in the document. When set to "asis", no formatting is done by knitr. This is useful for tables which have been formatted by R.</li>
<li><strong>message</strong> controls the display of messages. When set to FALSE, messages are not included in the document.</li>
<li><strong>warning</strong> controls the display of warning messages. When set to FALSE, warning messages are not included in the document.</li>
<li><strong>fig.show</strong> controls if graphics are displayed. When set to "hide", graphics are not included in the document.</li>
<li><strong>fig.align</strong> controls the horizontal position of graphics. When set to "center" results in the figure being centered. Left align is the default.</li>
<li><strong>out.height</strong> controls the height of the figure in the final document.</li>
<li><strong>out.width</strong> controls the width of the figure in the final document.</li>
<li><strong>fig.cap</strong> controls the caption which is displayed with a graphic. This is only supported for pdf documents. This is a result of RStudio using Pandoc to format the Markdown for pdf documents.</li>
</ul>
<p>For a more complete discussion of code chunk options see <a href="http://yihui.name/knitr/options#chunk_options">Options:Chunk options</a>.</p>
<p>The line which starts a chunk cannot be split into multiple lines. This results in some options list extending beyond the width of a line in your editor. This causes no issues for RStudio, though the R Markdown code is slightly less easy to read.</p>
<p>In most documents you will only want to see selected results from your R code. You will want the R code to run <strong>quietly</strong> in the background. Then you will use either inline or chunks to produce the selected results needed in the document. Chunk options allow for situations like this. The following example uses some made up results. We do not want to see the code which produced the results in the document. But we do want to include the results in the document.</p>
<ul>
<li><p>The following is an example of R Markdown not displaying anything other than errors from a code block.</p>
<pre><code>```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE, fig.show='hide'}
# Made up results 
obs = 57
pValue = .003 
```

#### Summary

The test of `r obs` subjects resulted  
in a p-value of `r pValue `.  </code></pre></li>
<li><p>Produces the following two lines in a document.</p>
<h4 id="summary">Summary</h4>
<p>The test of 57 subjects resulted in a p-value of 0.003.</p></li>
</ul>
<div class="section level4" id="exercises-2">
<h4>Exercises</h4>
<p>These exercises are to be done in the Notes.Rmd file that you created above. Add the work for these problems at the end of the file, after the work done for the previous exercises.</p>
<ol start="8" style="list-style-type: decimal">
<li><p>Demonstrate the use of in line R code to calculate the results of ((43 - 17)*.1)^2.</p></li>
<li><p>Demonstrate the use of a chunk to calculate the expression from the prior problem.</p></li>
<li><p>Same problem as prior problem with the addition of using chunk option(s) to prevent the R source code from being displayed.</p></li>
<li><p>Commit the Notes.Rmd file with the commit message "Added R code examples to Notes".</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown_Sol.html">Solutions</a></p>
</div>
</div>
</div>
<div class="section level2" id="git-diff">
<h2>Git diff</h2>
<p>One of the benefits of using Git for source control is its ability to display what has changed and when. This is done with a Git <strong>diff</strong>. A diff shows what has changed between any two project states. A project state is either a set of files as they were at a prior commit or the files as they are in the work directory. RStudio allows you to diff between adjacent project states. This is either the work directory to the last commit or any commit with the prior commit. To view diffs between other project states use a Git GUI such as SourceTree.</p>
<p>RStudio's Review Changes window is used to view the diffs. This is the same Review Changes window which we used in the Project's article when committing the .gitignore file and to view the project log. Clicking the diff icon in the Git tab opens the Review Changes window with the Changes view displayed. This view shows the diff between the work directory and the most recently committed files. This view was used in the Project's article when committing the .gitignore file. Clicking the history icon, which looks like a clock in the Git tab, opens the History view in the Review Changes window. This view shows the changes between any two adjacent commits. This view was used in the Project's article when we viewed the log. To switch between the Changes and History views use the Changes and History buttons in the upper left corner of the Review Changes window.</p>
<p>We have seen the diff of the work directory with each of the commit we have done. We will look at the diffs between adjacent commits for the RmdExample.Rmd file.</p>
<ul>
<li><p>Click on the History icon in the Git tab.</p></li>
<li><p>The Review Changes window opens with the History view displayed.</p></li>
<li><p>In the log pane, top pane, in the Review Changes window, click on the "Added Markdown examples" commit.</p></li>
<li><p>The "Added Markdown examples" commit will be highlighted in log pane. In the review pane, lower pane, you will see the list of files which were committed. Below this list are the changes from the prior commit which were made to each of these files. The prior commit here is the "Initial commit" commit.</p>
<p><img alt="Git diff Markdown examples" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_DiffMd.png"/></p></li>
<li><p>The changes to a particular file, for this commit, can be viewed by either clicking on the file name in the list of files or by using the scroll bar on the right.</p></li>
<li><p>In the log pane click on the "Added R chunk example to RmdExamples" commit.</p></li>
<li><p>In the review pane you will see the changes made from the prior commit, here that is the "Added Markdown examples" commit.</p>
<p><img alt="Git diff R Chunk" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_DiffChunk.png"/></p></li>
</ul>
<p>The log for a project can get large. Filters can be used to focus the log on what is of interest. This can make it easier to find changes that you are interested.</p>
<p>We will filter the log to look at changes to the RmdExamples file.</p>
<ul>
<li><p>In the RStudio: Review Changes window, click on the (all commits) menu at the top of the window.</p></li>
<li><p>Select Filter by File from the menu.</p></li>
<li><p>Select RmdExamples.Rmd from the menu in the Choose File window.</p></li>
<li><p>Click the open button at the bottom of the Choose File window.</p></li>
<li><p>The log now only shows two commits. These are the only commits which included changes to the RmdExamples.Rmd file.</p>
<p><img alt="Git Log Filter" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_LogFilter.png"/></p></li>
</ul>
</div>
<div class="section level2" id="latex-documents">
<h2>LaTeX documents</h2>
<p>RStudio can generate LaTeX source code files from R Markdown. This can be useful at times, such as for submission to publications which require LaTeX source code. LateX source can be created when the output document is pdf. The metadata option "keep_tex: true" tells RStudio to keep a document with the LaTeX source code. The metadata section would look similar to the following.</p>
<pre><code>---   
title: "Example"  
output:  
  pdf_document:  
    fig_caption: yes  
    keep_tex: true
---    </code></pre>
<p>RStudio uses the Pandoc program to knit an R Markdown file to pdf. This, as usual, is done for you and you do not need to know the details. What may be help for pdf docs is Pandoc supports all R Markdown formatting commands as well as a few others. Information on additional Markdown formatting commands can be found at <a href="http://rmarkdown.rstudio.com/authoring_pandoc_markdown.html">Pandoc Markdown</a>.</p>
<div class="section level3" id="r-markdown-verse-sweave">
<h3>R Markdown verse Sweave</h3>
<p>R Markdown does have its limitations. A key limitation is there is no support for figure and table captions or numbers. For a typical article with five to ten figures and tables, these can be done with R code. Examples of this will be provided in later articles in this series.</p>
<p>If you need formatting which is not supported by Markdown, LaTeX formatting commands can be used within a R Markdown file when the output type is pdf. If this is done, the document can only be knit to pdf.</p>
<p>For documents with many figures and tables or other special formatting needs, such as a thesis, Markdown is typically not the optimal choice. The better choice would likely be to use Sweave files with LaTeX text formatting. Sweave, like R Markdown, allows the inclusion of inline R code and chunks. The syntax is a little different for inline code and chunks, though the general approach is the same. RStudio will compile a Sweave document similarly to R Markdown files, though it does not use the knit button.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Projects.html">R projects</a></p>
<p>Last Revised: 4/16/2015</p>
</div>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_P_New_File.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_NewRMarkdown.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_FileTab.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown_files/figure-html/unnamed-chunk-3-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_DiffMd.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_DiffChunk.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_Rmd_LogFilter.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: R Markdown solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a>. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<h4>
Exercise solutions
</h4>
<ol style="list-style-type: decimal">
<li><p>Open a new R Markdown file with an output format of HTML. Give the document the title "My RFR class notes".</p>
<p>There is no code associated with the solution to this problem.</p>
<p>The meta data section of the .Rmd file you opened should be as follows</p>
<pre><code>---
title: "My RFR class notes"
output: html_document
---</code></pre></li>
<li><p>Save the file created in exercise 1 as "Notes" in the RFR project folder.</p>
<p>There is no code associated with the solution to this problem.</p></li>
<li><p>Remove all of the document text and commands after the metadata section.</p>
<p>There is no code associated with the solution to this problem.</p></li>
<li><p>Add a level 2 header with the title of this article.</p>
<pre><code>## R Markdown</code></pre></li>
<li><p>Following the header created in the exercise above, write a note to remind yourself of at least one thing about formatting using Markdown.</p>
<pre><code>An enumerated list can start with any integer value.
All additional items in the list are numbered
sequentially from this starting integer value.</code></pre></li>
<li><p>In the text you wrote for the exercise above, use a text modifier (bold, italic, etc.) to highlight a key work or phrase from the text.</p>
<pre><code>An **enumerated list** can start with ***any integer*** value.
All additional items in the list are numbered
***sequentially*** from this starting integer value.</code></pre></li>
<li><p>Ignore the Notes.html file and commit the Notes.Rmd and .gitignore files with the commit message "Added notes for R Markdown article".</p>
<p>There is no code associated with the solution to this problem.</p></li>
<li><p>Demonstrate the use of in line R code to calculate the results of ((43 - 17)*.1)^2.</p>
<pre><code>The following are a few examples of the use of R code

In line calculation `r ((43 - 17)*.1)^2`</code></pre></li>
<li><p>Demonstrate the use of a chunk to calculate the expression from the prior problem.</p>
<pre><code>A code block

```{r}
((43 - 17)*.1)^2
```</code></pre></li>
<li><p>Same problem as prior problem with the addition of using chunk option(s) to prevent the R source code from being displayed.</p>
<pre><code>A code block which does not echo the source text

```{r echo=FALSE}
((43 - 17)*.1)^2
```</code></pre></li>
<li><p>Commit the Notes.Rmd file with the commit message "Added R code examples to Notes".</p>
<p>There is no code associated with the solution to this problem.</p></li>
</ol>
<ul>
<li><p>One possible completed Notes.Rmd file</p>
<pre><code>---
title: "My RFR class notes"
output: html_document
---

## R for Researchers: R Markdown

An **enumerated list** can start with ***any integer*** value.
All additional items in the list are numbered
***sequentially*** from this starting integer value.

The following are a few examples of the use of R code

In line calculation `r ((43 - 17)*.1)^2`

A code block

```{r}
((43 - 17)*.1)^2
```

A code block which does not echo the source text

```{r echo=FALSE}
((43 - 17)*.1)^2
```</code></pre></li>
</ul>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown.html">R Markdown</a> article</p>
<p>Last Revised: 2/2/2015</p>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: R Scripts</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#workflow">Workflow</a></li>
<li><a href="#r-commands-and-functions">R commands and functions</a></li>
<li><a href="#scripts">Scripts</a></li>
<li><a href="#setting-up-your-r-session">Setting up your R session</a></li>
<li><a href="#git-accessing-prior-versions">Git accessing prior versions</a></li>
<li><a href="#git-central-repositories">Git central repositories</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to R commands, R programs called scripts, and Git central repositories.</p>
<p>This introduction covers commands used to get help and prepare an R session for your work.</p>
<p>Git central repositories are useful to provide a backup or your project and to coordinate the work done on multiple computers. Eventually most of us will need to work with others on projects. These Git tools will allow you the freedom to work on your part independently while easily coordinating with the others.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercises will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Confirm that there is a Git tab in one of the tab panes.</li>
<li>Copy the Datasets folder with all of its content from "X:\SSCC Tutorials\RFR" on the SSCC network and paste the folder into your RFR project folder. If you are accessing this article from the web, you will need to create a Datasets folder in your RFR project directory. Then copy the files individually from <a href="https://ssc.wisc.edu/sscc/pubs/RFR/Datasets/">RFR/Datasets</a> and save them to your datasets folder.</li>
</ul>
</div>
<div class="section level2" id="workflow">
<h2>Workflow</h2>
<p>R is an interpreted language. This means R commands can be entered and run individually, without being part of a compiled program. This allows great flexibility to interactively explore and analyze data. While exploring data interactively is effective, a researcher's work also needs to be reproducible. The workflow used in this article series allows for both interactive exploration and reproducibility. This is achieved by doing our exploration using scripts and source control of the scripts.</p>
<p>Our typical work flow will be</p>
<ul>
<li>Open a script, either new or existing.</li>
<li>Add or change a single command, or a few commands, in the script.</li>
<li>Run the commands from the script.</li>
<li>Update the commands to repair errors or adjust the analysis and re-run them.</li>
<li>Repeat the add and update cycle as you explore your data and build an analysis.</li>
<li>When you have some functionality working, add the R code to R Markdown and write the supporting text in R markdown.</li>
<li>Commit the changed source files.</li>
</ul>
<p>The R Markdown and source control steps are important for their roles in reproducibility. We will practice these steps through this article series to help you incorporate them into your work habits.</p>
<p>Some will find it more natural to interleave creating chunks of R code with writing the accompanying document text. Others will find it more natural to write all or most of the R code and then write the document. The nature of your research project might also influence when to create the markdown document. When your document is highly influenced by the analysis, delaying writing the document may be more optimal. When the document form is not dependent on the analysis, there may be benefits to writing the document more in parallel with the analysis. With either approach there are typically some adjustments to the R code and Markdown document at the end to clarify the results of the analysis in the paper.</p>
</div>
<div class="section level2" id="r-commands-and-functions">
<h2>R commands and functions</h2>
<p>The <strong>console</strong> is where R commands are entered, run, and text results displayed. Commands can be entered into the console at the prompt or sent to the console from a script or R markdown file. To support reproducibility, we will be entering our commands in a script and then send them to the console. Even though we will not be entering many commands at the console, you will need to know a little about how the console works to use it with your scripts.</p>
<p>The basics of using the console are as follows.</p>
<ul>
<li>&gt; is the command prompt. R will not display the command prompt until it has completed running the prior command. If the prompt is not displayed, R is not ready for a new command.</li>
<li>+ is the prompt for the continuation of a command. If R reaches the end of a line and the current R command is not complete, R assumes the next line continues the prior line. Splitting some commands across multiple lines can improve the readability of you source code by allowing the structure of the command or data to be seen visually.</li>
<li>The escape key will end a command. This is handy if R thinks the current command is not finished and you see an error in what has already been entered.</li>
<li>The page up and page down keys are used to scroll through the history of prior commands. A prior command can be recalled from the history, edited if needed, and then run again.</li>
</ul>
<div class="section level3" id="commands">
<h3>Commands</h3>
<p>R commands are similar to commands from general computing languages like C++ or python. This is a little different from the syntax of languages such as Stata or SAS. R commands typically either assign values to an <strong>object</strong> or control which commands will get run. R objects will be covered in the next article. For now you can think of an object as a variable.</p>
</div>
<div class="section level3" id="functions">
<h3>Functions</h3>
<p>An R <strong>function</strong> is similar to a Stata and SAS command. A function performs some action and the action taken is adjusted based on the parameters given. In this series we use the term command in a very loose sense to refer to a function as well as to formal R commands.</p>
<ul>
<li><p>Syntax and use of functions</p>
<p><em>functionName</em>(<em>parameterList</em>)</p>
<p><em>functionName</em> is the name that identifies the function in R.</p>
<p><em>parameterList</em> is a list of parameters. Parameters in the list are separated by commas. Parameters can be identified by either their position in the list or by a name. In most instances using the parameter name enhances the readability of your code. We will primarily use parameter names in this article series. There is one case where we will drop the use of parameter names. This is when the function name makes it clear what the first parameter is. An example of this is provided below with the help function.</p>
<p>An R function returns an object as it's result. The returned object must be saved if it is to be used again.</p>
<p>The use of "()" directly following a name identifies the name as a function and the contents of the parentheses as parameters. The parentheses are needed for a function even if there are no parameters. Parentheses can also be used in an expression to identify order of operations. When used for order of operations, the parentheses will not directly follow a name. In the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep.html">Data preparation</a> article you will also see the use of the square brackets "[]". When "[]" follows a name, the name identifies a data object and not a function. The use of these brackets will be demonstrated further in this and the following lesson.</p></li>
</ul>
</div>
<div class="section level3" id="expressions">
<h3>Expressions</h3>
<p>An <strong>Expression</strong> in R is any text which, when interpreted in R, results in a data object. Beneath this simple definition is one of the powerful constructs of R. An expression can also be used anywhere that a value is expected. This allows simple functions to be linked together to do much more sophisticated operations. This approach of building more specific results using this feature will be demonstrated in this article series as we learn more commands.</p>
<p>Expressions include numeric, logical, or character values with their associated operators. These values can be a variable, a constant, or the returned value from a function.</p>
<ul>
<li><p>The numeric operators include +, -, *, /, ^, log(<em>expression</em>), exp(<em>expression</em>) which are addition, subtraction, multiply, divide, natural log, and the constant <span class="math inline">\(e\)</span> raised to the power given by <em>expression</em> respectively.</p></li>
<li><p>The logical operators include: == the logical test for equality, &lt; less than, &lt;= less than or equal, &gt; and &gt;= similarly are greater, | logical or, &amp; logical and.</p></li>
<li><p>The character operators are more special purpose and will not in general be covered. A few of them will be introduced where needed in subsequent articles.</p></li>
</ul>
</div>
<div class="section level3" id="our-first-commands">
<h3>Our first commands</h3>
<p>The first commands you will need are provided below.</p>
<ul>
<li><p>Implied <strong>display</strong> command. This is used to display an R object at the console.</p>
<p><em>expression</em></p>
<p>The value of <em>expression</em> will be displayed on the console.</p>
<p>Enter the following at the console.</p>
<pre><code>(3 * 5 + 1) / 2</code></pre>
<p>The following will be displayed at the console</p>
<pre><code>[1] 8</code></pre>
<p>Note, since the "()" did not follow a name, they were used as grouping operators and not as a means of identifying a parameter list.</p></li>
<li><p><strong>Assignment</strong> command</p>
<p><em>object</em> &lt;- <em>expression</em></p>
<p><em>Object</em> is set to the value of <em>expression</em>.</p>
<ul>
<li>&lt;- is the assignment operator.</li>
</ul>
<p>Enter the following at the console.</p>
<pre><code>x &lt;- (3 * 5 + 1) / 2</code></pre>
<p>Note, nothing was displayed. To see what was assigned to x, you would have to enter "x" at the console.</p></li>
<li><p>A <strong>Comment</strong> is text to remind yourself, and others, of how to use your code and how it works. Comments are ignored (not treated as commands) by R.</p>
<p># <em>reminder text</em></p>
<ul>
<li>Comments start with a # and continue to the end of the current line. Comments can start at the first character of a line or may follow a command.</li>
</ul></li>
<li><p>The <strong>help</strong> and <strong>examples</strong> commands provide assistance with an object. Help provides a description of an object. The object may be a function or dataset. Example shows an example of the use of a function.</p>
<p>help(<em>topic</em>)</p>
<ul>
<li>Help results are displayed in the help tab.</li>
</ul>
<p>example(<em>topic</em>)</p>
<ul>
<li>Example text is displayed in the console.</li>
</ul>
<p>Help() and examples() are functions. There are a number of parameters which could be used with these functions. We are only interested in the first parameter of these functions which is named <em>topic</em>.</p>
<p>We will use help to get some information on the read.table function</p>
<ul>
<li><p>Enter the following at the command prompt in the console.</p>
<pre><code>help(read.table)</code></pre></li>
<li><p>Press the enter key to run the command.</p></li>
<li><p>Select the Help tab in the tools pane.</p></li>
<li><p>This could have also been entered as help(topic=read.table). The use of "topic=" does not enhance the readability of the code. This is one of the cases were we will identify the parameter by position.</p></li>
<li><p>A description of the function and it parameters will be displayed as is seen in the image below.</p>
<p><img alt="Help tab" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_Help.png"/></p></li>
</ul></li>
</ul>
<p>R's commands (functions) were written by many individuals over a large number of years. No central authority exists which controls naming conventions. This has lead to differences in names for similar objects (functions, parameters, etc.) This causes no problems for R. A little extra time is typically needed to learn R's parameter and function names. Use the help function to remind yourself as you learn the names in R.</p>
</div>
</div>
<div class="section level2" id="scripts">
<h2>Scripts</h2>
<p>An R <strong>script</strong> is a series of commands in a file. R scripts have a file extension of .R. Scripts are ordinary text files and can be written using any text editor. We will use RStudio's editor to write our scripts. Using R or RStudio's editors makes it easy to work interactively, running commands as they are written. The editors in R and RStudio do not automatically save changes made to a scripts. You will need to save on a regular basis when you use either of these editors.</p>
<p>Keeping your R scripts to a reasonable length makes them easier to work with. It is easier to find code if the file is smaller. Also you will likely want to use some, but not all, of your code in your R Markdown files. Segmenting your work with this in mind will also make creating your Markdown documents easier. Multiple scripts can be collected in a single script. This allows all your code to be run together. Running a script from another script will be demonstrated in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres.html">Data presentation</a> article using of the source() function.</p>
<p>We are going to create a script for you to enter and run the example commands from this lesson.</p>
<ul>
<li><p>Open a new R script file.</p></li>
<li><p>Save it as SalAnalysis.</p></li>
</ul>
</div>
<div class="section level2" id="setting-up-your-r-session">
<h2>Setting up your R session</h2>
<p>An R <strong>session</strong> is started when R or RStudio is started. R creates a <strong>workspace</strong> for each session. The workspace contains the objects that R knows about. Your data and functions are added to the workspace as you create them in your session. R loads a set of <strong>core</strong> functions as part of starting a session.</p>
<p>There are two aspects to getting your session ready to use. The first is loading any non-core commands you need. R commands (functions) are grouped in <strong>packages</strong>. A package typically includes a set of related functions. It is typical to load at least a few packages when starting R. The second aspect of session preparation is setting the <strong>work directory</strong>, where R will look for files.</p>
<div class="section level3" id="packages">
<h3>Packages</h3>
<p>The packages which make up the core functions and commands of R are loaded when R is started. There are many packages which extend R's commands beyond the core commands. These extension packages need to be <strong>loaded</strong> in each R session before you can use the functions they contain. The functions in these extensions range from widely used functions to obscure functions used by only a small number of people.</p>
<p>A package needs to be <strong>installed</strong> on your computer before you can load it into your session. R and RStudio manage a <strong>library</strong> of packages that have been installed on your computer.</p>
<p>Winstat has a number of common packages installed for you. The packages installed in your library can be seen in the packages tab.</p>
<p>Installing a package is shown here with the ggplot2 package being installed.</p>
<ul>
<li><p>Select the Packages tab. The tab should look like the image below with a list of packages already in your library.</p>
<p><img alt="Packages tab" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_PackageTab.png"/></p></li>
<li><p>Select the Install icon. An Install Packages window will open. Enter the package you want installed in the Packages box. The text will autocomplete once you have entered enough characters to distinguishing the package.</p>
<p><img alt="Packages install window" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_InstlPckg.png"/></p></li>
<li><p>Leave the other boxes as the defaults.</p></li>
<li><p>Click the install button in the Install Packages window and the package will be installed.</p></li>
</ul>
<p>The ggplot2 package is now installed and is in your library. The ggplot2 package can now be loaded in an R session.</p>
<ul>
<li><p>The command to load a package into your R session is</p>
<p>library(<em>packageName</em>)</p>
<p><em>PackageName</em> is the package which is to be loaded.</p></li>
</ul>
<p>There a few packages we will use in this article series. We will add code to your script to load these packages.</p>
<ul>
<li><p>Enter the following commands into your SalAnalysis script. (The lines can be copy and pasted from this file into your script. Remember to save after updating your script.)</p>
<pre><code>#####################################################
#####################################################
##
##   Demonstration from the R For Researchers series
##   
##   The focus of the analysis in these articles is
##   on demonstrating the use of R functions in the
##   analysis of data.  These analyses are not 
##   complete analysis.  They include only the steps
##   needed to demonstrate the use of the R
##   functions.
## 
##   Name        Date
##
#####################################################
#####################################################

#####################################################
#####################################################
##
##   Session Setup
##
#####################################################
#####################################################

library(faraway)      # glm support
library(MASS)         # negative binomial support
library(car)          # regression functions
library(lme4)         # random effects
library(ggplot2)      # plotting commands
library(reshape2)     # wide to tall reshaping
library(xtable)       # nice table formatting
library(knitr)        # kable table formatting
library(grid)         # units function for ggplot</code></pre></li>
<li>These commands need to be sent to the console to be run. Highlight the commands you wish to run in the editor.</li>
<li><p>Click the run icon, which is on the right in the top row of icons in the source pane. The run icon has a green arrow pointing to the right. If you hover over the icon you will see the text "Run the current line or selection" as seen in the image below.</p>
<p><img alt="Run script lines" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_Run.png"/></p></li>
<li><p>The results will be displayed in the console. The results should be similar to the following.</p>
<pre><code>
Attaching package: 'car'

The following objects are masked from 'package:faraway':

    logit, vif

Loading required package: Matrix</code></pre></li>
</ul>
<p>Notice that these packages required other packages to be loaded. R loaded these packages automatically. If any of the packages do not load, the package likely needs to be installed on your computer.</p>
<p>Several comment blocks were added to the script with the library functions. The first is used to identify what this script is for. The second is used to identify the beginning of the setup section of the script. Comment blocks make it easier to find sections of functionality in scripts. Its a good practice to use comment blocks to separate sections of your scripts.</p>
<p>It is also a good practice to load packages at the beginning of a script or R markdown file. If while working you discover you need another package loaded, add the library command for it at beginning of the file with the other library commands. By keeping the package loading at the beginning of the files, commands can be used anywhere in the file. This avoids having to look through a script to see if you have loaded a package for a function you need.</p>
</div>
<div class="section level3" id="work-directory">
<h3>Work directory</h3>
<p>Setting the work directory allows you to reference files without giving a full path name to the file. There are several advantage to setting your working directory. The most important advantage occurs when the working directory is the same a the project folder. If you move the project folder, you have one line in your script to change to point to the new folder. The script and project becomes more portable with this approach. Setting the work directory will save you typing in your scripts, since you will not need to enter the full path to the file. RStudio sets the work directory to the project directory when a project is opened. If a script will be run outside of the project, the work directory will need to be set.</p>
<p>We are going to set our work directory in our script.</p>
<ul>
<li><p>Enter the following commands into your scripts and run them.</p>
<pre><code>saveDir &lt;- getwd()  # get the current working directory
saveDir             # show me the saved directory

wd &lt;- "u:/RFR"      # path to my project
setwd(wd)           # set this path as my work directory</code></pre></li>
<li><p>Your console should display a similar working path (Note your path will be different than the displayed path.)</p>
<pre><code>[1] "u:/RFR"</code></pre></li>
</ul>
<p>Your script now has the code needed to set up your session. This is a good time to commit the changes to SalAnalysis.</p>
<ul>
<li>Commit your changes to SalAnalysis using the commit message "Added session setup to SalAnalysis".</li>
</ul>
<div class="section level4" id="exercises">
<h4>Exercises</h4>
<ol style="list-style-type: decimal">
<li><p>Create a new script titled AlfAnalysis. This script will be used for the exercises in this article series.</p></li>
<li><p>Set up the session for the AlfAnalysis. Load the same packages as were used in SalAnalysis.</p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript_Sol.html">Solutions</a></p>
</div>
</div>
</div>
<div class="section level2" id="git-accessing-prior-versions">
<h2>Git accessing prior versions</h2>
<p>Git has a number of commands to access prior versions of your source code. RStudio has implemented only one of these functions, which RStudio calls revert. This function changes the working directory file to match the state of the head. The choice of the name "revert" for this function is unfortunate in that this is not what a Git revert does. The RStudio revert is like a Git reset with the hard option. This article series will refer to this function as RStudio's revert to distinguish it from a Git Revert.</p>
<p>It is important to recognize that the intent of an RStudio revert is to overwrite files in the working directory. The overwritten changes in the working directory would not have been committed and as such are not part of the project's history. The overwritten changes are permanently removed from the working directory and the project's history. Rstudio's revert needs to be used with great care.</p>
<p>There are times when RStudio's revert is what is needed. An example would be trying a new approach to a calculation for an analysis and determining it is not as good as the prior approach. Going back to the prior version of the calculation and not saving the failed improvement code might be what you want.</p>
<p>We recommend the use of a Git GUI to access source files from commits prior to the branch's head, the last commit.</p>
<p>We will make a meaningless change to our script and use RStudio's revert to restore the file to its committed state.</p>
<ul>
<li><p>Add the following line to your SalAnalysis script.</p>
<p><code># Silly comment use to test RStudio's revet</code></p></li>
<li>Save the file, but do not commit the change.</li>
<li>Select the Git tab in the tabs pane.</li>
<li>Select the SalAnalysis file in the Git tab.</li>
<li><p>From the tools menu in the Git tab, Select revert.</p>
<p><img alt="Git Revert" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitRevert.png"/></p></li>
<li><p>The comment line has been removed from the file.</p></li>
</ul>
<p>This example would have been easier to do using the undo function in the editor. There are times when the editor undo is either not an option or would be difficult to use. For example when a file has been closed undo is no longer available, or when many changes involving multiple files have been made.</p>
</div>
<div class="section level2" id="git-central-repositories">
<h2>Git central repositories</h2>
<p>A <strong>central repository</strong> is a repository which is used solely to store the project. No development is done in a central repository. Development is done in <strong>local repositories</strong>. Our RFR repository is a local repository. Central repositories are useful as a backup for a local repository or to coordinate work done in multiple local repositories.</p>
<p>A central repository is a <strong>remote repository</strong>. It is remote because its remote with respect to our local repository. Remote does not necessarily mean far away. The remote repository might be saved to the same storage device as the local repository.</p>
<p>We will create two folders, named cen and home, to demonstrate the use of a central repository. The cen folder will be where our central repository will be stored. The home folder will hold a second local repository for the RFR project. These two additional repositories will be stored on the U drive as is your current RFR project, all on the same device. This is done for convenience of this example. In practice, additional development repositories, local repositories, would likely be stored on different devices.</p>
<ul>
<li>Create the cen and home folders on your U drive. If you do not have a U drive on your computer, put them in the documents folder.</li>
</ul>
<p>We need to create the central repository for RFR and then connect our local repository to the central repository. RStudio does not support this functionality. We will do these steps using the shell.</p>
<ul>
<li><p>Select the Shell option from the tools drop down menu in the Git tab.</p>
<p><img alt="Git Shell" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitShell.png"/></p></li>
<li><p>A shell window will open. The prompt shows the current folder. This is the folder where commands will be executed in. The prompt should include the path /u/RFR in the shell.</p>
<p><img alt="Git Shell Prompt" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitShPrmpt.png"/></p></li>
<li><p>We need to change our folder to where the central repository will be stored and then create the repository.</p>
<p>Enter the following commands in the shell.</p>
<pre><code>cd ../cen
git init --bare RFR.git</code></pre>
<p>The init --bare command and parameter tells Git that the new repository will not be a development repository. RFR.git is used to identify the name of the repository. We will call all three of the repositories RFR. We will use the repositories location to distinguish them and not their name.</p></li>
<li><p>We now need to connect our local RFR repository to the central repository.</p>
<p>Enter the following commands in the shell.</p>
<pre><code>cd ../RFR
git remote add central ../cen/RFR.git
git push -u central master
</code></pre>
<p>The remote add command and parameter tell git to add a path to a remote repository. The added path will be named central in the RFR repository and the path to it is ../cen/RFR/git.</p>
<p>The push -u command and parameter copies the local RFR repository to the central repository.</p></li>
<li><p>The shell should now look similar to the following image.</p>
<p><img alt="Git Shell Done" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitShDone.png"/></p></li>
<li><p>Close the shell window by clicking the red X in the upper right corner.</p></li>
<li><p>The Pull and Push icons, in the top row of icons on the Git tab, should be fully displayed and not greyed out. You may need to click the refresh button in the Git tab to fully see the push and pull icons.</p></li>
<li><p>Click on the history icon in the Git tab.</p>
<p><img alt="Git Central Log" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitCenLog.png"/></p></li>
<li><p>In the Review Changes window you should see that the most recent commit, the top one, now has three identifiers associated with it. The first identifier HEAD, indicates this commit is the head of our currently checked out branch. The second identifier central/master, indicates this commit is the head of the master branch in the central repository. The third identifier master, indicates this commit is the head of the master branch in this repository. When there is only one branch in a repository, the HEAD and master will point to the same commit.</p></li>
</ul>
<p>Clicking the Push button will now move to the central repository any commits in the local repository which are not in the central repository.</p>
<p>If your computer is connected to the SSCC network, we recommend that you use one of the network drives for your project, such as U, V, etc. If you are working on a computer not connected to the network, we recommend you set up a central repository on a network drive and push to the repository on a regular basis.</p>
<p>A central repository is also useful for coordinating work in multiple local repositories. One situation for this would be a project in which you work both on a University computer connected to the network and a computer not typically connected to the network, such as a laptop or home computer. This situation will be demonstrated in the next example. The procedure would be similar if the repositories were associated with different members of the team.</p>
<p>We will set up another repository to work on the RFR project. We will set up this second repository in the home folder you created above.</p>
<ul>
<li><p>Open a second instance of RStudio.</p></li>
<li><p>From the File drop down menu, select New Project.</p></li>
<li><p>Select Version Control from the Create project menu in the New Project window.</p></li>
<li><p>Select Git from the Create project from Version Control menu in the New Project window.</p></li>
<li><p>Enter "file:///U:/cen/RFR.git" in the Repository URL box. The path to the central repository needs to include "file:///" to address some issues with network drives when cloning a repository. This prefix is not needed after the repository has been cloned.</p></li>
<li><p>Enter "RFR" in the Project directory name box.</p></li>
<li><p>Navigate to "U:/home" in the Create project as a subdirectory of box.</p>
<p><img alt="Git Home Repo Create" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmCreate.png"/></p></li>
<li><p>Click the Create Project icon at the bottom of the New Project window.</p></li>
<li><p>The path "U:/home/RFR - master" should now be displayed in the upper left of the RStudio window next to the RStudio icon.</p></li>
<li><p>Select the Git tab in the tools pane.</p></li>
<li><p>Click on the history icon.</p></li>
<li><p>The Git log can be seen in the Review changes window.</p>
<p><img alt="Git Home History" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmHistory.png"/></p></li>
<li><p>All of the commits we made in our primary repository can be seen in the new home/RFR repository. The name of the remote repository here is origin. This is the same repository that is named central in our primary RFR repository.</p></li>
<li><p>Close the Review Changes window.</p></li>
</ul>
<p>There are now three RFR repositories on your U drive. Two of these repositories are local repositories. The first is our primary working repository, U:/RFR, and second is the home repository, U:/home/RFR. Work done in one of these repositories can be shared with the other by pushing and pulling through the central repository.</p>
<p>As an example of sharing project work, we will make a change in the home repository and move the change to our primary working repository.</p>
<ul>
<li><p>You should have both of the local RFR projects open. If they are not both open, open them. The path displayed in the upper left corner of the RStudio window will identify which project the window is associated with. The home RFR project will display the path "U:/home/RFR".</p></li>
<li><p>Open the SalAnalysis.R script in the home RFR project.</p></li>
<li><p>Add the following comment line to the SalAnalysis.R script in the home RFR project. Add this line after the other content in SalAnalysis.</p>
<pre><code># Comment added in home/RFR</code></pre></li>
<li><p>Save the SalAnalysis file</p></li>
<li><p>Commit the change to SalAnalysis file with the commit message "Added comment in home project".</p></li>
<li><p>Open the Git history in the home RFR project and the log will show this new commit in the U:/home/RFR repository and not in the origin repository, which is our central repository.</p>
<p><img alt="Git Home Added Commit" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmAddCmmt.png"/></p></li>
<li><p>Open the Git history in our primary RFR project and the log will not show this new commit in the repository.</p>
<p><img alt="Git Primary No Pull" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitPmNoPull.png"/></p></li>
<li><p>We will now move the new commit from the home RFR repository to the central repository. Click the Push icon in the Git tab of the U:/home/RFR project.</p></li>
<li><p>Click the close button in the Git Push window.</p></li>
<li><p>Click the refresh icon in the Review changes window for the U:home/RFR project.</p>
<p><img alt="Git Home Push" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmPush.png"/></p></li>
<li><p>The U:/home/RFR Git log shows that the origin repository now contains the new commit.</p></li>
<li><p>Clicking on the refresh icon in the Review changes window for our primary RFR project will show that this repository has not changed. Also note that there is no indication that there are changes in the central repository waiting to be pulled into this repository.</p></li>
<li><p>We will now move the new commit from the central repository to primary RFR project. Click the Pull icon in the Git tab of the U:/RFR project.</p></li>
<li><p>Click the close button in the Git Pull window.</p></li>
<li><p>Click the refresh icon in the Review changes window for the U:/RFR project.</p>
<p><img alt="Git Primary Pull" src="https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitPmPull.png"/></p></li>
<li><p>The commit which was done in the U:/home/RFR project is now seen in the log of the U:/RFR repository.</p></li>
<li><p>Click on the SalAnalysis.R file. You will see that the the change made to this file in the U:home/RFR project is now in this file.</p></li>
<li><p>The changes made in the U:/home/RFR project have been applied to the U:/RFR project.</p></li>
</ul>
<p>This example worked this easily because there was no conflicts in the file pulled from the central repository. If there are conflicts, you would need to resolve the conflicts. There are tools to support this process. We will not cover these tool in this article series. While the tools can help, the heart of the conflict resolution process is you deciding what changes will be made in your project.</p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPrep.html">Data preparation</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RMarkdown.html">R Markdown</a></p>
<p>Last Revised: 11/24/2015</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_Help.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_PackageTab.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_InstlPckg.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_DP_Run.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitRevert.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitShell.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitShPrmpt.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitShDone.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitCenLog.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmCreate.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmHistory.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmAddCmmt.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitPmNoPull.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitHmPush.png, https://ssc.wisc.edu/sscc/pubs/RFR/Images/RFR_RScpt_GitPmPull.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: R Scripts solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a>. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<h4>
Exercise solutions
</h4>
<ol style="list-style-type: decimal">
<li><p>Create a new script titled AlfAnalysis. This script will be used for the exercises in this article series.</p>
<p>There is no code associated with the solution to this problem.</p></li>
<li><p>Set up the session for the AlfAnalysis. Load the same packages as were used in SalAnalysis.</p>
<pre><code>#####################################################
#####################################################
##
##   Analysis work on the Alfalfa data set 
##   
##   This script is a collection of the exercises
##   from the R For Researchers series.
##    
## 
##   Earnest Student        2/3/2015
##
#####################################################
#####################################################

#####################################################
#####################################################
##
##   Session Setup
##
#####################################################
#####################################################

library(faraway)      # glm support
library(MASS)         # negative binomial support
library(car)          # regression functions
library(lme4)         # random effects
library(ggplot2)      # plotting commands
library(reshape2)     # wide to tall reshaping
library(xtable)       # nice table formatting
library(knitr)        # kable table formatting
library(grid)         # units function for ggplot</code></pre>
<pre><code>saveDir &lt;- getwd()  # get the current working directory
saveDir             # show me the saved directory

wd &lt;- "u:/RFR"      # path to my project
setwd(wd)           # set this path as my work directory</code></pre></li>
<li><p>Commit your changes to AlfAnalysis.</p>
<p>There is no code associated with the solution to this problem.</p></li>
</ol>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RScript.html">R Scripts</a> article.</p>
<p>Last Revised: 2/4/2015</p>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for researchers: Regression inference</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#test-if-coefficient-are-zero">Test if coefficient are zero</a></li>
<li><a href="#confidence-intervals-for-coefficients">Confidence intervals for coefficients</a></li>
<li><a href="#other-tests-of-coefficients">Other tests of coefficients</a></li>
<li><a href="#predictions">Predictions</a></li>
<li><a href="#plots-of-predicted-values">Plots of predicted values</a></li>
<li><a href="#plot-of-fit">Plot of fit</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to functions which are used to construct confidence intervals of coefficients, test hypothesis about models, and predict expected values for an observation. These functions are demonstrated using the salary model and the glm models from the prior articles. This article also provides examples of plots of the fitted to observed values for these models. While these plots are not a formal test of a model, they provide a means to visual report the predicted values for a range of observations.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercise will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Open your SalAnalysis script.</li>
<li>Run all the commands in SalAnalysis script.</li>
<li>Open your glm script.</li>
<li>Run all the commands in glm script.</li>
</ul>
</div>
<div class="section level2" id="test-if-coefficient-are-zero">
<h2>Test if coefficient are zero</h2>
<p>The test of a coefficient equalling zero was covered with variable selection in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Regression.html">Regression (ordinary least squares)</a> and <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM.html">Regression (generalized linear models)</a> articles.</p>
</div>
<div class="section level2" id="confidence-intervals-for-coefficients">
<h2>Confidence intervals for coefficients</h2>
<p>To determine what range of values a coefficient might take, we will use the confint() function.</p>
<ul>
<li><p>Syntax and use of the <strong>confint()</strong> function</p>
<p>confint(<em>modObj</em>, level = <em>CI</em>)</p>
<p>Returns a matrix with a row for each coefficient in the model. There is a column for the lower bounds and another for the upper bounds.</p>
<p>It is important to remember these confidence intervals assume each coefficient is free to vary on it own.</p>
<p>level is an optional parameter. The default is a 95% confidence interval. The level parameter can be set to produce different CIs.</p></li>
</ul>
<div class="section level3" id="ols">
<h3>OLS</h3>
<p>For an OLS model the confint() function is the equivalent of using the coefficient's standard error to construct the confidence interval.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>confint(salMod)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>                    2.5 %       97.5 %
(Intercept)   66.66636520 75.037073873
dscplB         9.78500203 14.630103047
sexMale       -1.03333488  5.303487814
rankAssocProf  9.07294592 17.700736538
rankProf      41.27076937 54.401196956
yrSin         -0.41049056  0.733196818
yrSinSqr      -0.01591441  0.005627824</code></pre></li>
</ul>
<p>When model terms are correlated, a confidence region for the variables would need to be used instead. This can be constructed from the matrix returned by the vcov() extractor function.</p>
<p>The yrSin and yrSinSqr are correlated in the salary model. The confidence interval can be reported as a binormal distribution. The model vcov matrix can be used to determine the variance-covariance matrix of yrSin (sixth model coefficient) and yrSinSqr (seventh model term.)</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>salModVcov &lt;- vcov(salMod) 
salModVcov[c(6,7),c(6,7)]</code></pre></li>
<li><p>The results of the above commands are shown below</p>
<pre><code>                yrSin      yrSinSqr
yrSin     0.084597743 -1.493224e-03
yrSinSqr -0.001493224  3.001412e-05</code></pre></li>
</ul>
<p>The confidence region can also be graphed for a visual display of the region. The ellipse package has an ellipse function which will plot the confidence region.</p>
<ul>
<li><p>Syntax of the <strong>ellipse()</strong> function.</p>
<p>ellipse(<em>modObj</em>, which = <em>coef</em>, level = <em>CI</em>)</p>
<p>Returns a matrix of points outlining the region.</p>
<p><em>coef</em> is the pair of coefficients the region is to be constructed for.</p>
<p><em>CI</em> is the same as for confint() above.</p></li>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>library(ellipse)
ggplot(data.frame( ellipse(salMod, which = c(6,7) ) ),
       aes(x=yrSin,y=yrSinSqr) 
      ) +
  geom_polygon(fill="dodgerblue1") +
  theme_bw()</code></pre></li>
<li><p>The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-5-1.png" title="" width="672"/></p></li>
</ul>
<p>The plotted region is the set of values that we are 95% confident that the yrSin and yrSinSqr coefficients can take together.</p>
</div>
<div class="section level3" id="glm">
<h3>GLM</h3>
<p>The confint() function provides a profiled confidence interval for glm models. This profiled confidence interval is preferred to a confidence interval generated from the coefficient's standard error, since the coefficients standard error is sensitive to even small deviations from the model's assumptions. The MASS package must be loaded to use profiling confint() function. We load the MASS package in our scripts.</p>
<p>The profiled confidence intervals for the binary data model are generated with the following code.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>confint(g2)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>Waiting for profiling to be done...</code></pre>
<pre><code>                    2.5 %       97.5 %
(Intercept)  -8.008386075 -2.984769977
schtyppublic -2.033250948 -0.148755827
read          0.019163396  0.117861493
write         0.001822963  0.097984722
science      -0.097654325 -0.003834431
socst         0.013353477  0.098657446</code></pre></li>
</ul>
<p>The profiled confidence intervals for the quasipoisson and negative binomial models are generated with the following code.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>confint(p1)
confint(nb1)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>Waiting for profiling to be done...</code></pre>
<pre><code>                    2.5 %        97.5 %
(Intercept)  0.3906468422  1.1024099836
year         0.0172142079  0.0505602607
yearSqr     -0.0005847852 -0.0002434672</code></pre>
<pre><code>Waiting for profiling to be done...</code></pre>
<pre><code>                   2.5 %        97.5 %
(Intercept)  0.344183806  1.1401150631
year         0.015479898  0.0528388203
yearSqr     -0.000606184 -0.0002268549</code></pre></li>
</ul>
<p>The confidence intervals for the coefficients of these two models are similar. The confidence intervals for the coefficients are not always similar between over-dispersed Poisson and negative binomial models.</p>
</div>
</div>
<div class="section level2" id="other-tests-of-coefficients">
<h2>Other tests of coefficients</h2>
<p>The linearHypothesis() function is used for test of coefficients. The function allows the test to be specified in two forms. The first is as a written equation giving the hypothesis in symbolic form. The coefficient names from the model object are used in this equation. The second is as a matrix with each row of the matrix being a contrast of interest.</p>
<ul>
<li><p>Syntax and use of the <strong>linearHypothesis()</strong> function</p>
<p>linearHypothesis(<em>modelObj</em>, <em>testEquations</em>)<br/>
linearHypothesis(<em>modelObj</em>, <em>hypothesis.matrix</em>, <em>rhs</em>)</p>
<p>Returns a data.frame with the anova results of the test of the contrasts. This is a Wald based test similar to the test for zero coefficients in the summary output.</p>
<p><em>model object</em> is an object returned from a regression function.</p>
<p>Each element of the <em>testEquations</em> vector symbolically specifies a linear combinations of the coefficients.</p>
<p>The rows of <em>hypothesis.matrix</em> specify the linear combinations of the coefficients.</p>
<p>The linear combinations are tested being equal to the values given in the <em>rhs</em>(right hand side) parameter. The default value of <em>rhs</em> is zero.</p></li>
</ul>
<div class="section level3" id="ols-1">
<h3>OLS</h3>
<p>Lets look at a few examples from our SalMod model. Our model object tests if professor and associate professor are same. We can use linearHypothesis() to test if professor and associate professor are the same. This example shows the test being done using both methods to specify the test contrast.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>linearHypothesis(salMod,c("rankAssocProf-rankProf=0") )
linearHypothesis(salMod,c(0,0,0,1,-1,0,0),0 )</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>Linear hypothesis test

Hypothesis:
rankAssocProf - rankProf = 0

Model 1: restricted model
Model 2: salary ~ dscpl + sex + rank + yrSin + yrSinSqr

  Res.Df   RSS Df Sum of Sq      F    Pr(&gt;F)    
1    391 81030                                  
2    390 54658  1     26372 188.17 &lt; 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre><code>Linear hypothesis test

Hypothesis:
rankAssocProf - rankProf = 0

Model 1: restricted model
Model 2: salary ~ dscpl + sex + rank + yrSin + yrSinSqr

  Res.Df   RSS Df Sum of Sq      F    Pr(&gt;F)    
1    391 81030                                  
2    390 54658  1     26372 188.17 &lt; 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>From the displays above we can see that both tests are the same. The p-value for the test is nearly zero.</p>
<p>The next example tests if a professor from discipline A with 10 years experience is equal to an associate professor in discipline B with 5. Further we will also test if the same professor from discipline A above is equal to an associate professor in discipline A with 20 years experience.</p>
<ul>
<li><p>The equations we want to test are:</p>
<pre><code>(prof + 10*yrSin + 100*yrSinSqr) - 
                 (dscplB + rankAssocProf + 5*yrSin + 25*yrSinSqr) = 0  
(prof + 10*yrSin + 100*yrSinSqr) - 
                 (rankAssocProf + 20*yrSin + 400*yrSinSqr) = 0</code></pre></li>
<li><p>We simplifying these equations so that there is only one reference to each coefficient.</p>
<pre><code>prof + 5*yrSin + 75*yrSinSqr - dscplB - rankAssocProf = 0
prof - 10*yrSin - 300*yrSinSqr - rankAssocProf = 0</code></pre></li>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>linearHypothesis(salMod,
    c("rankProf+5*yrSin+25*yrSinSqr-dscplB-rankAssocProf=0",
      "rankProf-10*yrSin-300*yrSinSqr-rankAssocProf=0") )</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>Linear hypothesis test

Hypothesis:
- dscplB - rankAssocProf  + rankProf  + 5 yrSin  + 25 yrSinSqr = 0
- rankAssocProf  + rankProf - 10 yrSin - 300 yrSinSqr = 0

Model 1: restricted model
Model 2: salary ~ dscpl + sex + rank + yrSin + yrSinSqr

  Res.Df   RSS Df Sum of Sq      F    Pr(&gt;F)    
1    392 70022                                  
2    390 54658  2     15364 54.814 &lt; 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>The very small p-value here indicates that at least one of the equalities is not true.</p>
</div>
<div class="section level3" id="glm-1">
<h3>GLM</h3>
<p>The linearHypothesis() function has the same drawbacks as the Wald test of coefficient in summary() for glm models. When possible, it is better to refit the model with the variables recoded such that the test can be done as a test of nested models. The linearHypothesis() function is useful as a quick check of GLM models to see if the nested model test is worth the effort. Here we will check to see if write and science are different in the g2 model.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>linearHypothesis(g2,c("write-science=0") )</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>Linear hypothesis test

Hypothesis:
write - science = 0

Model 1: restricted model
Model 2: I(prog == "academic") ~ schtyp + read + write + science + socst

  Res.Df Df  Chisq Pr(&gt;Chisq)  
1    195                       
2    194  1 6.2518    0.01241 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>The small p-value here is evidence that the two coefficients are different. A nested model would be used to determine an accurate p-value to report.</p>
</div>
</div>
<div class="section level2" id="predictions">
<h2>Predictions</h2>
<p>The predict() function is used to determine the predicted values for a particular set of values of the independent variables. The predict() function can also return the confidence interval or prediction interval with the predictions.</p>
<ul>
<li><p>Syntax and use of the <strong>predict()</strong> function</p>
<p>predict(<em>modelObj</em>,<em>newObs</em>,interval=<em>type</em>,level=<em>level</em>)</p>
<p>The <em>modelObj</em> is an an object returned from regression.</p>
<p>The <em>newObs</em> parameter is optional. If it is not provided, the predictions will be for the observed values in the model. The form of <em>newObs</em> is a data.frame with the same columns as used in <em>modelObj</em>.</p>
<p>The parameter <em>type</em> can be "none", "confidence", or "prediction". The default is none, no interval, and alternatively it can be a confidence interval or a prediction interval.</p>
<p>The level parameter is the confidence or prediction <em>level</em>.</p></li>
</ul>
<p>We will predict the mean salary for the professors we included in the last hypothesis test above.</p>
<div class="section level3" id="ols-2">
<h3>OLS</h3>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>newObs &lt;- data.frame(dscpl=c("A","B","A"),
                     sex=c("Male","Female","Female"),
                     rank=c("Prof","AssocProf","AssocProf"),
                     yrSin=c(10,5,20),
                     yrSinSqr=c(10^2,5^2,20^2)
                     )
predict(salMod, newObs, interval="confidence")</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>        fit       lwr       upr
1 121.92198 116.55697 127.28699
2  97.12430  92.21091 102.03769
3  85.40831  81.18070  89.63591</code></pre></li>
</ul>
<p>The confidence intervals for the three sets of professors, in the output above, suggest their mean salaries are not the same, since their CI do not overlap.</p>
</div>
<div class="section level3" id="glm-2">
<h3>GLM</h3>
<p>The predict function for GLM model objects has an additional parameter. The type parameter specifies the scale to use for the predictions.</p>
<ul>
<li><p>Syntax of the predict() function type parameter.</p>
<p>predict(modObj, type=<em>scale</em>, se.fit="logical")</p>
<p>The type parameter can be provided either "link" or "response" for the scale.</p></li>
</ul>
<p>We will predict the probability (the response scale) of a student at a public school with scores of read=50,write=52, science=53, and socst=52 being in an academic program.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>medstd &lt;- data.frame(schtyp="public",read=50,write=52,
                     science=53,socst=52)
predict(g2,medstd,type="response")</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>        1 
0.4216985 </code></pre></li>
</ul>
<p>The inverse logit function is sometimes useful when working with logit models.</p>
<ul>
<li><p>Syntax and use of the <strong>ilogit()</strong> function</p>
<p>ilogit(<em>realVal</em>)</p>
<p>Returns a vector with an inverse logit value for each element in the <em>realVal</em> vector.</p></li>
</ul>
<p>We can use the ilogit function to transform values on the link scale to the response scale here. As an example we will predict the same student as above on the link scale and use ilogit to transform to the response scale.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>ilogit( predict(g2,medstd,type="link") )</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>        1 
0.4216985 </code></pre></li>
</ul>
<p>We get the same value as before.</p>
</div>
</div>
<div class="section level2" id="plots-of-predicted-values">
<h2>Plots of predicted values</h2>
<p>Plots of the predicted values of a model versus one of the continuous variables of the model are useful to visualize what the models predicts. These plots sometimes include the observations from the model fit as points. This is sometime useful if observations do not distract from the plot of of the predictions.</p>
<p>These plots are typically constructed after the optimal model has been selected. As such they are done after variable selection and the diagnostics for the models been considered.</p>
<div class="section level3" id="ols-3">
<h3>OLS</h3>
<p>The salary model has several factor variables and the quadratic form of yrSin. We will plot the predicted values of salary versus yrSin for each pairing of discipline and gender. This plot includes a curve for each of the gender and discipline groups. The observation from the model were not added to this plot. This choice was made because of the large number of observations and the plot has four curves on it. Adding the observed values distracted from the relationships being displayed by the four curves.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>yrPred &lt;- data.frame(dscpl=c( rep("A",100),rep("B",100) ),
                    sex=c(rep("Male",50),rep("Female",50),
                          rep("Male",50),rep("Female",50)),
                    rank=rep("Prof",200),
                    yrSin=c(1:50, 1:50, 1:50, 1:50),
                    yrSinSqr=c((1:50)^2, (1:50)^2, (1:50)^2, (1:50)^2) 
                    )
yrPred$predicted &lt;- predict(salMod, yrPred)
yrPred$group &lt;- paste("dscpl-",yrPred$dscpl,":",yrPred$sex,sep="")

ggplot(yrPred, aes(x=yrSin,y=predicted, color=group)) +
  geom_line() +
  theme_bw() +
  ggtitle("Predicted Salary for Professors") +
  theme( plot.title=element_text(vjust=1.0) ) +
  xlab("Years Since Phd") +
  theme( axis.title.x = element_text(vjust=-.5) ) +
  ylab("Salary in thousands of dollars") +
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(legend.position = "bottom")</code></pre></li>
<li><p>There are no console results from these commands. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-14-1.png" title="" width="672"/></p></li>
</ul>
</div>
<div class="section level3" id="glm-3">
<h3>GLM</h3>
<p>The quadratic form of years was used in our model for the number of inventions. We will plot the predicted number of inventions for the years of the study. We will use the negative binomial model. The blue line is the predicted mean. The model observations are included in this plot.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>ggplot(data=nb1Diag, aes(x=year)) +  
  geom_point(aes(y=count) ) +  
  geom_smooth(method="loess", aes(y=fit)) +  
  theme_bw() +  
  ggtitle("Predicted Mean Inventions") +  
  theme( plot.title=element_text(vjust=1.0) ) +  
  xlab("Number of years since 1860") +  
  theme( axis.title.x = element_text(vjust=-.5) ) +  
  ylab("Number of inventions") +  
  theme( axis.title.y = element_text(vjust=1.0) )  </code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-15-1.png" title="" width="672"/></p></li>
</ul>
</div>
</div>
<div class="section level2" id="plot-of-fit">
<h2>Plot of fit</h2>
<p>Another common plot is the observed versus fitted values. These plots are not formally inference. They are similar in that they provide a valuation of how close to the predictions one can expect to be.</p>
<div class="section level3" id="ols-4">
<h3>OLS</h3>
<p>This plot of the predicted professor salaries versus the observed salaries uses a black line for the predicted salary and colors for the observed genders.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>ggplot(salModDiag, aes(x=fit)) +
  geom_point(aes(y=salary, col=sex)) +
  geom_line(aes(y=fit)) +
  theme_bw() +
  ggtitle("Professor's 2008 salaries Vs Predicted") +
  theme( plot.title=element_text(vjust=1.0) ) +
  xlab("Predicted salary") +
  theme( axis.title.x = element_text(vjust=-.5) ) +
  ylab("Salary in thousands of dollars") +
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(legend.position = "bottom")</code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-16-1.png" title="" width="672"/></p></li>
</ul>
</div>
<div class="section level3" id="glm-4">
<h3>GLM</h3>
<p>This plot of the observed academic program status for the binary response model uses the link scale for the predicted value. This produces a logit curve for the prediction. The observed values of academic or not are jittered in this plot to allow for a better sense of the fit. The correctly predicted status of the observation has been identified with color in the plot.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>g2Fit &lt;- predict(g2, type="response")
g2Actual &lt;- as.numeric(hsb$prog == "academic")
g2Correct &lt;- ( g2Fit &gt; .5) &amp; g2Actual |
             ( g2Fit &lt;= .5) &amp; !g2Actual
g2Diag &lt;- data.frame(hsb,  
                     academic=g2Actual,  
                     link=predict(g2, type="link"),  
                     fit=g2Fit,  
                     pearson=residuals(g2,type="pearson"),
                     Correct=g2Correct
                     )  
ggplot(data=g2Diag, aes(x=link)) +  
  geom_point(position = position_jitter(height = 0.05),   
             aes(y=academic, color=Correct) ) +  
  geom_smooth(method="loess", aes(y=fit), color="black") +  
  theme_bw() +  
  ggtitle("Predicted probability for academic students") +  
  theme( plot.title=element_text(vjust=1.0) ) +  
  xlab("Predicted link value") +  
  theme( axis.title.x = element_text(vjust=-.5) ) +  
  ylab("Probability") +  
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(legend.position = "bottom")  </code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-17-1.png" title="" width="672"/></p></li>
</ul>
<p>This plot of the observed number of inventions verse the predicted number uses the predictions from the negative binomial model. A blue line is used for the predicted mean, since the observations are in black.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>ggplot(data=nb1Diag, aes(x=fit)) +  
  geom_point(aes(y=count) ) +  
  geom_smooth(method="loess", aes(y=fit)) +  
  theme_bw() +  
  ggtitle("Number of Inventions Vs. Predicted") +  
  theme( plot.title=element_text(vjust=1.0) ) +  
  xlab("Predicted number of inventions") +  
  theme( axis.title.x = element_text(vjust=-.5) ) +  
  ylab("Number of inventions") +  
  theme( axis.title.y = element_text(vjust=1.0) )</code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-18-1.png" title="" width="672"/></p></li>
</ul>
<div class="section level4" id="exercise">
<h4>Exercise</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<p>Note, we will use the shade and irrig variables as continuous variables for these exercises. They could also be considered as factor variables. Since both represent increasing levels we first try to use them as scale.</p>
<ol style="list-style-type: decimal">
<li><p>Find the confidence interval for the model coefficients.</p></li>
<li><p>Test if inoculant A equals inoculant D.</p></li>
<li><p>Predict the confidence interval for the mean yield for a plot which has irrigation level 3, shade level 5, and inoculation C.</p></li>
<li><p>Plot the observed verse fitted values for your model</p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_Sol.html">Solutions</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM.html">Regression (generalized linear models)</a></p>
<p>Last Revised: 3/19/2014</p>
</div>
</div>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-5-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-14-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-15-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-16-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-17-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_files/figure-html/unnamed-chunk-18-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Regression inference solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<p>These solutions require the solutions from the prior lesson be run in your R session.</p>
<div class="section level4" id="exercise-solutions">
<h4>Exercise solutions</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<p>Note, we will use the shade and irrig variable as continuous variables for these exercise. They could also be considered as factor variables. Since both represent increasing levels we first try to use them as scale.</p>
<ol style="list-style-type: decimal">
<li><p>Find the confidence interval for the model coefficients.</p>
<pre class="r"><code>confint(out5)</code></pre>
<pre><code>                 2.5 %      97.5 %
(Intercept) 24.4862967 29.48970330
irrig       -1.0167775 -0.07122252
inocA        4.4856748  8.71432519
inocB        3.7656748  7.99432519
inocC        4.4056748  8.63432519
inocD        3.6256748  7.85432519
shade        0.7952225  1.74077748</code></pre></li>
<li><p>Test if inoculant A equals inoculant D.</p>
<pre class="r"><code>linearHypothesis(out5,
    c("inocA-inocD") )</code></pre>
<pre><code>Linear hypothesis test

Hypothesis:
inocA - inocD = 0

Model 1: restricted model
Model 2: yield ~ irrig + inoc + shade

  Res.Df    RSS Df Sum of Sq      F Pr(&gt;F)
1     19 47.425                           
2     18 45.576  1     1.849 0.7303  0.404</code></pre>
<p>This data set does not provide evidence that inoculant A and D are different, when considered at the same level of irrigation and shade.</p></li>
<li><p>Predict the confidence interval for the mean yield for a plot which has irrigation level 3, shade level 5, and inoculant C.</p>
<pre class="r"><code>newAlfObs &lt;- data.frame(irrig=c(3),
                     inoc=c("C"),
                     shade=c(5)
)
predict(out5, newAlfObs, interval="confidence")</code></pre>
<pre><code>     fit      lwr      upr
1 38.216 36.44703 39.98497</code></pre></li>
<li><p>Plot the observered verse fitted values for your model</p>
<pre class="r"><code>ggplot(out5Diag, aes(x=fit)) +
  geom_point(aes(y=yield, col=inoc)) +
  geom_line(aes(y=fit)) +
  theme_bw() +
  ggtitle("Alfalfa Yields Vs Predicted") +
  theme( plot.title=element_text(vjust=1.0) ) +
  xlab("Predicted Yield") +
  theme( axis.title.x = element_text(vjust=-.5) ) +
  ylab("Observed yield") +
  theme( axis.title.y = element_text(vjust=1.0) ) +
  theme(legend.position = "bottom")</code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_Sol_files/figure-html/unnamed-chunk-5-1.png" title="" width="672"/></p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference.html">Regression inference</a> article.</p>
<p>Last Revised: 3/9/2015</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference_Sol_files/figure-html/unnamed-chunk-5-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R For Researchers: Regression (OLS)</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#formula-specification">Formula specification</a></li>
<li><a href="#fitting-the-model">Fitting the model</a></li>
<li><a href="#variable-selection">Variable selection</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to some of the commonly used functions for building ordinary least squares (OLS) models. Diagnostic tools for these models will be covered in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Regression Diagnostics</a> article. These two aspects of modelling are done together in practice. They were separated in these articles to provide a focus on the each of these important areas of modelling.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercise will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Open your SalAnalysis script.</li>
<li>Run all the commands in SalAnalysis script.</li>
</ul>
</div>
<div class="section level2" id="formula-specification">
<h2>Formula specification</h2>
<p>Regression models are specified as an R formula. The basic form of a formula is</p>
<p><span class="math display">\[response \sim term_1 + \cdots + term_p.\]</span></p>
<p>The <span class="math inline">\(\sim\)</span> is used to separate the response variable, on the left, from the <strong>terms</strong> of the model, which are on the right. A term is one of the following</p>
<ul>
<li>Numeric variable: All numeric variable types result in a single continuous variable.</li>
<li>Logical variable: Results in a single indicator, also known as dummy variable.</li>
<li>Factor variable: Results in a set of indicator variables. The first level of the factor is the reference level and is not coded as an indicator variable. All other levels are encoded as indicator variables.</li>
<li><span class="math inline">\(term_1:term_2\)</span>: Creates a term from the interaction between terms <span class="math inline">\(term_1\)</span> and <span class="math inline">\(term_2\)</span>. The encoding to variables is done based on the term type and the preceding terms rules. This interaction construction does not force the terms <span class="math inline">\(term_1\)</span> and <span class="math inline">\(term_2\)</span> as terms into the model.</li>
<li><span class="math inline">\(term_1*term_2\)</span>: This results in the same interaction term as <span class="math inline">\(term_1:term_2\)</span>. This interaction form also forces terms <span class="math inline">\(term_1\)</span> and <span class="math inline">\(term_2\)</span> into the model.</li>
<li><span class="math inline">\((term_1 + \cdots + term_j)\)</span>^<span class="math inline">\(k\)</span>: Creates a term for each of the <span class="math inline">\(j\)</span> terms and all interactions up to order <span class="math inline">\(k\)</span> which can be formed from the <span class="math inline">\(j\)</span> terms.</li>
<li>I(<span class="math inline">\(expression\)</span>): The I() function is used when you need to use +, -, *, or ^ as math symbols to construct a term in the formula. This is commonly used to construct a quadratic term.</li>
<li>poly(<em>x</em>, degree=<em>k</em>): a term which is a <em>j</em>th order polynomial of the variable <em>x</em>. A poly term, like a factor, is a single term which translates into multiple variables in a model. Poly terms have some nice properties which result in several advantages when doing variable selection. These same nice properties make it more difficult to interpret the model after variable selection. Therefore it is common practice to use poly for model selection and then rerun the selected model using polynomial terms constructed from the variable after the variable selection process is complete. Poly() constructs <em>k</em> model variables which are orthogonal to each other. The model variable <span class="math inline">\(c_j\)</span> is the <em>j</em>th order term of the term. That is <span class="math inline">\(c_j = (c_1)^j\)</span>, where <span class="math inline">\(c_1\)</span> is the linear contrast. This article does not make direct use of the orthogonality property of the <span class="math inline">\(c_j\)</span> model variables. You do not need to understand the implications of the orthogonal contrast since they will be removed from the model prior to interpreting the model. Here you only need to understand that poly() binds several model variables into a single term and that this will help us do variable selection.</li>
<li>-1: Removes the intercept from the model.</li>
</ul>
<p>The following variables will be used in several examples.</p>
<ul>
<li>A: factor with 3 levels "Level1", "Level2", and "Level3"</li>
<li>B: logical</li>
<li>C: numeric</li>
<li>D: numeric</li>
<li>E: poly(C, degree=2)</li>
<li>F: poly(D, degree=2)</li>
</ul>
<p>Each of these examples shows the model variables which result from a formula.</p>
<ul>
<li>A+E+D results in the following model variables
<ul>
<li>intercept</li>
<li>ALevel2: indicator variable</li>
<li>ALevel3: indicator variable</li>
<li>poly(C, degree=2)1: numeric variable</li>
<li>poly(C, degree=2)2: numeric variable</li>
<li>D: numeric variable</li>
</ul></li>
<li>B*E results in the following model variables
<ul>
<li>intercept</li>
<li>BTRUE: indicator variable</li>
<li>E1: numeric variable</li>
<li>E2: numeric variable</li>
<li>BTRUE:E1: numeric variable</li>
<li>BTRUE:E2: numeric variable</li>
</ul></li>
<li>A+B+C+A:B results in the following model variables
<ul>
<li>intercept</li>
<li>ALevel2: indicator variable</li>
<li>ALevel3: indicator variable</li>
<li>BTRUE: indicator variable</li>
<li>C: numeric variable</li>
<li>ALevel2:BTRUE: indicator variable</li>
<li>ALevel3:BTRUE: indicator variable Note, (A+B)<span class="math inline">\(^2\)</span>+C results in the same model variables. This is due to A:B being the second order interaction term of the variables A and B.</li>
</ul></li>
<li>B*(C+D) results in the following model variables
<ul>
<li>intercept</li>
<li>BTRUE: indicator variable</li>
<li>C: numeric variable</li>
<li>D: numeric variable</li>
<li>BTRUE:C: numeric variable</li>
<li>BTRUE:D: numeric variable</li>
</ul></li>
</ul>
<p>Coding a logical variable as numeric with a value of 1 for TRUE and 0 for FALSE will result in the variable name being reported as the coefficient instead of its name with the word TRUE appended.</p>
<div class="section level4" id="exercise">
<h4>Exercise</h4>
<p>Write formulas using the variables from above to produce models with the following variables</p>
<ol style="list-style-type: decimal">
<li><p>The variables A through C and the interactions between variable A and the other variables</p></li>
<li><p>The quadratic form of the variable D and the variable B</p></li>
</ol>
</div>
</div>
<div class="section level2" id="fitting-the-model">
<h2>Fitting the model</h2>
<p>The lm() function fits a model using Ordinary Least Squares (OLS.)</p>
<ul>
<li><p>Syntax and use of the <strong>lm()</strong> function</p>
<p>lm(<em>formula</em>, weights=<em>w</em>, x=<em>logical</em>, data=<em>dataFrame</em>)</p>
<p>Returns a model object. This is a list of objects which result from fitting the model.</p>
<p>The <em>formula</em> parameter is of the form described above.</p>
<p>data is an optional parameter. <em>dataFrame</em> specifies the data.frame which contains the variables to be fit. R will look in the current environment for variables which are not found in the data.frame.</p>
<p>weights is an optional parameter. When present, a weighted fit is done using the <em>w</em> vector as the weights.</p>
<p>x is an optional parameter. When <em>logical</em> is TRUE, the x matrix (which is also know as the design matrix) is included the returned model object. The x matrix columns are the model variables generated by R from the formula. This can be useful when you need to see what variables R created from the formula terms.</p></li>
</ul>
<p>We will use lm() to fit salary to the sex variable.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>out &lt;- lm(salary~sex,data=salary)</code></pre></li>
<li><p>There are no console results from this command.</p></li>
</ul>
<p>The summary() function provides a nice summary of a model object. You could also use the str() function to see the details of what is included in the model object.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>summary(out)</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>
Call:
lm(formula = salary ~ sex, data = salary)

Residuals:
    Min      1Q  Median      3Q     Max 
-57.290 -23.502  -6.828  19.710 116.455 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  101.002      4.809  21.001  &lt; 2e-16 ***
sexMale       14.088      5.065   2.782  0.00567 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 30.03 on 395 degrees of freedom
Multiple R-squared:  0.01921,   Adjusted R-squared:  0.01673 
F-statistic: 7.738 on 1 and 395 DF,  p-value: 0.005667</code></pre>
<p>The summary display starts with the call to lm which generated the model object.</p>
<p>The residual summary is the five number summary for the residuals. This can be used for as a quick check for skewed residuals.</p>
<p>The coefficients summary shows the value, standard error, and p-value for each coefficient. The p-values are from Wald tests of each coefficient being equal to zero. For OLS models this is equivalent to an F-test of nested models with the variable of interest being removed in the nested model.</p>
<p>The display ends with summary information on the model. This is the residual standard error, R squared of the model, and the F-test of the significance of the model verse the null model.</p></li>
</ul>
<p>From the R output above, we see that R used female as the reference level for sex in the model. The intercept is for a female professor. The reference level is usually not an issue when there are only two levels. For rank there are three levels. When rank is included in a model, we will want AsstProf as the reference level. When we ordered the level of rank in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataExpl.html">Data exploration</a> article the AsstProf level was set as the reference level (listed first.) The model fit does not change with a change of the level used as the reference.</p>
</div>
<div class="section level2" id="variable-selection">
<h2>Variable selection</h2>
<p>There are a number of methods for selecting an optimal model. These methods examine which variables to include and the form of the model. We will use the backward selection method without any intent to imply it is any better or worse than other methods. The backward selection method allows for the demonstration of commonly used functions to select a model. Our demonstration of this approach is also incomplete in that it only looks at a single possible optimal model. One would typically consider a number of possible optimal models before selecting an optimal model.</p>
<p>R has functions and parameters to support a number of criteria for selecting variables. Several common criteria are adjusted R squared, BIC, AIC, and the significance of model terms. Adjusted R squared is returned in the summary of the model object. The AIC() and BIC() functions are used to get these criteria values for a model.</p>
<ul>
<li><p>Syntax for the <strong>AIC()</strong> and <strong>BIC()</strong> functions.</p>
<p>AIC(<em>modelObj</em>)<br/>
BIC(<em>modelObj</em>)</p></li>
</ul>
<p>The criteria we will use is a test of the significance of a variable. For OLS this significance is determined with an F-test of the nested models. This is a test of the coefficients being equal to zero. The variables are retained if the coefficients are not likely to be zero.</p>
<p>A full model is needed to start the backwards selection. Our full model will fit salary to discipline, sex, rank, the quadratic form of yrs.service, quadratic form of yrs.since.phd, and the interactions between the discipline, sex, and rank variables and the yrs.service and yrs.since.phd variables. We do not include and interaction between the yrs.service and yrs.since.phd terms because they are correlated.</p>
<ul>
<li><p>Recall the correlation between yrSer and yrSin.</p>
<pre><code>cor(data.frame(salary$yrSer,salary$yrSin))</code></pre></li>
</ul>
<pre><code>             salary.yrSer salary.yrSin
salary.yrSer    1.0000000    0.9096491
salary.yrSin    0.9096491    1.0000000</code></pre>
<p>We will calculate the quadratic terms using poly() for use in variable selection. Calculating the poly variable before the call to lm(), produces easier to read results, simpler coefficient names are reported.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>yrSin2 &lt;- poly(salary$yrSin, degree=2)
yrSer2 &lt;- poly(salary$yrSer, degree=2)
out2 &lt;- lm(salary~(dscpl+sex+rank)*yrSin2 +
                  (dscpl+sex+rank)*yrSer2,
           data=salary)</code></pre></li>
<li><p>There are no console results for these commands.</p></li>
</ul>
<p>We will begin the backwards selection by addressing the known collinearity issues by determining if yrs.service or yrs.since.phd is more important to the fit, by our criterion. We start the backwards selection process with this decision to remove the known collinearity issues in the data. We will build models with each of these variables removed. The anova() function can be used to do an F-test of the nested models.</p>
<ul>
<li><p>Syntax and use of the <strong>anova()</strong> function</p>
<p>anova(<em>modelObj</em>,<em>nestedModObj</em>)</p>
<p>Returns the test results between two nested models.</p>
<p>The anova() function defaults to the F-test for lm model objects. The returned information for the F-test is the difference in the sum of squares between the models, the F-statistic for this difference, and the p-value for the F-statistic.</p></li>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>outSer &lt;- lm(salary~(dscpl+sex+rank)*yrSer2,
             data=salary)
outSin &lt;- lm(salary~(dscpl+sex+rank)*yrSin2,
             data=salary)
anova(out2,outSer)
anova(out2,outSin)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>Analysis of Variance Table

Model 1: salary ~ (dscpl + sex + rank) * yrSin2 + (dscpl + sex + rank) * 
    yrSer2
Model 2: salary ~ (dscpl + sex + rank) * yrSer2
  Res.Df    RSS  Df Sum of Sq      F    Pr(&gt;F)    
1    372 177823                                   
2    382 192779 -10    -14956 3.1287 0.0007476 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre><code>Analysis of Variance Table

Model 1: salary ~ (dscpl + sex + rank) * yrSin2 + (dscpl + sex + rank) * 
    yrSer2
Model 2: salary ~ (dscpl + sex + rank) * yrSin2
  Res.Df    RSS  Df Sum of Sq      F   Pr(&gt;F)   
1    372 177823                                 
2    382 191253 -10    -13430 2.8096 0.002272 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>Dropping yrs.service (retaining yrs.since.phd) causes a smaller decrease in the residual sum of squares than dropping yrs.since.phd (retaining yrs.service) on the same degrees of freedom. That is we lose the least amount of fit dropping yrs.service. We will retain yrs.since.phd in the model and remove yrs.service from the model.</p>
<p>We will use the step() function to investigate if there are other variables which can be removed. The step function compares the current model with all nested models which have a single term removed. If none of the models with a single term removed are better than the current model, step is done. Otherwise step picks the best model from the one-term-dropped models and repeats the process until no further improvement in the model can be made by dropping a term.</p>
<ul>
<li><p>syntax and use of the <strong>step()</strong> function.</p>
<p>step(<em>modelObj</em>, scope=<em>maxFormula</em>, test="<em>criteria</em>")</p>
<p>Returns an object containing information on the steps taken. Printing this object provides a display of the steps to the console.</p>
<p>The test parameter is optional, the default criteria is "AIC". It can also take the values "F" and "LRT".</p>
<p>The scope parameter is used in forward selection. Forward selection typically starts with null model as the <em>modelObj</em> and considers models bounded by the <em>maxFormula</em>, the largest model which is to be considered.</p></li>
</ul>
<p>We will use step() with our model using years since phd.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>step(outSin, test="F")</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>Start:  AIC=2482.43
salary ~ (dscpl + sex + rank) * yrSin2

               Df Sum of Sq    RSS    AIC F value Pr(&gt;F)
- sex:yrSin2    2     576.6 191830 2479.6  0.5759 0.5627
- dscpl:yrSin2  2     986.0 192239 2480.5  0.9847 0.3745
- rank:yrSin2   4    3239.1 194492 2481.1  1.6174 0.1691
&lt;none&gt;                      191253 2482.4               

Step:  AIC=2479.63
salary ~ dscpl + sex + rank + yrSin2 + dscpl:yrSin2 + rank:yrSin2

               Df Sum of Sq    RSS    AIC F value Pr(&gt;F)
- dscpl:yrSin2  2     885.4 192715 2477.5  0.8862 0.4131
- sex           1     527.5 192357 2478.7  1.0559 0.3048
- rank:yrSin2   4    3795.7 195626 2479.4  1.8995 0.1098
&lt;none&gt;                      191830 2479.6               

Step:  AIC=2477.46
salary ~ dscpl + sex + rank + yrSin2 + rank:yrSin2

              Df Sum of Sq    RSS    AIC F value    Pr(&gt;F)    
- sex          1     632.7 193348 2476.8  1.2673   0.26097    
&lt;none&gt;                     192715 2477.5                      
- rank:yrSin2  4    4602.9 197318 2478.8  2.3048   0.05783 .  
- dscpl        1   18675.7 211391 2512.2 37.4066 2.352e-09 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Step:  AIC=2476.76
salary ~ dscpl + rank + yrSin2 + rank:yrSin2

              Df Sum of Sq    RSS    AIC F value  Pr(&gt;F)    
&lt;none&gt;                     193348 2476.8                    
- rank:yrSin2  4    4899.8 198248 2478.7  2.4518 0.04561 *  
- dscpl        1   18914.6 212263 2511.8 37.8590 1.9e-09 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre><code>
Call:
lm(formula = salary ~ dscpl + rank + yrSin2 + rank:yrSin2, data = salary)

Coefficients:
          (Intercept)                 dscplB          rankAssocProf  
                27.61                  14.26                  55.96  
             rankProf                yrSin21                yrSin22  
                85.44                -956.51                -345.36  
rankAssocProf:yrSin21       rankProf:yrSin21  rankAssocProf:yrSin22  
               888.07                1133.18                 353.31  
     rankProf:yrSin22  
               185.13  </code></pre>
<p>The final model from step is shown at the end of the step display. This is the best fit model using the the "F" test as the criteria.</p></li>
</ul>
<p>The final model does not include sex. The data set was collected to examine the differences in salaries between genders. We want to retain sex in our model to be able to answer this question. We will use the smallest model which includes sex from the step function. From the step results we see that the model which included dscpl, sex, rank, yrSin2, and rank:yrSin2 is the best model from step which included the variable for sex. The step result for this model show that the p-value for the test of rank:yrSin2 is .05783. We will drop the rank:yrSin2 term and retain sex in our model.</p>
<p>We will fit this model to continue our backward selection process.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>outSin2 &lt;- lm(salary~dscpl + sex + rank + yrSin2,data=salary)</code></pre></li>
<li><p>There are no console results from this command.</p></li>
</ul>
<p>We need to test if there are additional variables which need to be removed from the model, while retaining the sex variable. We will use the drop1 function. The drop1, like the add1, function does one step of what the step() function does.</p>
<ul>
<li><p>Syntax of the <strong>drop1()</strong> and <strong>add1()</strong> function</p>
<p>drop1(<em>modelObj</em>, test="<em>criteria</em>")<br/>
add1(<em>modelObj</em>, scope=<em>maxFormula</em>, test="<em>criteria</em>")</p>
<p>The returned object and parameters are as in the step() function.</p></li>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>drop1(outSin2, test="F")</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>Single term deletions

Model:
salary ~ dscpl + sex + rank + yrSin2
       Df Sum of Sq    RSS    AIC F value    Pr(&gt;F)    
&lt;none&gt;              197318 2478.8                      
dscpl   1   18774.4 216093 2512.9 37.1077 2.682e-09 ***
sex     1     929.6 198248 2478.7  1.8374   0.17604    
rank    2   28412.8 225731 2528.2 28.0790 4.049e-12 ***
yrSin2  2    3626.6 200945 2482.1  3.5840   0.02868 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>There are no additional terms we can drop from the model by our F-test criteria.</p>
<p>The use of the poly terms was useful for the variable selection process. We will now rerun the model using individual variables for the linear and quadratic terms of yrSin. These individual variables will be on their original scale, and will be easier to interpret. These individual variables will also be easier to work with for hypothesis testing and predicting.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>salary$yrSinSqr &lt;- salary$yrSin^2  # this goes in data prep 
outSin3 &lt;- lm(salary~dscpl + sex + rank + yrSin+yrSinSqr,data=salary)
summary(outSin3)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>
Call:
lm(formula = salary ~ dscpl + sex + rank + yrSin + yrSinSqr, 
    data = salary)

Residuals:
    Min      1Q  Median      3Q     Max 
-62.956 -13.315  -1.405   9.831  96.306 

Coefficients:
               Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   60.378762   5.329187  11.330  &lt; 2e-16 ***
dscplB        14.199904   2.331061   6.092 2.68e-09 ***
sexMale        5.233598   3.860948   1.356  0.17604    
rankAssocProf  5.551081   5.033353   1.103  0.27077    
rankProf      34.100878   6.184019   5.514 6.38e-08 ***
yrSin          1.512625   0.565503   2.675  0.00779 ** 
yrSinSqr      -0.025037   0.009508  -2.633  0.00879 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 22.49 on 390 degrees of freedom
Multiple R-squared:  0.4569,    Adjusted R-squared:  0.4485 
F-statistic: 54.68 on 6 and 390 DF,  p-value: &lt; 2.2e-16</code></pre></li>
</ul>
<p>The yrSinSqr can now be tested for significance. The results of an F-test are equivalent to the Wald based t-test of the coefficient. Using the drop1() function provides the same p-value as in the summary() function above</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>drop1(outSin3, test="F")</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>Single term deletions

Model:
salary ~ dscpl + sex + rank + yrSin + yrSinSqr
         Df Sum of Sq    RSS    AIC F value    Pr(&gt;F)    
&lt;none&gt;                197318 2478.8                      
dscpl     1   18774.4 216093 2512.9 37.1077 2.682e-09 ***
sex       1     929.6 198248 2478.7  1.8374  0.176036    
rank      2   28412.8 225731 2528.2 28.0790 4.049e-12 ***
yrSin     1    3619.9 200938 2484.1  7.1547  0.007791 ** 
yrSinSqr  1    3508.1 200826 2483.8  6.9337  0.008795 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>This is the best model from our backwards selection process.</p>
<p>The sex term was significant when considered by itself. This is seen in the p-value of .00567 for the sex coefficient in the "out" model. When accounting for the variation associated with discipline, rank, and years of service, sex is not significant as is seen by the p-value of .17604 in the "outSin3" model. This is a reminder that a variable being significant is with respect to the total set of terms in a model.</p>
<p>This process of variable selection was designed for instruction on the functions used for model selection. Models should not be selected independent of diagnostics. Model diagnostic tools are covered in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Regression Diagnostics</a> article. Diagnostics should be run in parallel to the steps of model selections. We will see in the Diagnostic article that our selected model violates assumptions for OLS models.</p>
<p>Commit your changes to SalAnalysis.</p>
<div class="section level4" id="exercise-1">
<h4>Exercise</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<p>Note, we will use the shade and irrig variables as continuous variables for these exercises. They could also be considered as factor variables. Since both represent increasing levels we first try to use them as scale.</p>
<ol style="list-style-type: decimal">
<li><p>Set the the reference level of the inoc variable to cntrl.</p></li>
<li><p>Create a quadratic poly term for the shade variable.</p></li>
<li><p>Regress yield on the irrig, inoc, the quadratic shade term, and all their interactions.</p></li>
<li><p>Use the backward selection method to reduce the model. Use the significance of the term as the criterion, as was done in the lesson.</p></li>
<li><p>Commit your changes to AlfAnalysis.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Regression_Sol.html">Solutions</a></p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Regression Diagnostics</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_DataPres.html">Data presentation</a></p>
<p>Last Revised: 8/27/2015</p>
</div>
</div>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>R for researchers: Regression (GLM)</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<div id="TOC">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#preliminaries">Preliminaries</a></li>
<li><a href="#glm-families">GLM families</a></li>
<li><a href="#glm-model-evaluation">GLM model evaluation</a></li>
<li><a href="#variable-selection">Variable selection</a></li>
<li><a href="#binary-response-variable-logistic">Binary response variable (Logistic)</a></li>
<li><a href="#count-response-variable">Count response variable</a></li>
</ul>
</div>
<p>This article is part of the R for Researchers series. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<div class="section level2" id="overview">
<h2>Overview</h2>
<p>This article will introduce you to specifying the the link and variance function for a generalized linear model (GLM.) The article provides example models for binary, poisson, quasipoisson, and negative binomial models. The article also provides a diagnostic method to examine the variance assumption of a GLM model.</p>
</div>
<div class="section level2" id="preliminaries">
<h2>Preliminaries</h2>
<p>You will get the most from this article if you follow along with the examples in RStudio. Working the exercise will further enhance your skills with the material. The following steps will prepare your RStudio session to run this article's examples.</p>
<ul>
<li>Start RStudio and open your RFR project.</li>
<li>Confirm that RFR (the name of your project) is displayed in the upper left corner of the RStudio window.</li>
<li>Open new R script.</li>
<li>Save the script as glm.R.</li>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>#######################################################
#######################################################
##
##   Environment Setup
##
#######################################################
#######################################################

library(faraway)      # glm support
library(MASS)         # negative binomial support
library(car)          # regression functions
library(lme4)         # random effects
library(ggplot2)      # plotting commands
library(reshape2)     # wide to tall reshaping
library(xtable)       # nice table formatting
library(knitr)        # kable table formatting
library(grid)         # units function for ggplot

saveDir &lt;- getwd()    # get the current working directory

wd &lt;- "u:/RFR"        # path to my project
setwd(wd)             # set this path as my work directory</code></pre></li>
<li><p>There are no console results from these commands.</p></li>
</ul>
</div>
<div class="section level2" id="glm-families">
<h2>GLM families</h2>
<p>Generalized linear models (GLM) are useful when the range of your response variable is constrained and/or the variance is not constant or normally distributed. GLM models transform the response variable to allow the fit to be done by least squares. The transformation done on the response variable is defined by the <strong>link</strong> function. This transformation of the response may constrain the range of the response variable. The <strong>variance</strong> function specifies the relationship of the variance to the mean. In R a <strong>family</strong> specifies the variance and link functions which are used in the model fit. As an example the family poisson uses the "log" link function and "<span class="math inline">\(\mu\)</span>" as the variance function. A GLM model is defined by both the formula and the family.</p>
<p>GLM models can also be used to fit data in which the variance is proportional to one of the defined variance functions. This is done with quasi families. Pearson's <span class="math inline">\(\chi^2\)</span> is used to scale the variance in the quasi families. An example would be data in which the variance is proportional to the mean. This would use the "quasipoisson" family. This results in a variance function of <span class="math inline">\(\alpha \mu\)</span> instead of <span class="math inline">\(1 \mu\)</span> as for Poission distributed data. The quasi families allows inference to be done when your data is over or underdispersed, provided that the variance is proportion.</p>
<p>The default link function for a family can be changed by specifying a link to the family function. For example, if the response variable is non negative and the variance is proportional to the mean, you would use the "identity" link with the "quasipoisson" family function. This would be specified as</p>
<pre><code>family=quasipoisson(link="identity")</code></pre>
<p>The variance function is specified by the family.</p>
<p>The decision of which family is appropriate is not discussed in this series.</p>
</div>
<div class="section level2" id="glm-model-evaluation">
<h2>GLM model evaluation</h2>
<p>GLM models have a defined relationship between the expected variance and the mean. This relationship can be used to evaluate the model's goodness of fit to the data. The deviance can be used for this goodness of fit check. Under asymptotic conditions the deviance is expected to be <span class="math inline">\(\chi^2_{df}\)</span> distributed. Pearson's <span class="math inline">\(\chi^2\)</span> can also be used for this measure of goodness of fit, though it is the deviance which is minimized when fitting a GLM model.</p>
<p>There are some limits to the goodness of fit evaluation.</p>
<ul>
<li>When the response data is binary, the deviance approximations are not even approximately correct.</li>
<li>The deviance approximations are also not useful when there are small group sizes.</li>
<li>The goodness of fit tests using deviance or Pearson's are not applicable with a quasi family model.</li>
</ul>
<p>Residual plots are useful for some GLM models and much less useful for others. When residuals are useful in the evaluation a GLM model, the plot of Pearson's residuals versus the fitted link values is typically the most helpful. The Pearson's residuals are normalized by the variance and are expected to then be constant across the prediction range. Pearson's residuals and the fitted link values are obtained by extractor functions.</p>
<ul>
<li><p>Syntax and use of the <strong>type</strong> parameter in residuals() and predict().</p>
<p>residuals(modObj, type=<em>resType</em>)</p>
<p>Returns a vector of the residuals. The scale of the residuals is determined by the type parameter</p>
<p><em>ResType</em> can be set to "deviance", "pearson", "working", "response", or "partial".</p>
<p>predict(modObj, type="fitType")</p>
<p>Returns a vector of fitted values. The scale of the residuals is determined by the type parameter.</p>
<p><em>fitType</em> can be set to "link", "response" or "terms".</p></li>
</ul>
</div>
<div class="section level2" id="variable-selection">
<h2>Variable selection</h2>
<p>Variable selection for a GLM model is similar to the process for an OLS model. Nested model tests for significance of a coefficient are preferred to Wald test of coefficients. This is due to GLM coefficients standard errors being sensitive to even small deviations from the model assumptions. It is also more accurate to take p-values for the GLM coefficients from nested model tests.</p>
<p>The likelihood ratio test (LRT) is typically used to test nested models. For quasi family models an F test is used for nested model tests (or when the fit is overdispersed or underdispersed.) This use of the F statistic is appropriate if the group sizes are approximately equal.</p>
<p>Which variable to select for a model may depend on the family that is being used in the model. In these cases variable selection is connected with family selection. Variable selection criteria such as AIC and BIC are generally not applicable for selecting between families.</p>
</div>
<div class="section level2" id="binary-response-variable-logistic">
<h2>Binary response variable (Logistic)</h2>
<p>Binary data, like binomial data, is typically modelled with the logit link and variance function <span class="math inline">\(\mu(1-\mu)\)</span>. The modelled response is the predicted log odds of an event.</p>
<p>We will use the hsb dataset from the faraway package for our binary response model. This dataset is a subset of a National Education Longitudinal Studies dataset. We will start by loading the data.frame and taking a look at the variables.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>data(hsb)
str(hsb)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>'data.frame':   200 obs. of  11 variables:
 $ id     : int  70 121 86 141 172 113 50 11 84 48 ...
 $ gender : Factor w/ 2 levels "female","male": 2 1 2 2 2 2 2 2 2 2 ...
 $ race   : Factor w/ 4 levels "african-amer",..: 4 4 4 4 4 4 1 3 4 1 ...
 $ ses    : Factor w/ 3 levels "high","low","middle": 2 3 1 1 3 3 3 3 3 3 ...
 $ schtyp : Factor w/ 2 levels "private","public": 2 2 2 2 2 2 2 2 2 2 ...
 $ prog   : Factor w/ 3 levels "academic","general",..: 2 3 2 3 1 1 2 1 2 1 ...
 $ read   : int  57 68 44 63 47 44 50 34 63 57 ...
 $ write  : int  52 59 33 44 52 52 59 46 57 55 ...
 $ math   : int  41 53 54 47 57 51 42 45 54 52 ...
 $ science: int  47 63 58 53 53 63 53 39 58 50 ...
 $ socst  : int  57 61 31 56 61 61 61 36 51 51 ...</code></pre></li>
</ul>
<p>We will model the odds of a student's program of choice being "academic" as our response variable. We will use all the other variables in the dataset as independent variables. We will ignore interactions here to focus on the GLM fitting process.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>g1 &lt;- glm(I(prog=="academic")~gender+race+ses+schtyp+
          read+write+science+socst,
          family=binomial(), data=hsb)
summary(g1)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>
Call:
glm(formula = I(prog == "academic") ~ gender + race + ses + schtyp + 
    read + write + science + socst, family = binomial(), data = hsb)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.1823  -0.8645   0.3223   0.8676   2.0749  

Coefficients:
             Estimate Std. Error z value Pr(&gt;|z|)    
(Intercept)  -4.94995    1.49602  -3.309 0.000937 ***
gendermale    0.23634    0.37889   0.624 0.532779    
raceasian    -0.11219    0.92526  -0.121 0.903490    
racehispanic  0.52553    0.71902   0.731 0.464842    
racewhite    -0.14508    0.61364  -0.236 0.813101    
seslow       -0.69719    0.51813  -1.346 0.178437    
sesmiddle    -0.90940    0.41622  -2.185 0.028896 *  
schtyppublic -1.16715    0.49695  -2.349 0.018843 *  
read          0.06760    0.02596   2.604 0.009208 ** 
write         0.05920    0.02801   2.114 0.034540 *  
science      -0.05286    0.02612  -2.023 0.043029 *  
socst         0.05148    0.02259   2.279 0.022648 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 276.76  on 199  degrees of freedom
Residual deviance: 211.26  on 188  degrees of freedom
AIC: 235.26

Number of Fisher Scoring iterations: 4</code></pre></li>
</ul>
<p>The summary output for a GLM models displays the call, residuals, and coefficients similar to an LM object. The model information at the bottom of the output is different. For a GLM model the dispersion parameter and deviance values are provided. Here we have a set dispersion value of 1, since we are not working with a quasi family.</p>
<p>We will not check the model fit with a test of the residual deviance, since the distribution is not expected to be <span class="math inline">\(\chi^2_{df}\)</span> distributed.</p>
<p>We will use step with the criteria being the likelihood ratio test (LRT) to reduce unneeded variables from the model.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>step(g1, test="LRT")</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre class="r"><code>step(g1, test="LRT")</code></pre>
<pre><code>Start:  AIC=235.26
I(prog == "academic") ~ gender + race + ses + schtyp + read + 
    write + science + socst

          Df Deviance    AIC    LRT Pr(&gt;Chi)   
- race     3   212.64 230.64 1.3789 0.710487   
- gender   1   211.65 233.65 0.3906 0.531964   
&lt;none&gt;         211.26 235.26                   
- ses      2   216.23 236.23 4.9660 0.083492 . 
- science  1   215.52 237.52 4.2646 0.038916 * 
- write    1   215.90 237.90 4.6386 0.031260 * 
- socst    1   216.66 238.66 5.4048 0.020082 * 
- schtyp   1   217.29 239.29 6.0261 0.014096 * 
- read     1   218.41 240.41 7.1487 0.007502 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Step:  AIC=230.64
I(prog == "academic") ~ gender + ses + schtyp + read + write + 
    science + socst

          Df Deviance    AIC    LRT Pr(&gt;Chi)   
- gender   1   213.18 229.18 0.5399  0.46246   
&lt;none&gt;         212.64 230.64                   
- ses      2   217.43 231.43 4.7867  0.09132 . 
- write    1   217.06 233.06 4.4201  0.03552 * 
- schtyp   1   218.19 234.19 5.5518  0.01846 * 
- science  1   218.20 234.20 5.5653  0.01832 * 
- socst    1   218.33 234.33 5.6894  0.01707 * 
- read     1   219.39 235.39 6.7547  0.00935 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Step:  AIC=229.18
I(prog == "academic") ~ ses + schtyp + read + write + science + 
    socst

          Df Deviance    AIC    LRT Pr(&gt;Chi)   
&lt;none&gt;         213.18 229.18                   
- ses      2   218.13 230.13 4.9494 0.084189 . 
- write    1   217.06 231.06 3.8857 0.048700 * 
- science  1   218.25 232.25 5.0752 0.024271 * 
- schtyp   1   218.78 232.78 5.6008 0.017953 * 
- socst    1   218.85 232.85 5.6742 0.017216 * 
- read     1   220.55 234.55 7.3690 0.006636 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre><code>
Call:  glm(formula = I(prog == "academic") ~ ses + schtyp + read + write + 
    science + socst, family = binomial(), data = hsb)

Coefficients:
 (Intercept)        seslow     sesmiddle  schtyppublic          read  
    -4.38958      -0.67766      -0.89902      -1.10394       0.06794  
       write       science         socst  
     0.04845      -0.05345       0.05174  

Degrees of Freedom: 199 Total (i.e. Null);  192 Residual
Null Deviance:      276.8 
Residual Deviance: 213.2    AIC: 229.2</code></pre></li>
</ul>
<p>We can now fit the model suggested by step.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>g2 &lt;- glm(I(prog == "academic") ~ ses + schtyp + read +  
            write + science + socst, 
          family = "binomial", data = hsb)
summary(g2)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>
Call:
glm(formula = I(prog == "academic") ~ ses + schtyp + read + write + 
    science + socst, family = "binomial", data = hsb)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.1132  -0.8912   0.3224   0.8909   2.0947  

Coefficients:
             Estimate Std. Error z value Pr(&gt;|z|)   
(Intercept)  -4.38958    1.37564  -3.191  0.00142 **
seslow       -0.67766    0.49931  -1.357  0.17472   
sesmiddle    -0.89902    0.41186  -2.183  0.02905 * 
schtyppublic -1.10394    0.48643  -2.269  0.02324 * 
read          0.06794    0.02570   2.644  0.00820 **
write         0.04845    0.02494   1.942  0.05210 . 
science      -0.05345    0.02434  -2.196  0.02810 * 
socst         0.05174    0.02214   2.337  0.01946 * 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 276.76  on 199  degrees of freedom
Residual deviance: 213.18  on 192  degrees of freedom
AIC: 229.18

Number of Fisher Scoring iterations: 4</code></pre></li>
</ul>
<p>Note there are differences between the p-values reported in summary and what was reported the the LRT test in the final step of the step() function above.</p>
<p>The quasibinomial family is useful for modelling response variables with a bounded range.</p>
<div class="section level3" id="diagnostics">
<h3>Diagnostics</h3>
<p>Residual plots provide little assistance in evaluating binary models. The diagnostics for the sensitivity of the model to the data are checked checked using the same methods as was done for OLS models.</p>
</div>
</div>
<div class="section level2" id="count-response-variable">
<h2>Count response variable</h2>
<p>Count data is typically modelled using the poisson family. This uses a log link function and a variance function of <span class="math inline">\(\mu\)</span>. The modelled response is the predicted log count.</p>
<p>We will use the discoveries dataset from the datasets package for our binary response model. This dataset is the number of great inventions for the years 1860 to 1959. We will start by loading the data.frame and adding a variable to represent the number of years since 1860. We will assume that there is no correlation between the years to focus on the GLM model fit.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>data(discoveries)
disc &lt;- data.frame(count=as.numeric(discoveries),
                   year=seq(0,(length(discoveries)-1),1)
                   )</code></pre></li>
<li><p>There are no console results from the above commands.</p></li>
</ul>
<p>We will fit the count of inventions with year and year squared.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>yearSqr=disc$year^2
p1 &lt;- glm(count~year+yearSqr, 
          family="poisson",
          data=disc)
summary(p1)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>
Call:
glm(formula = count ~ year + yearSqr, family = "poisson", data = disc)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.9066  -0.8397  -0.2544   0.4776   3.3303  

Coefficients:
              Estimate Std. Error z value Pr(&gt;|z|)    
(Intercept)  7.592e-01  1.814e-01   4.186 2.84e-05 ***
year         3.356e-02  8.499e-03   3.948 7.87e-05 ***
yearSqr     -4.106e-04  8.699e-05  -4.720 2.35e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for poisson family taken to be 1)

    Null deviance: 164.68  on 99  degrees of freedom
Residual deviance: 132.84  on 97  degrees of freedom
AIC: 407.85

Number of Fisher Scoring iterations: 5</code></pre></li>
</ul>
<p>We can check the goodness of fit of this model. We will use the deviance of the residuals for this test.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>1 - pchisq(deviance(p1),df.residual(p1))</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>[1] 0.009204575</code></pre></li>
</ul>
<p>The p-value is approximately .001. This deviance is not likely to have occurred by chance, under the null hypothesis of the deviances being <span class="math inline">\(\chi^2\)</span>. Therefore we have evidence of overdispersion. The presence of overdispersion suggested the use of the F-test for nested models. We will test if the squared term can be dropped from the model.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>drop1(p1, test="F")</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>Warning in drop1.glm(p1, test = "F"): F test assumes 'quasipoisson' family</code></pre>
<pre><code>Single term deletions

Model:
count ~ year + yearSqr
        Df Deviance    AIC F value    Pr(&gt;F)    
&lt;none&gt;       132.84 407.85                      
year     1   149.66 422.67  12.286 0.0006927 ***
yearSqr  1   157.32 430.32  17.874 5.345e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>The p-value for yearSqr is small (.0005.) We will retain the yearSqr term in the model.</p>
<div class="section level3" id="quasi-poisson-model">
<h3>Quasi-Poisson model</h3>
<p>The invention count model from above needs to be fit using the quasipoisson family. The quasipoisson family will account for the greater variance in the data.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>p2 &lt;- glm(count~year+yearSqr, 
          family="quasipoisson",
          data=disc)
summary(p2)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>
Call:
glm(formula = count ~ year + yearSqr, family = "quasipoisson", 
    data = disc)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.9066  -0.8397  -0.2544   0.4776   3.3303  

Coefficients:
              Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  0.7592473  0.2072715   3.663 0.000406 ***
year         0.0335569  0.0097112   3.455 0.000816 ***
yearSqr     -0.0004106  0.0000994  -4.131 7.66e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for quasipoisson family taken to be 1.305649)

    Null deviance: 164.68  on 99  degrees of freedom
Residual deviance: 132.84  on 97  degrees of freedom
AIC: NA

Number of Fisher Scoring iterations: 5</code></pre>
<pre><code>[1] 1.305649</code></pre></li>
</ul>
<p>There is no change in the estimated coefficient between the quasipoisson fit and the poisson fit. The significance of the terms does change and a dispersion parameter is estimated.</p>
<p>Before determining that the quasipoisson family is appropriate, we will check to see if the variance of the residuals is proportional to the mean. We begin this check by creating a new data.frame which includes the residuals and fitted values.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>p1Diag &lt;- data.frame(disc,
                     link=predict(p1, type="link"),
                     fit=predict(p1, type="response"),
                     pearson=residuals(p1,type="pearson"),
                     resid=residuals(p1,type="response"),
                     residSqr=residuals(p1,type="response")^2
                     )</code></pre></li>
<li><p>There are no console results for the above command.</p></li>
</ul>
<p>We will plot the square of the residual to the predicted mean. We will add to this scatter plot a black line for the Poisson assumed variance, a green line for the quasi-Poisson assumed variance, and a blue curve for the smoothed mean of the square of the residual.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>ggplot(data=p1Diag, aes(x=fit, y=residSqr)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1) +
  geom_abline(intercept = 0, slope = summary(p2)$dispersion,
              color="green") +
  stat_smooth(method="loess", se = FALSE) +
  theme_bw() </code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_files/figure-html/unnamed-chunk-13-1.png" title="" width="672"/></p></li>
</ul>
<p>Ideally the blue curve would be straight and it would be collinear with the green line for the quasi-Poisson variance. The greater the deviation from the green line the greater the concern is about the proportionality of the variance to the mean. Here we have some indication that the variance may not be proportional to the mean.</p>
</div>
<div class="section level3" id="negative-binomial-model">
<h3>Negative binomial model</h3>
<p>We will now look to see if a negative binomial model might be a better fit. The negative binomial requires the use of the glm.nb() function. The call to glm.nb is similar to glm, except no family is given.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>nb1 &lt;- glm.nb(count~year+yearSqr, 
          data=disc)
summary(nb1)</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre><code>
Call:
glm.nb(formula = count ~ year + yearSqr, data = disc, init.theta = 11.53157519, 
    link = log)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.6849  -0.7707  -0.2344   0.4232   2.7134  

Coefficients:
              Estimate Std. Error z value Pr(&gt;|z|)    
(Intercept)  7.526e-01  2.019e-01   3.727 0.000194 ***
year         3.386e-02  9.471e-03   3.575 0.000350 ***
yearSqr     -4.132e-04  9.627e-05  -4.292 1.77e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for Negative Binomial(11.5316) family taken to be 1)

    Null deviance: 131.91  on 99  degrees of freedom
Residual deviance: 106.20  on 97  degrees of freedom
AIC: 406.21

Number of Fisher Scoring iterations: 1

              Theta:  11.53 
          Std. Err.:  7.42 

 2 x log-likelihood:  -398.214 </code></pre></li>
</ul>
<p>The coefficients have only a small change from the quasi-Poisson model.</p>
<p>The drop1 function is used to test the significance of the squared term for year. We use the likelihood ratio test for negative binomial models.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>drop1(nb1, test="LRT")</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>Single term deletions

Model:
count ~ year + yearSqr
        Df Deviance    AIC    LRT  Pr(&gt;Chi)    
&lt;none&gt;       106.20 404.21                     
year     1   119.54 415.55 13.338   0.00026 ***
yearSqr  1   125.79 421.80 19.589 9.602e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
</ul>
<p>The squared term is significant and is retained in the model.</p>
<p>We will repeat the check of the variance of the residuals which was done for the quasi-Poisson model. Plotting the square of the residual to the fitted values, with a black line for Poisson, green line for quasi-Poisson, a blue curve for smoothed mean of the square of the residual, and a red curve for predicted variance from the negative binomial fit.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>nb1Diag &lt;- data.frame(disc,
                     link=predict(nb1, type="link"),
                     fit=predict(nb1, type="response"),
                     pearson=residuals(nb1,type="pearson"),
                     resid=residuals(nb1,type="response"),
                     residSqr=residuals(nb1,type="response")^2
                     )

ggplot(data=nb1Diag, aes(x=fit, y=residSqr)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1) +
  geom_abline(intercept = 0, slope = summary(p2)$dispersion,
              color="green") +
  stat_function(fun=function(fit){fit + fit^2/11.53}, color="red") +
  stat_smooth(method="loess", se = FALSE) +
  theme_bw() </code></pre></li>
<li><p>There are no console results from this command. The following plot is produced.</p>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_files/figure-html/unnamed-chunk-16-1.png" title="" width="672"/></p></li>
</ul>
<p>The negative binomial variance curve (red) is close to the quasi-Poisson line (green.)</p>
<p>Although the means and variance predictions for the negative binomial and quasi-Poisson models are similar, the probability for any given integer is different for the two models. The following code shows the predicted probabilities of 0 through 7 when the mean is predicted to be 4.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>data.frame( number=0:8,
            prob_Poisson=round( dpois(0:8,(4*summary(p2)$dispersion) ), 3 ),
            prob_NBinom=round( dnbinom(0:8,mu=4,size=summary(nb1)$theta), 3 )
            )
summary(nb1)$theta</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>  number prob_Poisson prob_NBinom
1      0        0.005       0.032
2      1        0.028       0.096
3      2        0.074       0.155
4      3        0.128       0.180
5      4        0.167       0.168
6      5        0.175       0.134
7      6        0.152       0.095
8      7        0.113       0.062
9      8        0.074       0.037</code></pre>
<pre><code>[1] 11.53158</code></pre></li>
</ul>
<p>The interpretation of the two models is different as well as the probabilities of the event counts. Examining the diagnostics would be useful step in choosing between these two models.</p>
</div>
<div class="section level3" id="diagnostics-1">
<h3>Diagnostics</h3>
<p>Residual plots of the pearsons residuals to the link function have some utility for count data. The diagnostics for the sensitivity of the model to the data are checked using the same methods as was done for OLS models.</p>
<div class="section level4" id="exercise-solutions">
<h4>Exercise solutions</h4>
<ol style="list-style-type: decimal">
<li><p>Use the following code to load the warpbreaks data set and examine the variables in the data set.</p>
<pre><code>data(warpbreaks)

str(warpbreaks)

plot(warpbreaks)</code></pre></li>
<li><p>Use the poisson family and fit breaks with wool, tension, and their interaction.</p></li>
<li><p>Check to see if this is an appropriate model. If not, choose a more appropriate model form.</p></li>
<li><p>Use the backward selection method to reduce your model, if possible. Use your model from the prior problem as the starting model.</p></li>
<li><p>Check the residual variance assumption for your model.</p></li>
</ol>
<p><a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_Sol.html">Solutions</a></p>
<p>Next: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegInference.html">Regression Inference</a></p>
<p>Previous: <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Regression Diagnostics</a></p>
<p>Last Revised: 3/19/2014</p>
</div>
</div>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_files/figure-html/unnamed-chunk-13-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_files/figure-html/unnamed-chunk-16-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Regression (GLM) solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<ul>
<li><p>The following preparation code was used to prepare the R session for these solutions</p>
<pre><code>#######################################################
#######################################################
##
##   Environment Setup
##
#######################################################
#######################################################

library(faraway)      # glm support
library(MASS)         # negative binomial support
library(car)          # regression functions
library(lme4)         # random effects
library(ggplot2)      # plotting commands
library(reshape2)     # wide to tall reshaping
library(xtable)       # nice table formatting
library(knitr)        # kable table formatting
library(grid)         # units function for ggplot

saveDir &lt;- getwd()    # get the current working directory

wd &lt;- "u:/RFR"        # path to my project
setwd(wd)             # set this path as my work directory</code></pre></li>
</ul>
<div class="section level4" id="exercise-solutions">
<h4>Exercise solutions</h4>
<ol style="list-style-type: decimal">
<li><p>Use the following code to load the warpbreaks data set and examine the variables in the data set.</p>
<pre class="r"><code>data(warpbreaks)

str(warpbreaks)</code></pre>
<pre><code>'data.frame':   54 obs. of  3 variables:
 $ breaks : num  26 30 54 25 70 52 51 26 67 18 ...
 $ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
 $ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 2 ...</code></pre>
<pre class="r"><code>plot(warpbreaks)</code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_Sol_files/figure-html/unnamed-chunk-2-1.png" title="" width="672"/></p></li>
<li><p>Use the poisson family and fit breaks with wool, tension, and their interaction.</p>
<pre class="r"><code>pMod &lt;- glm(breaks~wool*tension,family=poisson, data=warpbreaks)
summary(pMod)</code></pre>
<pre><code>
Call:
glm(formula = breaks ~ wool * tension, family = poisson, data = warpbreaks)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-3.3383  -1.4844  -0.1291   1.1725   3.5153  

Coefficients:
               Estimate Std. Error z value Pr(&gt;|z|)    
(Intercept)     3.79674    0.04994  76.030  &lt; 2e-16 ***
woolB          -0.45663    0.08019  -5.694 1.24e-08 ***
tensionM       -0.61868    0.08440  -7.330 2.30e-13 ***
tensionH       -0.59580    0.08378  -7.112 1.15e-12 ***
woolB:tensionM  0.63818    0.12215   5.224 1.75e-07 ***
woolB:tensionH  0.18836    0.12990   1.450    0.147    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for poisson family taken to be 1)

    Null deviance: 297.37  on 53  degrees of freedom
Residual deviance: 182.31  on 48  degrees of freedom
AIC: 468.97

Number of Fisher Scoring iterations: 4</code></pre></li>
<li><p>Check to see if this is an appropriate model. If not, choose a more appropriate model form.</p>
<pre class="r"><code>1 - pchisq(deviance(pMod),df.residual(pMod))</code></pre>
<pre><code>[1] 0</code></pre>
<pre class="r"><code>pMod2 &lt;- glm(breaks~wool*tension, 
             family="quasipoisson",
             data=warpbreaks)

pMod2Diag &lt;- data.frame(warpbreaks,
                        link=predict(pMod2, type="link"),
                        fit=predict(pMod2, type="response"),
                        pearson=residuals(pMod2,type="pearson"),
                        resid=residuals(pMod2,type="response"),
                        residSqr=residuals(pMod2,type="response")^2
                        )

ggplot(data=pMod2Diag, aes(x=fit, y=residSqr)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1) +
  geom_abline(intercept = 0, slope = summary(pMod2)$dispersion,
              color="green") +
  stat_smooth(method="loess", se = FALSE) +
  theme_bw() </code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_Sol_files/figure-html/unnamed-chunk-4-1.png" title="" width="672"/></p>
<pre class="r"><code>nbMod &lt;- glm.nb(breaks~wool*tension, 
                data=warpbreaks)
summary(nbMod)</code></pre>
<pre><code>
Call:
glm.nb(formula = breaks ~ wool * tension, data = warpbreaks, 
    init.theta = 12.08216462, link = log)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-2.09611  -0.89383  -0.07212   0.65270   1.80646  

Coefficients:
               Estimate Std. Error z value Pr(&gt;|z|)    
(Intercept)      3.7967     0.1081  35.116  &lt; 2e-16 ***
woolB           -0.4566     0.1576  -2.898 0.003753 ** 
tensionM        -0.6187     0.1597  -3.873 0.000107 ***
tensionH        -0.5958     0.1594  -3.738 0.000186 ***
woolB:tensionM   0.6382     0.2274   2.807 0.005008 ** 
woolB:tensionH   0.1884     0.2316   0.813 0.416123    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for Negative Binomial(12.0822) family taken to be 1)

    Null deviance: 86.759  on 53  degrees of freedom
Residual deviance: 53.506  on 48  degrees of freedom
AIC: 405.12

Number of Fisher Scoring iterations: 1

              Theta:  12.08 
          Std. Err.:  3.30 

 2 x log-likelihood:  -391.125 </code></pre></li>
<li><p>Use the backward selection method to reduce your model, if possible. Use your model from the prior problem as the starting model.</p>
<pre class="r"><code>step(nbMod, test="LRT")</code></pre>
<pre><code>Start:  AIC=403.12
breaks ~ wool * tension

               Df Deviance    AIC   LRT Pr(&gt;Chi)  
&lt;none&gt;              53.506 403.12                 
- wool:tension  2   61.712 407.33 8.206  0.01652 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre><code>
Call:  glm.nb(formula = breaks ~ wool * tension, data = warpbreaks, 
    init.theta = 12.08216462, link = log)

Coefficients:
   (Intercept)           woolB        tensionM        tensionH  
        3.7967         -0.4566         -0.6187         -0.5958  
woolB:tensionM  woolB:tensionH  
        0.6382          0.1884  

Degrees of Freedom: 53 Total (i.e. Null);  48 Residual
Null Deviance:      86.76 
Residual Deviance: 53.51    AIC: 405.1</code></pre>
<p><strong>No terms can be dropped from the model.</strong></p></li>
<li><p>Check the residual variance assumption for your model.</p>
<pre class="r"><code>nbModDiag &lt;- data.frame(warpbreaks,
                        link=predict(nbMod, type="link"),
                        fit=predict(nbMod, type="response"),
                        pearson=residuals(nbMod,type="pearson"),
                        resid=residuals(nbMod,type="response"),
                        residSqr=residuals(nbMod,type="response")^2
                        )

ggplot(data=nbModDiag, aes(x=fit, y=residSqr)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1) +
  geom_abline(intercept = 0, slope = summary(pMod2)$dispersion,
              color="green") +
  stat_function(fun=function(fit){fit + fit^2/summary(nbMod)$theta},
                color="red") +
  stat_smooth(method="loess", se = FALSE) +
  theme_bw() </code></pre>
<p><img alt="" src="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_Sol_files/figure-html/unnamed-chunk-6-1.png" title="" width="672"/></p>
<p><strong>The negative binomial model is closer to means of the loess line than to the quasipoisson model.</strong> <strong>The range of values predicted by the model for the predicted values below 20 appears to be overstated by this model, though not as much as by the quasipossion model.</strong></p></li>
</ol>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Regression.html">Regression (OLS)</a> article.</p>
<p>Last Revised: 3/4/2015</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_Sol_files/figure-html/unnamed-chunk-2-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_Sol_files/figure-html/unnamed-chunk-4-1.png, https://ssc.wisc.edu/sscc/pubs/RFR/RFR_RegressionGLM_Sol_files/figure-html/unnamed-chunk-6-1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R for Researchers: Regression (OLS) solutions</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="header">
</div>
<p>This article contains solutions to exercises for an article in the series R for Researchers. For a list of topics covered by this series, see the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">Introduction</a> article. If you're new to R we highly recommend reading the articles in order.</p>
<p>There is often more than one approach to the exercises. Do not be concerned if your approach is different than the solution provided.</p>
<p>These solutions require the solutions from the prior lesson be run in your R session.</p>
<div class="section level4" id="exercise-solutions">
<h4>Exercise solutions</h4>
<p>These exercises use the alfalfa dataset and the work you started on the alfAnalysis script. Open the script and run all the commands in the script to prepare your session for these problems.</p>
<p>Note, we will use the shade and irrig variable as continuous variables for these exercise. They could also be considered as factor variables. Since both represent increasing levels we first try to use them as scale.</p>
<ol style="list-style-type: decimal">
<li><p>Set the the reference level of the inoc variable to cntrl.</p>
<pre class="r"><code>#######################################################
#######################################################
##
##   Regression
##
#######################################################
#######################################################


str(alfalfa$inoc)</code></pre>
<pre><code> Factor w/ 5 levels "A","B","C","cntrl",..: 1 2 5 3 4 5 4 2 1 3 ...</code></pre>
<pre class="r"><code>alfalfa$inoc &lt;- factor(alfalfa$inoc,levels=c("cntrl","A","B","C","D") )</code></pre></li>
<li><p>Create a quadratic poly term for the shade variable.</p>
<pre class="r"><code>shade2 &lt;- poly(alfalfa$shade, degree=2)</code></pre></li>
<li><p>Regress yield on the irrig, inoc, the quadratic shade term, and all their interactions.</p>
<pre class="r"><code>out &lt;- lm(yield~(irrig+inoc+shade2)^2, data=alfalfa)
summary(out)</code></pre>
<pre><code>
Call:
lm(formula = yield ~ (irrig + inoc + shade2)^2, data = alfalfa)

Residuals:
         1          2          3          4          5          6 
-1.403e-02  2.053e-02 -2.149e-01 -1.712e-01  1.621e-01  6.807e-01 
         7          8          9         10         11         12 
-3.241e-01  2.053e-02  5.610e-02  3.044e-01  1.141e-01 -7.523e-01 
        13         14         15         16         17         18 
-8.415e-02  5.321e-16 -1.847e-01  3.241e-01  5.610e-02 -4.565e-01 
        19         20         21         22         23         24 
 2.258e-01  3.224e-01 -8.210e-02  2.092e-01 -1.621e-01 -3.582e-02 
        25 
-1.403e-02 

Coefficients:
              Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)    32.4643     1.3937  23.294 0.000173 ***
irrig          -1.1195     0.4020  -2.785 0.068729 .  
inocA           4.3853     1.9397   2.261 0.108848    
inocB          -1.1339     2.5535  -0.444 0.687085    
inocC           1.5821     1.5433   1.025 0.380738    
inocD           4.6810     1.6295   2.873 0.063909 .  
shade21         4.0046     5.0646   0.791 0.486852    
shade22        -8.5243     7.6699  -1.111 0.347454    
irrig:inocA     0.6117     0.5686   1.076 0.360816    
irrig:inocB     2.6848     0.8416   3.190 0.049701 *  
irrig:inocC     1.7532     0.5001   3.505 0.039332 *  
irrig:inocD     0.1157     0.4993   0.232 0.831676    
irrig:shade21   2.5552     1.2161   2.101 0.126428    
irrig:shade22   3.4764     1.8453   1.884 0.156083    
inocA:shade21  -9.3599     5.2525  -1.782 0.172771    
inocB:shade21  -1.4753     3.4398  -0.429 0.696927    
inocC:shade21   4.1493     3.2650   1.271 0.293373    
inocD:shade21  -0.5848     4.5746  -0.128 0.906373    
inocA:shade22  -8.8399     4.1364  -2.137 0.122187    
inocB:shade22   7.3414     7.2192   1.017 0.384063    
inocC:shade22   0.8405     3.5126   0.239 0.826294    
inocD:shade22  -3.5093     3.1239  -1.123 0.343060    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.8035 on 3 degrees of freedom
Multiple R-squared:  0.9935,    Adjusted R-squared:  0.9478 
F-statistic: 21.74 on 21 and 3 DF,  p-value: 0.01347</code></pre></li>
<li><p>Use the backward selection method to reduce the model. Use the significance of the term as the criteria, as was done in the lesson.</p>
<p>There are two methods provided in this solution.</p>
<pre class="r"><code>step(out, test="F")</code></pre>
<pre><code>Start:  AIC=-19.94
yield ~ (irrig + inoc + shade2)^2

               Df Sum of Sq     RSS      AIC F value  Pr(&gt;F)  
&lt;none&gt;                       1.9370 -19.9437                  
- irrig:shade2  2    4.9536  6.8906   7.7819  3.8361 0.14904  
- inoc:shade2   8   17.6767 19.6137  21.9338  3.4222 0.16995  
- irrig:inoc    4   15.2447 17.1817  26.6242  5.9028 0.08823 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre><code>
Call:
lm(formula = yield ~ (irrig + inoc + shade2)^2, data = alfalfa)

Coefficients:
  (Intercept)          irrig          inocA          inocB          inocC  
      32.4643        -1.1195         4.3853        -1.1339         1.5821  
        inocD        shade21        shade22    irrig:inocA    irrig:inocB  
       4.6810         4.0046        -8.5243         0.6117         2.6848  
  irrig:inocC    irrig:inocD  irrig:shade21  irrig:shade22  inocA:shade21  
       1.7532         0.1157         2.5552         3.4764        -9.3599  
inocB:shade21  inocC:shade21  inocD:shade21  inocA:shade22  inocB:shade22  
      -1.4753         4.1493        -0.5848        -8.8399         7.3414  
inocC:shade22  inocD:shade22  
       0.8405        -3.5093  </code></pre>
<pre class="r"><code>out2 &lt;- lm(yield~irrig+inoc+shade2+irrig:inoc+irrig:shade2,
           data=alfalfa)
drop1(out2, test="F")</code></pre>
<pre><code>Single term deletions

Model:
yield ~ irrig + inoc + shade2 + irrig:inoc + irrig:shade2
             Df Sum of Sq    RSS    AIC F value Pr(&gt;F)
&lt;none&gt;                    19.614 21.934               
irrig:inoc    4   16.5458 36.159 29.227  2.3199 0.1216
irrig:shade2  2    1.6273 21.241 19.926  0.4563 0.6451</code></pre>
<pre class="r"><code>out3 &lt;- lm(yield~irrig+inoc+shade2+irrig:inoc, data=alfalfa)
drop1(out3, test="F")</code></pre>
<pre><code>Single term deletions

Model:
yield ~ irrig + inoc + shade2 + irrig:inoc
           Df Sum of Sq    RSS    AIC F value    Pr(&gt;F)    
&lt;none&gt;                  21.241 19.926                      
shade2      2    63.341 84.582 50.471 19.3832 0.0001257 ***
irrig:inoc  4    20.399 41.639 28.754  3.1211 0.0526577 .  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre class="r"><code>out4 &lt;- lm(yield~irrig+inoc+shade2, data=alfalfa)
drop1(out4, test="F")</code></pre>
<pre><code>Single term deletions

Model:
yield ~ irrig + inoc + shade2
       Df Sum of Sq     RSS    AIC F value    Pr(&gt;F)    
&lt;none&gt;               41.639 28.754                      
irrig   1    14.797  56.436 34.356   6.041   0.02501 *  
inoc    4   155.894 197.534 59.676  15.912 1.380e-05 ***
shade2  2    84.328 125.967 52.429  17.214 8.196e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre class="r"><code>out5 &lt;- lm(yield~irrig+inoc+shade, data=alfalfa)
drop1(out5, test="F")</code></pre>
<pre><code>Single term deletions

Model:
yield ~ irrig + inoc + shade
       Df Sum of Sq     RSS    AIC F value    Pr(&gt;F)    
&lt;none&gt;               45.576 29.013                      
irrig   1    14.797  60.373 34.042  5.8439   0.02646 *  
inoc    4   155.894 201.470 58.169 15.3924 1.236e-05 ***
shade   1    80.391 125.967 52.429 31.7501 2.402e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre></li>
<li><p>Commit your changes to AlfAnalysis.</p>
<p>There is no code associated with the solution to this problem.</p></li>
</ol>
<p>Return to the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Regression.html">Regression (OLS)</a> article.</p>
<p>Last Revised: 3/2/2015</p>
</div>

</kb_body>
<img_base_url></img_base_url>
</kb_document>
</kb_documents>