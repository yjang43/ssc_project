<?xml version="1.0"?>
<kb_documents>
<kb_document>
<kb_title>R - A Brief Introduction</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="TOC">
<ul>
<li><a href="#the-rstudio-ide">The RStudio IDE</a></li>
<li><a href="#console-basics">Console Basics</a></li>
<li><a href="#r-projects">R Projects</a></li>
<li><a href="#scripts">Scripts</a></li>
<li><a href="#commands-syntax">Commands / syntax</a></li>
<li><a href="#data">Data</a></li>
<li><a href="#packages">Packages</a></li>
<li><a href="#further-reading">Further reading</a></li>
</ul>
</div>
<p>This article is designed for individuals who need only a cursory understanding of R. This might be someone who had to do a single assignment in R or needs to read someone else's R code. Graduate students and other researchers, and those who hope to someday be graduate students or researchers, should read <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">R for Researchers</a>.</p>
<p><a href="http://www.r-project.org/">R</a> is a powerful programming language for statistical computing and graphics generation. It's flexibility, extensibility, and no cost have contributed to R's wide use in academic environments and among statisticians.</p>
<p>R is open source and is supported by an extensive user community. The R Development Core Team and <a href="http://cran.r-project.org/mirrors.html">CRAN</a> are at the center of the user community. The core team oversees the evolution of the base set of functionality which is included when R is installed. CRAN, the Comprehensive R Archive Network, is a repository of additional functionality, called packages. A great deal of additional functionality is available through CRAN.</p>
<p><a href="http://www.rstudio.com/">RStudio</a> provides an integrated development environment (IDE) for R users. This IDE provides support for project organization, source control, and document generation. RStudio will help you write R code faster and more efficiently. The use of RStudio is included in this article.</p>
<p>This article provides a quick overview of writing R code using <a href="http://www.rstudio.com/">RStudio</a>. Additional information on using R in RStudio can be found in the <a href="https://ssc.wisc.edu/sscc/">SSCC</a> article series <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">R for Researchers</a>.</p>
<div class="section level2" id="the-rstudio-ide">
<h2>The RStudio IDE</h2>
<div class="section level3" id="opening-rstudio">
<h3>Opening RStudio</h3>
<p>RStudio is installed on Winstat. RStudio is started on Winstat, or another Windows computer, similarly to other programs.</p>
<ul>
<li><p>Click the Windows logo button in the lower left corner of the screen.</p></li>
<li><p>From the menu select All Programs. Then select the RStudio folder. Then select the RStudio program.</p></li>
<li><p>The navigation to RStudio is displayed in the following image.</p>
<div class="figure">
<img alt="RStudio Start screen" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_Start.png"/>
<p class="caption">RStudio Start screen</p>
</div></li>
</ul>
</div>
<div class="section level3" id="rstudio-window">
<h3>RStudio window</h3>
<p>RStudio's window looks like the following. Its Window is divided into panes. If no source files are open, the top left pane will not be displayed.</p>
<div class="figure">
<img alt="RStudio IDE screen" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_IDE.png"/>
<p class="caption">RStudio IDE screen</p>
</div>
<p>The size of the panes can be adjusted by moving the gray lines which separate the four panes. The panes can be minimized or maximized using the icons on the right side of the gray bar at the the top of each pane.</p>
<p>The location of the four panes within the window can be changed using the Pane Layout window. This window is accessed by selecting Global Options from the Tools drop down menu. The tool tabs can be moved between the two tab panes using this window as well. Navigation to the Pane Layout window is shown below</p>
<p><img alt="RStudio Tools menu" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_ToolsMenu.png"/> <img alt="RStudio Global options" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_GlbOptn.png"/></p>
</div>
<div class="section level3" id="console-pane">
<h3>Console pane</h3>
<p>The <strong>Console pane</strong> is on the left side on the bottom. This is where results are displayed. The console tab is opened when RStudio is opened. Additional tabs within this pane are opened if another program type is used, such as an R markdown file. This pane might be full height on the left side if no file is open in the source pane.</p>
</div>
<div class="section level3" id="source-editor-pane">
<h3>Source / Editor pane</h3>
<p>The <strong>source pane</strong> is on the left side on top. This is where you will write and edit your R programs and documents. The pane will have a tab for each open file. This pane is only present if there are files opened in the editor.</p>
</div>
<div class="section level3" id="the-other-panes-environment-history-git-files-packages-plots-help">
<h3>The other panes; Environment, History, Git, Files, Packages, Plots, Help</h3>
<p>There are two <strong>Tab panes</strong> on the right side, one on top and the other on the bottom. These panes contains tabs which allow quick access to additional tools. The tabs are for the following functions.</p>
<ul>
<li><strong>Environment</strong> displays data objects defined in the current R session.</li>
<li><strong>History</strong> is a list of prior commands which have been executed.</li>
<li><strong>Git</strong> is used for version control.</li>
<li><strong>Files</strong> is a folder browser.</li>
<li><strong>Plots</strong> displays plots you create.</li>
<li><strong>Packages</strong> is where packages can be installed and loaded from.</li>
<li><strong>Help</strong> is where help on R commands can be found.</li>
<li><strong>Viewer</strong> is where web content can be viewed.</li>
</ul>
</div>
</div>
<div class="section level2" id="console-basics">
<h2>Console Basics</h2>
<p>The basics of using the console are as follows.</p>
<ul>
<li>&gt; is the command prompt. R will not display the command prompt until it has completed running the prior command. If the prompt is not displayed, R is not ready for a new command.</li>
<li>+ is the prompt for the continuation of a command. If R reaches the end of a line and the current R command is not complete, R assumes the next line continues the prior line. Splitting some commands across multiple lines can improve the readability of you source code by allowing the structure of the command or data to be seen visually.</li>
<li>The escape key will end a command. This is handy if R thinks the current command is not finished and you see an error in what has already been entered.</li>
<li>The page up and page down keys are used to scroll through the history of prior commands. A prior command can be recalled from the history, edited if needed, and then run again.</li>
</ul>
<p>A few examples</p>
<ul>
<li><p>Entering</p>
<pre class="r"><code>3 * 5 + 1</code></pre>
<p>at the &gt; prompt displays</p>
<pre><code>[1] 16</code></pre>
<p>and the &gt; prompt is displayed again.</p></li>
<li><p>Entering</p>
<pre class="r"><code>3 * 5 + </code></pre>
<p>displays the + prompt. R knows that the command is not complete and is waiting for the rest of the command. Entering the following</p>
<pre class="r"><code>1 </code></pre>
<p>at the + prompt results in</p>
<pre><code>[1] 16</code></pre>
<p>and the &gt; prompt is displayed again.</p></li>
<li><p>Entering</p>
<pre class="r"><code>(3 * 5 + 1)) / 2</code></pre>
<p>at the &gt; prompt displays</p>
<pre><code>Error: &lt;text&gt;:1:12: unexpected ')'
1: (3 * 5 + 1))
               ^</code></pre>
<p>Note, your error messages maybe formated sightly differently, because the code in this document is run automatically.</p>
<p>Error messages result in a command being aborted. The &gt; prompt is displayed after an error.</p></li>
</ul>
<p>Typing code directly into the console is not reproducible. To make your research reproducible, R code should be written in a script file. The script file should be part of a project. We cover these topics next.</p>
</div>
<div class="section level2" id="r-projects">
<h2>R Projects</h2>
<p>A <strong>project</strong> in RStudio is a collection of work organized in a folder. RStudio provides tools that will help you manage your work on projects. Some of the many tools are,</p>
<ul>
<li><p>RStudio remembers what files you had open and what tabs were displayed, when you close a project. When you open the project again, RStudio will open the same files and display the same tabs. This will allow you to quickly pick up your work again. A new R session is started when you open a project, so some previously executed commands may need to be run again.</p></li>
<li><p>Additional debugging tools, such as setting break points.</p></li>
<li><p>Integrated source control. This is an important part of reproducible code.</p></li>
<li><p>Integration of code results with documents.</p></li>
</ul>
<p>Almost any R work can be structured as a project. You might consider creating a project for an individual class, your thesis, or a research project. While RStudio can work with individual files which are not in a project, you will likely find it quicker to develop R code using projects.</p>
<div class="section level3" id="creating-a-project">
<h3>Creating a project</h3>
<p>RStudio can create new projects using three different methods, New Directory, Existing Directory, or Version Control. All three of these method can be useful. For new users to R will likely want to use the New Directory method to get started. As your R knowledge and skills increase the other methods may be needed. To create a new project, select New Project from the file drop down menu.</p>
<div class="figure">
<img alt="IDE Existing Project" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_FileMenu.png"/>
<p class="caption">IDE Existing Project</p>
</div>
<p>The New Project window will allow you to select which method of project creation you want.</p>
<div class="figure">
<img alt="IDE New Project menu" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_NewProj.png"/>
<p class="caption">IDE New Project menu</p>
</div>
<ul>
<li><p>The New Directory option is used when a new project is being started. This will create a .Rproj file and at the user's request start source control for the project.</p>
<p>You will have the option to create an Empty Project or an R Package. Packages are written by experienced R programmers. R Packages allow you to share finished R code with others users.</p>
<p>The Empty Project is what most new R users will use.</p>
<div class="figure">
<img alt="IDE New Project new directory" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_NP_NDir.png"/>
<p class="caption">IDE New Project new directory</p>
</div></li>
<li><p>The Existing Directory option is used to create a project in a directory which already contains R programs. This will create the RStudio project (the .Rproj file), but does not set up source control for this project.</p></li>
<li><p>The Version Control option is used to start a local project folder from an existing project, provided the existing project is using Git. This is often a project which is shared by researchers.</p></li>
</ul>
</div>
<div class="section level3" id="opening-a-project">
<h3>Opening a project</h3>
<p>An existing project can be opened by double clicking on the .Rproj file from a file browser. An existing project can also be opened within RStudio from either the Open Project or Open Project in New Session from the File dropdown menu, as displayed below.</p>
<div class="figure">
<img alt="IDE Open Project" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_File_OP.png"/>
<p class="caption">IDE Open Project</p>
</div>
<p>An Open Project window will be displayed. Navigate to the project folder. Select the file with extension .Rproj.</p>
</div>
</div>
<div class="section level2" id="scripts">
<h2>Scripts</h2>
<p>An R <strong>script</strong> is a series of commands in a file. Scripts are ordinary text files with a file extension of .R. Commands can sent to the console from a script using the Run icon at the top of the Source pane.</p>
<p>A new script is created by selecting New File and then R Script from the File drop down menu.</p>
<div class="figure">
<img alt="RStudio New File Menu" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_New_File.png"/>
<p class="caption">RStudio New File Menu</p>
</div>
<p>Scripts are edited in the Source pane. Remember to do regular saves when editing a script.</p>
</div>
<div class="section level2" id="commands-syntax">
<h2>Commands / syntax</h2>
<div class="section level3" id="functions">
<h3>Functions</h3>
<p>An R <strong>function</strong> is similar to a Stata and SAS command. A function performs some action and the action taken is adjusted based on the parameters given.</p>
<ul>
<li><p>Syntax and use of functions</p>
<p><em>functionName</em>(<em>parameterList</em>)</p>
<p><em>functionName</em> is the name that identifies the function in R.</p>
<p><em>parameterList</em> is a list of parameters. Parameters in the list are separated by commas. Parameters can be identified by either their position in the list or by a name. In most instances using the parameter name enhances the readability of your code. There is one case where dropping the use of parameter name is preferred, this is when the function name makes it clear what the first parameter is. This would look something like</p>
<p><em>parm1value</em>, <em>parmName</em> = <em>parmValue</em>, ...</p>
<p>An R function returns an object as its result.</p>
<p>There are functions you will likely want to use which are in packages that will need to be explicitly loaded. This will typically be done in your scripts. Loading additional packages is covered at the end of this article.</p></li>
</ul>
<p>A few examples</p>
<ul>
<li><p>Entering</p>
<pre class="r"><code>set.seed(7245052)</code></pre>
<p>returns no information to the console.</p>
<p>This call to set.seed() is an example of a parameter being identified by position. The value 7245052 will be used as the seed for future random numbers. Identifying 724052 with a parameter name as in set.seed(seed = 7245052) does not provide any additional information about how 724502 will be used by set.seed().</p>
<p>The set.seed() function is used when any random information will be generated.</p></li>
<li><p>Entering</p>
<pre class="r"><code>help(set.seed)</code></pre>
<p>returns no information to the console. The help() function instead displays information in the Help tab. The Help tab now displays information on the set.seed() function. The help file for set.seed() shows that there are other parameters which can be used for set.seed().</p>
<p>This is another example of the first parameter being identified by position.</p></li>
<li><p>Entering</p>
<pre class="r"><code>round(pi, digits = 2)</code></pre>
<p>displays the value of pi rounded to two significant digits.</p>
<pre><code>[1] 3.14</code></pre>
<p>This is an example of using both positional and named parameters.</p></li>
<li><p>Entering</p>
<pre class="r"><code>seq(from = 1, to = 50, by = 2)</code></pre>
<p>returns a sequence of numbers from 1 to 50 to the console.</p>
<pre><code> [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45
[24] 47 49</code></pre>
<p>This example used 3 named parameters. One could have also used positional parameter identification and the parameters' default values to write seq(,50,2). While this would be far more concise, it would be difficult to read for all but highly experienced R programmers. A more middle ground approach to identifying the parameters would be seq(1, 50, by = 2). This would require the reader to know that 1 and 50 are the start and end values of the sequence while not requiring them to remember what the third parameter to seq() is.</p>
<p>Note, the [1] at the start of the first line indicates the element number displayed at the start of the row. Each row of the display will have an element number displayed. This is helpful when the display values are not a simple count.</p></li>
<li><p>Entering</p>
<pre class="r"><code>c(3, 4, 9)</code></pre>
<p>combines 3, 4, and 9 into a vector of values and displays the vector.</p>
<pre><code>[1] 3 4 9</code></pre>
<p>This is an example of a number of parameters being used with no parameter names.</p>
<p>The c() function is a special case of naming parameters in that names givn to these values are used as names in the vector. An example of this can be seen by entering the following.</p>
<pre class="r"><code>c(one = 3, two = 4, three = 9)</code></pre>
<p>displays</p>
<pre><code>  one   two three 
    3     4     9 </code></pre></li>
</ul>
</div>
<div class="section level3" id="commands">
<h3>Commands</h3>
<p>R commands are similar to commands from general computing languages like C++ or python. This is a little different from the syntax of languages such as Stata or SAS. R commands typically either assign values to an <strong>object</strong> or control which commands will get run.</p>
<ul>
<li><p><strong>Assignment</strong> command syntax and usage</p>
<p><em>object</em> &lt;- <em>expression</em></p>
<p><em>Object</em> is set to the value of <em>expression</em>.</p>
<p><strong>&lt;-</strong> is the <strong>assignment operator</strong>.</p>
<p>An <strong>Expression</strong> in R is any text which, when interpreted in R, results in a data object. Beneath this simple definition is one of the powerful constructs of R. An expression can also be used anywhere that a value is expected. This allows simple functions to be linked together to do much more sophisticated operations.</p>
<p>Expressions are numeric, logical, or character values with their associated operators. These values can be a variable, a constant, or the returned value from a function.</p>
<ul>
<li><p>The numeric operators include +, -, *, /, ^, log(<em>expression</em>), exp(<em>expression</em>) which are addition, subtraction, multiply, divide, natural log, and the constant <span class="math inline">\(e\)</span> raised to the power given by <em>expression</em> respectively.</p></li>
<li><p>The logical operators include: == the logical test for equality, &lt; less than, &lt;= less than or equal, &gt; and &gt;= similarly are greater, | logical or, &amp; logical and.</p></li>
</ul></li>
<li><p><strong>Implied print</strong> command syntax and usage</p>
<p><em>expression</em></p>
<p>This is the same as the assignment command except instead of assigning the results of the expression to a data object, the results are displayed in the console.</p></li>
<li><p>A <strong>Comment</strong> is text to remind yourself, and others, of how to use your code and how it works. Comments are ignored (not treated as commands) by R.</p>
<p># <em>reminder text</em></p>
<ul>
<li>Comments start with a # and continue to the end of the current line. Comments can start at the first character of a line or may follow a command.</li>
</ul></li>
<li><p><strong>Conditional execution</strong></p>
<p>The syntax and use of the <strong>if else</strong> command</p>
<pre><code>if ( &lt; logical expression &gt; ) {  
    &lt; commands run if true &gt;  
} else {  
    &lt; commands run if false &gt; 
}</code></pre>
<p>&lt; <em>logical expression</em> &gt; is any expression which can be coerced (i.e. turned into) to scaler logical value.</p>
<p>The else { } clause is optional and can be dropped if there are no commands needed for the FALSE condition of &lt; <em>logical expression</em> &gt;.</p></li>
<li><p><strong>Looping</strong></p>
<p>The syntax and use of the <strong>for</strong> command</p>
<pre><code>for ( &lt; object &gt; in &lt; values &gt; ) {  
    &lt; commands &gt;  
}</code></pre>
<p>The &lt; <em>commands</em> &gt; within the { } will be run once for each element of &lt; <em>vector</em> &gt;. &lt; <em>Object</em> &gt; will be assigned a value from &lt; <em>vector</em> &gt; each time the &lt; <em>commands</em> &gt; are run.</p></li>
</ul>
<p>A few examples</p>
<ul>
<li><p>Entering</p>
<pre class="r"><code>student &lt;- c("Maya", "Omar", "Emma", "Roy",
             "Aki", "Sara", "Jabari", "Tim")</code></pre>
<p>assigns the eight names to the student object.</p></li>
<li><p>Entering</p>
<pre class="r"><code>math &lt;- round( runif(8, min = 10, max = 36), digits = 0)</code></pre>
<p>assigns eight values to math.</p>
<p>The right hand side demonstrates combining functions within a command. The random uniform, runif(), function returns 8 random values from the range 10 to 36. These 8 values are then passed into the round() function. The result is 8 random integers. These eight values can be displayed by entering the following.</p>
<pre class="r"><code>math</code></pre>
<pre><code>[1] 15 27 26 17 31 29 19 12</code></pre></li>
<li><p>Entering</p>
<pre class="r"><code>if (format(Sys.time(), "%H") &gt; 12) {
  timePeriod &lt;- "PM"
} else {
  timePeriod &lt;- "AM"
}
timePeriod</code></pre>
<p>determines if the period of the day is AM or PM.</p>
<pre><code>[1] "AM"</code></pre>
<p>The if condition is another example of combining functions within a command. The Sys.time(), function returns date and time information. The format() function returns just the hour portion of this information. The hour information is then compared to 12 in the if else command.</p></li>
<li><p>Entering</p>
<pre class="r"><code>j &lt;- 0
for (i in seq(1,5)) {
  j &lt;- j + i
  print(c(i, j))
}</code></pre>
<p>displays the first five triangular numbers.</p>
<pre><code>[1] 1 1
[1] 2 3
[1] 3 6
[1]  4 10
[1]  5 15</code></pre></li>
</ul>
</div>
<div class="section level3" id="functional-and-object-oriented-constructs">
<h3>Functional and object oriented constructs</h3>
<p>R is a multi paradigm programing language supporting both functional programing and object oriented programing concepts. Most users will only use the functional programming paradigm. Users who move into writing packages and more advanced code will typically make use of R's object orient capabilities.</p>
<p>The most common place typical users will notice the object oriented programming of R is in the apparent overloading of function names. The summary() function is an example of this. The summary function will produce different results based on the nature of the first parameter. If a data set is the first parameter, summary() will summarize each variable in the data set. If the first parameter is a regression result, then a summary of the regression is provided. Behind the scenes in R, the summary function is calling different summary functions based on the first parameter, such as summary.data.frame() for a data set or summary.lm() for the results of a linear regression. This is called <strong>dispatching</strong>. The user does not need to remember which summary function to call. The user just calls summary() and R uses the right function for the object of interest.</p>
</div>
</div>
<div class="section level2" id="data">
<h2>Data</h2>
<div class="section level3" id="data-types-and-structures">
<h3>Data types and structures</h3>
<p>Data objects have a <strong>type</strong> and can be organized in <strong>structures</strong>. A type is the form of what is being stored. Structures provide the relations between what is stored. This can be thought of as: a type defines which atom is used and the structure defines what elements, molecules, and compounds are built from atoms.</p>
<p>R is loosely typed. This means that R will <strong>coerce</strong> a variable to the type needed, if it can. What R does for a coerced variable is create a new variable with the needed type and passes this new variable to the function or expression. The original variable's type is not changed. So object types in R are a little less restrictive than in some other languages.</p>
<p>Some of the common data types are,</p>
<ul>
<li><strong>Numeric</strong> which is a collection of types. R internally uses Integer, double, num, etc. for numeric variables. You will typically not need to be concerned about integer versus double, etc., since R will coerce where needed.</li>
<li><strong>Character</strong> is a string of characters.</li>
<li><strong>Logical</strong> variables take the value of either TRUE or FALSE, abbreviated as T and F. Numeric values coerced to logical assign FALSE for 0 and TRUE for all other values.</li>
<li><strong>Factor</strong> variables are stored as integer values. Depending where it is used, a factor may be used as either a numeric, character, or a set of indicator variables.</li>
</ul>
<p>Some of the common structures are,</p>
<ul>
<li><p>A <strong>vector</strong> is a one dimensional structure of elements. The elements of the vector must be of the same type. A vector is a single column and the elements of the vector are the rows of the column. Vectors can be of any length.</p></li>
<li><p>A <strong>data.frame</strong> is a two dimensional structure, even if there is only a single column in the data.frame. The columns of the data.frame are vectors. The vectors need to be the same length. The vectors do not need to be of the same type and often are not. It is common for a data set to be organized such that the vectors are the variables and each row is an observation.</p>
<p>A data.frame is the equivalent of Stata's data set.</p></li>
<li><p>A <strong>list</strong> is a one dimensional structure of elements which can contain elements of different types.</p></li>
<li><p>A <strong>matrix</strong> is a two dimensional structure with each column having the same type.</p></li>
</ul>
<p>There are no scalar structure in R. A single value is a vector of length one.</p>
<p>A few examples</p>
<ul>
<li><p>Entering</p>
<pre class="r"><code>str(math)</code></pre>
<p>displays math's type as numeric and its structure is a vector (single dimension.)</p>
<pre><code> num [1:8] 15 27 26 17 31 29 19 12</code></pre></li>
<li><p>Entering</p>
<pre class="r"><code>act &lt;- data.frame(student,
                  math,
                  english = round( runif(8, min = 10, max = 36), digits = 0)
                 )</code></pre>
<p>creates a data.frame which includes the vectors student, math, and english.</p>
<p>Matrices and lists are created similarly using the matrix() and list() function. The c() function is typically used for creating vectors.</p></li>
<li><p>Entering</p>
<pre class="r"><code>str(act)</code></pre>
<p>displays act's structure as a data.frame which contains 3 variables of 8 observations.</p>
<pre><code>'data.frame':   8 obs. of  3 variables:
 $ student: Factor w/ 8 levels "Aki","Emma","Jabari",..: 4 5 2 6 1 7 3 8
 $ math   : num  15 27 26 17 31 29 19 12
 $ english: num  22 17 21 20 15 10 11 31</code></pre></li>
<li><p>Entering</p>
<pre class="r"><code>is.numeric(student)</code></pre>
<p>displays FALSE since student's type is character.</p>
<pre><code>[1] FALSE</code></pre>
<p>There is an similar is. type function for all core types (non user defined.)</p></li>
<li><p>Entering</p>
<pre class="r"><code>as.logical(math)</code></pre>
<p>forces all the elements of math to be logical and displays all the elements. The elements are all TRUE, since math contained no elements with the value zero.</p>
<pre><code>[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE</code></pre>
<p>There is an similar as. type function for all core types (non user defined.)</p></li>
</ul>
</div>
<div class="section level3" id="importing-and-exporting-data-sets">
<h3>Importing and exporting data sets</h3>
<p>The act data.frame is an example of an R data set. This data set can be saved to a file using the write.table() function.</p>
<ul>
<li><p>As an example we will save the act data.frame as a .csv file (comma separated values.)</p>
<pre class="r"><code>write.table(act, file = "act.csv", sep = ",", row.names = FALSE)</code></pre></li>
</ul>
<p>R allows multiple datasets to be loaded in memory simultaneously. Each dataset is given a name when it is loaded or created to distinguish it from other datasets.</p>
<p>The most common way data is loaded to R is through .txt and .csv files. The data in these files will be organized with each line of the file representing one observation. The variables associated with each observation are separated in the rows by a special character such as a comma, blank space, tab, etc. These files are input into R using the read.table() function.</p>
<ul>
<li><p>Syntax and parameters for the <strong>read.table()</strong> function</p>
<p><em>name</em> &lt;- read.table("<em>filePath</em>",<em>parameters</em>).</p>
<p>A data.frame is returned.</p>
<p><em>Name</em> is the name you are giving the dataset in R.</p>
<p><em>FilePath</em> is the path and name of the data file on your computer. If the file is in the work directory, then only the file name, with the file extension, is needed. If the file is in another folder, the path to the folder needs to be provided with the file name.</p>
<p>In R the backslash, \, is the escape character. To use this in the <em>filePath</em>, you would use, \\. On a Windows machine, one can also use the forward slash, /, in place of the backslash, since windows will accept both from R. Either, "u:\\projects\\datafile.csv" or "u:/projects/datafile.csv" would be accepted as a <em>filePath</em>.</p>
<p>Some commonly used <em>parameters</em> are</p>
<p><strong>header</strong> set to FALSE indicates no column names are present. TRUE indicates column names are in the first row. Header has no default value. If header is not present in the function call, the presence of a header row is determined from the first row of the data file. If the first row has one less value than the rest of the data, the first row is assumed to be column names.</p>
<p><strong>sep</strong> is a character string and defaults to "", the empty character. "" indicates that any white space is used as a separator.</p></li>
<li><p>As an example we will load the act.csv file.</p>
<pre class="r"><code>act &lt;- read.table("act.csv", sep = ",", header = TRUE)</code></pre>
<p>The act data.frame that we created with the data.frame() function was overwritten by the assignment from the read.table() function.</p></li>
</ul>
</div>
<div class="section level3" id="subseting-structures">
<h3>Subseting structures</h3>
<p>R allows you to use all or just some of the elements of a structure. There are several methods for referencing some of elements of a structure. One method to subset a structure is to use [<em>row</em>,<em>column</em>] indexing. Another method, when a column is named, is to use <em>object</em>$<em>columnName</em> indexing.</p>
<p>A few examples</p>
<ul>
<li><p>Entering</p>
<pre class="r"><code>act[c(2,6),]</code></pre>
<p>displays all variables for observations 2 and 6.</p>
<pre><code>  student math english
2    Omar   27      17
6    Sara   29      10</code></pre>
<p>This subseting results in a data.frame of three variables with two observations.</p>
<p>If the rows of the data.frame had non-numeric names, those names could be used to subset on as well.</p></li>
<li><p>Entering</p>
<pre class="r"><code>act[,c("student", "english")]</code></pre>
<p>displays all observations for variables student and english.</p>
<pre><code>  student english
1    Maya      22
2    Omar      17
3    Emma      21
4     Roy      20
5     Aki      15
6    Sara      10
7  Jabari      11
8     Tim      31</code></pre>
<p>This subseting results in a data.frame of two variables with eight observations.</p></li>
<li><p>Entering</p>
<pre class="r"><code>act$english[4:7]</code></pre>
<p>dispalys the values of the english variable in observations 4, 5, 6, and 7.</p>
<pre><code>[1] 20 15 10 11</code></pre>
<p>There are two different subsetting operations in this example. A single variable, english, is selected from the act data.frame using act$english. This is now a vector. So this single dimensional. The rows of act$english vector are subsetted by 4:7, which is a another way of stating seq(4,7, by = 1).</p></li>
<li><p>Entering</p>
<pre class="r"><code>act$student[act$english &gt; 30]</code></pre>
<p>displays names of all students who scored greater than 30 on the english portion of our imaginary act test.</p>
<pre><code>[1] Tim
Levels: Aki Emma Jabari Maya Omar Roy Sara Tim</code></pre>
<p>In this example the subsetting was done using a conditional test.</p></li>
</ul>
</div>
<div class="section level3" id="referencing-variables">
<h3>Referencing variables</h3>
<p>The student variable was created as a vector. A <strong>copy</strong> of that vector was put in the act data.frame. They are two different vectors. Currently they have the same values. This can be seen by entering the following.</p>
<pre class="r"><code>student</code></pre>
<pre><code>## [1] "Maya"   "Omar"   "Emma"   "Roy"    "Aki"    "Sara"   "Jabari" "Tim"</code></pre>
<pre class="r"><code>act$student</code></pre>
<pre><code>## [1] Maya   Omar   Emma   Roy    Aki    Sara   Jabari Tim   
## Levels: Aki Emma Jabari Maya Omar Roy Sara Tim</code></pre>
<p>To see that they are different vectors, enter the following.</p>
<pre class="r"><code>student[1] &lt;- "Chancy"
student</code></pre>
<pre><code>## [1] "Chancy" "Omar"   "Emma"   "Roy"    "Aki"    "Sara"   "Jabari" "Tim"</code></pre>
<pre class="r"><code>act$student</code></pre>
<pre><code>## [1] Maya   Omar   Emma   Roy    Aki    Sara   Jabari Tim   
## Levels: Aki Emma Jabari Maya Omar Roy Sara Tim</code></pre>
<p>The new name for student 1 is made to the student vector. The act$student vector is unchanged.</p>
<p>The english vector was created as a column of the act data.frame. There is no english vector separate from the act data.frame. This can be seen by entering the following.</p>
<pre class="r"><code>english</code></pre>
<pre><code>## Error in eval(expr, envir, enclos): object 'english' not found</code></pre>
</div>
<div class="section level3" id="a-few-other-useful-functions-for-working-with-data">
<h3>A Few other useful functions for working with data</h3>
<ul>
<li><p>aggregate</p>
<p>The aggregate() function is used when you want to apply a function across groups of observations.</p>
<p>Entering</p>
<pre class="r"><code>act$class &lt;- c("A", "A", "A", "A", "B", "B", "B", "B")
aggregate(act[,c("math", "english")],
          by = list(act$class),
          FUN = mean
          )</code></pre>
<p>divides the eight students into two imaginary classes then averages the math and english scores within each of these class groups.</p>
<pre><code>  Group.1  math english
1       A 21.25   20.00
2       B 22.75   16.75</code></pre></li>
<li><p>ifelse</p>
<p>The ifelse() function is used to conditionally assign values to a row.</p>
<p>Entering</p>
<pre class="r"><code>ifelse(act$math &gt; act$english, "English", "Math")</code></pre>
<p>displays a vector identifying which subject the student was stronger in.</p>
<pre><code>[1] "Math"    "English" "English" "Math"    "English" "English" "English"
[8] "Math"   </code></pre></li>
<li><p>cut</p>
<p>The cut() function is used to divide a continuous numeric vector into groups based on cut points.</p>
<p>Entering</p>
<pre class="r"><code>cut(act$english, 
    breaks = c(0, 20,30,37), 
    labels = c("Low", "Middle", "High")
    )</code></pre>
<p>displays a the observations which are lower than 20, higher than 30, and in the middle.</p>
<pre><code>[1] Middle Low    Middle Low    Low    Low    Low    High  
Levels: Low Middle High</code></pre></li>
<li><p>which</p>
<p>The which() function is used to identify which elements fit a particular condition.</p>
<p>Entering</p>
<pre class="r"><code>which(act$math &gt; act$english)</code></pre>
<p>displays a vector of the observation numbers for the students which are scored higher in math.</p>
<pre><code>[1] 2 3 5 6 7</code></pre>
<p>A vector of index values is one way to retain subsetting information for later use. As an example this could be used to list the names of the students who scored better in math.</p>
<pre class="r"><code>mathIndx &lt;- which(act$math &gt; act$english)
act$student[mathIndx]</code></pre>
<pre><code>[1] Omar   Emma   Aki    Sara   Jabari
Levels: Aki Emma Jabari Maya Omar Roy Sara Tim</code></pre></li>
<li><p>colnames and rownames</p>
<p>The colnames() and rownames() functions are used to access the names given to the columns and rows of an object.</p>
<p>Entering</p>
<pre class="r"><code>colnames(act)</code></pre>
<p>displays names of the variables in the act data set.</p>
<pre><code>[1] "student" "math"    "english" "class"  </code></pre>
<p>Entering</p>
<pre class="r"><code>rownames(act) &lt;- act$student</code></pre>
<p>sets the row names of the act data.frame to the students names.</p></li>
<li><p>factor</p>
<p>The factor() function is used to force any other type of variable to type factor.</p>
<p>Entering</p>
<pre class="r"><code>factor(ifelse(act$math &gt;= act$english, "English", "Math"))</code></pre>
<p>displays the vector which identifies which subject the observation was stronger in as a factor</p>
<pre><code>[1] Math    English English Math    English English English Math   
Levels: English Math</code></pre>
<p>Factor variables are stored as numeric values. Factor variables can then be converted to numeric and mathematical operations can then be done with them. For example</p>
<pre class="r"><code>cor(as.numeric(factor(act$class)), act$english)</code></pre>
<p>determine the correlation between the english scores and the two classes</p>
<pre><code>[1] -0.2569853</code></pre></li>
</ul>
</div>
</div>
<div class="section level2" id="packages">
<h2>Packages</h2>
<p>The packages which make up the core functions and commands of R are loaded when R is started. There are many packages which extend R's capabilities beyond the core. These extension packages need to be <strong>loaded</strong> in each R session before you can use the functions they contain. The functions in these extensions range from widely used functions to obscure functions used by only a small number of people.</p>
<p>A package needs to be <strong>installed</strong> on your computer before you can load it into your session. R and RStudio manage a <strong>library</strong> of packages that have been installed on your computer. Winstat has a number of common packages installed for you. The packages installed in your library can be seen in the packages tab.</p>
<div class="figure">
<img alt="Packages tab" src="https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_DP_PackageTab.png"/>
<p class="caption">Packages tab</p>
</div>
<p>To install a package on your computer, click the Install icon in the Package tab and then enter the package you want installed.</p>
<ul>
<li><p>library</p>
<p>The library() function is used to load a package into your R session.</p>
<p>library(<em>packageName</em>)</p>
<p><em>PackageName</em> is the package which is to be loaded.</p>
<p>There is nothing displayed by this function.</p></li>
</ul>
</div>
<div class="section level2" id="further-reading">
<h2>Further reading</h2>
<p>To learn more about using R and RStudio see <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">R for Researchers</a>.</p>
<p>Last Revised: 1/13/2017</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_Start.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_IDE.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_ToolsMenu.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_GlbOptn.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_FileMenu.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_NewProj.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_NP_NDir.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_File_OP.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_P_New_File.png, https://ssc.wisc.edu/sscc/pubs/RBrief/Images/RFR_DP_PackageTab.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>R - A Brief Introduction to Regression</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<div id="TOC">
<ul>
<li><a href="#specifying-a-model">Specifying a model</a></li>
<li><a href="#variable-selection-functions">Variable selection functions</a></li>
<li><a href="#diagnostics">Diagnostics</a></li>
<li><a href="#results">Results</a></li>
<li><a href="#further-reading">Further reading</a></li>
</ul>
</div>
<p>This article is designed for individuals who need only a cursory understanding of R. This might be someone who has to do a single assignment in R or needs to read someone else's R code. Graduate students and other researchers, and those who hope to someday be graduate students or researchers, should read <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">R for Researchers</a>.</p>
<p>This article does not provide any description of the theory for the regression tools covered in this article. It is assumed that the reader already has this background. While the theory is not directly covered in <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">R for Researchers</a>, There is more discussion of the results and their meaning. This can be helpful for a reader who does not have a theoretical background in regression.</p>
<div class="section level2" id="specifying-a-model">
<h2>Specifying a model</h2>
<div class="section level3" id="formula">
<h3>Formula</h3>
<p>The response variable and model variables are specified as an R formula. The basic form of a formula is</p>
<p><span class="math display">\[response \sim term_1 + \cdots + term_p.\]</span></p>
<p>The <span class="math inline">\(\sim\)</span> separates the response variable, on the left, from the <strong>terms</strong> of the model, which are on the right. Terms are are either the main effect of a regressor or the interaction of regressors. Model variables are constructed from terms. For example, a factored regressor, R's implementation of a categorical variable, can be used as term in a model and it results in multiple model variables, one for each non reference level category. There is one coefficient for each model variable and possibly multiple coefficients for a term.</p>
<p>The mathematical symbols, +, -, *, and ^ do not have their normal mathematical meaning in a formula. The + symbol is used to add additional terms to a fromula, The - symbol is used to remove a term from a formula. The * and ^ symbol descriptions are included with the formula shortcuts below.</p>
<p>Some common terms are</p>
<ul>
<li>Numeric regressor: All numeric variable types result in a single continuous model variable.</li>
<li>Logical regressor: Results in a single indicator, also known as dummy variable, in the model.</li>
<li>Factored regressor: Results in a set of indicator variables in the model. The first level of the factor is the reference level and is not coded as an indicator variable. All other levels are encoded as indicator variables.</li>
<li><span class="math inline">\(term_1:term_2\)</span>: Creates a term from the interaction between terms <span class="math inline">\(term_1\)</span> and <span class="math inline">\(term_2\)</span>. The <span class="math inline">\(:\)</span> operator does not force the main effect terms, <span class="math inline">\(term_1\)</span> and <span class="math inline">\(term_2\)</span>, into the model.</li>
</ul>
<p>Some formula short cuts for specifying terms.</p>
<ul>
<li><span class="math inline">\(term_1*term_2\)</span>: This results in the same interaction term as <span class="math inline">\(term_1:term_2\)</span>. The <span class="math inline">\(*\)</span> operator forces the main effect terms <span class="math inline">\(term_1\)</span> and <span class="math inline">\(term_2\)</span> into the model.</li>
<li><span class="math inline">\((term_1 + \cdots + term_j)\)</span>^<span class="math inline">\(k\)</span>: Creates a term for each of the <span class="math inline">\(j\)</span> terms and all interactions up to order <span class="math inline">\(k\)</span> which can be formed from the <span class="math inline">\(j\)</span> terms.</li>
<li>I(<span class="math inline">\(expression\)</span>): The I() function is used when you need to use +, -, *, or ^ as math symbols to construct a term in the formula. This is commonly used to construct a quadratic term.</li>
<li>poly(<em>x</em>, degree=<em>k</em>): Creates a term which is a <em>j</em>th order polynomial of the regressor <em>x</em>. Poly() constructs <em>k</em> model variables which are orthogonal to each other. A poly term, like a factor, is a single term which translates into multiple model variables. These behaviors, orthogonality of the model variables and grouping the <em>k</em> model variables, are advantages when doing variable selection. These orthogonal model variables are difficult to interpret since they are not on the scale of the original regressors. Therefore it is common practice to use poly for model selection and then rerun the selected model using polynomial terms constructed from the regressor after the variable selection process is complete.</li>
<li>-1: Removes the intercept from the model. The intercept is included in a model by default in R.</li>
</ul>
<p>As an example consider the formula, <span class="math inline">\(y \sim A + B*C\)</span>. Where <span class="math inline">\(A\)</span> and <span class="math inline">\(B\)</span> are numeric regressors and <span class="math inline">\(C\)</span> is a categorical regressors with three levels. This formula results in the following terms and model variables.</p>
<ul>
<li>(Intercept): This term is a model constant.
<ul>
<li>(Intercept): The constant term.</li>
</ul></li>
<li>A: This term results in a single continuous model variable.
<ul>
<li>A: A continuous model variable.<br/>
</li>
</ul></li>
<li>B: This term results in a single continuous model variable.
<ul>
<li>B: A continuous model variable.<br/>
</li>
</ul></li>
<li>C: This term results in two model variables.
<ul>
<li>CLevel1: An indicator variable that represents a change in the intercept.</li>
<li>CLevel2: An indicator variable that represents a change in the intercept.</li>
</ul></li>
<li>B:C: This term results in two model variables.
<ul>
<li>B:CLevel1: An indicator variable that represents a change in the B slope value.</li>
<li>B:CLevel2: An indicator variable that represents a change in the B slope value.</li>
</ul></li>
</ul>
</div>
<div class="section level3" id="linear-models---ordinary-least-squares-models-ols">
<h3>Linear models - Ordinary Least Squares models (OLS)</h3>
<p>The lm() function fits OLS models.</p>
<ul>
<li><p>Syntax and use of the <strong>lm()</strong> function</p>
<p>lm(<em>formula</em>, weights=<em>w</em>, data=<em>dataFrame</em>)</p>
<p>Returns a model object. This is a list of objects which result from fitting the model.</p>
<p>The <em>formula</em> parameter is of the form described above.</p>
<p>The data parameter is optional. <em>dataFrame</em> specifies the data.frame which contains the response and/or regressors to be fit. R will look in the current environment for variables which are not found in the data.frame.</p>
<p>The weights parameter is optional. When present, a weighted fit is done using the <em>w</em> vector as the weights.</p></li>
</ul>
<p>The following example uses lm() to fit the sleepstudy data from the lme4 package.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>library(lme4)
data(sleepstudy)
mod &lt;- lm(Reaction ~ Days + Subject, data = sleepstudy)</code></pre></li>
<li><p>There are no console results from these commands.</p>
<pre><code>Loading required package: Matrix</code></pre></li>
</ul>
</div>
<div class="section level3" id="generalized-linear-models-glm">
<h3>Generalized linear models (GLM)</h3>
<p>The <strong>family</strong> parameter specifies the <strong>variance</strong> and <strong>link</strong> functions which are used in the model fit. The <strong>variance</strong> function specifies the relationship of the variance to the mean. The <strong>link</strong> defines the transformation to be applied to the response variable. As an example, the family poisson uses the "log" link function and "<span class="math inline">\(\mu\)</span>" as the variance function. A GLM model is defined by both the formula and the family.</p>
<p>The default link function (the canonical link) for a family can be changed by specifying a link in the family function. For example, if the response variable is non negative and the variance is proportional to the mean, you would use the "identity" link with the "quasipoisson" family function. This would be specified as</p>
<pre><code>family = quasipoisson(link = "identity")</code></pre>
<p>The variance function is specified by the family.</p>
<ul>
<li><p>Syntax and use of the <strong>glm()</strong> function</p>
<p>glm(<em>formula</em>, family = <em>family</em>, weights = <em>w</em>, data = <em>dataFrame</em>)</p>
<p>Returns a model object. This is a list of objects which result from fitting the model.</p>
<p>The <em>formula</em>, <em>dataFrame</em>, and <em>w</em> parameters are as defined for the lm() function above.</p>
<p>The <em>family</em> parameter defines the family used by glm(). Some common families are binomial, poisson, gaussian, quasi, quasibinomial, and quasipoisson.</p></li>
</ul>
<p>The following example uses glm() to fit the Cowles data set from the car package.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>library(car)
data(Cowles)
modglm &lt;- glm(volunteer ~ sex + extraversion * neuroticism,
              family = binomial,
              data = Cowles
          )</code></pre></li>
<li><p>There are no console results from these commands.</p></li>
</ul>
</div>
<div class="section level3" id="random-parameters">
<h3>Random parameters</h3>
<p>The lmer() and glmer() functions from the lme4 package are used when random effects are included in a model.</p>
<p>Random effects are specified through an extension of R formulas. The specification of random effects is done in two parts. The first part identifies the intercepts and slopes which are to be modelled as random. The second part of the specification identifies the sampled levels. The sampled levels are given by a categorical variable, or a formula expression which evaluates to a categorical variable. The categorical variable given in the random effect specification is the <strong>groups</strong> identifier for the random parameter.</p>
<p>These two parts are placed inside parenthesis, (), and the two parts are separated by the bar, "|". The syntax for including a random effect in a formula is shown below.</p>
<blockquote>
<p>+ ( effect expression | groups )</p>
</blockquote>
<p>A random intercept or slope will be modelled for each term provided in the effects expression. R automatically will include an random intercept when a random slope is provided.</p>
<p>Linear models can be fit using REML in place of maximum likelihood and is the default setting for lmer(). When the maximum likelihood is needed, the REML parameter to lmer() can be set to false.</p>
<p>The glmer() function is used to include random effects in generalized models. The family information is specified to the glmer() function using the same family parameter definition as the glm() function.</p>
<p>The following example uses lmer() to fit the sleepstudy data with subject as the groups for a random variable.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>modre &lt;- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)</code></pre></li>
<li><p>There are no console results from this command.</p></li>
</ul>
</div>
</div>
<div class="section level2" id="variable-selection-functions">
<h2>Variable selection functions</h2>
<p>R supports a number of commonly used criteria for selecting variables. These include BIC, AIC, F-tests, likelihood ratio tests and adjusted R squared. Adjusted R squared is returned in the summary of the model object and will be cover with the summary() function below.</p>
<p>The drop1() function compares all possible models that can be constructed by dropping a single model term. The add1() function compares all possible models that can be constructed by adding a term. The step() function does repeated drop1 and add1 until the optimal AIC value is reached.</p>
<ul>
<li><p>Syntax for the <strong>drop1()</strong>, <strong>add1()</strong> and <strong>step()</strong> functions.</p>
<p>drop1(<em>modelObj</em>, test = <em>test</em>)<br/>
add1(<em>modelObj</em>, scope = <em>scope</em>, test = <em>test</em>) step(<em>modelObj</em>, scope = <em>scope</em>, test = <em>test</em>, direction = <em>direction</em> )</p>
<p>The <em>scope</em> parameter is a formula that provides the largest model to consider for adding a term.</p>
<p>The <em>test</em> parameter can be set to "F" or "LRT". The default test is AIC.</p>
<p>The <em>direction</em> parameter can be "both", "backward", or "forward".</p></li>
</ul>
<p>The following example does an F-test of the terms of the OLS model from above and a likelihood ratio test for several possible terms to the GLM model from above.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>drop1(mod, test = "F")
add1(modglm, scope = ~ (sex + extraversion + neuroticism)^2, test = "LRT")</code></pre></li>
<li><p>The console results from these commands.</p>
<pre><code>Single term deletions

Model:
Reaction ~ Days + Subject
        Df Sum of Sq    RSS    AIC F value    Pr(&gt;F)    
&lt;none&gt;               154634 1254.0                      
Days     1    162703 317336 1381.5 169.401 &lt; 2.2e-16 ***
Subject 17    250618 405252 1393.5  15.349 &lt; 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
<pre><code>Single term additions

Model:
volunteer ~ sex + extraversion * neuroticism
                 Df Deviance    AIC      LRT Pr(&gt;Chi)
&lt;none&gt;                1897.4 1907.4                  
sex:extraversion  1   1897.2 1909.2 0.232369   0.6298
sex:neuroticism   1   1897.4 1909.4 0.008832   0.9251</code></pre></li>
</ul>
<p>The anova() function is similar to the drop1() and add() functions. The difference is that anova takes as parameters the models to be compared instead of the models being generated by the function. That is, to use anova(), the models must be built by the user first.</p>
<p>The AIC() and BIC() functions provide the AIC and BIC values for a model. The user can then compare these values to the values from other models being considered.</p>
<ul>
<li><p>Syntax for the <strong>AIC()</strong> and <strong>BIC()</strong> functions.</p>
<p>AIC(<em>modelObj</em>)<br/>
BIC(<em>modelObj</em>)</p></li>
</ul>
<p>The following example calculates the AIC and BIC for the OLS model from above.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>AIC(mod)
BIC(mod)</code></pre></li>
<li><p>The console results from these commands.</p>
<pre class="r"><code>AIC(mod)</code></pre>
<pre><code>[1] 1766.872</code></pre>
<pre class="r"><code>BIC(mod)</code></pre>
<pre><code>[1] 1830.731</code></pre></li>
</ul>
</div>
<div class="section level2" id="diagnostics">
<h2>Diagnostics</h2>
<p>A few basic diagnostics are provided in this article. A more complete coverage of diagnostics can be found in the <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Diagnostics.html">Regression Diagnostics</a> article.</p>
<p>The plot() function provided a set of diagnostic plots for model objects.</p>
<ul>
<li><p>Syntax and use of the <strong>plot()</strong> function for model objects.</p>
<p>plot(<em>modObj</em>, which=<em>plotId</em>)</p>
<p>There is no returned object. Diagnostics plots are generated by this function.</p>
<p><em>plotId</em> can take values from 1 through 6. The three plots we will examine are, 1 for a residual plot, 2 for the normal q-q of residuals, and 5 for the residual versus leverage plots. The default for <em>plotId</em> is c(1,2,3,5). When there are multiple plots produced from one call to plot, you will be prompted in the console pane to hit enter for each of these plots. This is to allow you time to view and possibly save each plot before the next plot is displayed.</p></li>
</ul>
<p>This set of prepared diagnostic plots provides an initial look at all the major model assumptions and is a good place to start the evaluation of the fit of a model.</p>
<p>The following example produces the residual, normality, and leverage plots for the OLS model.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>plot(mod, which = 1)
plot(mod, which = 2)
plot(mod, which = 5)</code></pre></li>
<li><p>There are no console results from this command. The following plots are produced.</p>
<pre class="r"><code>plot(mod, which = 1)</code></pre>
<p><img src="https://ssc.wisc.edu/sscc/pubs/RBrief/R_BriefIntroReg_files/figure-html/unnamed-chunk-8-1.png" width="672"/></p>
<pre class="r"><code>plot(mod, which = 2)</code></pre>
<p><img src="https://ssc.wisc.edu/sscc/pubs/RBrief/R_BriefIntroReg_files/figure-html/unnamed-chunk-8-2.png" width="672"/></p>
<pre class="r"><code>plot(mod, which = 5)</code></pre>
<p><img src="https://ssc.wisc.edu/sscc/pubs/RBrief/R_BriefIntroReg_files/figure-html/unnamed-chunk-8-3.png" width="672"/></p></li>
</ul>
</div>
<div class="section level2" id="results">
<h2>Results</h2>
<div class="section level3" id="summary-function">
<h3>summary() function</h3>
<p>The summary() function provides a nice summary of a model object. You could also use the str() function to see the details of what is included in the model object.</p>
<p>The following examples display the summary for the three models created above.</p>
<ul>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>summary(mod)</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>
Call:
lm(formula = Reaction ~ Days + Subject, data = sleepstudy)

Residuals:
     Min       1Q   Median       3Q      Max 
-100.540  -16.389   -0.341   15.215  131.159 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  295.0310    10.4471  28.240  &lt; 2e-16 ***
Days          10.4673     0.8042  13.015  &lt; 2e-16 ***
Subject309  -126.9008    13.8597  -9.156 2.35e-16 ***
Subject310  -111.1326    13.8597  -8.018 2.07e-13 ***
Subject330   -38.9124    13.8597  -2.808 0.005609 ** 
Subject331   -32.6978    13.8597  -2.359 0.019514 *  
Subject332   -34.8318    13.8597  -2.513 0.012949 *  
Subject333   -25.9755    13.8597  -1.874 0.062718 .  
Subject334   -46.8318    13.8597  -3.379 0.000913 ***
Subject335   -92.0638    13.8597  -6.643 4.51e-10 ***
Subject337    33.5872    13.8597   2.423 0.016486 *  
Subject349   -66.2994    13.8597  -4.784 3.87e-06 ***
Subject350   -28.5311    13.8597  -2.059 0.041147 *  
Subject351   -52.0361    13.8597  -3.754 0.000242 ***
Subject352    -4.7123    13.8597  -0.340 0.734300    
Subject369   -36.0992    13.8597  -2.605 0.010059 *  
Subject370   -50.4321    13.8597  -3.639 0.000369 ***
Subject371   -47.1498    13.8597  -3.402 0.000844 ***
Subject372   -24.2477    13.8597  -1.750 0.082108 .  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 30.99 on 161 degrees of freedom
Multiple R-squared:  0.7277,    Adjusted R-squared:  0.6973 
F-statistic: 23.91 on 18 and 161 DF,  p-value: &lt; 2.2e-16</code></pre>
<p>The summary display starts with the call to lm which generated the model object.</p>
<p>The residual summary is the five number summary for the residuals. This can be used as a quick check for skewed residuals.</p>
<p>The coefficient's summary shows the estimated value, standard error, and p-value for each coefficient. The p-values are from Wald tests of each coefficient being equal to zero. For OLS models this is equivalent to an F-test of nested models with the variable of interest being removed in the nested model.</p>
<p>The display ends with information on the model fit. This is the residual standard error, R squared of the model, and the F-test of the significance of the model verse the null model.</p></li>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>summary(modglm)</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>
Call:
glm(formula = volunteer ~ sex + extraversion * neuroticism, family = binomial, 
    data = Cowles)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.4749  -1.0602  -0.8934   1.2609   1.9978  

Coefficients:
                          Estimate Std. Error z value Pr(&gt;|z|)    
(Intercept)              -2.358207   0.501320  -4.704 2.55e-06 ***
sexmale                  -0.247152   0.111631  -2.214  0.02683 *  
extraversion              0.166816   0.037719   4.423 9.75e-06 ***
neuroticism               0.110777   0.037648   2.942  0.00326 ** 
extraversion:neuroticism -0.008552   0.002934  -2.915  0.00355 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1933.5  on 1420  degrees of freedom
Residual deviance: 1897.4  on 1416  degrees of freedom
AIC: 1907.4

Number of Fisher Scoring iterations: 4</code></pre>
<p>The summary display for glm models includes similar call, residuls, and coefficient sections. The glm model fit summary includes dispersion, deviance, and iteration information.</p></li>
<li><p>Enter the following command in your script and run it.</p>
<pre><code>summary(modre)</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre><code>Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject)
   Data: sleepstudy

REML criterion at convergence: 1743.6

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-3.9536 -0.4634  0.0231  0.4634  5.1793 

Random effects:
 Groups   Name        Variance Std.Dev. Corr
 Subject  (Intercept) 612.09   24.740       
          Days         35.07    5.922   0.07
 Residual             654.94   25.592       
Number of obs: 180, groups:  Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138</code></pre>
<p>The summary display for random effects models includes similar call, residuals, and coefficient sections.</p>
<p>The summary includes a random effects section. This section will display the estimated variances organized by groups. Within each group there will be a row for each random intercept and slope. The variance and standard deviation of the random parameter are provided. The correlation between random effects is also provided when it is estimated. For linear models, the residual is included. For GLM models with defined residuals, such as the logistic and poisson family, no residual information is provided since the model is scaled to the defined error variance.</p>
<p>The glm model fit summary includes convergence information. Here this is REML convergence.</p></li>
</ul>
</div>
<div class="section level3" id="confint-function">
<h3>confint() function</h3>
<p>The confint() function can be applied to all of the above model object types. The confint() function will calculate a profiled confidence interval when it is appropriate.</p>
<p>The following example displays the confidence intervals for the three models created above.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>confint(mod)
confint(modglm)
confint(modre)</code></pre></li>
<li><p>The results of the above command are shown below.</p>
<pre class="r"><code>confint(mod)</code></pre>
<pre><code>                  2.5 %    97.5 %
(Intercept)  274.399941 315.66215
Days           8.879103  12.05547
Subject309  -154.271100 -99.53060
Subject310  -138.502810 -83.76231
Subject330   -66.282660 -11.54216
Subject331   -60.068030  -5.32753
Subject332   -62.202010  -7.46151
Subject333   -53.345770   1.39473
Subject334   -74.202030 -19.46153
Subject335  -119.434040 -64.69354
Subject337     6.216930  60.95743
Subject349   -93.669610 -38.92911
Subject350   -55.901400  -1.16090
Subject351   -79.406330 -24.66583
Subject352   -32.082540  22.65796
Subject369   -63.469440  -8.72894
Subject370   -77.802310 -23.06181
Subject371   -74.520040 -19.77954
Subject372   -51.617950   3.12255</code></pre>
<pre class="r"><code>confint(modglm)</code></pre>
<pre><code>Waiting for profiling to be done...</code></pre>
<pre><code>                               2.5 %       97.5 %
(Intercept)              -3.35652914 -1.389154923
sexmale                  -0.46642058 -0.028694911
extraversion              0.09374678  0.241771712
neuroticism               0.03744357  0.185227757
extraversion:neuroticism -0.01434742 -0.002833714</code></pre>
<pre class="r"><code>confint(modre)</code></pre>
<pre><code>Computing profile confidence intervals ...</code></pre>
<pre><code>                  2.5 %     97.5 %
.sig01       14.3815822  37.715996
.sig02       -0.4815007   0.684986
.sig03        3.8011641   8.753383
.sigma       22.8982669  28.857997
(Intercept) 237.6806955 265.129515
Days          7.3586533  13.575919</code></pre></li>
</ul>
</div>
<div class="section level3" id="predict-function">
<h3>predict() function</h3>
<p>The predict() function is used to determine the predicted values for a particular set of values of the regressors. The predict() function can also return the confidence interval or prediction interval with the predictions for OLS models.</p>
<ul>
<li><p>Syntax and use of the predict() function</p>
<p>predict(<em>modelObj</em>, <em>newObs</em>, interval = <em>intervaltype</em>, level = <em>level</em>, type = <em>type</em>)</p>
<p>The <em>modelObj</em> is an an object returned from a regression function.</p>
<p>The <em>newObs</em> parameter is optional. If it is not provided, the predictions will be for the observed values the model was fit to. The form of newObs is a data.frame with the same columns as used in modelObj.</p>
<p>The <em>intervaltype</em> parameter is available for OLS models. It can be set to "none", "confidence", or "prediction". The default is none, no interval, and alternatively it can be a confidence interval or a prediction interval.</p>
<p>The <em>level</em> parameter is the confidence or prediction level.</p>
<p>The <em>type</em> parameter is used with geralized linear models. The default value is "link", for the linear predictor scale. It can be set to "response" for predictions on the scale of the response variable.</p></li>
</ul>
<p>The following example makes predictions for each of the three models from above.</p>
<ul>
<li><p>Enter the following commands in your script and run them.</p>
<pre><code>newObs &lt;- data.frame(Days = c(10, 8),
                     Subject = c("331", "372")
                    )
predict(mod, newObs, interval = "prediction")

newObsGlm &lt;- data.frame(sex = c("male"),
                        extraversion = c(8),
                        neuroticism = c(15)
                       )
predict(modglm, newObsGlm, type = "response")

predict(modre, newObs, type = "response")</code></pre></li>
<li><p>The results of the above commands are shown below.</p>
<pre class="r"><code>newObs &lt;- data.frame(Days = c(10, 8),
                     Subject = c("331", "372")
                    )
predict(mod, newObs, interval = "prediction")</code></pre>
<pre><code>       fit      lwr      upr
1 367.0061 302.2256 431.7867
2 354.5216 290.0925 418.9508</code></pre>
<pre class="r"><code>newObsGlm &lt;- data.frame(sex = c("male"),
                        extraversion = c(8),
                        neuroticism = c(15)
                       )
predict(modglm, newObsGlm, type = "response")</code></pre>
<pre><code>        1 
0.3462704 </code></pre>
<pre class="r"><code>predict(modre, newObs, type = "response")</code></pre>
<pre><code>       1        2 
347.6392 357.7302 </code></pre></li>
</ul>
</div>
<div class="section level3" id="extractors">
<h3>Extractors</h3>
<p>Extractor functions are the preferred method for retrieving information on the model. Some commonly used extractor functions are listed below.</p>
<ul>
<li><p>fitted()</p>
<p>The fitted() function returns the predicted values for the observation in the data set used to fit the model.</p></li>
<li><p>residual()</p>
<p>The residual() function returns the residual values from the fitted model.</p></li>
<li><p>hatvalues()</p>
<p>The hatvalues() function returns the hat values, leverage measures, that result from fitting the model.</p></li>
<li><p>Influence measures</p>
<p>The cooks.distance() and influence() functions returns the Cook's distance or a set of influence measures that resulted from fitting the model.</p></li>
</ul>
</div>
</div>
<div class="section level2" id="further-reading">
<h2>Further reading</h2>
<p>To learn more about fitting regression models in R see <a href="https://ssc.wisc.edu/sscc/pubs/RFR/RFR_Introduction.html">R for Researchers</a>.</p>
<p>Last Revised: 3/28/2017</p>
</div>

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/RBrief/R_BriefIntroReg_files/figure-html/unnamed-chunk-8-1.png, https://ssc.wisc.edu/sscc/pubs/RBrief/R_BriefIntroReg_files/figure-html/unnamed-chunk-8-2.png, https://ssc.wisc.edu/sscc/pubs/RBrief/R_BriefIntroReg_files/figure-html/unnamed-chunk-8-3.png</img_base_url>
</kb_document>
</kb_documents>