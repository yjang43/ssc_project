<?xml version="1.0"?>
<kb_documents>
<kb_document>
<kb_title>Using SFTP </kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>FTP, or File Transfer Protocol, has been moving files from computer 
              to computer since the earliest days of the Internet. To cope with 
              today's more dangerous Internet FTP has added encryption, becoming 
              Secure FTP or SFTP. But the commands remain the same.</p>
<p>There are a wide variety of SFTP clients that will take care of 
              all the actual commands for you, giving you a drag-and-drop interface 
              similar to Windows. For Windows we suggest <a href="https://ssc.wisc.edu/sscc/pubs/5-35.htm">SecureFX</a>. 
              But SFTP is not difficult to use. In fact, if you're comfortable 
              with Linux you'll find that you only need to learn a few extra commands.</p>
<p>To run SFTP from one of the SSCC Linux servers, type</p>
<p class="InputCode">&gt; sftp <span class="Parameter">server</span></p>
<p>Where <span class="Parameter"><span class="InputCode">server</span></span> 
              should be replace by the name of the server you wish to connect 
              to.</p>
<p>The SSCC maintains two FTP servers: <span class="InputCode">ftp.ssc.wisc.edu</span> 
              connects to the Linux file system; <span class="InputCode">ntftp.ssc.wisc.edu</span> 
              connects to the Windows network. In both cases once you log in your 
              remote directory will start out as your home directory.</p>
<table align="center" border="1" summary="SSCC FTP Server Addresses" width="50%">
<caption align="top">
              SSCC FTP Server Addresses 
              </caption>
<tr>
<th scope="row" width="40%">Linux</th>
<td align="center" class="InputCode">ftp.ssc.wisc.edu</td>
</tr>
<tr>
<th scope="row">Windows</th>
<td align="center" class="InputCode">ntftp.ssc.wisc.edu</td>
</tr>
</table>
<p>Note that Linstat does not 
              accept FTP connections. Use <span class="InputCode">ftp.ssc.wisc.edu</span> 
              instead.</p>
<h2><a id="FTPCommands" name="FTPCommands"></a>FTP Commands</h2>
<p>The following basic commands are probably all you'll need to use 
              SFTP. </p>
<dl>
<p class="InputCode"> <span class="InputCode">cd <span class="Parameter">directory</span></span></p>
<p>Changes the remote directory to the the directory you enter. 
                Note that Windows servers will generally allow you to use the 
                Linux style slash in path names (<span class="InputCode">directory/subdirectory</span>), 
                but Linux servers will not allow you to use the Windows style 
                backslash (<span class="InputCode">directory\subdirectory</span>).</p>
<p class="InputCode"><span class="InputCode">lcd <span class="Parameter">directory</span></span></p>
<p>Changes the local directory to the directory you enter.</p>
<p class="InputCode"><span class="InputCode">ls</span></p>
<p>Lists the tables of the remote directory</p>
<p class="InputCode"><span class="InputCode">binary</span></p>
<p>Changes the transfer mode to binary. In these days of proprietary 
                formats for essentially everything, you almost always want to 
                be in binary mode. Many FTP implementations now default to binary 
                mode, but some don't. If you're not in binary mode most files 
                will be garbled in transit, so always check.</p>
<p class="InputCode"><span class="InputCode">get <span class="Parameter">filename</span></span></p>
<p>Copies a file from the remote directory to the local directory. 
                Along with <span class="InputCode">put</span>, this is FTP's <span class="italic" lang="fr" xml:lang="fr">raison 
                d'etre</span>. Note that if you already have a file with the same 
                name it will be overwritten without warning, so be careful!</p>
<p class="InputCode"><span class="InputCode">put <span class="Parameter">filename</span></span></p>
<p>Copies a file from the local directory to the remote directory. 
                The same warning applies.</p>
<p class="InputCode"><span class="InputCode">mget <span class="Parameter">filename</span></span></p>
<p>Works like <span class="InputCode">get</span>, except that you 
                can use wildcards (*, etc.) to specify multiple files.</p>
<p class="InputCode"><span class="InputCode">mput <span class="Parameter">filename</span></span></p>
<p>Works like <span class="InputCode">put</span>, except that you 
                can use wildcards (*, etc.) to specify multiple files.</p>
<p class="InputCode"><span class="InputCode"></span>help</p>
<p>Lists all the commands available in FTP, but doesn't explain 
                them. Thus it's mostly useful as a reminder.</p>
<p class="InputCode"><span class="InputCode">quit</span></p>
<p>Quits FTP (<span class="InputCode">exit</span> or <span class="InputCode">logout</span> 
                won't work).</p>
</dl>
<h2><a id="AnonymousFTP" name="AnonymousFTP"></a>Anonymous FTP</h2>
<p>Anonymous FTP allows anyone to use an FTP server, but with many 
              restrictions. It is commonly used for distributing files. When you 
              are asked for a login name just enter <span class="InputCode">anonymous</span>. 
              You will be asked to give your email address as a password, though 
              this is not always enforced.</p>
<p>You can use anonymous FTP to transfer files back and forth between 
              yourself and people who do not have SSCC accounts. However, it is 
              insecure by definition since anyone can use it. Realistically it's 
              unlikely anyone will be prowling our FTP site just to see if anything 
              looks interesting, nevertheless, anonymous FTP should never be used 
              for confidential data.</p>
<h3><a id="MakingaFileAvailablebyAnonymousFTP" name="MakingaFileAvailablebyAnonymousFTP"></a>Making a File Available by Anonymous FTP</h3>
<p>The SSCC allows anonymous FTP only to our Linux FTP server (<span class="InputCode">ftp.ssc.wisc.edu</span>). 
              To give someone access to a file by anonymous FTP, log in to Linux, 
              create a directory for yourself under <span class="InputCode">/usr/ftp/pub</span> 
              (for example <span class="InputCode">/usr/ftp/pub/rdimond</span>) 
              and place the file in that directory. The permissions must be set 
              such that others can read the file and both read and execute the 
              directory. The following Linux commands will make a file currently 
              stored in your home directory accessible by anonymous FTP:</p>
<p class="InputCode">&gt; cd /usr/ftp/pub<br/>
              &gt; mkdir <span class="Parameter">username</span><br/>
              &gt; cp ~/<span class="Parameter">filename</span> ./<span class="Parameter">username</span><br/>
              &gt; chmod -R o+r <span class="Parameter">username</span><br/>
              &gt; chmod o+x <span class="Parameter">username</span></p>
<p>To get the file, after starting FTP and logging in as <span class="InputCode">anonymous</span>, 
              one would type at the <span class="InputCode">ftp&gt;</span> prompt:</p>
<p class="InputCode">ftp&gt; binary<br/>
              ftp&gt; cd pub/<span class="Parameter">username</span><br/>
              ftp&gt; get <span class="Parameter">filename</span></p>
<p>Note that literally anyone could get the file in this way; you 
              cannot limit access to anonymous FTP.</p>
<h3><a id="ReceivingFilesbyAnonymousFTP" name="ReceivingFilesbyAnonymousFTP"></a>Receiving Files by Anonymous FTP</h3>
<p>You can also have people outside the SSCC log in as <span class="InputCode">anonymous</span> 
              in order to send you files. Once logged in they need to do the following:</p>
<p class="InputCode">ftp&gt; binary<br/>
              ftp&gt; cd incoming<br/>
              ftp&gt; put <span class="Parameter">filename</span></p>
<p>The file will be stored in <span class="InputCode">/usr/ftp/incoming</span>. 
              Note that all files in the incoming directory are deleted every 
              few days to prevent abuse. You can copy the file to your home directory 
              by typing the following at the Linuxprompt:</p>
<p class="InputCode">&gt; cp /usr/ftp/incoming/<span class="Parameter">filename</span> 
              ~ </p>
<p> Of course anyone with an SSCC account could do the same. You cannot 
              delete the original file after you have copied it, but it will be 
              deleted in the course of normal maintenance.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Connecting to SSCC Computers Using a WinTerm</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>WinTerms provide easy access to all of the SSCC's servers. To log on to a
  server,  double click on the server's name in the Neoware Connection Manager
  dialog box.</p>
<p>Note that the telnet client used to connect to Linux servers does not have
	the ability to display graphics. If you need to display Linux graphics, connect
	to Winstat and then use <a href="https://ssc.wisc.edu/sscc/pubs/5-2.htm">X-Win32</a>  to
	connect to a Linux server.</p>
<h2>Managing Connections</h2>
<p>Once you have made a connection to a server, that connection will fill the 
	entire screen and it will not be obvious how to work with anything else. However, 
	you can make new connections or switch between existing connections using 
	the keyboard.</p>
<p>To switch to the<span class="MenuOutput"> Connection Manager</span>, press 
	<span class="InputCode">CTRL-ALT-END</span>. This will allow you to connect 
	to additional servers.</p>
<p>To cycle between existing connections, press <span class="InputCode">CTRL-ALT-&lt;Up 
	Arrow&gt;</span> or <span class="InputCode">CTRL-ALT-&lt;Down Arrow&gt;</span>. 
</p>
<h2>Copy and Paste Between Connections</h2>
<p>You can easily copy and paste information between different connections, even 
  between Windows and Linux. In Windows, just use the normal copy and paste commands. 
  In Linux, select text by clicking the left mouse button and dragging over the 
  text you want. Then click the right button to copy it. To paste, hold down the 
  <span class="InputCode">SHIFT</span> key, right click, and the tables of the 
  clipboard will be pasted at the current location of the cursor (not the mouse 
  pointer).</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Virus Protection at the SSCC</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Computer viruses, worms and other malicious software have become a serious
   and very public issue. SSCC staff have taken several steps to avoid being
  affected by viruses, and these have been generally quite successful. Most viruses,
  including  the recent highly publicized ones, are dealt with before our users
  are even  aware of them. We will continue to take whatever steps are needed
  to keep our  systems secure. This article will describe the measures we
  have taken to  stop viruses, and some steps you can take to further reduce
  your exposure.</p>
<p>Rest assured that SSCC staff monitor the bulletins of anti-virus software
  makers and others who work on detecting and eradicating viruses. We will be
  aware of threats before they are published in the mainstream media. Much as
  we appreciate your awareness and concern, there's no need to forward warnings
  you may have received to us. In addition, a substantial fraction of virus warnings
  are in fact hoaxes. </p>
<h2><a id="ServerSideFiltering" name="ServerSideFiltering"></a>Server-Side Filtering</h2>
<p>Our email server automatically checks incoming email attachments. If the software 
  determines an attachment is dangerous, then the message is rejected and a warning 
  is sent to our Linux system administrator. Attachments which are merely suspicious 
  are "defanged" (see below) to prevent them from being run casually 
  or even inadvertently.</p>
<p>Files that are known to be viruses are immediately rejected. In addition the
	 file types are examined and those which experience has shown are far more
	likely to be viruses than legitimate are rejected. These include most program
	files (.exe, .com, .pif, .bat, .dll, etc.), Visual Basic script and JavaScript
	files (.vbs, .vbe, .js) and screen savers (.scr), among others. Another common
	trick is to use two different extensions to disguise a virus, for example <span class="InputCode">paper.doc.exe</span>,
	  because on many PC's the final extension is hidden. Thus the file appears
	 to  be <span class="InputCode">paper.doc</span>, a harmless Word document rather
	  than a malicious program. Our server rejects all files with two extensions.
	  If you need to send someone a file which would be rejected, there are many
	 alternatives  to email (SFTP, etc.), or you can rename the file temporarily.
	 Contact the <a href="mailto:helpdesk@ssc.wisc.edu">Help Desk</a> 
  for assistance.</p>
<p>Finally, certain file types are "defanged." This simply means that 
  some numbers and the word "DEFANGED" are added to the file name so 
  that Windows can't recognize the file type. Thus you can't run it by just double-clicking 
  on it. If you are confident that the attachment is indeed safe, save the file 
  to a convenient location and then rename it, removing "#####DEFANGED-" from 
  the name. Then it will run as usual.</p>
<p>This server-side filtering is our first line of defense against viruses, and 
  is quite effective. It is particularly useful against new viruses before they 
  are handled by anti-virus software (and often before anyone knows they exist). 
  For example the Magistr virus spread for two days before it could be detected 
  by anti-virus software. However, it spread by sending itself as an attachment 
  with one of four different endings. We defanged all files with those endings, 
  and this was enough to prevent it from spreading to anyone using our email.</p>
<p>Note that all of this only applies if you are using SSCC email (your email
		 address is <span class="InputCode"><span class="Parameter">user</span>@ssc.wisc.edu</span>).
		  DoIT email (<span class="InputCode"><span class="italic">user</span>@wisc.edu</span>)
   does limited filtering, though they are working on making their email system
  
  more secure.</p>
<h2><a id="ProtectingUniversityPCs" name="ProtectingUniversityPCs"></a>Protecting University PC's</h2>
<p>Each PC installed by SSCC staff includes Symantec Antivirus.
   This powerful and flexible software has two main components. Real-time protection
   constantly monitors your PC to prevent viruses from installing themselves,
  and  scanning checks your PC for the presence of viruses. Real-time protection
  will  always be running, you can start a scan any time you feel the need. With
  real-time  protection running (in addition to our server-side filtering) the
  chances of  a virus successfully attacking your PC are quite low. But if you
  are suspicious,  simply scan your PC.</p>
<p>You know that Symantec Antivirus is running if you see the yellow logo in
  the lower right corner of the screen, on the system tray:</p>
<p><img alt="Norton Antivirus Logo in the System Tray" height="36" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-14/1-14_1.png" width="174"/></p>
<p>Right click on this icon and open Symantec Antivirus  if
  you want to perform a scan.</p>
<p>New viruses are constantly being created, and anti-virus software must be
  kept  up to date to be effective. Symantec Antivirus  checks
  for updates whenever you log in to PRIMO, the SSCC's Windows network domain.</p>
<h2><a id="ProtectingHomePCs" name="ProtectingHomePCs"></a>Protecting Home PC's</h2>
<p>Home computers need to be protected from viruses as well. Symantec Antivirus
   is available free to UW faculty, staff and students, and we encourage everyone
   to take advantage of it. It must also be kept up-to-date to be effective.
  Please  see  <a href="https://ssc.wisc.edu/sscc/pubs/5-12.htm">Keeping Your PC Secure</a> for
  detailed  instructions.</p>
<h2><a id="VirusHoaxes" name="VirusHoaxes"></a>Virus Hoaxes</h2>
<p>Hoaxes about viruses are almost as common as viruses themselves. Typically 
  these will come as an email warning with great urgency of the incredible damage 
  the virus can do if not stopped. Often it will give a well known computer-related 
  company as a source, but with no link to a page on the company's web site containing 
  the information. Were it a real virus, such a page would exist. The message 
  will always contain an exhortation to forward it to everyone you know; that's 
  the author's goal. Think of these messages as just another form of email virus, 
  one which dupes well-meaning computer users into spreading it rather than doing 
  the work itself. If you are not sure whether a given message is a legitimate 
  warning or a hoax, you can check <a href="http://www.symantec.com/avcenter/hoax.html">Symantec's 
  Hoax Page</a>. You can find reliable, up-to-date information on real virus threats 
  on <a href="http://www.symantec.com/avcenter">Symantec's web site</a>, or <a href="http://www.networkassociates.com">Network 
  Associate's web site</a>.</p>
<p>While not exactly a hoax, another common source of misinformation about viruses
		is automatic messages saying a virus was detected in an email you sent.
		Actual viruses almost always forge the from address in the messages
		they send, but some servers still respond to that address when they detect
		a	virus. These messages can be ignored.</p>
<h2><a id="MoreStepsYouCanTaketoAvoidViruses" name="MoreStepsYouCanTaketoAvoidViruses"></a>More Steps You Can Take to 
  Avoid Viruses</h2>
<p>Messages created by viruses often stand out if you know what to look for.
  Warning signs include subjects or text that are simply gibberish or are out
  of character for the purported sender ("love letters" from coworkers
  for example), or receiving identical messages from several different people
  (a sign they all got the same virus). If you suspect a message may contain
  a virus, contact the sender to see if they intended to send you the message
  in question, or simply delete it. Reading the message is usually (but not always)
  safe; never open suspicious attachments.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/1-14/1-14_1.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>How to Change Your SSCC Passwords</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p> You can quickly and easily change your SSCC password using
		our <a href="https://www.ssc.wisc.edu/sscc_jsp/password">web page for password
		changes</a>.</p>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
<title>Untitled Document</title>
</head>
<body>
<h2><a id="PasswordRequirements" name="PasswordRequirements"></a>Password Requirements</h2>
<p>All computers are now subject to regular attempts to gain unauthorized access,
	and the first line of defense is strong passwords. </p>
<ul>
<li><strong>Never give your SSCC password to anyone, even SSCC staff.</strong></li>
<li><strong>Never use your SSCC password for any other account or site. </strong>The only exception is that you may use your UW NetID password as your SSCC password if you so desire.</li>
</ul>
<p>All passwords must comply
  with the University's <a href="http://www.cio.wisc.edu/policies-password.aspx">Baseline
    Password Standard</a>, which includes the following:</p>
<p> Passwords chosen <em>must</em></p>
<ul>
<li> be a minimum of eight (8) characters in length [14 characters for Silo users]</li>
<li> be memorized; if a password is written down it must be secure </li>
<li> contain at least one (1) character from three (3) of the following categories: </li>
<ul>
<li> Uppercase letter (A-Z) </li>
<li> Lowercase letter (a-z) </li>
<li> Digit (0-9) </li>
<li> Special character (~`!@#$%^&amp;*()+=_-{}[]\|:;”’?/&lt;&gt;,.) </li>
</ul>
<li> be private </li>
</ul>
<p> Passwords chosen <em>must not</em></p>
<ul>
<li> contain a common proper name, login ID, email address, initials, first,
		middle or last name</li>
<li>be the same as your previous three passwords</li>
</ul>
<p>Passwords also should not consist of a single word, or a single word followed
	by a number. Consider using a password which combines multiple words, or "passphrase."</p>
</body>
</html>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Getting SSCC Announcements via RSS</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>The SSCC makes important announcements available through our Broadcast message, which appears when you log in to our Windows domain or our Linux servers. This includes information about downtime, hardware and software upgrades, any problems with SSCC services, and anything else SSCC users need to know. However, you will only see Broadcast when you first log in, not when it changes--and if you don't log in to the SSCC you won't see it at all.</p>
<p>Thus we also make these announcements available as an RSS feed. With RSS you can get the information that's currently in Broadcast at any time and from any place, and get updates as situations change.</p>
<h2><a id="WhatisRSS" name="WhatisRSS"></a>What is RSS?</h2>
<p>RSS stands for Really Simple Syndication. At the technical level, an RSS feed is simply a file that a web server sends out when asked, not that different from a web page. However,  the file has a standard structure which allows an RSS reader to pick out the various items in the feed and display them in any way it wants to. Thunderbird, for example, will display the items in an RSS feed as if they were email messages, while Firefox turns them into a set of bookmarks leading to small web pages. RSS readers check on the RSS feeds you are interested in on a regular basis and let you know when new items are available.</p>
<p>There are many different RSS readers available, and  Thunderbird, Firefox and Internet Explorer have RSS readers built into them. The <a href="https://www.google.com/reader/">Google Reader</a> (a web-based service) is also quite popular.</p>
<h2><a id="SettingUpanRSSReader" name="SettingUpanRSSReader"></a>Setting Up an RSS Reader</h2>
<p>You are welcome to use any RSS reader you prefer. Once you have one installed and configured, the only information you'll need in order for it to get the SSCC's RSS feed is the feed's location: <a href="https://www.ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12">https://www.ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12</a>. However, this article will step you through the process of setting up Thunderbird, Firefox and Internet Explorer to read the SSCC's RSS feed.</p>
<h3><a id="Thunderbird" name="Thunderbird"></a>Thunderbird</h3>
<p>If you've never used Thunderbird as an RSS reader before, you first need to add an RSS reader account. Click <span class="MenuOutput">Tools</span>, <span class="MenuOutput">Account Settings</span>, <span class="MenuOutput">Add Account</span>.</p>
<p><img alt="Adding an Account" height="575" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_1.png" width="612"/></p>
<p>Then for the type of account choose <span class="MenuOutput">RSS News &amp; Blogs</span> and click <span class="MenuOutput">Next</span>.</p>
<p><img alt="Choose RSS" height="443" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_2.png" width="447"/></p>
<p>Now tell Thunderbird how you want to refer to this account. The default <span class="MenuOutput">News &amp; Blogs</span> is probably fine. Click <span class="MenuOutput">Next</span> when you're done.</p>
<p><img alt="Name the account" height="443" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_3.png" width="447"/></p>
<p>Finally review what you've entered and click <span class="MenuOutput">Finish</span>. Thunderbird is now ready to read RSS feeds, but you haven't told it what feeds you are interested in. To do so select your RSS account and click <span class="MenuOutput">Manage Subscriptions</span>.</p>
<p><img alt="Manage Subscriptions" height="575" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_4.png" width="612"/></p>
<p>Next click <span class="MenuOutput">Add</span>.</p>
<p><img alt="Add a feed" height="290" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_5.png" width="494"/></p>
<p>Now all you have to do is type or paste in the address of the RSS feed you want to add, which for the SSCC's feed is <span class="InputCode">https://www.ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12</span>. Then click <span class="MenuOutput">Ok</span> and close the <span class="MenuOutput">RSS Subscriptions</span> window.</p>
<p><img alt="Type the feed address" height="158" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_6.png" width="370"/></p>
<p>This will put you back at the main window for your RSS account. While you're there, you may want to set how often it checks for new articles to something smaller (say, every 15 minutes) and have it check automatically when you start Thunderbird.</p>
<p>Once you close the <span class="MenuOutput">Account Settings</span> window, you'll see your new RSS account underneath your main email account. Remember it may take a while before it checks the server for items.</p>
<h3><a id="Firefox" name="Firefox"></a>Firefox</h3>
<p>To set up an RSS feed in Firefox, you must first open Firefox and go to <a href="http://ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12">its location</a>. You can do so by clicking on the previous link, clicking on the orange RSS icon (<img alt="RSS Icon" height="15" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1_21_13.png" width="14"/>) you'll see in the address bar of your browser whenever you visit an SSCC web page, or by typing <a href="https://www.ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12">https://www.ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12</a> in the address bar.</p>
<p>You'll get a page which allows you to subscribe to the feed using one of several methods (it will also give you the current tables of the feed). If you want to use Firefox itself, choose <span class="MenuOutput">Live Bookmarks</span> and click <span class="MenuOutput">Subscribe Now</span>.</p>
<p>(Note that while this page will give you the option to subscribe using Thunderbird, it doesn't actually work. To use Thunderbird as your RSS reader use the method described <a href="#Thunderbird">above</a>.)</p>
<p><img alt="Subscribing using Live Bookmarks" height="455" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_7.png" width="666"/></p>
<p>You'll then be asked where to put this bookmark. The default, the <span class="MenuOutput">Bookmarks Toolbar Folder</span>, allows you to make the feed available on a toolbar, but it doesn't really matter where you put it.</p>
<p><img alt="Adding a live bookmark" height="142" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_8.png" width="326"/></p>
<p>To see the feed, click on the folder you put it in, then the feed itself. Each item will show up as a bookmark. Click on the bookmark to see the tables of the item.</p>
<p><img alt="Using a live bookmark" height="387" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_9.png" width="642"/></p>
<h3><a id="InternetExplorer" name="InternetExplorer"></a>Internet Explorer</h3>
<p>To set up an RSS feed in Internet Explorer, you must first open Internet Explorer and go to <a href="http://ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12">its location</a>. You can do so by clicking on the previous link, clicking on the orange RSS icon (<img alt="RSS Icon" height="15" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1_21_13.png" width="14"/>) you'll see in the address bar of your browser whenever you visit an SSCC web page, or by typing <a href="https://www.ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12">https://www.ssc.wisc.edu/sscc/wp/?feed=rss2&amp;cat=-12</a> in the address bar.</p>
<p>You'll get a page which allows you to subscribe to the feed using Google tools if you have the Google toolbar installed, or using Internet Exporer itself. To do the latter click <span class="MenuOutput">Subscribe to this feed</span>.</p>
<p><img alt="Subscribing" height="338" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_10.png" width="642"/></p>
<p>You'll then be asked where to create the feed. The default location (<span class="MenuOutput">Feeds</span>) will probably be fine, so just click <span class="MenuOutput">Subscribe</span>.</p>
<p><img alt="Storing the feed" height="253" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_11.png" width="369"/></p>
<p>To access the feed, click on Favorites (the star) and then the <span class="MenuOutput">Feeds</span> button. You can then click on the name of the feed to view its tables.</p>
<p><img alt="Accessing the feed" height="408" src="https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_12.png" width="642"/></p>
<h2><a id="WebBasedReaders" name="WebBasedReaders"></a>Web-Based Readers</h2>
<p>Web-based RSS readers have the advantage of being available anywhere. Thus you wouldn't need to set up the SSCC RSS feed on both your office computer and your home computer, for example. However, they do not check for new table very often and can go up to two hours between updates. Thus they're less useful for time-sensitive information, such as finding out when we've fixed a problem.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_4.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_5.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_6.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1_21_13.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_7.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_8.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_9.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1_21_13.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_10.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_11.png, https://ssc.wisc.edu/sscc/pubs/screenshots/1-21/1-21_12.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Publishing a Web Site on the SSCC's Web Server</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>SSCC members are welcome to create personal web sites on the
          		SSCC's web server. Web sites on the SSCC web server must be focused
          		on University business and comply with  <a href="http://www.cio.wisc.edu/policies/">University
          		computing policies</a>, including the <a href="http://www.cio.wisc.edu/policies/appropriateuse.aspx">Guidelines
          		for Appropriate Use</a> and the <a href="http://www.wisc.edu/policy/wwwap.php">Policy
          		Governing World Wide Web Accessibility</a>, and with the SSCC's <a href="https://ssc.wisc.edu/sscc/policies/webpublish.htm">Web
          		Publishing Policy</a>. Commercial or political use is strictly prohibited.</p>
<p>If you are creating a brand new web site, we recommend you use <a href="https://ssc.wisc.edu/sscc/pubs/wordpress.htm">WordPress</a>, especially if you've never made a web site before. </p>
<p>This article will teach you how to put existing files on the
          		SSCC's web server.</p>
<h2>Putting Files on the Web</h2>
<p>The SSCC's web server will publish any files it finds in the <span class="MenuOutput">PUBLIC_web</span>          		directory
          		inside your Linux home directory. If you are using Windows, your
          		Linux home directory is mapped as the <span class="MenuOutput">Z:</span> drive,
          		so your web site will go in <span class="MenuOutput">Z:\PUBLIC_web</span>.
          		If you want to use SFTP (Secure FTP), the SSCC's Linux FTP server is <span class="InputCode">ftp.ssc.wisc.edu</span>.
          		Your FTP program may allow you to tell it to start in <span class="MenuOutput">PUBLIC_web</span>          		automatically,
          		or you may need to change to that directory each time you log
          		in. </p>
<p>This directory starts out empty, but you can put files in it
          		at any time just like any other directory.</p>
<h2>Your Web Address</h2>
<p>Once you put files in your PUBLIC_web directory, they will be available
          		on the web at <span class="InputCode">http://ssc.wisc.edu/~<span class="Parameter">username</span>/<span class="Parameter">filename</span></span> where
          		<span class="Parameter"><span class="InputCode">username</span> </span>should
          		be replaced by your SSCC username (e.g. <span class="InputCode">rdimond</span>)
          		and <span class="InputCode"><span class="Parameter">filename</span></span>          		should
          		be replaced by the name of the file you're trying to access (e.g.
          		<span class="InputCode">econ101.htm</span>). If you create a web
          		page named <span class="InputCode">home.htm</span>, <span class="InputCode">home.html</span>, <span class="InputCode">index.htm</span>,
          		<span class="InputCode">index.html</span> or one of the other common
          		home page names, the web server will present it if someone asks
          		for just <span class="InputCode">http://ssc.wisc.edu/~<span class="Parameter">username</span></span>.</p>
<h2>Making Files Available Without Creating a Web Page</h2>
<p>The web server will be happy to distribute files that are not web
          		pages, such as PDF files or Word documents (just make sure your
          		intended audience has or can get the proper software for reading
          		them). However, if you don't make a home page people will need
          		to know the name of each file they want to download. It is possible
          		to have the web server automatically generate a home page of
          		sorts just listing the files in your <span class="MenuOutput">PUBLIC_web</span> directory
          		so people can get one by clicking on its name. If you'd
          		like us to enable this for your web site, please <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">contact
          		the Help Desk</a>. </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using Compressed Data in SAS</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>SAS has a variety of tools for working with compressed data. This article
					will describe how to use them, and why.</p>
<p>Compression programs look for patterns in the data, and then replace the
					original file with a file that describes those patterns.
					Nothing is lost--that description contains all the information
					needed to recreate the original
					file. Normally the description is smaller than the original
					file, but how much smaller will depend on the data itself
					and	the compression	scheme used.
					With the compression scheme build into SAS, the compressed
					file	can	even	be	bigger	than	the	original in rare
					cases.</p>
<p>The catch is that it takes CPU time to compress or uncompress a 
              file. Thus compression is really a way to trade CPU power for disk 
              space. For files you use constantly, this may not be a good trade. 
              But we strongly you encourage to compress any data sets you are 
              not using on a regular basis.</p>
<h2>Using Compressed SAS Data Sets</h2>
<p>SAS has built-in tools for compressing SAS data sets. Simply add the <span class="InputCode">compress</span>			  option
					to your data statement. It can take one of two values: <span class="InputCode">yes</span>			  (or
					equivalently <span class="InputCode">char</span>)
					and <span class="InputCode">binary</span>. These will use two different
					compression schemes (RLE and RDC respectively). The scheme
					you	use will affect the amount of compression you get, but
					it's	impossible	to	predict	which	will work better
					for a particular	data	set.	You may	want	to experiment
					and see, or	just choose	one	and go	with it.</p>
<p>The complete syntax is simply:</p>
<p class="InputCode">data <span class="Parameter">output</span> (compress=yes);</p>
<p>or</p>
<p class="InputCode">data <span class="Parameter">output</span> (compress=binary);</p>
<p>where <span class="Parameter"><span class="InputCode">output</span></span> should
					be	replaced by the name of the data set you wish to create.
					The data step then proceeds as usual.</p>
<p>To use a compressed data set takes no special syntax whatsoever. SAS will
					recognize that the data set is compressed and uncompress
					each	observation automatically as it reads it. Of course
					it takes additional CPU time to both read and write compressed
					data.</p>
<p>Both of the compression schemes available in SAS have the drawback that
					they add 12 bytes per observation, and if the data set has
					many observations but few variables this overhead can be
					greater than the amount of space saved. One other drawback:
					Stat/Transfer cannot read compressed data sets. If you anticipate
					using Stat/Transfer, do not compress your data, or make an
					uncompressed copy before attempting to run Stat/Transfer.</p>
<h2>Reading Compressed Text Files</h2>
<p>Linux has its own set of tools for compressing files, notably compress/uncompress,
					gzip/gunzip, bzip2/bunzip2 and zip/unzip. They are described
					in <a href="https://ssc.wisc.edu/sscc/pubs/7-8.htm">Using
					Compressed	Data in Linux</a>. Windows has another set of compression tools,
					the most common being Winzip and its relatives (note that
					the Linux programs <span class="InputCode">uncompress</span> and <span class="InputCode">unzip</span> can
					both handle Windows	zip	files, as can <span class="InputCode">zcat</span>).
					It is very	common	to	receive data as text	files	that
					have been compressed	using one of these	programs.</p>
<p>Often the easiest way to read in these files is to first uncompress them
					using	Linux tools and then read the uncompressed data
					directly--just remember not to keep both the compressed files
					and the uncompressed files once you're done.	You	can	temporarily
					store	the	uncompressed	files	in	/temp/fivedays	if
					they	are	too large to	fit in	the	space available	to
					you.</p>
<p> But	it	is possible to	have SAS	read	compressed
							files	directly	(with	the exception	of	files
					compressed	using <span class="InputCode">bzip2</span>, since	it is not
					compatible with <span class="InputCode">zcat</span>).
							This can	be handy if the	files are extremely large,
					or	if you are	working with many	compressed files.</p>
<p>The key is to define a SAS filename which is actually the output of the <span class="InputCode">zcat</span>			  command.
					The <span class="InputCode">zcat</span> command simply reads out the tables
					of a compressed	file. SAS can use the output of <span class="InputCode">zcat</span> just
					as if it were a file. Before your data step, insert the following
					in your SAS program:</p>
<p class="InputCode">filename reader pipe 'zcat <span class="Parameter">file</span>';</p>
<p>where <span class="Parameter"><span class="InputCode">file</span></span> is
					the name of the compressed file you want to read. Now in
					your data step, your infile command just uses reader:</p>
<p class="InputCode">infile reader;</p>
<p>Options such as <span class="InputCode">delimiter</span> still work as
					usual if needed. Here's an example of a full data step that
					reads	a compressed text file:</p>
<p class="InputCode">filename reader pipe 'zcat compressed.Z';</p>
<p class="InputCode">data plain;<br/>
<span class="indent3">infile reader delimiter=" ";</span><br/>
<span class="indent3">input x1 x2 x3 x4 x5 x6 x7 x8 x9 x10;</span><br/>
		run;</p>
<h2>Writing Compressed Text Files</h2>
<p>You can have SAS output compressed text files as well. This is equivalent
					to having SAS write normal text and then compressing it,
					but can save you a step (and this way it is all documented
					in your SAS program). Once	again,	the	key	is	a	filename
					containing a compression command:</p>
<p class="InputCode">filename writer pipe 'compress &gt; <span class="Parameter">file</span>.Z';</p>
<p>The <span class="InputCode">.Z</span> is essential so <span class="InputCode">uncompress</span> will
					later recognize the output as a compressed file. You can
					then	use that filename	anywhere where SAS writes
					text. Two examples:</p>
<p class="InputCode">data _null_;<br/>
<span class="indent3">set plain;</span><br/>
<span class="indent3">file writer;</span><br/>
<span class="indent3">put x1-x10;</span><br/>
			run;</p>
<p class="InputCode">proc export data=plain outfile=writer dbms=dlm;<br/>
<span class="indent3">delimiter=',';</span><br/>
run;</p>
<p>Please note that proc export will insist on briefly opening a SAS window
					as it runs. It will disappear very quickly, but this does
					mean that you must have the ability to display Linux graphics
					in your session or a job using proc export will hang. This
					is true whether you're compressing the output of proc export
					or not.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Creating SAS Transport Files</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Starting with version 8, data sets are now portable across most, but not all, 
  operating systems. Most SSCC users will never have to work with a transport 
  file again. But for those who do, there is a new wrinkle: if you make a transport 
  file using PROC COPY (probably what you're used to) variable names longer than 
  eight characters will be truncated. This is so that the resulting transport 
  file can be read in older versions of SAS. On the other hand, PROC CPORT does 
  support long variable names, but the transport files it creates can only be 
  read with SAS 8. </p>
<p>To repeat, most SSCC users will not have to use transport files. SAS data sets 
  can be moved between all SSCC computers "as is." This document is 
  most likely to be of interest if you are trying to make data available to the 
  widest possible audience. If you are concerned about users of SAS 6, then you 
  probably want to keep your variable names under eight characters and use PROC 
  COPY. Otherwise use PROC CPORT. Just one warning: these methods don't mix. PROC 
  COPY can't read files made with PROC CPORT and PROC CIMPORT cannot read files 
  made with PROC COPY, so always tell the recipient which they should use.</p>
<p>The process of moving a SAS data set involves three steps. First, you must 
  convert the data set into a transport file on the source computer. Second, move 
  the transport file from the source computer to the destination computer. Third, 
  convert the transport file back into a standard data set on the destination 
  computer.</p>
<h2>PROC CPORT</h2>
<ol>
<li>
<p>To convert the data set to a transport file using PROC CPORT, run the following 
      SAS program on the source computer.</p>
<p class="InputCode"> proc cport data='<span class="Parameter">datafile</span>' 
      file=<span class="Parameter">transfile</span>;<br/>
      run;</p>
<p>Replace <span class="Parameter"><span class="InputCode">datafile</span></span> 
      with the file name (and the path, unless it is your current directory) of 
      the data file. Replace <span class="Parameter"><span class="InputCode">transfile</span></span> 
      with the name you want to give the transport file (and a path if you don't 
      want it to go in the current directory).</p>
</li>
<li>
<p>Move the transport file to the destination computer, using whatever method
    	 is available (SFTP, etc., but if you use SFTP make sure it is binary
    	mode).</p>
</li>
<li>
<p>To convert the transport file back to a regular data set, run the following 
      on the destination computer.</p>
<p class="InputCode">libname new '<span class="Parameter">newlocation</span>';<br/>
      proc cimport library=new infile='<span class="Parameter">transfile</span>';<br/>
      run;</p>
<p>Here <span class="Parameter"><span class="InputCode">transfile</span></span> 
      is the file created in step one (including the path where it ended up in 
      step 2 if that's not the current directory). <span class="Parameter"><span class="InputCode">newlocation</span></span> 
      is the directory you want the data set to be put in.</p>
</li>
</ol>
<h2>PROC COPY</h2>
<h2></h2>
<ol>
<li>
<p>To convert the data set to a transport file, run the following SAS program 
      on the source computer.</p>
<p class="InputCode"> libname input '<span class="Parameter">datadirectory</span>';<br/>
      libname output xport '<span class="Parameter">transfile</span>';<br/>
      proc copy in=input out=output;<br/>
<span class="indent3">select <span class="Parameter">datafile</span>;</span><br/>
      run;</p>
<p><span class="Parameter"><span class="InputCode">datadirectory</span></span> 
      is the current location of your data set and <span class="Parameter"><span class="InputCode">datafile</span></span> 
      is the file name. <span class="Parameter"><span class="InputCode">transfile</span></span> 
      is the name you want to give the transport file (you can also specify a 
      path if you don't want it to go in the current directory).</p>
</li>
<li>
<p>Move the transport file to the destination computer, using whatever method
    	 is available (SFTP, etc., but if you use SFTP make sure it is in binary
    	mode).</p>
</li>
<li>
<p>To convert the transport file back to a regular data set, run the following 
      on the destination computer.</p>
<p class="InputCode">libname input xport '<span class="Parameter">transfile</span>';<br/>
      libname output '<span class="Parameter">newlocation</span>';<br/>
      proc copy in=input out=output;<br/>
      run;</p>
<p>Here <span class="Parameter"><span class="InputCode">transfile</span></span> 
      is the file created in step one (including the path where it ended up in 
      step 2 if that's not the current directory). <span class="Parameter"><span class="InputCode">newlocation</span></span> 
      is the directory you want the data set to be put in.</p>
</li>
</ol>
<p> </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Programming in Color</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Both Textpad for Windows and Emacs for Linux have the ability to recognize 
  parts of some programming languages as you are writing and color it according 
  to its meaning. For example, comments may be green and commands blue. This can 
  help in avoiding syntax errors. </p>
<h2><a id="Textpad" name="Textpad"></a>Textpad</h2>
<p>Our standard installation of Textpad already has syntax coloring set up, so
	if you are running it on Winstat, or if we set it up on your PC for you,
	you're all set. Textpad identifies files by their extension (<span class="InputCode">*.sas</span>, <span class="InputCode">*.do</span>,
	 etc.), which does mean you must save the file and give it a name before
	it can be colored. If syntax coloring is not set up on your machine, or you
	want to add additional file types, you can <a href="http://www.textpad.com/add-ons/syna2g.html">download
	 syntax files from Textpad's web site</a> (they have a huge list of languages
	  available). Instructions for installing them are found at the end of the
	 list of available files.</p>
<h2><a id="Emacs" name="Emacs"></a>Emacs</h2>
<p>The ability to color files for statistical programs such as SAS and Stata
	is  included in a package called ESS (Emacs Speaks Statistics), which is
	installed by default.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Finding and Installing User-Written Stata Programs</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>There are a tremendous number of user-written programs for Stata available which, once installed, act just like official Stata commands. Some are conveniences, like <span class="InputCode">outreg</span> for formatting regression output. Others calculate results Stata itself does not, such as <span class="InputCode">polychoric</span> for polychoric correlations. A few represent major extensions of Stata's capabilities, such as <span class="InputCode">ice</span> and <span class="InputCode">mim</span> for multiple imputation or <span class="InputCode">gllamm</span> for mixed models. Most of these programs are stored at Boston College's <a href="http://ideas.repec.org/s/boc/bocode.html">Statistical Software Components</a> archive (or SSC, but not to be confused with the UW's Social Science Computing Cooperative or SSCC) .</p>
<p>You are welcome to install any user-written commands you desire to use, even in the labs, on Winstat or on the Linux servers, because Stata at the SSCC is set up to store the programs you install in your home directory. Thus you don't need to worry about programs you install causing problems for others. On the other hand, this means you need to install the user-written programs you want yourself. The SSCC does not try to identify some useful set of user-written programs and make them available to everyone.</p>
<p>This article will discuss finding, installing, and updating user-written programs. Fortunately Stata includes commands which make this very easy to do.</p>
<h2><a id="Usingfindit" name="Usingfindit"></a>Finding User-Written Programs</h2>
<p>If you know the name of the program you want to use, you can go directly to <a href="#InstallingUserWrittenPrograms">Installing User-Written Programs</a>. However, it's much more common to know what you want to do without knowing what program (if any) can do it. This is a job for Stata's <span class="InputCode">findit</span> command.</p>
<p>For example, suppose you wanted to do something with Heckman selection models but don't know what command to use. Type:</p>
<p class="InputCode">findit heckman</p>
<p>The result is a tremendous amount of information. The <span class="InputCode">findit</span> command first searches Stata's official help files and notes that there is an official <span class="InputCode">heckman</span> command and several other related  commands (this makes <span class="InputCode">findit</span> a powerful tool for figuring out how to do things in Stata in general, not just for finding user-written programs). It then searches Stata's web site and locates several FAQ entries, plus an example on UCLA's large statistics web site. It then begins to list relevant user-written programs, organized into "packages." Programs that were described in the Stata Journal or the older Stata Technical Bulletin are listed first.</p>
<p> You can click on each package to view a very brief description, including a list of files (one package may contain several related programs). Also note the <span class="MenuOutput">(click here to install)</span> link. Clicking on the <span class="InputCode">.hlp</span> file will get you the help entry for the program, which you can use to decide if the program will do what you need.</p>
<h2><a id="InstallingUserWrittenPrograms" name="InstallingUserWrittenPrograms"></a>Installing User-Written Programs</h2>
<p>If you know the name of the package you want to install, you can install it by typing</p>
<p class="InputCode">ssc install <span class="Parameter">package</span></p>
<p>Alternatively, if you identified the package you want using <span class="InputCode">findit</span> you can install it by clicking on its <span class="MenuOutput">(click here to install)</span> link. However, <em>avoid installing any package that is directly tied to an article in the Stata Journal or the Stata Technical Bulletin</em>. These packages contain the program as it was described in the article and are not updated. Look for another package containing the program that is not tied to an article and, if one exists, install that instead.</p>
<p>For example, if you type</p>
<p class="InputCode">findit ice</p>
<p>the first three <span class="InputCode">ice</span> packages you'll see  are (as of  4/30/2008) <span class="InputCode">stb0067_1</span>, <span class="InputCode">stb0067_2</span> and <span class="InputCode">stb0067_3</span>, but none of these contain the latest version of <span class="InputCode">ice</span>. The package which does is simply called <span class="InputCode">ice</span>. As the author of <span class="InputCode">ice</span> (Patrick Royston) makes further changes and improvements, the <span class="InputCode">ice</span> package will be updated accordingly. If he writes another Stata Journal article describing the changes he has made the result will likely be an <span class="InputCode">stb0067_4</span> package, but if you installed <span class="InputCode">stb0067_3</span> you won't get the new version automatically.</p>
<p>(Getting the right version of <span class="InputCode">ice</span> is particularly important because multiply imputed data sets created by one version cannot be used by different versions--and the output of older versions can't be analyzed using <span class="InputCode">mim</span> at all. The newer versions of <span class="InputCode">ice</span> also include more capabilities than the older ones.)</p>
<p>Unfortunately, the <span class="InputCode">ice</span> package you want to install isn't trivial to find--it's about a third of the way through the very long list of results you get from <span class="InputCode">findit ice</span>. However, packages are usually named after the main ado file they contain, and that file is normally listed first in the package description. So if you've looked at <span class="InputCode">stb0067_3</span> and decided that program will meet your needs, noting that <span class="InputCode">ice.ado</span> is the first file listed is enough to know that you can probably install the latest version by typing</p>
<p class="InputCode">ssc install ice</p>
<h2><a id="UpdatingUserWrittenPrograms" name="UpdatingUserWrittenPrograms"></a>Updating User-Written Programs</h2>
<p>While few user-written programs are updated as frequently as <span class="InputCode">ice</span>, it's still important to get the latest versions of any user-written programs you install. Sometimes updates will include important bug fixes, though the SSC archive has quality control measures in place to try to catch bugs before the program is distributed.</p>
<p>The easiest way to check that your user-written programs are up-to-date is to type:</p>
<p class="InputCode">adoupdate</p>
<p>The <span class="InputCode">adoupdate</span> command notes where each package was downloaded from and goes back to that location to see if a more recent version is available. If there is, you can install the latest version by typing:</p>
<p class="InputCode">adoupdate, update</p>
<p>You can get a list of the packages you've installed by typing:</p>
<p class="InputCode">ado dir</p>
<p>This can be very helpful for catching things like having downloaded <span class="InputCode">stb0067_3</span> rather than <span class="InputCode">ice</span>. You can remove a package by typing</p>
<p class="InputCode">ado uninstall <span class="Parameter">package</span></p>
<p>where <span class="InputCode"><span class="Parameter">package</span></span> should be replaced by either  the name of the package you want to remove or the number it is given by <span class="InputCode">ado dir</span>, including the brackets around it.</p>
<p>For example, suppose you downloaded some earlier version of <span class="InputCode">ice</span> that was associated with a Stata Journal article. Just typing</p>
<p class="InputCode">ssc install ice</p>
<p>will fail because you already have a copy of <span class="InputCode">ice.ado</span> and all the other related files, and the installer refuses to overwrite them. Thus you need to identify and remove the older version. To do so, type:</p>
<p class="InputCode">ado dir</p>
<p>If the results included the entry</p>
<pre>[6] package st0067_3 from http://www.stata-journal.com/software/sj7-4<br/>      SJ7-4 st0067_3.  Update: Multiple imputation of missing...<br/></pre>
<p>you could remove it by typing either</p>
<p class="InputCode">ado uninstall st0067_3</p>
<p>or </p>
<p class="InputCode">ado uninstall [6]</p>
<p>Then</p>
<p class="InputCode">ssc install ice</p>
<p>will successfully install the latest version. You should then type</p>
<p class="InputCode">adoupdate</p>
<p>periodically to ensure that ice stays up-to-date.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using Stat/Transfer</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Stat/Transfer is a utility program that  converts data sets from one format
	to another (for example SPSS to Stata, or Excel to SAS). It is quick and
	easy to use, and  available on  Winstat, Linstat and in the SSCC computer labs.</p>
<h2>Using Stat/Transfer's Graphical User Interface</h2>
<p>If you start Stat/Transfer on Winstat, in the lab or by typing <span class="InputCode">stattransfer</span> on Linstat you'll see the following:</p>
<p><img alt="Stat/Transfer's GUI" height="434" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-17/4-17_1b.png" width="552"/></p>
<p>Set the <span class="MenuOutput">Input File Type</span> to the kind of file you have, then click <span class="MenuOutput">Browse</span> to identify the particular file you want to convert. Set the <span class="MenuOutput">Output File Type</span> to the kind of file you want. Then click <span class="MenuOutput">Transfer</span> and Stat/Transfer will convert the file for you.</p>
<p>The file types are mostly self-explanatory. To create an SPSS file set the <span class="MenuOutput">Output File Type</span> to <span class="MenuOutput">SPSS Unicode for Windows</span>. In general <span class="MenuOutput">ASCII/Text - Delimited</span> can only be used to convert text files if they are very structured.</p>
<p>The other tabs are typically not needed. <span class="MenuOutput">Variables</span> lets you choose which variables are converted, and set their types. <span class="MenuOutput">Observations</span> lets you convert just a subset of your data. <span class="MenuOutput">Options</span> has a wide variety of settings for converting various kinds of files. For example, by default Stat/Transfer will stop reading an Excel file if it encounters a blank line (on the assumption that anything after that will be notes or other material other than data) but you can change that behavior by clicking the <span class="MenuOutput">Options</span> tab and then <span class="MenuOutput">Worksheets</span>.</p>
<h2>Using Stat/Transfer from the Command Line</h2>
<p>On Linstat you can use Stat/Transfer to convert a file very quickly and easily from the command line using <span class="InputCode">st</span> rather than <span class="InputCode">stattransfer</span>:</p>
<p class="InputCode">st <span class="Parameter">inputfile</span> <span class="Parameter">outputfile</span></p>
<p>Stat/Transfer will determine the file types by their extensions. For example:</p>
<p class="InputCode">st file.sas7bdat file.dta</p>
<p>will convert <span class="InputCode">file</span> from SAS format to Stata format.</p>
<p>The same principle applies in Windows. To get a command line, click the Windows Logo button (<span class="MenuOutput">Start</span> in older versions of Windows) and then in the <span class="MenuOutput">Search</span> (<span class="MenuOutput">Run</span>) box type <span class="InputCode">cmd</span>. In Windows you also have to give the location of the program, and it's best to put  file names in quotes (sometimes they're not needed, but often they are). Thus the command becomes:</p>
<p class="InputCode">"c:\program files (x86)\stattransfer10\st.exe" "<span class="Parameter">inputfile</span>" "<span class="Parameter">outputfile</span>"</p>
<p>(The location of  <span class="InputCode">st.exe</span>  may vary. The above is its location on Winstat.)</p>
<p>The command to run Stat/Transfer can be included in  many statistical programs. The following Stata code will save the data set in memory as <span class="InputCode">outputdata.dta</span>, then convert it to Excel format:</p>
<p class="InputCode">save outputdata, replace<br/>! st outputdata.dta outputdata.xls -y</p>
<p>The exclamation point (<span class="InputCode">!</span>) indicates that the following command is to be executed by the computer's operating system rather than Stata. The SAS equivalent is <span class="InputCode">x</span>. The <span class="InputCode">-y</span> switch tell Stat/Transfer that yes, it is allowed to overwrite any existing version of <span class="InputCode">output.xls</span>. It plays the same role as the <span class="InputCode">replace</span> option in Stata's <span class="InputCode">save</span> command. Note that this code was written to run on Linstat. The Windows version would be:</p>
<p class="InputCode">save outputdata, replace<br/>
  ! "c:\program files (x86)\stattransfer11\st.exe" "outputdata.dta" "outputdata.xls" -y</p>
<p>For more complicated tasks you can create Stat/Transfer command files. For more details on command files and Stat/Transfer in general, see the documentation. On Linstat, make sure you're on Linstat1 and type:</p>
<p class="InputCode">acroread /software/stattransfer/Help/manual.pdf</p>
<p>On Winstat, click the Windows Logo button, <span class="MenuOutput">All Programs</span>, <span class="MenuOutput">StatTransfer 10</span>, <span class="MenuOutput">StatTransfer 10 PDF Manual</span>. </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/4-17/4-17_1b.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>An Introduction to SAS Data Steps</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>SAS remains a popular and powerful tool for data management and statistical 
  analysis. While other tools, particularly Stata, have similar capabilities and 
  are easier to learn, most SAS experts have seen little reason to switch.</p>
<p style="margin-top: 0;">SAS is a huge program. Many of its capabilities (including 
  those the SAS Institute seems to be most excited about) are geared towards the 
  corporate environment rather than academia. But it would be impossible to cover 
  even the most useful features in a single article. This article will 
  focus on the data step, where you will be writing your own code. After reading 
  this article you should be able to begin writing SAS programs to prepare 
  your data for analysis right away, assuming they are in SAS format.</p>
<h2>Using this Article</h2>
<p>This article is based on the hands-on SAS class taught by the SSCC. Thus
	 it is best read while sitting at the computer, actually doing the tasks
	described. This article is focused on SAS for Linux, so to
	follow the instructions exactly you will need to log in to <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Linstat</a>.</p>
<p> You will also need to use a text editor. Any
  text  editor will do, so if you have a favorite just make sure you can
  run it and save the results to the Linux file system. If you don't have
  a favorite, we suggest using Emacs if you are comfortable with Linux, and
  TextPad if you are more comfortable with Windows.</p>
<p> TextPad is a Windows-based editor similar to Notepad
	 (but much better). If you are in the Social Science building and don't have
	 TextPad on your PC, please <a href="mailto:helpdesk@ssc.wisc.edu">contact
	 the SSCC Help Desk</a> to have it installed. To save the programs you write to
	 the  Linux file system, you will need to be logged in to the PRIMO domain.
	 If you are working remotely the easiest way to do this is to <a href="http://wi.ssc.wisc.edu">log
	 in to Winstat</a>.
	 Your Linux home directory will then be mapped as the <span class="MenuOutput">Z:</span> drive. </p>
<p>We will repeatedly be switching back and forth between the Linux shell  and
	a text editor. You can always tell when you are supposed to type something
	into Linux because the text will include the prompt (the 
	<span class="InputCode">&gt;</span>) even though you should not type it.</p>
<p>You will use a fair number of small files in the course of this article. 
	The following Linux commands will copy all of them to a directory called <span class="InputCode">sasclass</span> 
	under your Linux home directory. Type them at the Linux prompt and hit enter 
	after each line.</p>
<p class="InputCode">&gt; mkdir ~/sasclass<br/>
	&gt; cd ~/sasclass<br/>
	&gt; cp /usr/global/web/sscc/pubs/files/4-18/* .</p>
<p>This will also make <span class="InputCode">sasclass</span> the current working 
	directory, so you'll be all set to run the examples.</p>
<p>Note that SAS for Windows is the same language, and all the SAS code in this
	article will work in SAS for Windows. However, the process of running
	SAS is fairly different. </p>
<h2>Running SAS</h2>
<h3>Servers</h3>
<p>The SSCC has SAS installed on Winstat and Linstat.
   This article will focus on SAS for Linux as run on Linstat, but again, SAS syntax is the
   same on both Windows and Linux.</p>
<h3>Running Programs</h3>
<p>Linux SAS does have an interactive mode, but almost all Linux SAS users prefer
	to use batch mode. To run SAS in batch mode, you start by writing your program
	using your text editor. Once your program is written, you will give the command
	to run it in Linux. It will run quietly without displaying anything on the
	screen. However when it has finished you will find at least one and probably
	two new files. One is a <span class="InputCode">log</span> file, containing
	a record of what SAS did. This includes any error messages, so you should
	always look at the log after running a SAS program. If the program produced
	any output, it will be saved in a <span class="InputCode">lst</span> file. Both
	of these are text files and can be read using the same text editor you used
	to write the program. They can also be viewed immediately using the <span class="InputCode">more</span> 
  command in Linux.</p>
<p>Normally your program should have the extension <span class="InputCode">.sas</span> 
  (e.g. <span class="InputCode">program.sas</span>) so it is easily recognized 
  as a SAS program (including by SAS itself). SAS will give the <span class="InputCode">log</span> 
  and <span class="InputCode">lst</span> files the same name (e.g. <span class="InputCode">program.log</span> 
  and <span class="InputCode">program.lst</span>).</p>
<p>SAS has its own special format for data sets, which cannot be read by other 
  programs. Fortunately Stat/Transfer makes it easy to convert data sets from 
  one format to another. Stat/Transfer is found on the Winstat servers and on 
  Linux and is very easy to use (see <a href="https://ssc.wisc.edu/sscc/pubs/4-17.htm">Using Stat/Transfer</a> 
  for more information). SAS saves data sets with the extension <span class="InputCode">.sas7bdat</span> 
  (the format has not changed since SAS 7).</p>
<h2><a id="YourFirstSASProgram" name="YourFirstSASProgram"></a>Your First SAS Program</h2>
<p>There's no substitute for actually running a SAS program if you want to see 
  how it works. We'll begin by simply viewing the tables of an existing data 
  set.</p>
<h3>Data Steps and Proc Steps</h3>
<p>SAS programs are made up of distinct steps, and each one is completed before
		 it moves on to the next one. Data steps are written by you. They are
		primarily	
  used for data manipulation (hence the name) though in theory you could do some
		 sorts of analysis with them. Proc steps are pre-written programs made
		available	
  as part of SAS. The code may look similar to a data step in some ways, but
	the code in a proc step is not giving SAS step-by-step instructions to execute.
	All you are really doing is controlling how the proc step runs. We will
	use a few simple procs in the course of this article, but for more details
	see the
		<a href="http://support.sas.com/onlinedoc/912/docMainpage.jsp">SAS documentation</a>.</p>
<p>A step starts with either the word <span class="InputCode">data</span> or the 
  word <span class="InputCode">proc</span>, and ends with the word <span class="InputCode">run;</span>. 
  The <span class="InputCode">run;</span> is often not strictly required, as SAS 
  will assume you want to start a new step when it sees <span class="InputCode">data</span> 
  or <span class="InputCode">proc</span>. However your code will be clearer and 
  easier to understand if you make the end of each step explicit. That may not 
  seem very important the first time you work on a particular program, but when 
  you have to come back to it months later and figure out what you did, you'll 
  quickly see that saving a few keystrokes is far less important than writing 
  clear code. Obviously if you will be sharing this code with anyone else then 
  making it easy to understand is even more important.</p>
<h3>Writing Your Program with a Text Editor</h3>
<p>The time has come to actually write your first SAS program. If you want to 
  use emacs, type</p>
<p class="InputCode">&gt; emacs example1.sas</p>
<p>If you want to use Textpad, start it and immediately save the empty document
	 as <span class="InputCode">Z:\sasclass\example1.sas</span>. 
  This will save it in your <span class="InputCode">sasclass</span> directory
   on the Linux system.</p>
<p>As you proceed, you'll notice that both Textpad and emacs will put different
	words in different colors. Because the file is saved with the <span class="InputCode">.sas</span> 
  extension, it knows you are writing SAS code and tries to make it clearer by
   putting official SAS commands and such in various colors. This can help you
   avoid mistakes.</p>
<h3>Proc Print</h3>
<p>Proc print simply prints the tables of a data set to the <span class="InputCode">lst</span> 
  file. The basic syntax is</p>
<p class="InputCode">proc print data=<span class="Parameter">dataset</span>;<br/>
  run;</p>
<p>All you have to do is specify the data set.</p>
<p>By default SAS will format the output such that it will be centered on a printed 
  page. You can override this behavior by adding</p>
<p class="InputCode">options nocenter;</p>
<p>right before the <span class="InputCode">proc print</span>. This can make it 
  easier to read on the screen. You can also set the line size and page size SAS 
  will use. For example, the following will make your output fit nicely if printed 
  in landscape mode on the SSCC's public printers:</p>
<p class="InputCode">options linesize=122 pagesize=47;</p>
<h3>Using Data Sets</h3>
<p>SAS uses two different types of data sets: temporary and permanent. Temporary 
  data sets disappear when the program is completed. Permanent data sets are written 
  as files on the disk and can be used in later programs (of course they can be 
  deleted like any other file despite the name). To refer to a temporary data 
  set, you simply give its name. To refer to a permanent data set, put the name 
  and optionally the path in single quotes. If you don't specify a path, SAS will 
  look for the data set in your current working directory.</p>
<p>You want to print the tables of <span class="InputCode">ex1.sas7bdat</span>, 
  a permanent SAS data set and one of the files you copied earlier. SAS will assume 
  the <span class="InputCode">.sas7bdat</span> extension, so all you need is:</p>
<p class="InputCode">proc print data='ex1';<br/>
  run;</p>
<p>Type this in your text editor, and then save the file.</p>
<div align="center">
<table>
<tr valign="top">
<td align="center" nowrap="nowrap" valign="top">
<p><strong>Note that </strong></p>
<p class="InputCode">proc print data='ex1';<br/>
						run;</p>
<p><strong>and</strong></p>
<p class="InputCode">proc print data=ex1;<br/>
						run;</p>
<p><strong>Will print completely different data!</strong></p>
</td>
</tr>
</table>
<p align="left">There is an alternative way to reference a permanent data set. 
	It used to be the only way, and many people who learned SAS before the ability 
	to just use quotes was added never switched. The first step is to associate 
	a SAS "library" with a directory on the disk using the <span class="InputCode">libname</span> 
	statement:</p>
<p align="left" class="InputCode">libname <span class="Parameter">library</span>
<span class="Parameter">'directory'</span>;</p>
<p align="left">This command is not part of a proc or data step (it's actually 
	what's called a global option). You can then refer to a SAS data set in that 
	directory as <span class="InputCode"><span class="Parameter">library</span>.<span class="Parameter">file</span></span>. 
	For example:</p>
<p align="left" class="InputCode">libname mydata '/home/r/rdimond/sasclass';</p>
<p align="left" class="InputCode">proc print data=mydata.ex1;<br/>
	run;</p>
<p align="left">There are a few advanced features that only work in the context
  	of a library, and using one could save you some typing if you repeatedly use
  	data sets in a directory other than the current working directory. But to
  	be honest the main reason for knowing about libraries is so you can read other
  	people's code.</p>
<h3 align="left">Running Your Program</h3>
<p align="left">Now that the program is written, you need to run it and view 
	the results. Switch to Linux and type</p>
<p align="left" class="InputCode">&gt; sas example1</p>
<p align="left">You'll know it is done when the next prompt appears. If all 
	went well there will now be two new files in your <span class="InputCode">sasclass</span> 
	directory: <span class="InputCode">example1.log</span> and <span class="InputCode">example1.lst</span>. 
	If <span class="InputCode">example1.lst</span> is missing, it's because there 
	was an error that kept proc print from working--the log will tell you what.</p>
<p align="left">A quick and easy way to view these files is with the <span class="InputCode">more</span> 
	command. Just type </p>
<p align="left" class="InputCode">&gt; more example1.log</p>
<p align="left">and</p>
<p align="left" class="InputCode">&gt; more example1.lst</p>
<p align="left">The disadvantage is the you can't easily scroll back to view
  	text that has already passed by. Thus the better method is to open both files
  	in your text editor.</p>
<p align="left">You should see a tremendously boring data set. If you don't, 
	look at the log to find the error messages, and then examine your program 
	to see what needs to be fixed.</p>
<h3 align="left">Running your Program in the Background</h3>
<p align="left">This job runs so quickly it doesn't really matter how you run
  		 it, but if you have a larger job to run you may want to put it in the
  		background.	
	This means you'll be able to use your shell to do other work while SAS does
  			its thing. To do this, just add an ampersand (<span class="InputCode">&amp;</span>)
  				to the end of the command:</p>
<p align="left" class="InputCode">&gt; sas example1 &amp;</p>
<p align="left">You'll see a message like </p>
<p align="left" class="PREFormat">[1]  Done          
	sas example1</p>
<p align="left">when it is done. You can then view the output as usual. One 
	thing you shouldn't do is start another SAS job while the first one is still 
	running. They'll just end up competing for resources and not running any faster, 
	but they will slow down the server's performance for other users.</p>
</div>
<h3>Data Step Basics</h3>
<p>The basic syntax for a data step is</p>
<p class="InputCode">data <span class="Parameter">output</span>;<br/>
<span class="indent3">set </span><span class="Parameter">input</span>;<br/>
<span class="indent3">{do some stuff}</span><br/>
  run;</p>
<p>where <span class="InputCode">output</span> is the data set where you want 
  to store the results, <span class="InputCode">input</span> is the data set you 
  want to start with, and you'll add various commands to make your <span class="InputCode">output</span> 
  more interesting that your <span class="InputCode">input</span> later.</p>
<p>Note how each line ends with a semicolon (<span class="InputCode">;</span>).
	 In fact SAS doesn't care about lines, but it does demand that you put a
	semicolon at the end of each command. Otherwise it can't tell where one command
	ends and the next one begins. Whenever you find that your program is not
	working, especially if SAS seems to have no clue what you are talking about,
	the first thing to look for is a missing semicolon.</p>
<h3>Variables</h3>
<p>You've already seen how a SAS data set is a matrix where each row is an observation 
  and each column is a variable. SAS has two kinds of variables: numeric and character. 
  SAS will attempt to identify the type of a variable by what you put in it. However, 
  once a variable is created, the type cannot be changed.</p>
<p>You can create or change a variable just by telling SAS what to set it equal 
  to. The general syntax is</p>
<p class="InputCode"><span class="Parameter">var</span>=<span class="Parameter">expression</span>;</p>
<p>where the <span class="Parameter"><span class="InputCode">expression</span></span> 
  can be as simple as a number (<span class="InputCode">x=5;</span>) or include 
  a variety of functions (<span class="InputCode">x=log(exp(5));</span>). See 
  the <a href="https://www.ssc.wisc.edu/sashtml/lgref/z0245852.htm">online SAS 
  documentation</a> for a complete list of available functions and how they work.</p>
<p>There is one special value you should be aware of: missing, stored as a period
	 (<span class="InputCode">.</span>). Since a data set is a matrix, every observation
	  must have some value for each variable. If there is no valid value, SAS
	 stores missing. Any time missing appears in an expression the result will
	 be missing.</p>
<p> Change your program so that it creates a new variable <span class="InputCode">z</span> 
  which is the sum of x and y before printing the results.</p>
<p class="InputCode">data out1;<br/>
<span class="indent3">set 'ex1';</span><br/>
<span class="indent3">z=x+y;</span><br/>
  run;</p>
<p class="InputCode">proc print data=out1;<br/>
  run;</p>
<p>Note that this will store the results in a temporary data set called <span class="InputCode">out1</span>,
	 and the proc print has been changed to print this new data set. Run this
	program and take a look at the results. If you've forgotten, do that by switching
	to Linux and typing</p>
<p class="InputCode">&gt; sas example1</p>
<p>TextPad will notice that the log and output files changed and prompt you to
	reload them. You'll have to tell emacs to get the new versions. Once you
	do, you should see that <span class="InputCode">z</span> is
	always 11. Don't worry, we'll be creating more interesting variables soon.</p>
<h2><a id="AnatomyofaDataStep" name="AnatomyofaDataStep"></a>Anatomy of a Data Step</h2>
<p>Now that you've successfully written a data step, let's take a closer look 
  at how they work. Up to this point, everything we've done has been fairly intuitive 
  and the results have probably been pretty much what you expected. Now we're 
  going to see some surprises. Part of that is because we're going to intentionally 
  abuse SAS--many of the odd behaviors you'll see can be easily avoided just by 
  not trying to do things before the <span class="InputCode">set</span> statement. 
  But by understanding how SAS thinks you'll be able to get it to do things that 
  are not so obvious.</p>
<h3>Compile Phase</h3>
<p>SAS executes a data step in two phases. Most commands are carried out in one
		 phase or the other. A few run in both. In compile phase, SAS checks
		your syntax,	
  determines all variable types, and creates the Program Data Vector. In compile
		 phase all relevant commands are executed exactly once, and the execution
		does	not	depend 
  in any way on your actual data. The data is not even loaded into memory. This
		 means you cannot do something like</p>
<p class="InputCode">if x&gt;5 then drop x;</p>
<p>The <span class="InputCode">drop</span> command tells SAS not to write the 
  variable x to your output data set. But it is executed in compile phase, and 
  at that point SAS has no idea what the values of <span class="InputCode">x</span> 
  are.</p>
<h3>Execute Phase</h3>
<p>In execute phase, your data is loaded one observation at a time, the actual 
  work is done, and the output is written to disk. Execute phase very much depends 
  on the actual data, and can include conditional execution (ifs) and loops. But 
  keep in mind that all this is done after compile phase is complete.</p>
<table align="center" border="3" cellpadding="10" width="">
<tr valign="top">
<td align="center" nowrap="nowrap" valign="top"> <strong>All Compile Phase statements 
	  are completed before Execute Phase begins,<br/>
<em>regardless of the order they're written in!</em></strong><br/> </td>
</tr>
</table>
<h3>Order of Execution</h3>
<p>Once you reach execute phase, SAS will load one observation and execute the 
  entire data step before loading the next observation. So suppose you have a 
  data set with three observations and a data step with three statements. The 
  order of execution will be:</p>
<div align="center">
<table align="center" border="1" cellpadding="3" width="206">
<tr valign="top">
<th scope="col" width="93">Observation</th>
<th scope="col" width="93">Statement</th>
</tr>
<tr align="center" valign="top">
<td>1</td>
<td>1</td>
</tr>
<tr align="center" valign="top">
<td>1</td>
<td>2</td>
</tr>
<tr align="center" valign="top">
<td>1</td>
<td>3</td>
</tr>
<tr align="center" valign="top">
<td>2</td>
<td>1</td>
</tr>
<tr align="center" valign="top">
<td>2</td>
<td>2</td>
</tr>
<tr align="center" valign="top">
<td>2</td>
<td>3</td>
</tr>
<tr align="center" valign="top">
<td>3</td>
<td>1</td>
</tr>
<tr align="center" valign="top">
<td>3</td>
<td>2</td>
</tr>
<tr align="center" valign="top">
<td>3</td>
<td>3</td>
</tr>
</table>
</div>
<h3>The Program Data Vector</h3>
<p>The program data vector is SAS's work space. This is where an observation is 
  stored while it is being worked on. Think of it as a matrix, but there is one 
  row for each variable, and each column gives information about that variable. 
  This includes the variable type and several "flags" that tell SAS 
  how to process that variable. Below is an example of what a PDV looks like. 
  We will discuss what all the various items mean in time.</p>
<table align="center" border="1" cellpadding="3" width="716">
<tr valign="top">
<th scope="col" width="92">Name</th>
<th scope="col" valign="top" width="92">Type</th>
<th scope="col" width="92">Length</th>
<th scope="col" width="92">Retain?</th>
<th scope="col" width="92">Missing Protect?</th>
<th scope="col" width="92">Keep?</th>
<th scope="col" width="94">Value</th>
</tr>
<tr align="center" valign="top">
<td class="InputCode">x</td>
<td>Numeric</td>
<td>8</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>1</td>
</tr>
<tr align="center" valign="top">
<td class="InputCode">z</td>
<td>Numeric</td>
<td>8</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>.</td>
</tr>
</table>
<p>SAS creates the PDV during compile phase and sets all but the value at that 
  time. During execute phase the only attribute that can be changed is the value--it 
  wouldn't make sense to have <span class="InputCode">x</span> be numeric for 
  some observations and character for others, for example.</p>
<p>You should also note that the PDV only has room for one observation. When
	observation  two is loaded, SAS has no idea what is contained in observation
	one or observation  three. This used to be one of SAS's strengths, as it
	required very little memory to work with even the largest data sets. But memory
	is plentiful now, and you'll see that it takes some work to get around this
	in some situations. If your plans involve lots of calculations across observations
	(individuals living in households, for example) you should consider learning
	to use proc sql (not covered in this article) or switching to Stata.</p>
<h3>Implicit Code</h3>
<p>A key to understanding SAS is understanding what it adds to your data steps. 
  This implicit code is needed to make your explicit code work, but you need to 
  make sure it is doing what you want.</p>
<p>Suppose you write a data step that says:</p>
<p class="InputCode">data second;<br/>
<span class="indent3">set 'first';</span><br/>
  run; </p>
<p> This simply creates a temporary copy (<span class="InputCode">second</span>) 
  of the permanent data set <span class="InputCode">first</span>. I'll describe 
  what SAS actually does in pseudo-code:</p>
<p><em><strong>Top of Data Step</strong></em><br/>
<span class="indent3">Set each variable to missing if its Retain flag is set 
  to No.</span><br/>
<em><strong>Set Statement</strong></em><br/>
<span class="indent3">If there are no more observations in <span class="InputCode">first.sas7bdat</span>,
   go to <em><strong>End of Data Step</strong></em></span><br/>
<span class="indent3">Else read an observation</span><br/>
<em><strong>End of Code</strong></em><br/>
<span class="indent3">Write each variable to temporary data set <span class="InputCode">second</span> 
  if its Keep flag is set to Yes</span><br/>
<span class="indent3">Go to <em><strong>Top of Data Step</strong></em></span><br/>
<em><strong>End of Data Step</strong></em></p>
<p>Note the importance of the <span class="InputCode">set</span> statement. The 
  <span class="InputCode">set</span> statement is one of the few commands that 
  run in both compile and execute phase. In compile phase, it tells SAS to prepare 
  a place in the PDV for all the variables in the input data set. In execute phase, 
  it is the set command that actually loads an observation. If you put any execute-phase 
  code before the <span class="InputCode">set</span> statement, when that code 
  executes all the variables will either be missing or left over from the previous 
  observation. Finally, it is the <span class="InputCode">set</span> statement 
  that determines when the data set ends. This means that code before the <span class="InputCode">set</span> 
  statement will be executed one last time after the final observation has been 
  written to the output data set.</p>
<h3>The Retain Flag</h3>
<p>The Retain flag is used to prevent a variable from being reset to missing
		at  the top of the data step. This makes it a vital tool for passing
		information	
  from one observation to another. Note however, that information can only move
		 forward (without using tricks that are beyond the scope of this article).
		
  With careful use of the Retain flag, it is possible to store information from
		 observation one until observation two can use it. But observation three
		will still be	
  unknown.</p>
<p>The Retain flag is automatically set to yes for all variables that come from 
  the input data set. For new variables, you can set it using the <span class="InputCode">retain</span> 
  statement.</p>
<p class="InputCode">retain x;</p>
<p>will set the Retain flag to yes for the variable <span class="InputCode">x</span>. 
  You can also set an initial value:</p>
<p class="InputCode">retain x 5;</p>
<p>This will set the Retain flag to yes and set <span class="InputCode">the value
				of x</span> 
  to 5 in compile phase before any observations are read.</p>
<p>To see how this all works, go back to your program and change it to the following:</p>
<p class="InputCode">data out1;<br/>
<span class="indent3">a=x;</span><br/>
<span class="indent3">b=x+z;</span><br/>
<span class="indent3">set 'ex1';</span><br/>
<span class="indent3">z=x+y;</span><br/>
  run;</p>
<p class="InputCode">proc print data=out1;<br/>
  run;</p>
<p>Save it, run it, and look at the output. You're probably in for a surprise:</p>
<pre>
Obs    a     x    b     z     y

  1    .     1    .    11    10
  2    1     2    .    11     9
  3    2     3    .    11     8
  4    3     4    .    11     7
  5    4     5    .    11     6
  6    5     6    .    11     5
  7    6     7    .    11     4
  8    7     8    .    11     3
  9    8     9    .    11     2
 10    9    10    .    11     1
</pre>
<p>At first glance, this looks crazy. But it's perfectly logical--if you think 
  like SAS. Take a moment and try to figure it out yourself before reading further.</p>
<p>The variable <span class="InputCode">a</span> is set equal to <span class="InputCode">x</span>, 
  but before the <span class="InputCode">set</span> statement. Thus the first 
  time it executes, no observation has been loaded and <span class="InputCode">x</span> 
  is missing. After setting <span class="InputCode">a</span> to missing, SAS proceeds 
  to the <span class="InputCode">set</span> statement and loads the first observation, 
  so <span class="InputCode">x</span> is 1. When the other code is complete, SAS 
  then goes to the top of the data set. Because x came from the input data set, 
  its Retain flag is set to yes and <span class="InputCode">x</span> stays 1. 
  So when SAS sees <span class="InputCode">a=x;</span> for the second time, <span class="InputCode">a</span> 
  gets 1. Only after <span class="InputCode">a</span> is set does the second observation 
  (<span class="InputCode">x=2</span>) get loaded. This pattern continues for 
  all the rest of the observations, so <span class="InputCode">a</span> is always 
  one observation behind.</p>
<p>Next consider <span class="InputCode">b</span>. The first time through the
		 data step, both <span class="InputCode">x</span> and <span class="InputCode">z</span> 
  are missing, so <span class="InputCode">b</span> is missing. Then we hit the 
  <span class="InputCode">set</span> statement and the first observation is loaded
   (<span class="InputCode">x=1</span>), and then z is calculated (<span class="InputCode">z=11</span>).
    But then we go to the top of the data step. The Retain flag for <span class="InputCode">x</span> 
  is set to yes automatically, but <span class="InputCode">z</span> does not
  come from the input data set and thus its Retain flag is set to no. So when
  we come
  to <span class="InputCode">b=x+z;</span>
<span class="InputCode">x</span> is still 1, but <span class="InputCode">z</span> 
  is missing. As a result <span class="InputCode">b</span> is also set to missing
   (anything + missing = missing), and this continues for all observations.</p>
<p>Note the order in which the variables are listed: <span class="InputCode">a</span>,<span class="InputCode">x</span>,<span class="InputCode">b</span>,<span class="InputCode">z</span>,<span class="InputCode">y</span>. 
  This is not random--it is the order in which SAS encounters the variables in 
  the code. In compile phase, when SAS sees <span class="InputCode">a=x;</span> 
  it realizes it will need variables a and x, and creates entries for them in 
  the PDV. It then adds <span class="InputCode">b</span> and <span class="InputCode">z</span> 
  when it sees <span class="InputCode">b=x+z;</span>. Occasionally it is useful 
  to have the variables in a certain order. You can do it by controlling the order 
  in which SAS sees them. For example, if we wanted to make the order <span class="InputCode">a</span>,<span class="InputCode">b</span>,<span class="InputCode">x</span>,<span class="InputCode">y</span>,<span class="InputCode">z</span>, 
  you could add</p>
<p class="InputCode">retain a b x y z;</p>
<p>as the first line of the data step. Of course in this case that would change 
  the results for <span class="InputCode">b</span> (how?). It's more common that 
  it wouldn't change anything, but there are alternative commands that really 
  won't change anything.</p>
<h3>The Sum Operator</h3>
<p>SAS gives you an easy shortcut for sums; the sum operator. The syntax is simply:</p>
<p class="InputCode"><span class="Parameter">var</span>+<span class="Parameter">expression</span>;</p>
<p>Note that there is no equals sign, which may bother you if you have a programming
		 background (though C++ and Java both have something kind of similar).
		The	expression 
  will be added to the variable, almost as if you had written</p>
<p class="InputCode"><span class="Parameter">var</span>=<span class="Parameter">var</span>+<span class="Parameter">expression</span>;</p>
<p>But if you use the sum operator, SAS will do several things for you automatically. 
  First, it will set the Retain flag for the variable to yes, and give it an initial 
  value of zero.</p>
<p>It will also set the Missing Protect flag to yes. Normally if you add a missing 
  value to anything the result is a missing value. But if the Missing Protect 
  flag is set to yes, missing values are treated like zeroes. You'll have to decide 
  if this is appropriate for your analysis or not. But without this protection, 
  a single missing value will make the sum missing for all subsequent observations.</p>
<p>To see the sum operator in action, create a new file using your text editor, 
  and save it as <span class="InputCode">example2.sas</span>:</p>
<p class="InputCode">data out2;<br/>
<span class="indent3">set 'ex1';</span><br/>
<span class="indent3">count1+1;</span><br/>
<span class="indent3">count2=count2+1;</span><br/>
<span class="indent3">retain count3 0;</span><br/>
<span class="indent3">count3=count3+1;</span><br/>
<span class="indent3">count4+junk;</span><br/>
<span class="indent3">retain count5 0;</span><br/>
<span class="indent3">count5=count5+junk;</span><br/>
  run;</p>
<p><span class="InputCode">proc print data=out2;<br/>
  run;</span><br/>
</p>
<p>Run it, and you should get the following output:</p>
<pre>Obs     x     y    count1    count2    count3    count4    junk    count5

  1     1    10       1         .         1         0        .        .  
  2     2     9       2         .         2         0        .        .  
  3     3     8       3         .         3         0        .        .  
  4     4     7       4         .         4         0        .        .  
  5     5     6       5         .         5         0        .        .  
  6     6     5       6         .         6         0        .        .  
  7     7     4       7         .         7         0        .        .  
  8     8     3       8         .         8         0        .        .  
  9     9     2       9         .         9         0        .        .  
 10    10     1      10         .        10         0        .        .  
</pre>
<p>We've added five new counting variables, that add up things in various ways. 
  Let's look at each in turn.</p>
<p><span class="InputCode">count1</span> illustrates the normal sum operator. 
  For each observation we add one to <span class="InputCode">count1</span>, so 
  it ends up containing the observation number.</p>
<p><span class="InputCode">count2</span> looks like it should do the exact same 
  thing. However, we did not use the sum operator. This means that the Retain flag is not set to yes, nor is the variable initialized. As a result we are 
  adding 1 to a missing value every time, so the result is always missing.</p>
<p><span class="InputCode">count3</span> is retained and properly initialized, 
  so in this case it does work the same as the sum operator.</p>
<p><span class="InputCode">count4</span> and <span class="InputCode">count5</span> 
  illustrate the effect of the Missing Protect flag. The variable <span class="InputCode">junk</span> 
  is never set to anything, so it is always missing. Thus even 
  though <span class="InputCode">count5</span> is retained and initialized just 
  like <span class="InputCode">count3</span>, when we add <span class="InputCode">junk</span> 
  to it it becomes missing. Because <span class="InputCode">count4</span> uses 
  the sum operator, its Missing Protect flag is set to yes. Thus when junk is 
  added to it, it is treated as zero, and <span class="InputCode">count4</span> 
  is unchanged. Thus it never changes from its initial value of zero (which is 
  also set automatically just because <span class="InputCode">count4</span> uses 
  the sum operator).</p>
<h3>The Keep Flag</h3>
<p>The Keep flag determines whether or not a variable is written to the output 
  data set. It is not removed from the PDV. This means you can continue to use 
  that variable for the duration of the current data step. However if the Keep 
  flag is set to no, that variable will not appear in your output.</p>
<p>The Keep flag can be set using either the <span class="InputCode">keep</span> 
  command or the <span class="InputCode">drop</span> command.</p>
<p class="InputCode">keep x;</p>
<p>will set the Keep flag for <span class="InputCode">x</span> to yes, and the 
  Keep flag for all other variables to no. <span class="InputCode">x</span> will 
  be the only variable in your output data set.</p>
<p class="InputCode">drop y z;</p>
<p>will set the Keep flag for <span class="InputCode">y</span> and <span class="InputCode">z</span> 
  to no, and leave the Keep flag for all other variables unchanged. <span class="InputCode">y</span> 
  and <span class="InputCode">z</span> will not appear in the output data set. 
  Note that it is just fine if <span class="InputCode">drop y z;</span> is followed 
  by <span class="InputCode">x=y+z;</span> since <span class="InputCode">y</span> 
  and <span class="InputCode">z</span> are still in the PDV and can still be used.</p>
<p>Here's a puzzle for you. Consider the following data step:</p>
<p class="InputCode">data out;<br/>
<span class="indent3">set 'ex1';</span><br/>
<span class="indent3">keep count1;</span><br/>
<span class="indent3">count1+1;</span><br/>
  run;</p>
<p>Assuming <span class="InputCode">count1</span> does not exist until it is defined 
  here, does it make any difference at all what data set is used for input? Could 
  we replace <span class="InputCode">'ex1'</span> with <span class="InputCode">'2000USCensus'</span> 
  and get the exact same results in <span class="InputCode">out</span>?</p>
<p><span class="InputCode">count1</span> is the only variable that will be written 
  to <span class="InputCode">second</span>. Since we're assuming it is a new variable 
  all the variables from the input data set will be gone. So the values of the 
  variables from the input data set don't matter. However, it is the <span class="InputCode">set</span> 
  statement that determines when the data step is finished. So <span class="InputCode">out</span> 
  will have the same number of observations as the input data set. Presumably 
  a data set of US census information will have a lot more observations than the 
  ten we have in our simple little example data set, so <span class="InputCode">out</span> 
  would in fact look very different. Incidentally, this is why <span class="InputCode">example2.sas</span> 
  continued to load <span class="InputCode">ex1</span> even though we didn't care 
  about the variables it contained: we needed some observations so we could observe 
  the behavior of the <span class="InputCode">count</span> variables. </p>
<h3>Subsetting If</h3>
<p><span class="InputCode">Keep</span> and <span class="InputCode">drop</span> 
  allow you to control what variables (columns) make it into your output data 
  set. A subsetting if allows you to control what observations (rows) make it. 
  The syntax is simply</p>
<p class="InputCode">if <span class="Parameter">condition</span>;</p>
<p>The implicit "then" is usually described as "keep this observation" 
  and if the condition is not true then delete it. However, this is somewhat deceptive. 
  What really happens is that if the condition is true, the data step proceeds 
  as usual. If it is not, then SAS jumps back to the top of the data step without 
  writing any output. However, all code before the subsetting if is still executed. 
  Consider the following example:</p>
<p class="InputCode">data out3;<br/>
<span class="indent3">set 'ex1';</span><br/>
<span class="indent3">count1+1;</span><br/>
<span class="indent3">if x&gt;5;</span><br/>
<span class="indent3">count2+1;</span><br/>
  run;</p>
<p><span class="InputCode">proc print data=out3;<br/>
  run;</span><br/>
</p>
<p>Put this in its own file (<span class="InputCode">example3.sas</span>) and 
  run it. The output should look like this:</p>
<pre>Obs     x    y    count1    count2

 1      6    5       6         1  
 2      7    4       7         2  
 3      8    3       8         3  
 4      9    2       9         4  
 5     10    1      10         5  
</pre>
<p>So why are <span class="InputCode">count1</span> and <span class="InputCode">count2</span> 
  so different? Both are initialized to zero because they use the sum operator. 
  Then the first observation is loaded (x=1), and <span class="InputCode">count1</span> 
  is increased by 1. However, because <span class="InputCode">x</span> is not 
  greater than 5, when SAS hits the subsetting if this observation is not written 
  to the output data set, nor is <span class="InputCode">count2</span> increased 
  by one. Instead SAS jumps back to the start of the data step, loading the second 
  observation and increasing <span class="InputCode">count1</span> by one again. 
  This continues until the sixth observation (<span class="InputCode">x=6</span>) 
  is loaded and <span class="InputCode">count1</span> increased to 6. At this 
  point <span class="InputCode">x</span> is greater than 5 and SAS proceeds through 
  the subsetting if. Now finally <span class="InputCode">count2</span> increases 
  from zero to one, and for the first time the observation is written to the output 
  data set. As the data step proceeds, <span class="InputCode">count1</span> and 
  <span class="InputCode">count2</span> both continue to increase, but <span class="InputCode">count1</span> 
  is always five ahead.</p>
<h3>Where</h3>
<p>The <span class="InputCode">where</span> statement provides a more efficient
	method of subsetting. If you change <span class="InputCode">if x&gt;5;</span> to
	<span class="InputCode">where x&gt;5;</span> then SAS will check to see if x&gt;5
	in the next observation before it even loads it. If it is not, SAS moves
	on to the next observation.</p>
<p>Change <span class="InputCode">if x&gt;5;</span> to <span class="InputCode">where
		x&gt;5;</span> in
	your program and then run it again. This time <span class="InputCode">count1</span> is
	the same as <span class="InputCode">count2</span>. That's because SAS didn't
	even load the first five observations and thus didn't increment <span class="InputCode">count1</span>.</p>
<p>If you need to get some information out of the observations you drop before
	you drop them, a subsetting <span class="InputCode">if</span> will allow you
	to do that. Otherwise <span class="InputCode">where</span>	is usually the better
	method. </p>
<h3>_N_</h3>
<p>While we're talking about counters, SAS has one that is built in. <span class="InputCode">_N_</span> 
  is an internal variable that starts at one and is increased every time SAS goes 
  back to the top of the data step. Thus it is almost the observation number. 
  But consider what happens after the last observation is written: SAS goes back 
  to the top of the data step and _N_ is incremented again, so now it is one greater 
  than the number of observations. SAS stops only when it reaches the set statement 
  and realizes there are no more variables.</p>
<h2><a></a><a id="ProgramFlow" name="ProgramFlow"></a>Program Flow</h2>
<p>We've already seen how a subsetting if interrupts the flow of your program, 
  sending SAS back to the top of the data step if a condition is not met. But 
  you can also control the flow explicitly, executing some of your code many times 
  or not at all, depending on your data.</p>
<h3>If</h3>
<p>The basic syntax for <span class="InputCode">if</span> is just</p>
<p class="InputCode">if <span class="Parameter">condition</span> then <span class="Parameter">statement</span>;</p>
<p>The <span class="Parameter">statement</span> will be executed only if the <span class="Parameter">condition</span> 
  is true. For example</p>
<p class="InputCode">if x=5 then y=1;</p>
<p>Note that the equals sign has two distinct meanings here. In the first case 
  it is a test: is <span class="InputCode">x</span> equal to 5? In the second 
  case it is a command: make <span class="InputCode">y </span>equal to 1. Make 
  sure you know which one you mean to use. There are several other logical operators:</p>
<table align="center" border="1" width="206">
<tr valign="top">
<th scope="col" width="97">Symbol</th>
<th scope="col" width="97">Meaning</th>
</tr>
<tr align="center" valign="top">
<td class="InputCode">=</td>
<td valign="top">equal</td>
</tr>
<tr align="center" valign="top">
<td valign="top"><span class="InputCode">^= </span>or<span class="InputCode"> 
	  ~=</span></td>
<td>not equal</td>
</tr>
<tr align="center" valign="top">
<td class="InputCode" valign="top">&gt;</td>
<td>greater than</td>
</tr>
<tr align="center" valign="top">
<td class="InputCode" valign="top">&lt;</td>
<td>less than</td>
</tr>
<tr align="center" valign="top">
<td class="InputCode" valign="top">&amp;</td>
<td>logical AND</td>
</tr>
<tr align="center" valign="top">
<td valign="top"><span class="InputCode">| </span>or<span class="InputCode"> 
	  !</span></td>
<td>logical OR</td>
</tr>
</table>
<p>If you're used to other languages, note that <span class="InputCode">!=</span> 
  cannot be used for not equals. The logical AND and OR connect two conditions. 
  Logical AND means the result is true only if both conditions are true; logical 
  OR means the result is true if either condition is true. For example, suppose 
  x=5 and y=3.</p>
<p class="InputCode">if x=5 &amp; y=2</p>
<p>will be false--the first condition is true but not the second.</p>
<p class="InputCode">if x=5 | y=2</p>
<p>will be true.</p>
<p>Often logical OR is  used to see if a variable takes on one of several 
  values, but SAS has an easier alternative:</p>
<p class="InputCode">if x in(1,3,5)</p>
<p>will be true if <span class="InputCode">x</span> is 1, 3, or 5. You could do 
  the same thing with</p>
<p class="InputCode">if x=1 | x=3 | x=5</p>
<p>but this is longer to type and harder to read.</p>
<h3>Else</h3>
<p>An <span class="InputCode">else</span> tells SAS what to do if the condition 
  is not true. The syntax is:</p>
<p class="InputCode">if <span class="Parameter">condition</span> then <span class="Parameter">statement1</span>;<br/>
  else <span class="Parameter">statement2</span>;</p>
<p>If the <span class="Parameter">condition</span> is true, then <span class="Parameter">statement1</span> 
  will execute. If it is not, <span class="Parameter">statement2</span> will execute. 
  Note that <span class="Parameter">statement2</span> can also include an if, 
  which allows you to deal with many possibilities. For example,</p>
<p class="InputCode">if x&gt;0 then positive=1;<br/>
  else if x&lt;0 then negative=1;<br/>
  else zero=1;</p>
<p>Here <span class="InputCode">positive</span>, <span class="InputCode">negative</span>, 
  and <span class="InputCode">zero</span> are indicator variables, which will 
  contain a one if x is respectively positive, negative, or zero.</p>
<h3>Do Groups</h3>
<p>But what if you want to do more than one thing if a condition is true? Fortunately 
  you don't have to write the same if over and over. Instead you can group statements 
  such that SAS will treat them like one. A do group begins with <span class="InputCode">do;</span> 
  and ends with <span class="InputCode">end;</span>.</p>
<p class="InputCode">if x&gt;5 then do;<br/>
<span class="indent3">y=3;</span><br/>
<span class="indent3">z=1;</span><br/>
  end;</p>
<p>Note the indentation: SAS doesn't care but it will make it much easier for 
  you to figure out what is going on.</p>
<h3>Do Loops</h3>
<p>Do loops (for loops in most other languages) actually have very little to
	do with do groups, other than using one. They are an easy way to do something
	a  certain number of times. The syntax is </p>
<p class="InputCode">do <span class="Parameter">var</span>=<span class="Parameter">i</span> 
  to <span class="Parameter">j</span>;<br/>
<span class="indent3">{do stuff}</span><br/>
  end;</p>
<p><span class="Parameter">var</span> is just a utility variable called a loop 
  counter. It keeps track of how many times you've done the loop. Normally it 
  has no use whatsoever once the loop is done, but remember to drop it unless 
  you really want it to be in the output data set. <span class="InputCode">i</span> 
  and <span class="InputCode">j</span> are integers, with <span class="InputCode">i</span>&lt;<span class="InputCode">j</span> 
  if you want the loop to actually do anything.</p>
<p>When SAS first encounters your do loop, it sets the loop counter to <span class="InputCode">i</span>. 
  It then executes commands until it hits the corresponding <span class="InputCode">end;</span>. 
  When it sees that, it increases the loop counter by one. If at that point the 
  counter is greater than <span class="InputCode">j</span>, it proceeds. If not, 
  it goes back to the <span class="InputCode">do</span> statement.</p>
<p>Try the following (<span class="InputCode">example4.sas</span>):</p>
<p class="InputCode">data out4;<br/>
<span class="indent3">do i=1 to 10;</span><br/>
<span class="indent3"><span class="indent3">x=i;</span></span><br/>
<span class="indent3">end;</span><br/>
  run;</p>
<p class="InputCode">proc print data=out4;<br/>
  run;</p>
<p>Note that there is no input data set, and no <span class="InputCode">set</span> 
  statement. That means the code is executed just once, except for what's in the 
  loop. That also means just one observation is written to the output. But why 
  is <span class="InputCode">i</span> different from <span class="InputCode">x</span>?</p>
<pre>Obs     i     x
 1     11    10</pre>
<p>Recall that the loop counter is incremented at the end of the loop, and then 
  SAS decides whether to go back or not. So when <span class="InputCode">i</span> 
  was 10, SAS repeated the loop, and set <span class="InputCode">x</span> to 10. 
  Then <span class="InputCode">i</span> was increased to 11, SAS realized the 
  loop was done, and it proceeded to the end of the data step. That's when the 
  current values of <span class="InputCode">x</span> and <span class="InputCode">i</span> 
  were written to the output.</p>
<h3>Output</h3>
<p>Normally SAS inserts an implicit command at the end of the data step to write 
  the current tables of the PDV to the output data set. However, you can take 
  control of this process with the <span class="InputCode">output</span> command. 
  The output command tells SAS to write the PDV to the output data set immediately. 
  Furthermore, if you include an explicit output command, SAS will not add an 
  implicit one to the end of the data step. This allows you to write an observation 
  more than once, or not at all.</p>
<p>As an example, add an output statement inside the do loop of your last program 
  (<span class="InputCode">example5.sas</span>):</p>
<p class="InputCode">data out5;<br/>
<span class="indent3">do i=1 to 10;</span><br/>
<span class="indent3"><span class="indent3">x=i;</span></span><br/>
<span class="indent3"><span class="indent3">output;</span></span><br/>
<span class="indent3">end;</span><br/>
  run;</p>
<p class="InputCode">proc print data=out5;<br/>
  run;</p>
<p>We now have ten separate observations. Furthermore, the final value of <span class="InputCode">i</span> 
  changed. Why?</p>
<pre>Obs     i     x

  1     1     1
  2     2     2
  3     3     3
  4     4     4
  5     5     5
  6     6     6
  7     7     7
  8     8     8
  9     9     9
 10    10    10
</pre>
<p>Previously, when <span class="InputCode">i</span> was set to 11 the do loop 
  ended, SAS reached the end of the data step, and the observation was written. 
  Now that you have included an explicit <span class="InputCode">output</span> 
  statement, the implicit output at the end of the data step is removed. <span class="InputCode">i</span> 
  is still set to 11, but we never see it because it only happens after the 
  last <span class="InputCode">output</span> statement.</p>
<h3>Arrays</h3>
<p>One of the most common uses for do loops is to do the same thing to many variables. 
  However, to do this we need a way to refer to a collection of variables by number. 
  SAS does this by defining arrays. An array in SAS is different from any other 
  programming language. It is not used to store information; it is not a variable. 
  Rather, it is another way of referring to existing variables--a way that is 
  highly convenient for do loops.</p>
<p>To define an array, the syntax is</p>
<p class="InputCode">array <span class="Parameter">name</span>(<span class="Parameter">n</span>) 
  <span class="Parameter">variable1</span> <span class="Parameter">variable2</span>...;</p>
<p>For example:</p>
<p class="InputCode">array vars(3) x y z;</p>
<p>Once we've done this, <span class="InputCode">vars(1)</span> is just another 
  name for <span class="InputCode">x</span>, <span class="InputCode">vars(2)</span> 
  for <span class="InputCode">y</span> and <span class="InputCode">vars(3)</span> 
  for <span class="InputCode">z</span>.</p>
<p>Let's double the values of all the variables in our data set (<span class="InputCode">example6.sas</span>).</p>
<p class="InputCode">proc print data='ex1';<br/>
  run;</p>
<p class="InputCode">data out6;<br/>
<span class="indent3">set 'ex1';</span><br/>
<span class="indent3">array vars(2) x y;</span><br/>
<span class="indent3">do i=1 to 2;</span><br/>
<span class="indent3"><span class="indent3">vars(i)=vars(i)*2;</span></span><br/>
<span class="indent3">end;</span><br/>
  run;</p>
<p class="InputCode">proc print data=out6;<br/>
  run;</p>
<p>Now in this case setting up the array and the do loop was a good bit more work 
  than just writing</p>
<p class="InputCode">x=x*2;<br/>
  y=y*2;</p>
<p>But suppose you had a hundred variables--then the advantage would be obvious.</p>
<p>Note that array definitions only last for the duration of the data step. 
  But they are easy to copy and paste from one data step to another.</p>
<h3>Variable Lists</h3>
<p>On the other hand, writing out the names of all one hundred variables would 
  get pretty tedious. Fortunately SAS has some shortcuts for writing out lists 
  of variables. They can be used in more than just array definitions (you can 
  use them in <span class="InputCode">retain</span>, <span class="InputCode">drop</span>, 
  and <span class="InputCode">keep</span> statements for example), but they are 
  particularly useful in array definitions.</p>
<p>If you have variables with some sort of stem and then a number (<span class="InputCode">var1</span>, 
  <span class="InputCode">var2</span>, <span class="InputCode">var3</span>, etc.) 
  you can use a number list. Just put a dash between the first and last variables 
  (<span class="InputCode">var1-var3</span>).</p>
<p>You can always use a position list. Suppose you had variables <span class="InputCode">a</span>, 
  <span class="InputCode">b</span>, <span class="InputCode">c</span>, <span class="InputCode">x</span>, 
  <span class="InputCode">y</span>, <span class="InputCode">z</span>, in that 
  order. You could refer to them all by putting a double dash between <span class="InputCode">a</span> 
  and <span class="InputCode">z</span> (<span class="InputCode">a--z</span>). 
  Just remember that the variables must be in the proper order for this to work--recall 
  our discussion of how SAS decides what order to put variables in.</p>
<p>There are also several special purpose lists you can designate by name. These 
  include <span class="InputCode">_all_</span> for all variables, <span class="InputCode">_numeric_</span> 
  for all numeric variables, and <span class="InputCode">_character_</span> for 
  all character variables.</p>
<p>Finally you can use a wildcard. The colon (<span class="InputCode">:</span>) 
  will match anything, or nothing. For example, <span class="InputCode">var:</span> 
  would include <span class="InputCode">var</span>, <span class="InputCode">var1</span>, 
  <span class="InputCode">var2</span>, <span class="InputCode">variable</span>, 
  <span class="InputCode">variety</span>, and anything else that starts with <span class="InputCode">var</span>.</p>
<p>These kinds of shortcuts can sometimes make it less than obvious just how many 
  elements your array has. In your array definition you can just put an asterisk 
  (<span class="InputCode">*</span>) in the parenthesis and SAS will give the 
  array as many elements as there are variables in your list. You can also use 
  the <span class="InputCode">dim() </span>function to find out how many elements 
  an array has, for example to figure out how many times a do loop needs to execute. 
  Try the following changes (<span class="InputCode">example7.sas</span>--just 
  save <span class="InputCode">example6.sas</span> with the new file name and 
  then make the changes):</p>
<p class="InputCode">proc print data='ex1';<br/>
  run;</p>
<p class="InputCode">data out7;<br/>
<span class="indent3">set 'ex1';</span><br/>
<span class="indent3">array vars(*) _all_;</span><br/>
<span class="indent3">do i=1 to dim(vars);</span><br/>
<span class="indent3"><span class="indent3">vars(i)=vars(i)*2;</span></span><br/>
<span class="indent3">end;</span><br/>
  run;</p>
<p><span class="InputCode">proc print data=out7;<br/>
  run;</span><br/>
</p>
<p>Note that <span class="InputCode">i</span> was not doubled. Why?</p>
<pre>Obs     x     y    i

  1     2    20    3
  2     4    18    3
  3     6    16    3
  4     8    14    3
  5    10    12    3
  6    12    10    3
  7    14     8    3
  8    16     6    3
  9    18     4    3
 10    20     2    3</pre>
<p>Remember that SAS works through the code line by line in compile phase. So 
  when it saw the array definition, it had not yet seen any reference to the variable 
  <span class="InputCode">i</span>. Thus <span class="InputCode">i</span> was 
  not yet in the PDV, and <span class="InputCode">_all_</span> consisted solely 
  of <span class="InputCode">x </span>and <span class="InputCode">y</span>. This 
  can be a good thing--it can be really confusing if you're trying to loop over 
  an array that contains the loop counter.</p>
<p>A puzzle for you: if <span class="InputCode">i</span> had been defined before 
  the array (say, with a <span class="InputCode">retain</span> statement), what 
  value would it have in the output data set?</p>
<p>The answer is 7. Can you see why?</p>
<h3>By, First, and Last</h3>
<p>Often data sets have some sort of group structure. For example, individuals
	 may live in households. To be honest, SAS data steps don't handle this kind
	 of situation very well, because they only have one observation in memory
	at a time. If you are planning to work with this kind of data, you should
	consider learning either proc sql or Stata. But the tools SAS does have are
	important to learn.</p>
<p>The first step is to identify what makes up a group. You do this with the <span class="InputCode">by</span> 
  statement. The syntax is just:</p>
<p class="InputCode">by <span class="Parameter">variable1</span> <span class="Parameter">variable2</span>...;</p>
<p>For example, if <span class="InputCode">hhid</span> was a household id,</p>
<p class="InputCode">by hhid;</p>
<p>This allows you to use first and last. These are conditions that will be true 
  if SAS currently has the first or last observation of the group in memory. The 
  syntax is <span class="InputCode">first.</span><span class="Parameter">variable</span> 
  or <span class="InputCode">last.</span><span class="Parameter">variable</span>, 
  as in</p>
<p class="InputCode">if first.hhid then <span class="Parameter">(do something)</span>;<br/>
  else if last.hhid then <span class="Parameter">(do something else)</span>;</p>
<p>There is one additional requirement for using <span class="InputCode">by</span>, 
  and that is the data must be sorted by the <span class="InputCode">by</span> 
  variables. Which leads us to...</p>
<h3>Proc Sort</h3>
<p>Proc sort is a utility proc that sorts data. The syntax is </p>
<p class="InputCode">proc sort data=<span class="Parameter">input</span> out=<span class="Parameter">output</span>;<br/>
<span class="indent3">by <span class="Parameter">variables</span>;</span><br/>
  run;</p>
<p>where <span class="Parameter">input</span> is an existing data set and <span class="Parameter">output</span> 
  is a data set that will be created. For example,</p>
<p class="InputCode">proc sort data=first out=second;<br/>
<span class="indent3">by x;</span><br/>
  run;</p>
<p>If you list more than one variable, the data set will first be sorted by the 
  first variable in the list, then ties will be sorted by the second variable, 
  etc. If you need to sort in descending order, just add the word <span class="InputCode">descending</span> 
  before that variable. For example:</p>
<p class="InputCode">proc sort data=first out=second;<br/>
<span class="indent3">by x descending y;</span><br/>
  run;</p>
<h2><a id="ExampleWorkingwithHouseholds" name="ExampleWorkingwithHouseholds"></a>Example: Working with Households</h2>
<p>We're now going to do an example. As we work through it, try to 
  think of your own solutions, but don't be discouraged if you nothing workable 
  comes to mind. Learning to think like SAS is important but it takes time. As you'll see later there's an easier way to do this task using a proc, but it's important to know how to do such things yourself for those times when you need to calculate something that isn't built into a proc.</p>
<p>Start by taking a look at the tables of <span class="InputCode">ex2.sas7bdat</span>. 
  You should have no problem writing a program that will allow you to do so, so 
  try before you read on.</p>
<p>The solution, of course, is just a proc print:</p>
<p class="InputCode">proc print data='ex2';<br/>
  run;</p>
<p>We have here a data set of individuals, each living in households. You are 
  given the income of each individual, but your task is to create a new variable 
  containing the total household income of each household. Before proceeding, 
  try to describe how to do this in English. The trick is to remember that SAS 
  only knows about one observation at a time.</p>
<p>The basic procedure will be to add up the income from each individual. But 
  this means the calculation won't be complete until we reach the last individual 
  in each household. So the second step will be to reverse the order of the observations 
  and then take that correct value of household income from the last observation 
  and copy it to all the other observations (remember information can only move 
  forwards).</p>
<p>As a first try at the first part, try the following.</p>
<p class="InputCode">data step1;<br/>
<span class="indent3">set 'ex2';</span><br/>
<span class="indent3">hhinc+income;</span><br/>
  run;</p>
<p class="InputCode">proc print data=step1;<br/>
  run;</p>
<p> What is wrong? What's needed to fix it?</p>
<pre>Obs    hhid    id    income     hhinc

  1      1      1     30000     30000
  2      1      2     45000     75000
  3      1      3         0     75000
  4      2      4     60000    135000
  5      2      5     55000    190000
  6      3      6     42000    232000
  7      4      7     90000    322000
  8      4      8     15000    337000
  9      4      9         0    337000
 10      5     10     25000    362000</pre>
<p>The problem is that the <span class="InputCode">hhinc</span> variable is ending 
  up with a running sum of all incomes, not just the incomes of the people in 
  each household. What we need is a way to "start over" when we start 
  a new household. Try to write it before reading the following:</p>
<p class="InputCode">data step1;<br/>
<span class="indent3">set 'ex2';</span><br/>
<span class="indent3">by hhid;</span><br/>
<span class="indent3">if first.hhid then hhinc=0;</span><br/>
<span class="indent3">hhinc+income;</span><br/>
  run;</p>
<p class="InputCode">proc print data=step1;<br/>
  run;</p>
<p>The output will be:</p>
<pre>Obs    hhid    id    income     hhinc

  1      1      1     30000     30000
  2      1      2     45000     75000
  3      1      3         0     75000
  4      2      4     60000     60000
  5      2      5     55000    115000
  6      3      6     42000     42000
  7      4      7     90000     90000
  8      4      8     15000    105000
  9      4      9         0    105000
 10      5     10     25000     25000</pre>
<p>So now you have the correct household income, but only for the last individual 
  in the household (actually, the last person with a non-zero income and everyone 
  after them). Now you need to make that last observation first. Obviously this 
  will require proc sort, but try to write it yourself.</p>
<p class="InputCode">proc sort data=step1 out=step2;<br/>
<span class="indent3">by hhid descending hhinc;</span><br/>
  run;</p>
<p>This sort doesn't necessarily reverse the order of observations in each household, 
  but it does guarantee that someone with the correct household income will be 
  first in each household. Now you just need to give every person in each household 
  the same value for household income as the first person in that household. The 
  easiest way involves creating a new variable and then dropping our current <span class="InputCode">hhinc</span>. 
  See if you can take it from there before proceeding.</p>
<p class="InputCode">data final;<br/>
<span class="indent3">set step2;</span><br/>
<span class="indent3">by hhid;</span><br/>
<span class="indent3">retain hhincome;</span><br/>
<span class="indent3">if first.hhid then hhincome=hhinc;</span><br/>
<span class="indent3">drop hhinc;</span><br/>
  run;</p>
<p class="InputCode">proc print data=final;<br/>
  run;</p>
<p>Note that <span class="InputCode">hhincome</span> is retained. This means it 
  is only changed when we explicitly change it. When we reach the first observation 
  in a new household, we set <span class="InputCode">hhincome</span> to their 
  <span class="InputCode">hhinc</span> variable (recall that this value is correct 
  for the first observation in each household). For the second and subsequent 
  observations, <span class="InputCode">hhincome</span> simply stays the same. 
  Add a proc print so you can see the results and you're done.</p>
<pre>Obs    hhid    id    income    hhincome

  1      1      2     45000      75000 
  2      1      3         0      75000 
  3      1      1     30000      75000 
  4      2      5     55000     115000 
  5      2      4     60000     115000 
  6      3      6     42000      42000 
  7      4      8     15000     105000 
  8      4      9         0     105000 
  9      4      7     90000     105000 
 10      5     10     25000      25000 </pre>
<p>For an alternative way of doing the same task, see the example under merging.</p>
<h2><a id="ExampleReshapingData" name="ExampleReshapingData"></a>Example: Reshaping Data</h2>
<p>Any data that has groups and subgroups (for example, individuals living in 
  households) can be presented in two forms. In the long form, each subgroup has 
  its own observation--the data set used in the last example was in this form. 
  In the wide form, each group is just one observation, and there is a separate 
  set of variables for each subgroup. The dataset <span class="InputCode">whh.sas7bdat</span> 
  is in this form. For whatever reason the wide form seems to be more common with 
  data sources. However, the long form is usually more useful for analysis. So 
  it is a common task to have to reshape data from the wide form to the long. 
  We'll also learn how to convert long to wide, just in case.</p>
<p>In the long form you will have just one age and one sex variable for each individual, 
  not the four age and sex variables per observation you have now (note that sex 
  is stored as an indicator variable). You will also be creating multiple observations 
  from each currently existing observation. This calls for putting an output statement 
  inside a do loop. Since you're using a do loop, you will have a loop counter 
  variable telling you which observation you're writing--you can also use this 
  to pick which age and sex to write by putting them all in an array. Consider 
  this as a first try:</p>
<p class="InputCode">data long;<br/>
<span class="indent3">set 'ex3';</span><br/>
<span class="indent3">keep hhinc hhid age sex;</span><br/>
<span class="indent3">array ages(4) age1-age4;</span><br/>
<span class="indent3">array sexes(4) sex1-sex4;</span><br/>
<span class="indent3">do i=1 to 4;</span><br/>
<span class="indent3"><span class="indent3">age=ages(i);</span></span><br/>
<span class="indent3"><span class="indent3">sex=sexes(i);</span></span><br/>
<span class="indent3"><span class="indent3">output;</span></span><br/>
<span class="indent3">end;</span><br/>
  run;</p>
<p class="InputCode">proc print data=long;<br/>
  run;</p>
<p>Here <span class="InputCode">i</span> is your loop counter, but it also tells 
  you which observation you're writing. When <span class="InputCode">i</span> 
  is one, you are writing the first individual in the household, and thus set 
  <span class="InputCode">age</span> to <span class="InputCode">age1</span> and 
  <span class="InputCode">sex</span> to <span class="InputCode">sex1</span>. When 
  <span class="InputCode">i</span> is 2, we are working with the second individual 
  and use <span class="InputCode">age2</span> and <span class="InputCode">sex2</span>, 
  etc. There's just one problem with the result. Can you see it?</p>
<pre>Obs    HHID    HHINC    age    sex

  1      1     50000     30     0 
  2      1     50000     28     1 
  3      1     50000      3     0 
  4      1     50000      .     . 
  5      2     80000     45     0 
  6      2     80000     47     1 
  7      2     80000     12     1 
  8      2     80000      8     0 
  9      3     40000     25     1 
 10      3     40000      .     . 
 11      3     40000      .     . 
 12      3     40000      .     . </pre>
<p>Because every observation must have all variables, our original data has ages 
  and sexes defined for four people in each household. However, they are all needed 
  only in household two. Household one has three members, and household three 
  has just one. But our program creates four observations per household regardless.</p>
<p>The solution is to add an if condition before the output statement. We will
		 only output an observation if either <span class="InputCode">sex</span> or <span class="InputCode">age</span> 
  is non-missing. If both variables are missing, we assume the person does not
   actually exist. This is not an entirely innocuous assumption. It does not
  distinguish 
  between a household with less than four people and a household containing a
   person whose sex and age really weren't determined. However, it is usually
  unavoidable. 
  In the wide form, the number of variables is determined by the largest group,
   so in real data sets there may be room for twenty or more individuals in each
  
  household. Leaving them all in your analysis is probably not an option.</p>
<p>The appropriate modification is:</p>
<p class="InputCode">data long;<br/>
<span class="indent3">set 'ex3';</span><br/>
<span class="indent3">keep hhinc hhid age sex;</span><br/>
<span class="indent3">array ages(4) age1-age4;</span><br/>
<span class="indent3">array sexes(4) sex1-sex4;</span><br/>
<span class="indent3">do i=1 to 4;</span><br/>
<span class="indent3"><span class="indent3">age=ages(i);</span></span><br/>
<span class="indent3"><span class="indent3">sex=sexes(i);</span></span><br/>
<span class="indent3"><span class="indent3">if age~=. | sex~=. output;</span></span><br/>
<span class="indent3">end;</span><br/>
  run;</p>
<p class="InputCode">proc print data=long;<br/>
  run;</p>
<p>And the result will be:</p>
<pre>Obs    HHID    HHINC    age    sex

 1       1     50000     30     0 
 2       1     50000     28     1 
 3       1     50000      3     0 
 4       2     80000     45     0 
 5       2     80000     47     1 
 6       2     80000     12     1 
 7       2     80000      8     0 
 8       3     40000     25     1 </pre>
<p>Now let's convert it back. This time, you need to combine multiple observations 
  into one observation. But you won't need to write a loop: SAS is already looping 
  over observations. What you will need to do is keep track of which observation 
  in the household you are working with, and then write the result when you are 
  all done. "All done" means you've read the last observation, so that's 
  a job for <span class="InputCode">by</span> and <span class="InputCode">last</span>. 
  Keeping track of which observation you're on is a job for a loop counter, so 
  we'll create one for ourselves even though SAS is doing the looping. Add the 
  following to your code.</p>
<p class="InputCode">data wide;<br/>
<span class="indent3">set long;</span><br/>
<span class="indent3">array ages(4) age1-age4;</span><br/>
<span class="indent3">array sexes(4) sex1-sex4;</span><br/>
<span class="indent3">by hhid;</span><br/>
<span class="indent3">if first.hhid then n=1;</span><br/>
<span class="indent3">ages(n)=age;</span><br/>
<span class="indent3">sexes(n)=sex;</span><br/>
<span class="indent3">if last.hhid then output;</span><br/>
<span class="indent3">n+1;</span><br/>
<span class="indent3">drop n sex age;</span><br/>
  run;</p>
<p class="InputCode">proc print data=wide;<br/>
  run;</p>
<p>Try running this. What's wrong?</p>
<pre>Obs    HHID    HHINC    age1    age2    age3    age4    sex1    sex2    sex3    sex4

 1       1     50000      .       .       3       .       .       .       0       . 
 2       2     80000      .       .       .       8       .       .       .       0 
 3       3     40000     25       .       .       .       1       .       .       . 
</pre>
<p>The last person in each household is being stored properly, but the others 
  are missing. That's because the age and sex variables are not retained. Thus 
  SAS resets them to missing every time it loads a new observation. So when we 
  get to the last observation in each household, all the previous information 
  is gone. The solution is just to add a retain statement:</p>
<p class="InputCode">data wide;<br/>
<span class="indent3">set long;</span><br/>
<span class="indent3">retain age1-age4 sex1-sex4; </span><br/>
<span class="indent3">array ages(4) age1-age4;</span><br/>
<span class="indent3">array sexes(4) sex1-sex4;</span><br/>
<span class="indent3">by hhid;</span><br/>
<span class="indent3">if first.hhid then n=1;</span><br/>
<span class="indent3">ages(n)=age;</span><br/>
<span class="indent3">sexes(n)=sex;</span><br/>
<span class="indent3">if last.hhid then output;</span><br/>
<span class="indent3">n+1;</span><br/>
<span class="indent3">drop n sex age;</span><br/>
  run;</p>
<p class="InputCode">proc print data=wide;<br/>
  run;</p>
<p>Try running it again. Now what's wrong?</p>
<pre>Obs    HHID    HHINC    age1    age2    age3    age4    sex1    sex2    sex3    sex4

 1       1     50000     30      28       3       .       0       1       0       . 
 2       2     80000     45      47      12       8       0       1       1       0 
 3       3     40000     25      47      12       8       1       1       1       0 </pre>
<p>The problem is household three. It should have just one individual living in 
  it, but our data set lists four. The other three came from household two. Retain 
  doesn't do anything special as a result of <span class="InputCode">by</span> 
  groups, so when we moved from household two to household three, all the age 
  and sex variables stayed the same. <span class="InputCode">age1</span> and <span class="InputCode">sex1</span> 
  were then overwritten by the actual person living in household three, but the 
  other variables were not.</p>
<p>We need to tell SAS to set all the ages and sexes to missing when we are ready 
  to move on to a new household. This is easy to do:</p>
<p class="InputCode">data wide;<br/>
<span class="indent3">set long;</span><br/>
<span class="indent3">retain age1-age4 sex1-sex4;</span><br/>
<span class="indent3">array ages(4) age1-age4;</span><br/>
<span class="indent3">array sexes(4) sex1-sex4;</span><br/>
<span class="indent3">by hhid;</span><br/>
<span class="indent3">if first.hhid then n=1;</span><br/>
<span class="indent3">ages(n)=age;</span><br/>
<span class="indent3">sexes(n)=sex;</span><br/>
<span class="indent3">if last.hhid then do;</span><br/>
<span class="indent3"><span class="indent3">output;</span></span><br/>
<span class="indent3"><span class="indent3">do i=1 to 4;</span></span><br/>
<span class="indent3"><span class="indent3"><span class="indent3">ages(i)=.;</span></span></span><br/>
<span class="indent3"><span class="indent3"><span class="indent3">sexes(i)=.;</span></span></span><br/>
<span class="indent3"><span class="indent3">end;</span></span><br/>
<span class="indent3">end;</span><br/>
<span class="indent3">n+1;</span><br/>
<span class="indent3">drop i n sex age;</span><br/>
  run;</p>
<p class="InputCode">proc print data=wide;<br/>
  run;</p>
<p>Note how the indentation makes it easy to see the logic of the program, even 
  though we have several different layers. Your output should be:</p>
<pre>Obs    HHID    HHINC    age1    age2    age3    age4    sex1    sex2    sex3    sex4

 1       1     50000     30      28       3       .       0       1       0       . 
 2       2     80000     45      47      12       8       0       1       1       0 
 3       3     40000     25       .       .       .       1       .       .       . </pre>
<h2>Data Set Options</h2>
<p>SAS can do some work with an input data set before your data step ever sees 
  it, or with an output data set after your data step is done with it. You control 
  this by setting various data set options. These are statements in parenthesis 
  immediately following the data set name--either the name of the output data 
  set in the <span class="InputCode">data</span> statement, or the name of the 
  input data <span class="InputCode">set</span> in the set statement. They can 
  also be used in procs. For example:</p>
<p class="InputCode">proc print data=bigDataSet (obs=20);<br/>
  run;</p>
<p>This will print just the first 20 observations from <span class="InputCode">bigDataSet</span>, 
  so you can look them over.</p>
<p>Some of the more commonly used options include:</p>
<p class="InputCode">(obs=<span class="Parameter">n)</span></p>
<p>This causes SAS to stop processing after n observations. This is extremely 
  useful in testing your code. You can have SAS run your program on just the first 
  100 observations to make sure it works, or have SAS print just some of the observations 
  so you can look at them, as in the above example.</p>
<p class="InputCode">(where=(<span class="Parameter">condition</span>))</p>
<p>This has the same function as the <span class="InputCode">where</span> statement.
	Observations which do not meet the condition are never even loaded. The differences
	are where it goes (right after the data set as opposed to its own line) and
	the equals sign. </p>
<p class="InputCode">(drop=(<span class="Parameter">variables</span>))</p>
<p class="InputCode">(keep=(<span class="Parameter">variables</span>))</p>
<p>These are similar to the <span class="InputCode">keep</span> and <span class="InputCode">drop</span> 
  commands inside a data step (again note the equals sign), but if applied
  	to  the input data set the variables not selected are never loaded. Again,
  	it as  if they didn't exist.</p>
<p class="InputCode">(rename=(oldName1=newName1 oldName2=newName2))</p>
<p>This option allows you to rename variables, and if applied to input the name
	 is changed before the data is even loaded.</p>
<p>If you want to apply more than one option, they go in the same set of parentheses: </p>
<p class="InputCode">proc print data=bigDataSet (obs=20 where=(x&gt;10));<br/>
run;</p>
<p>Note that your code will be run more quickly if it has to work with less data.
	If you will be cutting down the number of observations or variables at some
	point, doing it with using data set options on the input data set where possible
	will be the most efficient.</p>
<h2>Combining Data Sets</h2>
<p>Combining data sets is a very common task in SAS. Often the data come in pieces 
  or from multiple sources, or you may generate a data set you need to combine 
  with the original data. SAS has a couple different tools for combining data 
  sets, depending on how they need to go together.</p>
<h3>Appending Data Sets</h3>
<p><img alt="Appending two data sets is like stacking them on top of each other." height="288" hspace="0" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-18/4-18_1.png" vspace="0" width="432"/></p>
<p>If you just need to add the observations from two data sets together, this 
  is called appending. For example if you had one data set of domestic cars and 
  another of foreign cars, you could append them to make a single data set of 
  all cars. Normally you would only do this if the two data sets have the same 
  (or almost the same) variables. If one data set has a variable that the second 
  data set doesn't, all the observations from the second data set will be assigned 
  missing values for that variable.</p>
<p>Appending data sets if very simple in SAS: simply list all the data sets you 
  wish to append in the set statement. Consider the following:</p>
<p class="InputCode">data combined;<br/>
<span class="indent3">set set1 set2 set3;</span><br/>
  run;</p>
<p>The output data set, <span class="InputCode">combined</span>, will contain 
  all the observations from <span class="InputCode">set1</span>, then all the 
  observations from <span class="InputCode">set2</span>, and finally all the observations 
  from <span class="InputCode">set3</span>. It will have all the variables used 
  by any of these data sets, and if any of the input data sets are missing a variable 
  it will be missing in that data set's observations.</p>
<h3>Merging</h3>
<p><img alt="Merging two data sets is like setting them side by side." height="432" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-18/4-18_2.png" width="432"/></p>
<p>If two data sets have the same (or almost the same) observations but different 
  variables, you combine them with a merge. For example, if one data set had car 
  names and prices, and another had car names, weights, and fuel efficiency, you 
  could merge them to create a singe data set with all the data available. Note 
  that if a car appeared in one data set but not the other, it will have missing 
  values for all the variables from the other data set.</p>
<p>Note that in my example, name appeared in both data sets. This is important 
  because it will be the identifier used to link observations. Assuming every 
  car has a unique name, this is an example of a one-to-one merge. But suppose 
  you had one data set of individuals including the state they live in, and another 
  data set containing welfare benefit levels for each state. You could perform 
  a merge that creates a data set of individuals and the welfare benefits available 
  to them, but each state would be merged with many individuals. This is an example 
  of a one-to-many merge. Logically it is also possible to have many-to-many merges, 
  but these are more likely to be the result of logical errors or problems with 
  the data sets.</p>
<p>The syntax for a merge is the same no matter what kind it is:</p>
<p class="InputCode">data combined;<br/>
<span class="indent3">merge set1 set2;</span><br/>
<span class="indent3">by matchvar;</span><br/>
  run;</p>
<p>Here <span class="InputCode">matchvar</span> is the variable that will be
		used to link the observations. In our first example, it would be the
		name of	the
  car; in the second the name of the state. It is possible to link by  multiple
		 variables. In that case observations will be merged only if they have
		the	same
		values for all the match variables.</p>
<p>Sometimes it's important to know whether an observation was successfully matched 
  between the two data sets. For example, you may want to get rid of observations 
  that are incomplete (be careful though, as this could bias your analysis). You 
  can tell SAS to create a new variable indicating whether a data set contributed 
  to an observation with the <span class="InputCode">in</span> data set option. 
  The syntax is just <span class="InputCode">in=variable</span>, but  the 
  variable thus created is only temporary. It's gone even before you can use it 
  in data set options for the output data set. So if you need to keep those values, 
  store them in another variable. Here's another version of the last example, 
  but one which only keeps observations that exist in both data sets:</p>
<p class="InputCode">data combined (drop=in1 in2 where=(in1=1 &amp; in2=1));<br/>
<span class="indent3">merge set1 (in=temp1) set2 (in=temp2);</span><br/>
<span class="indent3">by matchvar;</span><br/>
<span class="indent3">in1=temp1;</span><br/>
<span class="indent3">in2=temp2; </span><br/>
  run;</p>
<h2>Example: Households Again</h2>
<p>An alternative way to find household incomes is let proc means do all the hard 
  work and then merge in the results. See the <a href="http://support.sas.com/onlinedoc/912/getDoc/proc.hlp/a000146728.htm">SAS
  documentation</a> for more details 
  about proc means. We will use it to create a data set containing just the household 
  incomes for each household:</p>
<p class="InputCode">proc means data='ex2';<br/>
<span class="indent3">by hhid;</span><br/>
<span class="indent3">var income;</span><br/>
<span class="indent3">output out=households sum(income)=hhincome;</span><br/>
  run;</p>
<p class="InputCode">proc print data=households;<br/>
  run;</p>
<p>The households data set will contain the following:</p>
<pre>Obs    hhid    _TYPE_    _FREQ_    hhincome

 1       1        0         3        75000 
 2       2        0         2       115000 
 3       3        0         1        42000 
 4       4        0         3       105000 
 5       5        0         1        25000 </pre>
<p>We have a couple extra variables we don't need, but we'll get rid of them later. 
  Now all we need to do is merge the household income data with the original data 
  set. Note that this is a one to many merge (one household matches with many 
  individuals) and that our match variable is <span class="InputCode">hhid</span>. 
  We'll also get rid of the extra variables proc means created.</p>
<p class="InputCode">data hhincomes;<br/>
<span class="indent3">merge 'ex2' households (drop=_TYPE_ _FREQ_);</span><br/>
<span class="indent3">by hhid;</span><br/>
  run;</p>
<p class="InputCode">proc print data=hhincomes;<br/>
  run;</p>
<p>You'll notice that this method is shorter and simpler than what you did before--which 
  is what you would expect since you used a pre-written tool (proc means) rather 
  than doing all the work yourself. The previous example was mostly intended as 
  a learning experience, though if you needed to calculate a function not covered 
  by proc means you might have to do something similar.</p>
<h2>Using your Log File</h2>
<p>In the unlikely event it hasn't happened already, be aware that quite often 
  your programs won't run properly the first time. Or the second. Or the third. 
  Debugging often takes as long as writing the program itself, or longer. In these 
  cases your best hope for understanding what SAS thinks your program means (as 
  opposed to what you think it means) is to look closely at your log file.</p>
<p>SAS puts a lot of information in your log file--sometimes too much. It can 
  be tempting to skip looking at it and jump straight to the output (the <span class="InputCode">.lst</span> 
  file). Resist this temptation. An error in your code can make your output meaningless. 
  One common scenario is that the program failed before reaching the commands 
  that generate output and as a result the <span class="InputCode">.lst</span> 
  file you're reading is from a previous, presumably even more buggy, run. Your 
  text editor can help you: do a search for the word ERROR. If it doesn't exist, 
  at least you know your program ran all the way through (though you don't know 
  for sure it did what you intended). If it does, you'll know where things went 
  wrong.</p>
<p>If you do find a syntax error, some of the most common causes are simple.</p>
<h3>Missing Semicolon</h3>
<p>This is undoubtedly the most common error. The problem here is that SAS will 
  attempt to interpret the next command as part of the last command. What makes 
  it particularly confusing is that SAS will blame the error on the command after 
  the missing semicolon, so you may miss the problem with the line above. Here's 
  an example from some code we've used previously:</p>
<p class="InputCode"> keep hhinc hhid age sex<br/>
  array ages(4) age1-age4;</p>
<p>Note that there should be a semicolon at the end of the first line. Here is 
  an excerpt from the log:</p>
<pre>4          data long;
5          	set 'whh';
6          	keep hhinc hhid age sex
7          	array ages(4) age1-age4;
                     _
                     22
                     76
ERROR 22-322: Syntax error, expecting one of the following: a name, -, :, ;, _ALL_, _CHARACTER_, _CHAR_, _NUMERIC_.  

ERROR 76-322: Syntax error, statement will be ignored.

8          	array sexes(4) sex1-sex4;
9          	do i=1 to 4;
10         		age=ages(i);
                 ____
                 68
ERROR 68-185: The function AGES is unknown, or cannot be accessed.
</pre>
<p>Note the line underneath the word <span class="InputCode">ages(4)</span>, with 
  two numbers underneath that. That indicates where SAS ran into a problem, and 
  the numbers direct you to the corresponding ERROR messages. SAS still thinks 
  it's working on a <span class="InputCode">keep</span> statement, so it's looking 
  for variables or lists of variables. <span class="InputCode">array</span> is 
  a perfectly good variable name (which is unfortunate in a some ways) but <span class="InputCode">ages(4)</span> 
  fails because of the parentheses.</p>
<p>The second error message arises because the array <span class="InputCode">ages()</span> 
  has not been defined. Thus SAS thinks it is a function. This is a common problem: 
  one error causes a cascade of error messages later in the code. Normally if 
  you can see and correct one error, it's worthwhile to run the program again 
  before spending any significant time trying to figure out any subsequent errors. 
  They may take care of themselves.</p>
<h3>Endless Quotes or Comments</h3>
<p>SAS uses quotes--single or double--to mark off text that should be treated 
  in a special way. If the end quote is missing, SAS will get very confused. Consider 
  the following:</p>
<p class="InputCode">set 'whh;</p>
<p>Note the missing single quote at the end of the file name. In the log you'd 
  see that SAS got to this point, and then the entire rest of the program will 
  be printed to the log without any indication SAS tried to execute it. Finally, 
  you'll see SAS complaining that it's not seeing what it's expecting and that 
  it can't open a data set.</p>
<p>The problem is that without an end quote, SAS thinks the entire rest of the 
  program is the file name for the input data set. And since it still doesn't 
  end with a quote and a semicolon, you finally get an error message at the end 
  of the program.</p>
<p>A related problem can occur with comments. SAS will ignore any text in between 
  <span class="InputCode">/*</span> and <span class="InputCode">*/</span>. This 
  allows you to write explanatory notes for yourself or others that read your 
  code--a very good idea. However, if you forget the <span class="InputCode">*/</span> 
  at the end, the rest of your program will be ignored completely.</p>
<p>TextPad and Emacs with ESS make it easy to catch these kinds of errors because 
  they put strings in quotes and comments in distinctive colors. If half your 
  program suddenly turns "comment green" that's a good indication that 
  you forgot to end a comment somewhere in the middle of it.</p>
<h3>Typos</h3>
<p>Obviously any typos in your code may cause problems. It's not as guaranteed 
  as you might think:</p>
<p class="InputCode">dat long;</p>
<p>will actually get you:</p>
<p class="InputCode">WARNING 14-169: Assuming the symbol DATA was misspelled as 
  dat.</p>
<p>As long as SAS is correct, this is good. Obviously there are limits:</p>
<p class="InputCode">da long;</p>
<p>gets you:</p>
<pre>4          da long;
           __
           180

ERROR 180-322: Statement is not valid or it is used out of proper order.

5          	set 'whh';
            ___
            180

ERROR 180-322: Statement is not valid or it is used out of proper order.

6          	keep hhinc hhid age sex;
            ____
            180


ERROR 180-322: Statement is not valid or it is used out of proper order.</pre>
<p>Note the cascading failure again here. Because SAS doesn't realize you're starting 
  a data step here, all the data step commands don't make sense. Change <span class="InputCode">da</span> 
  to <span class="InputCode">data</span>, and all the rest will go away.</p>
<p>Once again, syntax coloring can help you here. If you're trying to type a SAS 
  command and it doesn't turn "command blue," you know there's a problem.</p>
<p>You can run into more subtle problems if you mistype a variable. SAS does
		not  have any special syntax to create a variable. It is placed in the PDV
		as soon 
  as you mention it in the code. For example, if you accidentally type</p>
<p class="InputCode">keep hhinc hhid age srx;</p>
<p>where <span class="InputCode">srx</span> is meant to be <span class="InputCode">sex</span>, 
  the code still runs. The only indication of trouble is a warning in the log:</p>
<pre>WARNING: The variable srx in the DROP, KEEP, or RENAME list    has never been referenced.</pre>
<p>Then when you try to use <span class="InputCode">sex</span> later, in your 
  second data step, you get</p>
<pre>NOTE: Variable sex is uninitialized.</pre>
<p>It was supposed to come from the results of the first data set, but it was
		 dropped because it wasn't on the list of variables to keep. But a warning
		or 
  a note doesn't stop your program from running. It will proceed and do what
		SAS  thinks you intended. But the results will be nonsense. This demonstrates
		the 
  importance of looking carefully at your log even if the program ran to completion
		and gave you the output you expected.</p>
<h2>Learning More</h2>
<p>You now have a good background in how data steps work, but there's much more 
  to learn. The SSCC has a  variety of articles on specific topics in SAS--take 
  a look at our <a href="https://ssc.wisc.edu/sscc/pubs/home.htm">Knowledge Base</a>.</p>
<p>For a broad but somewhat shallow introduction to SAS, The Little SAS Book by 
  Delwiche and Slaughter is the standard, and is available in the CDE library. 
  The SAS online documentation of course can tell you everything you need to know, 
  but it can be a challenge to read.</p>
<p>Finally, the SSCC Help Desk will be happy to answer any questions you may
	 have about SAS. From 1-4 every afternoon the consultant on call will be
	someone familiar with SAS. But you can <a href="mailto:helpdesk@ssc.wisc.edu">email
	  the Help Desk</a> or call 262-9917 at any time and your question will be
	  referred to the person who can best answer it.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/4-18/4-18_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-18/4-18_2.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Storing SAS Formats</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>SAS implements value labels (e.g. 0 is male, 1 is female) by allowing you
					to define custom formats. The difficulty is that these formats
					are not saved as part of the data they label. This article
					will discuss ways of storing SAS formats such that they can
					be used in subsequent programs.</p>
<p>As an example, consider a fabricated data set of individuals. For
					each individual you have their gender, their age, and their
							income. You want to do three things with this data:
					read it in and prepare it for analysis, get basic summary
					statistics, and regress income on the other variables. Because
					you don't want to re-run all the previous steps as you debug
					the one you're working on, you put each step in a separate
					SAS	program.	However	you	want	to apply	the same
					value	labels to	gender in	all	three	programs, so
					you need a way to store the custom format between programs.</p>
<h2><a id="TheTask" name="TheTask"></a>The Task</h2>
<p>First let's go through what you want to accomplish, ignoring the issue
					of	formats for the moment.</p>
<p>Start by reading in the fabricated data. If this were actual data
					you'd probably use a combination of <span class="InputCode">infile</span> and <span class="InputCode">input</span>,
					but	we'll use <span class="InputCode">datalines</span> and
					put the data	right in the data step.</p>
<p class="InputCode">data 'incomedata';<br/>
<span class="indent3">input gender age income;</span><br/>
<span class="indent3">datalines;</span><br/>
<span class="indent3">0 50 60000</span><br/>
<span class="indent3">1 45 80000</span><br/>
<span class="indent3">1 30 25000</span><br/>
<span class="indent3">0 25 18000</span><br/>
<span class="indent3">1 72 40000</span><br/>
<span class="indent3">;</span><br/>
			run;</p>
<p>Note that the data is stored in a permanent data set (a file) so you can
					use it in later programs.</p>
<p>Next you want some basic summary statistics. So run <span class="InputCode">proc
					freq</span>			  and <span class="InputCode">proc means</span>:</p>
<p class="InputCode">proc freq data='incomedata';<br/>
					run;</p>
<p class="InputCode">proc means data='incomedata';<br/>
			run;</p>
<p>Of course in the real world you'd probably do something  more sophisticated.</p>
<p>Finally we'll run a regression.</p>
<p class="InputCode">proc reg data='incomedata';<br/>
<span class="indent3">model income=gender age;</span><br/>
run;</p>
<p>This is very simple as well--in reality something this easy could
					all go in one program, but we'll keep them separate for pedagogical
					purposes.</p>
<h2><a id="ReviewDefiningandUsingFormats" name="ReviewDefiningandUsingFormats"></a>Review: Defining and Using Formats</h2>
<p>Formats in SAS are defined using <span class="InputCode">proc format</span>, and are applied to variables
			using the <span class="InputCode">format</span> statement. So to apply a label to the <span class="InputCode">gender</span> variable,
					the first step is to define a format that associates 0 with
					male and 1 with female. We'll call it <span class="InputCode">genderformat</span>.</p>
<p class="InputCode">proc format;<br/>
value genderformat<br/>
<span class="indent3">0= 'male'</span><br/>
<span class="indent3">1= 'female'</span><br/>
<span class="indent3">;</span><br/>
run;</p>
<p>Next you need to associate that format with the gender
					variable:</p>
<p class="InputCode">format gender genderformat.;</p>
<p>This statement must of course be part of a data or proc step. This could
					be	a	separate	data step just to apply the format, or
					it	could	be added	to an existing data or proc step.</p>
<p>The difficulty is that <span class="InputCode">genderformat</span> goes away as soon as the program that
					defines it ends. So how can you use it in all three programs?</p>
<h2><a id="IncludingtheFormatDefinitionsinAllYourPrograms" name="IncludingtheFormatDefinitionsinAllYourPrograms"></a>Including the Format Definitions in All Your Programs</h2>
<p>One option is to simply include all the formatting code in every SAS program
					that	uses
					<span class="InputCode">genderformat</span>. The first program, the one
					that just reads in the data, produces no output (other than
					the data set) and	does	not need to know about the format.
					In fact, including the <span class="InputCode">format</span> statement in that data step
					would complicate things, as we'll see later. But the other
					two do need the format, and thus need the code that handles
					it. Here	is	the	complete	code	of those
					programs,	including	the	formatting.</p>
<p>Summary statistics:</p>
<p class="InputCode">proc format;<br/>
<span class="indent3">value genderformat</span><br/>
<span class="indent3">0= 'male'</span><br/>
<span class="indent3">1= 'female'</span><br/>
<span class="indent3">;</span><br/>
run;</p>
<p class="InputCode">data formatteddata;<br/>
<span class="indent3">set 'incomedata';</span><br/>
<span class="indent3">format gender genderformat.;</span><br/>
run;</p>
<p class="InputCode">proc freq data=formatteddata;<br/>
		run; </p>
<p class="InputCode">proc means data=formatteddata;<br/>
		run;</p>
<p>Regression:</p>
<p class="InputCode">proc format;<br/>
<span class="indent3">value genderformat</span><br/>
<span class="indent3">0= 'male'</span><br/>
<span class="indent3">1= 'female'</span><br/>
<span class="indent3">;</span><br/>
		run;</p>
<p class="InputCode">data formatteddata;<br/>
<span class="indent3">set 'incomedata';</span><br/>
<span class="indent3">format gender genderformat.;</span><br/>
		run;</p>
<p class="InputCode">proc reg data=formatteddata;<br/>
<span class="indent3">model income=gender age;</span><br/>
		run;</p>
<p>The disadvantage of this approach is obvious: the programs are now about
						three times as long. In reality it could be much worse--many
					data sets include pages and pages of value labels, making
					your programs extremely long and somewhat cumbersome to work
					with.	And	if	you	wanted	to	make	any	changes	to	a
					format,	you'd	have	to	change	the	copy	in	each
					program.	On	the other	hand,	this	method	is straightforward
					to	implement.</p>
<h2><a id="SavingFormatsinaCatalogFile" name="SavingFormatsinaCatalogFile"></a>Saving Formats in a Catalog File</h2>
<p>The alternative is to save the format in a separate file SAS calls a catalog.
					Then subsequent programs can refer to this	catalog when
					they need the format.</p>
<p>In order to save the format, you'll add a <span class="InputCode">library</span> statement to the <span class="InputCode">proc
					format</span>, telling SAS where to put it (you'll
					need to define the library first). This program will create
					a file called <span class="InputCode">gender.sas7bcat</span> in your current directory.
					You'll	also	need to tell SAS to look for formats in that
					catalog	file.	This is done with the <span class="InputCode">fmtsearch</span> option.
					Since <span class="InputCode">genderformat</span> is
					now permanent, you	can	make the association between <span class="InputCode">gender</span> and <span class="InputCode">genderformat</span> permanent
							by including the <span class="InputCode">format</span> statement in the	data
					step that	reads	in the	data.	Here's	the complete
					code for the	data preparation program:</p>
<p class="InputCode">libname dir ".";</p>
<p class="InputCode">proc format library=dir.gender;<br/>
<span class="indent3">value genderformat</span><br/>
<span class="indent3">0= 'male'</span><br/>
<span class="indent3">1= 'female'</span><br/>
<span class="indent3">;</span><br/>
		run;</p>
<p class="InputCode">options fmtsearch=(dir.gender);</p>
<p class="InputCode">data 'incomedata';<br/>
<span class="indent3">format gender genderformat.;</span> <br/>
<span class="indent3">input gender age income;</span><br/>
<span class="indent3">datalines;</span><br/>
<span class="indent3">0 50 60000</span><br/>
<span class="indent3">1 45 80000</span><br/>
<span class="indent3">1 30 25000</span><br/>
<span class="indent3">0 25 18000</span><br/>
<span class="indent3">1 72 40000</span><br/>
<span class="indent3">;</span><span class="indent3"><br/>
</span>run;</p>
<p>The payoff comes in the next two programs. When they load <span class="InputCode">incomedata</span>,
					the	file will tell them that <span class="InputCode">gender</span> should
					be	formatted using <span class="InputCode">genderformat</span>.
					They'll then look for <span class="InputCode">genderformat</span>, so you'll
					need to tell	them where to look using the <span class="InputCode">fmtsearch</span> option.
					But that's	it!</p>
<p>Summary Statistics:</p>
<p class="InputCode">libname dir ".";<br/>
			options fmtsearch=(dir.gender);</p>
<p class="InputCode">proc freq data='incomedata';<br/>
					run; </p>
<p class="InputCode">proc means data='incomedata';<br/>
					run;</p>
<p>Regression:</p>
<p class="InputCode">libname dir ".";<br/>
		options fmtsearch=(dir.gender);</p>
<p class="InputCode">proc reg data='incomedata';<br/>
<span class="indent3">model income=gender age;</span><br/>
		run;</p>
<p>Obviously this is much shorter than redefining the format in each program,
					especially if you've got a lot of formats. But there is a
					catch. SAS now knows that <span class="InputCode">gender</span> needs to be formatted using
					<span class="InputCode">genderformat</span>. And if <span class="InputCode">genderformat</span> is unavailable, it will
					refuse to load the data set at all. You'll need to make
					sure the catalog file stays with the data set, and that everyone
					who uses it knows how to set the <span class="InputCode">fmtsearch</span> option.</p>
<p>If you ever do get stuck with a data set that has been formatted using
					formats you don't have access to, the following trick can
					be useful:  tell SAS to change the format
					to nothing in the data step that first loads the data. The
					following	format	statement	will	clear	all	formats
					from a data	set.	The result	may not	be	pretty, but it
					will be usable:</p>
<p class="InputCode">format _ALL_;</p>
<p>So which method should you use? Most likely as you read about the two
					techniques	one or the other seemed easier to you. Whichever
					that was,	go with it. It really is just a matter of personal preference.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Saving SAS Graphs For Printing or Other Uses</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Normally SAS works with graphs in a proprietary format nothing else can use. 
  However, it can save files in a variety of standard formats. If you want to 
  do anything more than look at the graphs on the screen, putting the graph in 
  one of these other formats is probably essential.</p>
<h2><a id="ChoosingaFormat" name="ChoosingaFormat"></a>Choosing a Format</h2>
<p>This article will focus on three formats: PDF (Portable Document Format), 
  PostScript, and PNG (Portable Network Graphic). Each has its uses, and which 
  one you should use depends on what you want to do with the graph. The following 
  chart lists some recommendation. Note that these are only recommendations based 
  on what tools most of our users have and are familiar with. For example, if 
  you have Ghostview installed on your PC, you can easily use it to print PostScript 
  files.</p>
<p> </p>
<div align="center">
<table border="1" cellpadding="10">
<tr>
<th>What you want to do with the graph...</th>
<th>The format you should use...</th>
</tr>
<tr>
<td>Print it from Linux</td>
<td>PostScript</td>
</tr>
<tr>
<td>Print it from Windows</td>
<td>PDF</td>
</tr>
<tr>
<td>Share it with colleagues via email or the web</td>
<td>PDF</td>
</tr>
<tr>
<td>Put it in a Web page</td>
<td>PNG</td>
</tr>
<tr>
<td>Put it in a Word document</td>
<td>PostScript</td>
</tr>
<tr>
<td>Edit it with an image editor*</td>
<td>PNG</td>
</tr>
</table>
  * The SSCC does not provide or support image editing software. </div>
<h2><a name="ChoosingaFont"></a>Choosing a Font</h2>
<p>What fonts SAS makes available depends on the format you use. If you choose 
  PNG, SAS can only use one default font. If you choose PDF, SAS allows you to 
  choose from the following:</p>
<p class="InputCode">Courier<br/>
  Courier-Oblique<br/>
  Courier-Bold<br/>
  Courier-BoldOblique<br/>
  Times-Roman<br/>
  Times-Italic<br/>
  Times-Bold<br/>
  Times-BoldItalic<br/>
  Helvetica<br/>
  Helvetica-Oblique<br/>
  Helvetica-Bold<br/>
  Helvetica-BoldOblique<br/>
  Symbol<br/>
  ZapfDingbats</p>
<p>With PostScript you have all these and more. See <a href="#GettingMoreInformation">Getting 
  More Information</a> for instructions on getting a complete list.</p>
<p>Note that you can only choose one font for all the text in the graph.</p>
<h2><a name="TheCode"></a>The Code</h2>
<p>Once you have chosen a format and a font, it's time to put the code in your 
  program that tells SAS to use them. Put the following before the proc step that 
  creates the graph:</p>
<p class="InputCode">filename output "<span class="Parameter">file</span>";<br/>
  goptions reset=all device=<span class="Parameter">format</span> gsfname=output 
  gsfmode=replace ftext="<span class="Parameter">font</span>";</p>
<p>Replace <span class="Parameter"><span class="InputCode">file</span></span> 
  with the name you want to give the file. Give it an extension that matches the 
  file type you want: <span class="InputCode">.pdf</span> for PDF, <span class="InputCode">.ps</span> 
  for PostScript, or <span class="InputCode">.png</span> for PNG. This is especially 
  important if you want to use the file on a PC, as Windows will use the extension 
  to decide what kind of file it is.</p>
<p>Replace <span class="Parameter"><span class="InputCode">format</span></span> 
  with the name of the format you want. The names are <span class="InputCode">pdf</span> 
  for black and white PDF, <span class="InputCode">pdfc</span> for PDF files including 
  color, <span class="InputCode">ps</span> for PostScript, and <span class="InputCode">png</span> 
  for PNG.</p>
<p>Replace <span class="Parameter"><span class="InputCode">font</span></span> 
  with the name of the font you want. Copy the name exactly from the list above. 
  If you are using PNG, it doesn't matter what font you choose, you'll always 
  get the same one. However, a font name must be there and must not have any spaces.</p>
<p>If you want to create a second graph with the same options, put a second <span class="InputCode">filename</span> 
  line right before the proc that creates the second graph, with a different <span class="Parameter"><span class="InputCode">file</span></span>. 
  If the second graph should have a different format or font, include a second 
  <span class="InputCode">goptions</span> line as well.</p>
<h2>Running the Program</h2>
<p>Once these lines are inserted, your program can be run normally with one exception.
   For whatever reason if you choose to create a PNG file, SAS will briefly open
   an interactive session even if you run the program in batch mode. Thus you
  will  need to be able to display Linux graphics. On a PC this means X-Win32
  must be  running. See <a href="https://ssc.wisc.edu/sscc/pubs/5-2.htm">Connecting
  to SSCC Linux Computers using X-Win32</a> 
  for more information. What's more, SAS will fail to create a window if there
   is no other graphical application running. So start something like <span class="InputCode">xclock</span> 
  before running SAS if you're planning to make a PNG file.</p>
<h2>Inserting a PostScript File Into Word</h2>
<p>If you create a PostScript file you can easily insert it into a Word document. 
  Start Word and open the document. Then click <span class="MenuOutput">Insert</span>, 
  <span class="MenuOutput">Picture</span>, <span class="MenuOutput">From File</span>. 
  Go to the directory where you saved the PostScript file, set <span class="MenuOutput">Files 
  of Type:</span> to <span class="MenuOutput">All Files (*.*)</span>, and double 
  click on the file you want. Word will then ask what it should convert the file 
  from. Choose <span class="MenuOutput">Encapsulated PostScript</span>, click 
  <span class="MenuOutput">Okay</span>, and the graph will appear in your document.</p>
<h2><a id="GettingMoreInformation" name="GettingMoreInformation"></a>Getting More Information</h2>
<p>You can get a full list of available formats (SAS refers to them as devices) 
  by running the following program:</p>
<p class="InputCode">proc gdevice catalog=sashelp.devices nofs;<br/>
<span class="indent3">list;</span><br/>
  run;</p>
<p>You can then get more information about a particular format, including what 
  fonts SAS can use in that format, by running:</p>
<p class="InputCode">proc gdevice c=sashelp.devices nofs;<br/>
<span class="indent3">list <span class="Parameter">format</span>;</span><br/>
  run;</p>
<p>Just replace <span class="Parameter"><span class="InputCode">format</span></span> 
  with the format you want (<span class="InputCode">ps</span> for example).</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>A Simple Procedure for Producing Publication-Quality Graphs using SAS</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>SAS introduced the Output Delivery System (ODS) in version 7 which 
              provides a way of redirecting and customizing tabular SAS output. 
              SAS has extended the capabilities of ODS in version 9.1 to include 
              graphics for some of its statistical procedures. Using ODS graphics, 
              a procedure automatically creates the graphs that are most commonly 
              needed for a particular analysis and eliminates the need to save 
              numerical results in an output data set, manipulate them with a 
              DATA step program, and display them with a graphics procedure.</p>
<p>This document illustrates how you can use ODS to:</p>
<ul>
<li>create statistical graphics in various formats including Rich 
                Text Format (RTF), PostScript (PS), or HTML (HTM) formatted files 
                for inclusion in other programs like Word, WordPerfect, Latex, 
                or Internet Explorer.</li>
<li>select and exclude components of the statistical graphics output</li>
<li>use styles and templates to customize the appearance of statistical 
                graphics. </li>
</ul>
<p> ODS for tabular output is documented in  
              <a href="https://www.ssc.wisc.edu/sscc/pubs/4-8.htm">Redirecting 
              and Customizing Tabular Output in SAS</a>.</p>
<h2>Procedures Supporting ODS Graphics</h2>
<p>ODS for statistical graphics is still under development and considered 
              "experimental." So far, the following procedures support 
              ODS graphics in SAS 9.1:</p>
<p> <strong>Base SAS:</strong> CORR</p>
<p> <strong>SAS/ETS:</strong> ARIMA, AUTOREG, ENTROPY, EXPAND, MODEL, 
              SYSLIN, TIMESERIES, UCM,<br/>
              VARMAX, X12</p>
<p> <strong>SAS/STAT:</strong> ANOVA, CORRESP, GAM, GENMOD, GLM, KDE, 
              LIFETEST, LOESS, LOGISTIC, MI, MIXED, PHREG, PRINCOMP, PRINQUAL, 
              REG, ROBUSTREG</p>
<p>To get an idea of what the graphics produced from these procedures 
              look like, visit <a href="http://support.sas.com/rnd/app/da/stat/odsgraph/gallery.html">SAS's 
              web site</a>.</p>
<h2>Creating Graphics Files</h2>
<p>The example below illustrates just how simple it is to generate 
              graphics. The following statements invoke the REG procedure and 
              fit a simple linear regression model.</p>
<pre>ods html; 
ods graphics on;</pre>
<pre>proc reg data=Class;
   model Weight = Height;
quit;</pre>
<pre>ods graphics off;
ods html close;

</pre>
<p>The ODS HTML statement specifies an HTML destination for the output. 
              The ODS GRAPHICS statement is specified to request ODS Graphics 
              in addition to the usual ODS tabular output. The ODS GRAPHICS OFF 
              statement disables the ODS Graphics, and ODS HTML CLOSE statement 
              closes the HTML destination.</p>
<p>In the case of the REG procedure, the graphical output produced 
              by ODS consists of a fit diagnostics panel, a residual plot, and 
              a fit plot. These are shown below. </p>
<p><img height="640" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/DiagnosticsPanel_default.gif" width="640"/></p>
<p><img height="480" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/ResidualPanel_default.gif" width="640"/></p>
<p><img height="480" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/Fit_default.gif" width="640"/></p>
<p>Note that these graphics are not displayed when you run your SAS 
              job. Rather, the files containing the plots are written to disk 
              in the directory from which you invoked SAS. For this example, SAS 
              wrote the three plots to GIF files - <span class="MenuOutput">DiagnosticsPanel0.gif</span>, 
              <span class="MenuOutput">Fit2.gif</span>, and <span class="MenuOutput">ResidualPanel11.gif</span>. 
              SAS also wrote an HTML file called <span class="MenuOutput">sashtml.sas</span> 
              for displaying both the tabular output and graphics on a single 
              web page. SAS names these files in such a way to make them recognizable. 
              Of course, using SAS options, you can change where SAS writes these 
              files. See <a href="http://support.sas.com/91doc/getDoc/statug.hlp/odsgraph_sect14.htm">Chapter 
              15 of the SAS/Stat Online User's Guide</a> for details.</p>
<p>These plots can easily be inserted in Word or WordPerfect documents.</p>
<p>Technical note: If you have written your graphic files to a directory 
              on Linux like your PUBLIC_web directory that you want others to 
              be able to view from a browser, check the file permissions to make 
              sure they are world-readable. Including the SAS command</p>
<pre>x "umask 022"; </pre>
<p>at the beginning of your SAS program will ensure that files written 
              for the duration of the SAS job are world-readable.</p>
<h3>Using ODS Graphics with Procedure Options</h3>
<p>Some SAS procedures, including REG, have their own options for 
              generating graphics. If you specify ODS GRAPHICS ON and specify 
              any of procedure options for graphs, ODS will automatically write 
              these graphs to files. For example, if the SAS statement</p>
<pre>plot r.*p.;</pre>
<p>were included in the REG code above, a fourth GIF file containing 
              a plot of residual vs. predicted values would be written to disk 
              automatically. </p>
<h3>Selecting and Excluding Graphs</h3>
<p>You can also control which graphs you want generated. This feature 
              is documented in <a href="https://www.ssc.wisc.edu/sscc/pubs/4-8.htm">Redirecting 
              and Customizing Tabular Output in SAS</a>.</p>
<h2>Specifying File Formats</h2>
<p>Whenever you use ODS Graphics, you must specify a destination file 
              format. In the above example, HTML was specified and SAS created 
              HTML and GIF formatted files. Other file types supported include 
              LATEX, PDF, PS, PCL, and RTF. For example, if you wanted files formatted 
              for PDF for use with Adobe Acrobat, you would specify:</p>
<pre>ods pdf;</pre>
<p>If you are using HTML or LATEX as the destination, your graphs 
              are individually produced in a specific image file type, such as 
              GIF or PostScript. If you are using PDF, PS, PCL, or RTF as the 
              destination, the graphs (and tables) are all written to one file. 
              In the case of RTF, this file can easily be opened in Word or WordPerfect. 
              You could then copy and paste individual graphs into a PowerPoint 
              presentation for example. In general, RTF output is convenient for 
              exchange of graphical results between Windows applications through 
              the clipboard. However, since GIF files can be directly inserted 
              in Office applications, it may be more convenient just to use the 
              HTML destination.</p>
<h2>Customizing The Appearance of Your SAS Output</h2>
<p>With ODS you can change the appearance of most of your SAS output. 
              To change the overall look of your output, use ODS styles. To further 
              customize the appearance and table of your output, you can change 
              the templates SAS uses to generate output or even create your own 
              templates. A brief overview of templates is provided in  <a href="https://www.ssc.wisc.edu/sscc/pubs/4-8.htm">Redirecting 
              and Customizing Tabular Output in SAS</a>. For more detailed information, 
              please refer to <a href="http://support.sas.com/documentation/onlinedoc/91pdf/sasdoc_91/base_ods_7032.pdf">SAS's 
              on-line manual</a>.</p>
<h3>ODS Styles</h3>
<p>ODS styles control the overall look of your output. A style definition 
              provides formatting information for specific visual aspects of your 
              SAS output. For ODS graphics, this includes the appearance of line 
              and marker properties in addition to font and color information.</p>
<p>You can specify a style using the style option in the ODS destination 
              statement. Each style produces output with the same table, but 
              with a somewhat different visual appearance. Of the SAS-supplied 
              styles, SAS recommends four for use with ODS Graphics: ANALYSIS, 
              DEFAULT, JOURNAL, and STATISTICAL. In the example below, the JOURNAL 
              style is specified:</p>
<pre>ods latex style=journal; 
ods graphics on;</pre>
<pre>proc reg data=Class;
   model Weight = Height;
quit;</pre>
<pre>ods graphics off;
ods latex close;

</pre>
<p>The output below illustrates our favorite style - journal:</p>
<p><img height="640" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/DiagnosticsPanel_journal.gif" width="640"/></p>
<p><img height="480" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/ResidualPanel_journal.gif" width="640"/></p>
<p><img height="480" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/Fit_journal.gif" width="640"/></p>
<p>Once you start using ODS you will quickly find that you need information 
              not contained in this overview document. SAS's comprehensive user 
              guide to ODS can be found online at <a href="http://support.sas.com/documentation/onlinedoc/91pdf/sasdoc_91/base_ods_7032.pdf">http://support.sas.com/documentation/onlinedoc/91pdf/sasdoc_91/base_ods_7032.pdf.</a></p>
<p> </p>
<p> </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/DiagnosticsPanel_default.gif, https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/ResidualPanel_default.gif, https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/Fit_default.gif, https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/DiagnosticsPanel_journal.gif, https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/ResidualPanel_journal.gif, https://ssc.wisc.edu/sscc/pubs/screenshots/4-21/Fit_journal.gif</img_base_url>
</kb_document>
<kb_document>
<kb_title>Making Predictions with Counter-Factual Data in Stata</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p class="intro">Note: this article has been superseded by the very useful <span class="InputCode"><a href="https://ssc.wisc.edu/sscc/pubs/stata_margins.htm">margins</a></span> command. It is kept here because <span class="InputCode">margins</span> cannot be used in some contexts, such as multiple imputation.</p>
<p>Social Science researchers often want to ask hypothetical questions:
          		How would the income distribution in my sample change if all
          		the black people were white? How would the household structure
          		in my sample be different if the demographics hadn't changed
          		since 1970? You can try to answer such questions by first estimating
          		a model, then seeing what that model predicts
          		when you give it counter-factual data.</p>
<p>If you're using a linear model it's just a matter of multiplying
          		the change in a dependant variable by its coefficient. But non-linear
          		models are more complicated. Fortunately Stata makes this kind
          		of work very easy, and this article will show you how. </p>
<h2>Example: Car Quality</h2>
<p>In the 1970's a perception arose that cars produced in the United
          		States were less reliable than cars produced in other countries
          		(especially Japan). Investigations into the cause of this difference
          		helped launch the "quality" movement which became a major
          		buzzword in the business community through the 80's and 90's.
          		We'll use the 1978 automobile data set that comes with Stata
          		to examine this difference and try to answer the question "If
          		all the cars in our sample had been built outside the United
          		States, how would that change their repair records?"</p>
<p>Start up Stata, then load the 1978 automobile data by typing </p>
<p class="InputCode">sysuse auto</p>
<p>Note that  <span class="InputCode">sysuse</span> loads data from
          		wherever Stata is installed. That means it's  only useful
          		for loading the sample automobile data, but it does allow us
          		to ignore the fact that different versions of Stata store it
          		in different locations.</p>
<p>The <span class="InputCode">rep78</span> variable is the measure
          		we'll use for car quality. It is a five point scale, with 5 being
          		the best. To see it type</p>
<p class="InputCode">tab rep78, missing</p>
<p>Several cars  have missing values for <span class="InputCode">rep78</span> which
          		makes them useless for our analysis. So we'll drop them:</p>
<p class="InputCode">drop if rep78==.</p>
<p>Of course if this were actual research we'd have to think about
          		whether this would bias our sample.</p>
<p>We also have a variable called <span class="InputCode">foreign</span>.
          		To see its values type</p>
<p class="InputCode">tab foreign</p>
<p class="InputCode">tab foreign, nolabel</p>
<p>Let's begin by seeing if there's any evidence for the hypothesis
          		that foreign cars are more reliable:</p>
<p class="InputCode">cor rep78 foreign</p>
<p class="InputCode">by foreign: sum rep78</p>
<p class="InputCode">tab rep78 foreign, chi2</p>
<p>Clearly there's some basis for the perception.</p>
<h2>Logit</h2>
<p>To examine this further, let's begin with a simple logistic regression.
          		Since logistic can handle just two outcomes, we'll condense the
          		five-point <span class="InputCode">rep78</span> scale into the indicator
          		variable <span class="InputCode">highQuality</span>:</p>
<p class="InputCode">gen highQuality=(rep78&gt;3)</p>
<p>This creates a variable which takes on the value one
          		for cars with <span class="InputCode">rep78</span>&gt;3 and zero
          		for others. Note that cars with missing values for <span class="InputCode">rep78</span> would
          		be counted as high quality with this code, which is one reason we
          		dropped them right away.</p>
<p>Now let's run a logistic regression with <span class="InputCode">highQuality</span> as
          		the dependant variable. Clearly we want <span class="InputCode">foreign</span> as
          		one of our independent variables. What else to include is a
          		difficult question, especially for non-engineers. One might expect
          		more expensive cars to be more reliable, so we'll include <span class="InputCode">price</span>.
          		Since most car problems involve the engine, characteristics of
          		the engine seem relevant. Thus we'll include <span class="InputCode">displacement</span> and <span class="InputCode">gear_ratio</span>,
          		along with <span class="InputCode">weight</span> as a measure of
          		the load on the engine. The command is:</p>
<p class="InputCode">logit highQuality foreign price displacement gear_ratio weight</p>
<p>add the <span class="InputCode">or</span> option if you prefer odds ratios to marginal effects. </p>
<p>The results are mostly negative (so much for expensive cars being
          		more reliable) but the coefficient on <span class="InputCode">foreign</span> is
          		significant.</p>
<p>How much difference would it make if the cars were all foreign?
          		To begin, we'll calculate and store the predicted probability
          		of each car being high quality under our model:</p>
<p class="InputCode">predict p</p>
<p>Type <span class="InputCode">help predict</span> for full details on the predict command, but
          		its basic function is to make predictions using whatever regression
          		model you ran last. </p>
<p>The mean of <span class="InputCode">p</span> will be the same as the proportion of cars which
          		are high quality. To see that type</p>
<p class="InputCode">sum p highQuality</p>
<p>But when <span class="InputCode">predict</span> runs it uses whatever
          		data are in memory at the time. It doesn't know or care if the
          		data have changed since the regression was run. This allows us
          		to set up a counter-factual scenario and then use <span class="InputCode">predict</span> to
          		see what our model  says about it.</p>
<p>We're going to change the value of foreign, but since we'll want
          		to change it back we'll store the real value in a separate variable
          		first:</p>
<p class="InputCode">gen realForeign=foreign</p>
<p>Then we'll pretend that all the cars are foreign by setting <span class="InputCode">foreign</span>          		to one:</p>
<p class="InputCode">replace foreign=1</p>
<p>Now  we simply run predict again to generate the predicted probability
          		for this counter-factual scenario:</p>
<p class="InputCode">predict cfp</p>
<p>Now compare the counter-factual prediction with reality by typing: </p>
<p class="InputCode">sum cfp highQuality</p>
<p>As you see, this model suggests that if all these cars were produced
          		overseas, the proportion which are high quality would increase
          		from 42% to 87%.</p>
<h2>Multinomial Logit </h2>
<p>By condensing the five point scale of <span class="InputCode">rep78</span> into
          		the indicator variable <span class="InputCode">highQuality</span> we
          		obviously threw away a lot of information. We can use <span class="InputCode">rep78</span> directly
          		if we use a multinomial logit to examine the probabilities of
          		all five outcomes.</p>
<p>We'll begin by estimating the model. Since we always want to estimate
          		the model using the real data, we need to set <span class="InputCode">foreign</span> back to
          		its actual values:</p>
<p class="InputCode">replace foreign=realForeign</p>
<p>Next we'll run the exact same regression as before, except that
          		we'll use <span class="InputCode">rep78</span> as our dependent variable
          		instead of <span class="InputCode">highQuality</span> and use multinomial
          		logit:</p>
<p class="InputCode">mlogit rep78 foreign price displacement gear_ratio weight</p>
<p>We now have four sets of coefficients, each describing how that
          		variable changes the probability of getting a given outcome compared
          		to the base outcome of <span class="InputCode">rep78</span>=3. We'll
          		also have five predicted probabilities, one for each outcome:</p>
<p class="InputCode">predict m1-m5</p>
<p>Now we're ready to do the counter-factual:</p>
<p class="InputCode">replace foreign=1</p>
<p class="InputCode">predict cfm1-cfm5</p>
<p class="InputCode">sum m1-m5 cfm1-cfm5</p>
<p>We see that the predicted proportion with <span class="InputCode">rep78</span>=4
          		and <span class="InputCode">rep78</span>=5 is
          		much higher with <span class="InputCode">foreign</span> set to one .
          		Note how the predicted proportion for <span class="InputCode">rep78</span>=3
          		is much lower. Just looking at the regression coefficients, you
          		might think that increasing <span class="InputCode">foreign</span> makes  <span class="InputCode">rep78</span>=1
          		and <span class="InputCode">rep78</span>=2
          		less likely compared to <span class="InputCode">rep78</span>=3 and
          		thus the proportion for <span class="InputCode">rep78</span>=3
          		should go up. But in fact the <span class="InputCode">rep78</span>=4
          		outcome is even more strongly affected, so <span class="InputCode">rep78</span>=3
          		ends up going down.</p>
<p>Of course in this case the coefficients for <span class="InputCode">foreign</span> and <span class="InputCode">rep78</span>=1
          		and <span class="InputCode">rep78</span>=2 are nonsense because no foreign cars in our sample
          		have <span class="InputCode">rep78</span>&lt;3. But it's a general principle that just looking
          		at marginal effects in a multinomial logit can be deceptive.</p>
<h2>Ordered Logit</h2>
<p>By using multinomial logit we threw away the information that that
          		the values of <span class="InputCode">rep78</span> have an implied
          		order. Ordered logit takes advantage of that information. The
          		<span class="InputCode">ologit</span> command does ordered regression,
          		and the syntax  is identical to using <span class="InputCode">mlogit</span>:</p>
<p class="InputCode">replace foreign=realForeign</p>
<p class="InputCode">ologit rep78 foreign price displacement
          			gear_ratio weight</p>
<p class="InputCode">predict o1-o5 </p>
<p class="InputCode">replace foreign=1 </p>
<p class="InputCode">predict cfo1-cfo5</p>
<p class="InputCode">sum o1-o5 cfo1-cfo5</p>
<p>Interestingly, ordered logit gives a much higher proportion in
          		<span class="InputCode">rep78</span>=5 with the counter-factual scenario
          		than multinomial logit. Which of these results to believe (if
          		any) is left as an exercise for the reader. </p>
<h2>Beyond Proportions</h2>
<p>Naturally you're not limited to looking at the means of predicted
          		probabilities and interpreting them as predicted proportions.
          		Each observation has a full set of predicted probabilities which
          		may be interesting in and of themselves.</p>
<p>Note however, that when we set <span class="InputCode">foreign</span> to
          		1 for all observations we reduced the variation in our sample.
          		This data has lots of quasi-continuous variables so there's not
          		much danger of creating duplicates. But if you have lots of categorical
          		variables, many reasonable counter-factual scenarios will make
          		all the observations which fall into a certain category or set of
          		categories identical. That's not necessarily a problem, but it is
          		an issue to be aware of.</p>
<p> For example, you may want to set up a counterfactual scenario
          		where each individual is assigned the mean income for
          		their gender, race, and state of residence in a different period.
          		However, having done so you could no longer talk about the variation
          		in income within a given gender/race/state combination. If you
          		did something similar with all the individual variables in your
          		data set, you'd then then have no variation whatsoever within
          		each gender/race/state combination, and you should  expect
          		that any predictions you make will also not vary within those
          		groups.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using Stata Graphs in Documents </kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Stata can easily produce "publication quality" graphics,
          		but it takes a few more steps to actually put them in a publication.
          		This article will discuss how to save Stata graphs in various
          		formats. It will also show you step-by-step
          		how to insert a Stata graph into a Word document or PDF file.</p>
<h2>Saving a Graph </h2>
<p>When you create a graph in Stata, the result is simply a picture
          		on the screen. If you want to be able to view it after your current
          		program finishes, you'll need to save it.</p>
<h3>graph save</h3>
<p>The <span class="InputCode">graph save</span> command tells Stata
          		to save your current graph (the most recently created) in Stata's
          		<span class="InputCode">gph</span> format.  The
          		syntax is simply</p>
<p class="InputCode">graph save <span class="Parameter">filename</span>, replace</p>
<p>where <span class="Parameter"><span class="InputCode">filename</span></span> should
          		be replaced by the name you want Stata to give your file.   Stata
          		will add <span class="InputCode">.gph</span> to
          		the end of the filename automatically. The <span class="InputCode">replace</span> option
          		tells Stata to overwrite the current version of that graph if
          		one exists--without that your do file will fail if you try to
          		run it more than once.</p>
<p>The disadvantage of <span class="InputCode">graph save</span> is
          		that the <span class="InputCode">.gph</span> files it produces
          		can only be read by Stata. To create files usable by other programs
          		you'll need <span class="InputCode">graph export</span>. However, <span class="InputCode">graph
          		save</span> can be useful if
          		you want to move graphs between computers--for example from a
          		Linux server to a PC.</p>
<h3>graph use</h3>
<p>The <span class="InputCode">graph use</span> command  opens a <span class="InputCode">.gph</span>          		file previously saved on disk. The graph will be displayed, and it
          		also becomes the current graph that subsequent commands will act
          		on. The syntax is</p>
<p class="InputCode">graph use filename</p>
<p>The filename will be assumed to end in <span class="InputCode">.gph</span> if you don't include
          		an extension. </p>
<h3>graph export</h3>
<p>The <span class="InputCode">graph export</span>  command saves
          		your current graph in the format you choose. The syntax is</p>
<p class="InputCode">graph export <span class="Parameter">filename</span>.<span class="Parameter">extension</span>, replace</p>
<p>Again, <span class="Parameter"><span class="InputCode">filename</span></span> should
          		be replaced by the name you want.  The <span class="Parameter"><span class="InputCode">extension</span></span>          		you
          		choose will determine the file format. What formats are available
          		depends on how you're running Stata:</p>
<p> </p>
<table align="center" border="1" cellpadding="5">
<tr>
<th align="center" rowspan="2" scope="col">Extension</th>
<th align="center" rowspan="2" scope="col">File Format </th>
<th align="center" colspan="3" scope="col">Where Available </th>
</tr>
<tr>
<th align="center">Windows </th>
<th align="center">Linux (Interactive) </th>
<th align="center">Linux (Batch Mode) </th>
</tr>
<tr align="center">
<td align="center">.ps</td>
<td align="center">PostScript</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">.eps</td>
<td align="center">Encapsulated Postscript </td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">.tif</td>
<td align="center">Tagged Image Format </td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">.png</td>
<td align="center">Portable Network Graphic </td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">.wmf</td>
<td align="center">Windows Metafile </td>
<td align="center">Yes</td>
<td align="center">No</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">.emf</td>
<td align="center">Windows Enhanced Metafile </td>
<td align="center">Yes</td>
<td align="center">No</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">.pdf</td>
<td align="center">Portable Document Format</td>
<td align="center">Yes</td>
<td align="center">No</td>
<td align="center">No</td>
</tr>
</table>
<p>Stata's commands for creating graphs tend to take a lot of computing
          		power, so making a lot of graphs can take a long time. Keep
          		in mind that the fastest way to run a Stata job at the SSCC is
          		to submit it to Condor so it will be run using Stata/MP.  But
          		Condor jobs must be run in batch mode, and batch mode has the
          		fewest file format options. This is where <span class="InputCode">graph
          		save</span> comes
          		in: create your graphs using Condor, and save them using <span class="InputCode">graph
          		save</span>. Then you can open the resulting <span class="InputCode">.gph</span> files
          		in Windows Stata or interactive Linux Stata with <span class="InputCode">graph
          		use</span>,
          		and finally use <span class="InputCode">graph
          		export</span> to convert them to the format you need.</p>
<p>See <a href="https://ssc.wisc.edu/sscc/pubs/7-1.htm">An Introduction to Condor</a> for details
          		about submitting jobs to Condor.</p>
<h2>Inserting a Graph into a Word Document</h2>
<p>We've found that for best results in Word you generally want to
          		use emf (Enhanced Metafile) format. So first create your graph,
          		then save it in emf format using graph export:</p>
<p class="InputCode">graph export graph.emf, replace</p>
<p>Next open the document into which you want to insert the graph
          		using Word. Put the cursor at the desired location. Then click
          		<span class="MenuOutput">Insert</span>, <span class="MenuOutput">Picture</span>, <span class="MenuOutput">From
          		File</span>. Locate the directory where you saved
          		the graph, select it, and click <span class="MenuOutput">Insert</span>.</p>
<p><img alt="Inserting the Graph into Word" height="393" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-23/4-23_1.png" width="601"/> </p>
<h2>Inserting a Graph into a PDF file</h2>
<p>If you want to put your graph in a PDF file, PostScript works well.
          		Create your graph, then save it in ps format using graph export:</p>
<p class="InputCode">graph export graph.ps, replace</p>
<p>Next open Adobe Acrobat (not Adobe Reader, which only reads PDF
          		files--Adobe Acrobat is available on Winstat). If you
          		already have a PDF file and you want to add the graph to it,
          		open the file, then click <span class="MenuOutput">Document</span>, <span class="MenuOutput">Insert
          		Pages</span>. Set <span class="MenuOutput">Files
          		of Type</span> to <span class="MenuOutput">PostScript/EPS</span>.
          		Locate the proper directory, click on your graph, and click Select. </p>
<p><img alt="Inserting a Graph into a PDF file" height="438" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-23/4-23_2.png" width="563"/></p>
<p>If you want the graph to be a PDF file all by itself, click <span class="MenuOutput">File</span>,
          		<span class="MenuOutput">Create PDF</span>, <span class="MenuOutput">From
          		File</span>. Then locate and select your graph.</p>
<p>From Linux you can do the same thing using the <span class="InputCode">ps2pdf</span> program.
          		At the Linux prompt type:</p>
<p class="InputCode">ps2pdf graph.ps graph.pdf</p>
<h2>Using Graphs Elsewhere</h2>
<p>What format will work in other situations is difficult to
          		predict, and you may need to try several alternatives.</p>
<p>PostScript is a standard format for printing across all different
          		kinds of computers. This makes it a good choice for situations
          		that involve printing, or for use on computers other than PCs.</p>
<p>Enhanced Metafile is an excellent choice if you want to use the
          		graph in a Windows program, as tools for working with emf files
          		are embedded in Windows. However, computers that are not running
          		Windows will probably have no way to open emf files at all. </p>
<p>PNG is a standard picture format, but a relatively recent one.
          		Older programs may not recognize it (try TIF with those programs).
          		However, PNG is a great choice for web pages. It's also a good
          		format for just sending a graph to someone—most computers will
          		open it with some sort of picture viewer or editor.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/4-23/4-23_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-23/4-23_2.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>An Introduction to Stata Graphics</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Stata includes a rich set of tools for creating publication-quality graphics. Between the wide variety of graphs you can make and the sheer number of details you can control in a graph, Stata graphics can be a daunting subject. However,  you'll probably only need to make a few different kinds of graphs, and in most cases Stata's default settings will be fine. What's more, Stata's Graphical User Interface (GUI) organizes the various graphing options in an intuitive way so you can find them when you need them without memorizing the syntax for each one. That doesn't mean you shouldn't put your graph commands in do files once you've created them, but it does mean that for complex graphs you can use the GUI to create the commands you'll store.</p>
<p>Stata 10 also added a graph editor which allows you to modify a graph after you've created it. This gives you even more control over your graph, but unlike the GUI for creating a graph the editor does not give you a command you can rerun later. If you later make any changes to your data, you'll have to start your graph over from scratch. Thus it's better to create the graph you want in the first place where possible, but the editor is still a very useful addition.</p>
<p>This article will discuss creating graphs using the Stata GUI, the structure of the graph command syntax (without dwelling too much on the details), some common types of graphs, and the graph editor.  The best way to use this article is to read it at the computer and actually carry out the steps described. The examples in this article will use the automobile dataset that comes with Stata, so begin by typing:</p>
<p class="InputCode">sysuse auto</p>
<p>to load it. Feel free to experiment as you go, especially with the settings we don't discuss (usually because they're either fairly obvious or rarely used). Creating a graph will never change your data, so the worst that can happen is that your graph turns out to be useless or just plain ugly.</p>
<h2><a id="CreatingGraphsUsingtheGraphicalUserInterface" name="CreatingGraphsUsingtheGraphicalUserInterface"></a>Creating Graphs Using the Graphical User Interface</h2>
<p>We'll start with a simple scatter plot with <span class="InputCode">weight</span> as the X variable and <span class="InputCode">mpg</span> as the Y variable. Stata refers to any graph which has a Y variable and an X variable as a <span class="MenuOutput">twoway</span> graph, so click <span class="MenuOutput">Graphics</span>, <span class="MenuOutput">Twoway graph</span>. The next step is to define a plot. In Stata terms, a <em>plot</em> is some specific  data visualized in a specific way, for example "a scatter plot of <span class="InputCode">mpg</span> on <span class="InputCode">weight</span>." A <em>graph</em> is an entire image, including axes, titles, legends, etc. Also, a single graph may contain multiple plots. The basic <span class="MenuOutput">twoway</span> dialog box will allow you to define as many plots as you need, plus control the other characteristics of the graph.</p>
<p><img alt="Twoway main dialog box" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_1.png" width="481"/></p>
<p>To define a plot, click <span class="MenuOutput">Create</span>. You'll then get a dialog box where you can describe the plot you want. Leave the category set to <span class="MenuOutput">Basic plots</span> and the type set to <span class="MenuOutput">Scatter</span>. For the <span class="MenuOutput">Y variable</span> select or type <span class="InputCode">mpg</span>, and for the <span class="MenuOutput">X variable</span> select or type <span class="InputCode">weight</span>. (Note: Linux Stata does not allow you to select variables so you'll need to type their names. In Windows Stata you can do either.)</p>
<p><img alt="Defining a scatter plot" height="409" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_2.png" width="621"/></p>
<p>If you  click <span class="MenuOutput">Submit</span>, the graph will be created without closing the dialog box. This allows you to look over the results and then easily make adjustments and try again. Click <span class="MenuOutput">Submit</span> now and you should get a simple but professional looking scatter plot.</p>
<p><img alt="Basic Scatter Plot" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_33.png" width="684"/></p>
<h3><a id="AddingMoreVariables" name="AddingMoreVariables"></a>Adding More Variables</h3>
<p>If you want to add a second Y variable to the scatterplot, the easiest way is to type its name into the <span class="MenuOutput">Y variable</span> box after the one you've already selected. Stata does not allow you to select multiple variables from the list with the mouse, but it has no trouble understanding  multiple variables in the <span class="MenuOutput">Y variables</span> box as long as you put them there yourself.</p>
<p>To make a sensible graph with two Y variables (without having multiple scales) we need variables with similar values. The <span class="InputCode">trunk</span> variable qualifies, so type it in the <span class="MenuOutput">Y variable</span> box after <span class="InputCode">mpg</span> and click <span class="MenuOutput">Submit</span> again.</p>
<p><img alt="Defining a scatterplot with two Y variables" height="409" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_3.png" width="621"/></p>
<p> The result will be a scatter plot with both variables. Note how Stata automatically puts the two variables in different colors and adds a legend explaining which is which. The legend text is drawn from the variable labels, but you could override all these default behaviors if you so desired.</p>
<p><img alt="Scatter Plot with Two Variables" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_34.png" width="684"/></p>
<h3><a id="PlottingaSubsetoftheData" name="PlottingaSubsetoftheData"></a>Plotting a Subset of the Data</h3>
<p>If you only want to include certain observations, you can specify which ones by clicking on the <span class="MenuOutput">if/in</span> tab. You can then type a condition in the <span class="MenuOutput">If</span>: box, and only observations that meet the condition will be included in the plot. Do not type the word <span class="InputCode">if</span>, as that is assumed.</p>
<p>To only plot foreign cars, type <span class="InputCode">foreign</span> in the <span class="MenuOutput">If</span>: box.</p>
<p><img alt="Adding an if condition" height="409" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_9.png" width="621"/></p>
<p> Recall that in Stata one is true and zero is false, and <span class="InputCode">foreign</span> is coded accordingly. Thus <span class="InputCode">if foreign</span> is equivalent to <span class="InputCode">if foreign==1</span>. Click <span class="MenuOutput">Submit</span> and you'll get a much sparser graph.</p>
<p><img alt="Scatter Plot with just foreign cars" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_35.png" width="684"/></p>
<p> You can also use more complicated expressions. For example, type <span class="InputCode">foreign &amp; price&lt;10000</span> and you'll get just the cars which are both foreign and cost less than $10,000 (in 1978 dollars).</p>
<p><img alt="Plotting a subset of the data" height="409" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_4.png" width="621"/></p>
<p><img alt="Scatter plot with a more complicated if" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_36.png" width="684"/></p>
<h3><a id="ControllingtheMarkers" name="ControllingtheMarkers"></a>Controlling the Markers</h3>
<p>By default Stata marks each point with a small dot, but you can change this. First click on the <span class="MenuOutput">Plot</span> tab again, and for best results set the <span class="MenuOutput">Y variable</span> back to just <span class="InputCode">mpg</span>. Then click <span class="MenuOutput">Marker Properties</span>. Set <span class="MenuOutput">Symbol</span> to <span class="MenuOutput">Hollow circle</span>. Next check <span class="MenuOutput">Add labels to markers</span> and set the <span class="MenuOutput">Variable</span> to <span class="InputCode">make</span>, then click <span class="MenuOutput">Submit</span>.</p>
<p><img alt="Marker Properties" height="449" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_28.png" width="381"/></p>
<p><img alt="Scatter plot with labels" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_37.png" width="684"/></p>
<p> As you see, each point is now a hollow circle with the name of the car printed next to it, but many of the names overlap. You can improve the situation somewhat by changing <span class="MenuOutput">Label angle</span> to <span class="MenuOutput">45 degrees</span>, but in general you can only put useful labels on a scatter plot if it has a small number of observations and they're spread out.</p>
<p><img alt="Scatter plot with angled labels" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_38.png" width="684"/></p>
<h3><a id="OverlayingPlots" name="OverlayingPlots"></a>Overlaying Plots</h3>
<p>Next we'll combine multiple plots. Uncheck <span class="MenuOutput">Add labels to markers</span>. Click <span class="MenuOutput">Accept</span> to  accept these settings for <span class="MenuOutput">Marker properties</span> and go back to the <span class="MenuOutput">Plot 1</span> window, then click <span class="MenuOutput">Accept</span> again to accept the plot as it is and go back to the main <span class="MenuOutput">twoway</span> window. Click <span class="MenuOutput">Create</span> to add another plot to the graph. This time we'll make a line plot. Set the plot type to <span class="MenuOutput">Line</span>, and again choose <span class="InputCode">mpg</span> and <span class="InputCode">weight</span> as the Y and X variables. Click <span class="MenuOutput">Submit</span> to see the result.</p>
<p><img alt="Adding a line graph" height="409" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_5.png" width="621"/></p>
<p><img alt="Scatter plot and line plot, but with a problem" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_39.png" width="684"/></p>
<p>It's probably not what you expected--in fact it looks like a scribble. That's because by default Stata draws the line from observation one to observation two to observation three and so forth. What you want is a line from the observation with the lowest weight to the one with the next lowest weight, etc. That's why Stata included the checkbox <span class="MenuOutput">Sort on x variable</span>. This does not change the actual order of the observations in your data set, just the order in which they are connected in your line plot. Check it and click <span class="MenuOutput">Submit</span> again. This time you should get the graph you expected.</p>
<p><img alt="Setting the line graph to be sorted" height="409" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_6.png" width="621"/></p>
<p><img alt="Scatter and line, now sorted" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_40.png" width="684"/></p>
<p>Note that while the line connects all the points in the scatter plot, it goes to a lot of points that the scatter plot does not include. That's because you didn't set an <em>if</em> condition for the line plot, so it's plotting all the observations in the data. The ability to set different <em>if</em> conditions for different plots is very useful, though you'll note that the <span class="MenuOutput">twoway</span> window has its own <span class="MenuOutput">if/in</span> tab which applies to all the plots.</p>
<h3><a id="Lineproperties" name="Lineproperties"></a>Line properties</h3>
<p>You can control what the line looks like by clicking <span class="MenuOutput">Line Properties</span>. The most commonly used option here is <span class="MenuOutput">Pattern</span>. By default Stata distinguishes different line plots by color, but that doesn't help if the graph needs to be printed in black and white. So instead you can set a pattern for each line. (Alternatively you can choose a <a href="#OverallOptions">scheme</a> designed for printing). To see it in action set <span class="MenuOutput">Pattern</span> to <span class="MenuOutput">Dash</span>. Also try setting <span class="MenuOutput">Connecting method</span> to <span class="MenuOutput">Stairstep</span>.</p>
<p><img alt="Line properties" height="243" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_27.png" width="341"/></p>
<p><img alt="Dashed line and stairstep" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_41.png" width="684"/></p>
<h3><a id="PlottingSubsamples" name="PlottingSubsamples"></a>Plotting Subsamples</h3>
<p>Let's go back to just plotting <span class="InputCode">mpg</span> vs. <span class="InputCode">weight</span>, but this time let's make the foreign cars one color and the domestic cars another. You can do this by creating two plots, one for the foreign cars and one for the domestic cars, each having an <em>if</em> condition that limits it to the proper subpopulation. Then Stata will make them different colors automatically.</p>
<p>Begin by resetting everything. Click <span class="MenuOutput">Accept</span> twice to get back to the main <span class="MenuOutput">twoway</span> window, then click the <span class="MenuOutput">R</span> button (<img alt="Reset button" height="21" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_10.png" width="20"/>) in the lower left to reset the plots. Next click <span class="MenuOutput">Create</span>, leave the type as <span class="MenuOutput">Scatter</span>, set the <span class="MenuOutput">Y variable</span> to <span class="InputCode">mpg</span> and set the <span class="MenuOutput">X variable</span> to <span class="InputCode">weight</span>. Then click <span class="MenuOutput">if/in</span> and in the <span class="MenuOutput">If</span>: box type <span class="InputCode">!foreign</span>. The exclamation mark is Stata for "not" so this means "not foreign" and is equivalent to <span class="InputCode">foreign==0</span>. Thus this plot will only include the domestic cars.</p>
<p> Click <span class="MenuOutput">Accept</span> to get back to the main <span class="MenuOutput">twoway</span> window, then click <span class="MenuOutput">Create</span> again and repeat the entire process with one vital difference: this time in the <span class="MenuOutput">If</span>: box just type <span class="InputCode">foreign</span>. This plot will include only the foreign cars. Click <span class="MenuOutput">Submit</span> to see the result.</p>
<p><img alt="Plotting two subpopulations in separate plots" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_42.png" width="684"/></p>
<p>The resulting graph very nicely makes the domestic cars blue and the foreign cars red. However, the legend gives you no indication which is which. To do that you'll need to take control of the legend yourself.</p>
<h2><a id="ControllingtheAppearanceofaGraph" name="ControllingtheAppearanceofaGraph"></a>Controlling the Appearance of a Graph</h2>
<p>You haven't seen any options for controlling the legend, because thus far we've been focused on the properties of individual plots. The legend is not associated  with a particular plot because it potentially contains information from all the plots. Thus to get to it you need to click <span class="MenuOutput">Accept</span> and get back to the <span class="MenuOutput">twoway</span> window. This is where you control aspects of the graph as a whole, including the legend. </p>
<h3><a id="Legends" name="Legends"></a>Legends</h3>
<p>Click on the <span class="MenuOutput">Legend</span> tab. The <span class="MenuOutput">Legend behavior</span> just controls whether the legend is shown or not. Since Stata thinks our graph should have one and we agree, we can leave it set to <span class="MenuOutput">Default</span>. On the other hand, the default keys don't provide any useful information for this graph, so we need to override them. Check <span class="MenuOutput">Override default keys</span>. Then in the box below you need to type the number of each plot followed by how you want it to be labeled (in quotation marks). For this graph type: </p>
<p class="InputCode">1 "Domestic Cars" 2 "Foreign Cars"</p>
<p><img alt="Controlling the legend" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_7.png" width="481"/></p>
<p>Now click <span class="MenuOutput">Submit</span> and you'll get a graph with a useful legend. Note that the order in which you list the plots is the order in which they'll appear in the legend: if you typed <span class="InputCode"> 2 "Foreign Cars"</span> <span class="InputCode">1 "Domestic Cars"</span> the legend would put the foreign cars first.</p>
<p><img alt="Plot with a useful legend" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_43.png" width="684"/></p>
<p>The <span class="MenuOutput">Organization / Appearance</span> button opens up a dialog box with all sorts of options relating to how the legend looks. Click the <span class="MenuOutput">Organization</span> tab and set <span class="MenuOutput">Rows/Columns</span> to <span class="MenuOutput">Columns</span> (leaving it set to just one column).</p>
<p> </p>
<p><img alt="Organizing the Legend" height="389" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_31.png" width="481"/></p>
<p>The <span class="MenuOutput">Labels</span> and <span class="MenuOutput">Region</span> tabs allow you to control the appearance of the legend text and the entire legend box  respectively. The various options like sizes and colors are  self-explanatory, but these same options appear in many different contexts so it's worth taking a moment to experiment and see how they work. Choose some different colors and such just to see how they work. Then click <span class="MenuOutput">Accept</span> to get back to the main <span class="MenuOutput">twoway</span> window.</p>
<p><img alt="Choosing sizes and colors" height="389" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_32.png" width="481"/></p>
<p>The <span class="MenuOutput">Placement</span> button allows you to control where the legend is placed in the graph. To understand how locations are specified, imagine putting the face of an analog clock over your graph: 12 o'clock is the top, 6 o'clock the bottom, 3 o'clock the right side, etc. You can also specify that the legend goes inside the plot region rather than in the border area around it--just make sure it doesn't cover up anything important.</p>
<p>Try setting the <span class="MenuOutput">Position</span> to <span class="MenuOutput">12 o'clock</span> and check <span class="MenuOutput">Place legend inside  plot region</span>, then click <span class="MenuOutput">Submit</span> to see the results.</p>
<p><img alt="Legend positions" height="318" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_8.png" width="481"/></p>
<p><img alt="Plot after changing the legend's appearance" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_44.png" width="684"/></p>
<h3><a id="Titles" name="Titles"></a>Titles</h3>
<p>You can add a title to the legend using the <span class="MenuOutput">Title</span> tab of the in the <span class="MenuOutput">Legend organization and appearance properties</span> window, but you're much more likely to want to add a title to the graph itself. To do so click <span class="MenuOutput">Accept</span> to get back to the main <span class="MenuOutput">twoway</span> window again, and then click on its <span class="MenuOutput">Titles</span> tab. This gives you four boxes where you can put text: the <span class="MenuOutput">Title</span>, <span class="MenuOutput">Subtitle</span>, <span class="MenuOutput">Caption</span> and <span class="MenuOutput">Note</span>. The easiest way to see what each one means is to try them out, so type <span class="InputCode">Title</span>, <span class="InputCode">Subtitle</span>, <span class="InputCode">Caption</span> and <span class="InputCode">Note</span> in their respective boxes, and click <span class="MenuOutput">Submit</span> to see the result.</p>
<p><img alt="Adding titles" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_11.png" width="481"/></p>
<p><img alt="Plot with titles" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_45.png" width="684"/></p>
<p>As you see, <span class="MenuOutput">Title</span> and <span class="MenuOutput">Subtitle</span> go at the top, while <span class="MenuOutput">Caption</span> and <span class="MenuOutput">Note</span> go in the bottom left. Each also has a particular font size associated with it. However, these are simply defaults. Click on the <span class="MenuOutput">Properties</span> button associated with each one and you can change its position and format. (Legend titles work in the same way, but they appear inside the legend box.)</p>
<p>If you want the text to be split across multiple lines, put each line in quotes. To see this in action, replace <span class="InputCode">Title</span> with <span class="InputCode">"First Line" "Second Line"</span> and click <span class="MenuOutput">Submit</span>.</p>
<p><img alt="Title with multiple lines" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_25.png" width="481"/></p>
<p><img alt="Plot with a multi-line title" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_46.png" width="684"/></p>
<h3><a id="Axes" name="Axes"></a>Axes</h3>
<p>Next we'll consider the  axes of the graph. Click on the <span class="MenuOutput">Y axis</span> tab (the <span class="MenuOutput">X axis</span> tab is identical) and the first thing you'll see is the <span class="MenuOutput">Title</span> box. If a plot has just one Y variable, the default title for the Y axis is that variable's label if it has one, or else simply its name. If all the plots have multiple Y variables, the default is no title at all. However, you can override the default by typing something here, and control its format by clicking <span class="MenuOutput">Properties</span>. Type in <span class="InputCode">Miles Per Gallon</span> and click <span class="MenuOutput">Submit</span> to see the effect.</p>
<p><img alt="Setting an axis title" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_14.png" width="481"/></p>
<p><img alt="Plot with a custom Y axis title" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_47.png" width="684"/></p>
<p>Major ticks are the marks along the axis with numbers by them that we've been seeing all along, but by clicking <span class="MenuOutput">Major tick/label properties</span> you can control how many there are and where they are placed. This is done by choosing one of several rules. <span class="MenuOutput">Use the default rule</span> allows Stata to choose, which it usually does pretty well. <span class="MenuOutput">Suggest # of ticks</span> leaves most of the control to Stata but allows you to set roughly how many ticks there will be. <span class="MenuOutput">Min Max</span> puts ticks  at just the bottom and top of the axis. <span class="MenuOutput">Range/Delta</span> gives you complete control as long as you want the ticks to follow a regular rule. For example, select <span class="MenuOutput">Range/Delta</span>, set the <span class="MenuOutput">Minimum value</span> to 0, the <span class="MenuOutput">Maximum value</span> to 40, and the <span class="MenuOutput">Delta</span> to 5, then click <span class="MenuOutput">Submit</span> to see the results.</p>
<p><img alt="Controlling ticks  with Range/Delta" height="364" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_12.png" width="441"/></p>
<p><img alt="Plot with more ticks on the Y axis" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_48.png" width="684"/></p>
<p><a id="NoTruncate" name="NoTruncate"></a>The result is a Y axis that starts at zero and has ticks every five units, but note that the graph continues up to 41 because one car got 41 miles per gallon. You can extend a graph by extending an axis (remember the default version of this graph started at ten) but you cannot truncate it. Stata will always make the graph big enough to plot all the observations in your data. If you really wanted the graph to stop at 40 you'd have to add an <em>if</em> condition like <span class="InputCode">mpg&lt;=40</span>.</p>
<p><span class="MenuOutput">Custom</span> rules allow you to place ticks anywhere you like and have them say whatever you like. The syntax is simply a list of numbers and associated labels. For example, select Custom and in the <span class="MenuOutput">Custom rule</span> box type <span class="InputCode">10 "Terrible" 20 "Mediocre" 30 "Very Good"</span>.</p>
<p><img alt="Custom tick rule" height="364" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_13.png" width="441"/></p>
<p><img alt="Plot with labeled ticks" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_49.png" width="684"/></p>
<p>The result is a less informative but more eloquent graph. You could accomplish the same thing by putting value labels on the variable. If you already have value labels assigned just click on the <span class="MenuOutput">Labels</span> tab and check <span class="MenuOutput">Use value labels</span>.</p>
<p> Every tick does not need a text label. For example, you could set the custom rule to <span class="InputCode">10 "Terrible" 15 20 "Mediocre" 25 30 "Very Good" 35 40</span> and get ticks every five units with labels at just 10, 20 and 30. However, this will cause the labels to overlap, or at least crowd each other. To fix that, click on the <span class="MenuOutput">Labels</span> tab and set <span class="MenuOutput">Angle</span> to <span class="MenuOutput">Horizontal</span>. Since this will force Stata to expand the margin to the left of the plot in order to make room for the labels, set the <span class="MenuOutput">Size</span> to <span class="MenuOutput">v. Small</span>.</p>
<p><img alt="Formatting labels" height="364" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_17.png" width="441"/></p>
<p><img alt="Plot with some ticks labeled and others not" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_50.png" width="684"/></p>
<p> However, the text labels don't include the numbers 10, 20 or 30, which looks odd since the other tick marks do have numbers. To make those numbers appear, add them to the end of their respective text labels: <span class="InputCode">10 "Terrible 10" 15 20 "Mediocre 20" 25 30 "Very Good 30" 35 40</span>. That way they'll line up with the other numbers.</p>
<p><img alt="Plot with text labels that include numbers" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_51.png" width="684"/></p>
<p><span class="MenuOutput">Minor tick/label properties</span> controls smaller ticks that go in between major ticks. They follow the same rules as major ticks, but the rules apply to the spaces between the major ticks rather than the whole axis. Obviously the default size is smaller as well, but they are otherwise similar.</p>
<p><span class="MenuOutput">Axis line properties</span> controls the appearance of the axis itself, while <span class="MenuOutput">Axis scale propertie</span>s controls its scale. This includes the ability to change it to a logarithmic scale, to reverse the scale, and to extend the scale (but not to truncate it--see <a href="#NoTruncate">the discussion above</a>).</p>
<h3><a id="UsingBywithGraphs" name="UsingBywithGraphs"></a>Using By with Graphs</h3>
<p>Using <em>by</em> in a graph does not give you a completely separate graph for each subpopulation, but it does give you a separate plots within a single graph.</p>
<p>The graph we have been working with has become unwieldy, so start by clicking the reset button (<img alt="Reset Button" height="21" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_10.png" width="20"/>). Then set up a scatter plot of <span class="InputCode">mpg</span> on <span class="InputCode">weight</span> just like we have made before. Click <span class="MenuOutput">Accept</span> to go back to the <span class="MenuOutput">twoway</span> window, then click on the <span class="MenuOutput">By</span> tab. Check the box for <span class="MenuOutput">Draw subgraphs for unique values of variables</span> and in the <span class="MenuOutput">Variables</span> box type or select <span class="InputCode">foreign</span>.</p>
<p><img alt="Setting up By" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_18.png" width="481"/></p>
<p>Click <span class="MenuOutput">Submit</span> and you'll see two scatter plots side-by-side, one for domestic cars and one for foreign cars.</p>
<p><img alt="Subpopulations plotted side-by-side using By" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_52.png" width="684"/></p>
<p>Now replace foreign with <span class="InputCode">rep78</span>. This variable takes on five values, plus it has some missing values. Check the boxes for <span class="MenuOutput">Add a graph with totals</span> and <span class="MenuOutput">Add graphs for missing values</span> and click <span class="MenuOutput">Submit</span>.</p>
<p><img alt="Setting up a more complex By" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_19.png" width="481"/></p>
<p><img alt="Plot using By with more values" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_53.png" width="684"/></p>
<p>The resulting graph has seven plots: one for each of the five standard values taken by <span class="InputCode">rep78</span>, one for observations which are missing <span class="InputCode">rep78</span>, and one for all observations. However, the default arrangement of these plots is not particularly attractive, so click on <span class="MenuOutput">Subgraph organization</span>.</p>
<p>One option would be to put all the plots on one row for easy comparison: set <span class="MenuOutput">Style</span> to <span class="MenuOutput">Compact, Rows/Columns</span> to <span class="MenuOutput">Rows</span> and then the number of rows to <span class="InputCode">1</span>. Click <span class="MenuOutput">Submit</span> to see the result--obviously if you wanted to use this you'd have to do something about the X axis labels, but you know how to do that.</p>
<p><img alt="Reorganizing the plots" height="368" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_20.png" width="441"/></p>
<p><img alt="Many By plots in a row" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_54.png" width="684"/></p>
<p>Another possibility would be to go back to the original format, but move the <span class="MenuOutput">Total</span> graph to the center of the bottom row. First set the <span class="MenuOutput">Style</span> back to <span class="MenuOutput">Default</span> and <span class="MenuOutput">Rows/Columns</span> back to <span class="MenuOutput">Default</span>, and click <span class="MenuOutput">Submit</span> to take another look. This arrangement has room for nine plots in three rows with three plots each, and Stata numbers them left to right and then top to bottom. The <span class="MenuOutput">Total</span> graph is currently in the seventh position. If we tell Stata to leave the seventh position blank, it will automatically move to <span class="MenuOutput">Total</span> graph to the eighth position, which is in the center of the bottom row. To do so, check <span class="MenuOutput">Force holes in the placement of graphs</span> and in the <span class="MenuOutput">Holes</span> box type <span class="InputCode">7</span>. Note that you could put multiple numbers in this box if you wanted to leave multiple holes. Click <span class="MenuOutput">Submit</span> to see the result.</p>
<p><img alt="Leaving holes in by plots" height="368" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_21.png" width="441"/></p>
<p><img alt="Many By plots with the last one centered" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_55.png" width="684"/></p>
<p>Now click Accept to get back to the <span class="MenuOutput">twoway</span> window. The <span class="MenuOutput">Subgraph titles</span> and <span class="MenuOutput">Subgraph regions</span> are all about controlling appearance and are similar to what you've seen before. <span class="MenuOutput">Subgraph axes</span> are a little more interesting. One problem with our last graph is that Stata tried to reduce clutter by only putting one set of axes per row and column, but given the layout it looks random. You can fix that by clicking <span class="MenuOutput">Subgraph axes</span> and then under <span class="MenuOutput">Show Axes</span> set both <span class="MenuOutput">Y axes</span> and <span class="MenuOutput">X axes</span> to <span class="MenuOutput">Yes</span>. While you're here, also set <span class="MenuOutput">Rescale axes</span> to <span class="MenuOutput">Yes</span> for for both axes. This tells Stata to choose the scale for each subgraph  based on the points it contains rather than choosing one scale for all of them. This makes each subgraph look nicer, but makes it impossible to compare them (which may be the entire point of the graph).</p>
<p><img alt="Controlling the axes on each By plot" height="348" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_22.png" width="621"/></p>
<p><img alt="Many By plots, all with different scales" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_56.png" width="684"/></p>
<h3><a id="OverallOptions" name="OverallOptions"></a>Overall Options</h3>
<p>Finally click on the <span class="MenuOutput">Overall</span> tab to see some general-purpose options for the whole graph.</p>
<p>Schemes are stored sets of defaults. For example, the <span class="MenuOutput">Economist</span> scheme implements the graphics guidelines of the journal <em>The Economist</em>. The two monochrome schemes (<span class="MenuOutput">s1 monochrome</span> and <span class="MenuOutput">s2 monochrome</span>) are particularly useful if you need to print your graph in black and white. Feel free to experiment. It's also possible to create your own schemes. Try setting Scheme to <span class="MenuOutput">s1 monochrome</span> and then click Submit.</p>
<p><img alt="Choosing a Scheme" height="339" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_57.png" width="481"/></p>
<p><img alt="Monochrome plot" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_58.png" width="684"/></p>
<p><span class="MenuOutput">Graph size</span> can be confusing because when you're working with the graph in Stata, Stata will fit the graph in whatever size window you choose. However, when it comes to printing or exporting the graph Stata will make it match the size you set here.</p>
<p><span class="MenuOutput">Region properties</span> refers to the <span class="MenuOutput">Plot region</span> (everything inside a plot) and the <span class="MenuOutput">Graph region</span> (everything outside a plot). This is where you can make global changes to the appearance of your graph like changing background colors.</p>
<h2><a id="SavingaGraph" name="SavingaGraph"></a>Saving a Graph</h2>
<p>Once you've created the graph you want, you can save it by clicking <span class="MenuOutput">File</span>, <span class="MenuOutput">Save As</span> in the graph's window. However, you should choose what type of file to save it as carefully. The default, Stata Graph format (.gph), has the advantage of allowing you to make further changes to the graph with the graph editor. However, .gph files cannot be placed in other files like Word documents or web pages. If you want to put your graph in a Word document use <span class="MenuOutput">Enhanced Metafile</span> format (.emf) or for web pages we suggest <span class="MenuOutput">Portable Network Graphics</span> (.png).</p>
<p><img alt="Saving a graph and choosing a file format" height="412" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_24.png" width="563"/></p>
<p>For much more information see <a href="https://ssc.wisc.edu/sscc/pubs/4-23.htm">Using Stata Graphs in Documents</a>.</p>
<h2><a id="CreatingGraphsUsingCommands" name="CreatingGraphsUsingCommands"></a>Creating Graphs Using Commands</h2>
<p>As you worked through the previous sections you've probably noticed that Stata pasted a command into the Results window every time you created a graph. Stata used everything you clicked on to formulate the command, but it's the command that actually created the graph. As you can see, the commands to create graphs are often very complicated. If you write the commands yourself you may be able to make them somewhat simpler, but not much.</p>
<p>So why learn how to create graphs using commands at all? First of all, for simple graphs it can be much faster. For example, you can create your basic scatter plot of <span class="InputCode">mpg</span> on <span class="InputCode">weight</span> simply by typing</p>
<p class="InputCode">scatter mpg weight</p>
<p>Second, even if you've created a graph using the graphical user interface you may want to modify it by recalling the  command and  making changes. Third, there are a very few things that cannot be done using the graphical user interface.</p>
<p>On the other hand, there's little point in trying to learn the proper syntax for every graph option. Let the graphical user interface help you with details like choosing text sizes and colors. What you  need to know is the basic syntax structure, and that's what we'll discuss.</p>
<p>No matter how you created your graph, you should store the  command in a do file. This allows you to recreate the graph later, if needed. It also serves as a record of how you created the graph.</p>
<h3><a id="GraphCommands" name="GraphCommands"></a>Graph Commands</h3>
<p>All graph commands really come down to one command: <span class="InputCode">graph</span>. It is followed by either a type of graph (e.g. <span class="InputCode">graph bar</span>) or a family of graphs followed by a type of graph (e.g. <span class="InputCode">graph twoway scatter</span>). Then comes whatever information is needed to create the graph itself. However,  the most common graph types and families were also made standalone commands, which is why you can just type <span class="InputCode">scatter mpg weight</span>.</p>
<p>For the ubiquitous <span class="InputCode">twoway</span> family (basically graphs with a Y axis and an X axis) what follows is a <span class="italic">varlist</span>. The last variable in the list is taken to be the X variable, and all the others are Y's--similar to how <span class="InputCode">regress</span> handles a <em>varlist</em> but in the opposite way.</p>
<p>Graph commands can use <em>if</em> and <em>in</em> just like regular Stata commands: they go at the end of the command but before any options.</p>
<h3><a id="CombiningPlots" name="CombiningPlots"></a>Combining Plots</h3>
<p>If you want to include multiple plots in a graph, they must be separated either by putting them in parentheses or by putting two pipe characters between them (<span class="InputCode">||</span>). Thus to create a graph containing two scatter plots of <span class="InputCode">mpg</span> on <span class="InputCode">weight</span>, one for foreign cars and one for domestic cars, you can type either:</p>
<p class="InputCode">scatter mpg weight if foreign || scatter mpg weight if !foreign</p>
<p>or</p>
<p class="InputCode">twoway (scatter mpg weight if foreign) (scatter mpg weight if !foreign)</p>
<p>Note how in the second case you had to start with <span class="InputCode">twoway</span>. That's because a Stata command can't start with a parenthesis, but once you put it in the context of a twoway graph Stata will understand what you mean.</p>
<h3><a id="By" name="By"></a>By</h3>
<p>Graph commands cannot use the standard <em>by:</em> prefix, but most allow a <span class="InputCode">by</span> <em>option</em> that does the same thing:</p>
<p class="InputCode">scatter mpg weight, by(foreign)</p>
<h3><a id="Options" name="Options"></a>Options</h3>
<p>Graph options follow the general <em>option</em> rule of going at the end of the command following a comma, but by that definition a single graph can contain several "commands." For example, the <span class="MenuOutput">Sort on x variable</span> checkbox for line plots translates into the <span class="InputCode">sort</span> <em>option</em>, but it has to stay with the line plot if the graph has more than one. Thus if you typed:</p>
<p class="InputCode">line mpg weight || scatter mpg weight, sort</p>
<p>the sort option would be applied to the scatter plot, where it would do little good. Instead you should type</p>
<p class="InputCode">line mpg weight, sort || scatter mpg weight</p>
<p>Things like titles are also options:</p>
<p class="InputCode">scatter mpg weight, title(MPG vs Weight)</p>
<p>Note that the text of the title does not have to go in quotes--unless it has a comma in it. You can use quotes to separate lines, just like when you typed it in the <span class="MenuOutput">Title</span> box.</p>
<p>But what really makes life interesting is when your options have options. Suppose you wanted the title to be merely medium large (<span class="InputCode">medlarge</span>) rather than the default very large (<span class="InputCode">vlarge</span>), and also a dark red (specifically, <span class="InputCode">cranberry</span>). You can make it so with the <span class="InputCode">size</span> and <span class="InputCode">color</span> options, but to make it clear what they are controlling the size and color of they have to go inside the title's parentheses. Yet they still follow a (single) comma. Thus the command becomes:</p>
<p class="InputCode">scatter mpg weight, title(MPG vs Weight, size(medlarge) color(cranberry))</p>
<p>Of course it's at this point that it becomes attractive to let the graphical user interface keep track of the proper placement of such things for you, not to mention letting you know that <span class="InputCode">medlarge</span> and <span class="InputCode">cranberry</span> are among the available options.</p>
<p>For the rest of this article we'll type out the graph commands rather than using the graphical user interface, partially for practice but mostly because we'll be making fairly simple graphs and that's the quickest way to do so.</p>
<h2><a id="OtherTypesofGraphs" name="OtherTypesofGraphs"></a>Other Types of Graphs</h2>
<p>Stata can create dozens of different kinds of graphs--for a much larger sampling, see the <a href="http://www.stata.com/support/faqs/graphics/gph/statagraphs.html">Visual Overview on Stata's web site</a>. This section will discuss a few more that are fairly commonly used at the SSCC.</p>
<h3><a id="FitLines" name="FitLines"></a>Fit Lines</h3>
<p>Stata can plot several different kinds of fit lines automatically. The most common are <span class="InputCode">lfit</span> (linear fit), <span class="InputCode">qfit</span> (quadratic fit), <span class="InputCode">lfitci</span> (linear fit with confidence intervals) and <span class="InputCode">qfitci</span> (quadratic fit with confidence intervals. They're not very interesting by themselves--usually they're overlaid on a scatter plot. The syntax is just like any other twoway graph. Type:</p>
<p class="InputCode">scatter mpg weight || lfit mpg weight</p>
<p>(Or if you prefer, set up the scatter plot in the graphical user interface as usual, then add a second plot setting the <span class="MenuOutput">plot category and type</span> to <span class="MenuOutput">Fit plots</span> and choosing <span class="MenuOutput">Linear prediction</span>--but typing it will be a whole lot faster.)</p>
<p><img alt="Setting up a linear fit" height="409" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_26.png" width="621"/></p>
<p><img alt="Scatter plot with a fit line" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_59.png" width="684"/></p>
<p>The versions that show  confidence intervals need a little care because they can cover things up. Try:</p>
<p class="InputCode">scatter mpg weight || qfitci mpg weight</p>
<p><img alt="Fit line with a shaded confidence interval covering up part of a scatter plot" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_60.png" width="684"/></p>
<p>Any points within the confidence interval are covered up by the shaded region. You can fix that by reversing the order of the plots in the command. However, <span class="InputCode">qfitci</span> is not one of the plot types that is recognized by itself, so you need to start with <span class="InputCode">twoway</span>:</p>
<p class="InputCode">twoway qfitci mpg weight || scatter mpg weight</p>
<p><img alt="Plot with the scatter plot over the shaded confidence interval" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_61.png" width="684"/></p>
<p>Now all the points are shown. Think of a Stata graph as a painting done with completely opaque paints. If you have multiple plots each plot is a layer of paint, and layers that are added later cover up what was there before. Thus plots that cover areas should be listed first, and anything that needs to go on top should be listed last.</p>
<p>However, all these plots do is regress Y on X (or Y on X and X^2) and plot the predicted values for Y. If you want to run a more complicated regression there's no automatic command to plot the predicted values. On the other hand, you can easily store the predicted values in a new variable and plot it.</p>
<p>Suppose you wanted to plot the predicted probabilities you got from a logit of <span class="InputCode">foreign</span> on <span class="InputCode">mpg</span> (a clear case of reversing cause and effect, but the methodology doesn't care). No graph command will do this for you, but you can do it yourself:</p>
<p class="InputCode">logit foreign mpg<br/>
            predict phat<br/>
            line phat mpg,sort</p>
<p><img alt="Plot of predicted probability against mpg" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_62.png" width="684"/></p>
<p>The result looks reasonable, but try it as a scatter plot:</p>
<p class="InputCode">scatter phat mpg</p>
<p><img alt="Scatter plot of predicted probability vs. mpg" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_63.png" width="684"/></p>
<p>This demonstrates that the only values of <span class="InputCode">mpg</span> represented in the graph are those represented in your data set (and keep in mind many observations have the same value of <span class="InputCode">mpg</span>). That may or may not be a problem, but if you wanted to plot a smooth curve over the full range of <span class="InputCode">mpg</span> you could replace the actual values of <span class="InputCode">mpg</span> with made-up numbers that are evenly distributed from 14 to 41:</p>
<p class="InputCode">gen realMPG=mpg<br/>
              replace mpg=(41-14)*(_n-1)/(_N-1)+14<br/>
            predict phat2<br/>
            scatter phat2 mpg<br/>
            replace mpg=realMPG</p>
<p><img alt="Smoother plot of phat vs. mpg" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_64.png" width="684"/></p>
<p>See <a href="https://ssc.wisc.edu/sscc/pubs/4-22.htm">Making Predictions with Counter-Factual Data in Stata</a> for more explanation of how this method works.</p>
<p>Note that with multivariate regressions if you want to plot the effect of one variable you will probably need to set the others to their means before making predictions. Otherwise the line will jump all over due to the effects of the other variables.</p>
<h3><a id="BarPlots" name="BarPlots"></a>Bar Plots</h3>
<p>Stata does two very different kinds of bar plots. <span class="InputCode">twoway bar</span> is just a variation on what we've seen before:</p>
<p class="InputCode">twoway bar mpg weight</p>
<p><img alt="Bar plot of mpg vs. weight" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_65.png" width="684"/></p>
<p>But there's also <span class="InputCode">graph bar</span> which is not part of the <span class="InputCode">twoway</span> family. It plots summary statistics (the default is mean) rather than values, and is normally used to compare between variables or between groups. Variables are simply listed, and the group variable is specified using the <span class="InputCode">over</span> option. For example:</p>
<p class="InputCode">graph bar weight price, over(foreign)</p>
<p><img alt="Bar graph with means of weight and price over foreign" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_66.png" width="684"/></p>
<p><span class="InputCode">hbar</span> is almost identical--it just turns everything sideways.</p>
<p class="InputCode">graph hbar weight price, over(foreign)</p>
<p><img alt="Horizontal bar plot" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_67.png" width="684"/></p>
<p>If you want to compare something other than the mean, put that statistic in parentheses before the list of variables:</p>
<p class="InputCode">graph hbar (median) weight price, over(foreign)</p>
<p><img alt="Bar plot comparing medians" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_68.png" width="684"/></p>
<h3><a id="Histograms" name="Histograms"></a>Histograms</h3>
<p>Histograms are very simple to create:</p>
<p class="InputCode">hist mpg</p>
<p><img alt="Histogram of mpg" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_69.png" width="684"/></p>
<p><br/>
              Note that by default Stata does not put frequency on the Y axis, but probability density. This fits with the idea of a histogram being an approximation to the probability density function, but probably isn't how you were taught to make histograms back in grade school. You can have it plot frequencies using the <span class="InputCode">frequency</span> option (<span class="InputCode">percent</span> is another that is frequently used).</p>
<p>If you don't like Stata's default bins you can take control by either setting the number of bins (<span class="InputCode">bin</span> option) or the width of a bin (<span class="InputCode">width</span> option). You can get the same results either way. The <span class="InputCode">mpg</span> variable goes from 12 to 41, for a total range of 29. Stata chose eight bins, which means each had a width of 29/8=3.625. If you wanted 10 bins, you could type:</p>
<p class="InputCode">hist mpg, bin(10) frequency</p>
<p><img alt="Histogram of mpg with more bins" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_70.png" width="684"/></p>
<p>But you'll get the exact same graph from</p>
<p class="InputCode">hist mpg, width(2.9) frequency</p>
<p>If you have discrete data, the discrete option tells Stata to choose bins accordingly. For example, if you just type:</p>
<p class="InputCode">hist rep78</p>
<p>Stata will choose eight bins even though <span class="InputCode">rep78</span> only has five values. The result is a confusing histogram of fairly simple data.</p>
<p><img alt="Histogram with too many bins" height="549" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_83.png" width="625"/></p>
<p>However, if you add the discrete option Stata creates five bins for the five values:</p>
<p class="InputCode">hist rep78, discrete</p>
<p>The result is a much clearer graph.</p>
<p><img alt="Histogram with the right number of bins" height="549" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_84.png" width="625"/></p>
<h3><a id="KernelDensities" name="KernelDensities"></a>Kernel Densities</h3>
<p>You can overlay a kernel density on your histogram just by adding the <span class="InputCode">kdensity</span> option (there's also a <span class="InputCode">normal</span> option to add  a normal density).</p>
<p class="InputCode">hist mpg, width(2.9) frequency kdensity</p>
<p><img alt="Histogram of mpg with an overlaid kernel density plot" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_71.png" width="684"/></p>
<p>You can also create an independent kernel density plot with the <span class="InputCode">kdensity</span> command:</p>
<p class="InputCode">kdensity mpg</p>
<p><img alt="Kernel density plot of mpg" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_72.png" width="684"/></p>
<p>The most commonly used option for kernel densities is <span class="InputCode">bwidth</span>, which sets the bandwidth. Compare:</p>
<p class="InputCode">kdensity mpg, bwidth(5)</p>
<p><img alt="Kernel density with bandwidth=5" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_73.png" width="684"/></p>
<p>with:</p>
<p class="InputCode">kdensity mpg, bwidth(1)</p>
<p><img alt="Kernel density with bandwidth=1" height="641" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_74.png" width="684"/></p>
<h2><a id="TheGraphEditor" name="TheGraphEditor"></a>The Graph Editor</h2>
<p>Stata includes a graph editor that can be used to modify a graph after it has been created. Its big disadvantage is that it doesn't give you a command you can save in a do file and use to recreate the graph at will. However, it does allow you to make changes very simply and easily.</p>
<p>To see it in action, make a simple scatter plot:</p>
<p class="InputCode">scatter mpg weight</p>
<p>Then click <span class="MenuOutput">File</span>, <span class="MenuOutput">Start Graph Editor</span>. You're now ready to make changes to this graph.</p>
<p><img alt="The Stata Graph Editor" height="501" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_29.png" width="688"/></p>
<p>On the left are several buttons that place the graph editor in a particular mode. The top button, the arrow, puts it in pointer mode, which allows you to select an item on the graph to edit. For example, if you click on the plot part of the graph (i.e. inside the axes) you'll be able to edit the plot region. <span class="MenuOutput">Color</span> and <span class="MenuOutput">Margin</span> will appear in the tool bar at the top, but if you click <span class="MenuOutput">More</span> you'll be able to change many more properties.</p>
<p><img alt="Editing the plot region" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_81.png" width="695"/></p>
<p> If you then click on a particular point you can change the plot itself. Now the immediate options are <span class="MenuOutput">Plottype</span>, <span class="MenuOutput">Color</span>, <span class="MenuOutput">Size</span>, and <span class="MenuOutput">Symbol</span>, but you can again click <span class="MenuOutput">More</span> to see other things.</p>
<p><img alt="Editing a plot" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_82.png" width="695"/></p>
<p>As you do, note the <span class="MenuOutput">Object Browser</span> on the right. Stata keeps track of the various parts of a graph in a sort of tree structure, and as you click on things it will highlight the object you've selected. You can also select an object directly. For example, click <span class="MenuOutput">title</span> and you can add a title by typing it in the <span class="MenuOutput">Text</span> box.  Type in <span class="InputCode">MPG vs. Weight (1978 Cars)</span> and press <span class="InputCode">Enter</span> to see the results.</p>
<p><img alt="Graph editor, setting a title" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_75.png" width="695"/></p>
<p>The next three buttons (the large <span class="MenuOutput">T</span>, the diagonal line, and the circle with a plus sign) allow you to add text, draw lines and place new points anywhere you need them. As an example, let's add the  Toyota Prius for comparison (46 mpg and about 3000 pounds for a 2008 four-door). The smart way would be to add it to the dataset before making the graph, but we'll do it using the graph editor as an exercise.</p>
<p>The first problem is that the graph ends at 42 mpg. To fix that select <span class="MenuOutput">yaxis1</span> in the <span class="MenuOutput">Object Browser</span> and click <span class="MenuOutput">More</span>. Then set the <span class="MenuOutput">Axis rule</span> to <span class="MenuOutput">Range/Delta</span> with a <span class="MenuOutput">Minimum value</span> of <span class="InputCode">10</span>, a <span class="MenuOutput">Maximum value</span> of <span class="InputCode">50</span> and a <span class="MenuOutput">Delta</span> of <span class="InputCode">5</span>. Click <span class="MenuOutput">OK</span> and the graph will be rescaled--and more ticks will be added so we have a better chance at marking 46 accurately.</p>
<p><img alt="Editing the Y axis" height="519" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_76.png" width="481"/></p>
<p><img alt="Plot with rescaled Y axis" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_77.png" width="695"/></p>
<p>Now click the circle with a plus sign on the left and then click as best you can at the location mpg=46 (just above the line) and weight=3000. This will create a hollow circle at that location by default, but note that you could change its appearance at will. Seeing the point on the graph makes it clearer that the real advantage of a Prius over a 1978 VW Diesel (the 1978 car with 41 MPG) is not the Prius' somewhat higher MPG, but the fact that it gets that MPG despite being a much heavier car.</p>
<p><img alt="Plot with a point added" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_78.png" width="695"/></p>
<p>Now click on the <span class="MenuOutput">T</span> to add text and then click to the right of the new point. This will give you the <span class="MenuOutput">Textbox properties</span> window. In the <span class="MenuOutput">Text</span> box type <span class="InputCode">2008 Toyota Prius for comparison</span> and set the <span class="MenuOutput">Size</span> to <span class="MenuOutput">Small</span>. Then click <span class="MenuOutput">OK</span>.</p>
<p><img alt="Addind a textbox" height="319" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_79.png" width="341"/></p>
<p><img alt="Plot with a label for the added point" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_80.png" width="695"/></p>
<p>The bottom button on the left is the "grid editor." This allows you to make drastic changes to your graph, like rearranging the parts. Use with discretion, and saving your graph before changing anything is highly recommended.</p>
<p>This is a good time to mention why you might want to save graphs in Stata format: while it's true that you can't put them into documents that way, you can make changes to them in the graph editor. Thus you might want to keep two copies of important graphs, one in Stata graph format in case you need to make changes, and one in something like .emf format that you can insert into your paper.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_33.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_34.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_9.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_35.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_4.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_36.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_28.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_37.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_38.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_5.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_39.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_6.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_40.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_27.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_41.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_10.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_42.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_7.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_43.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_31.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_32.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_8.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_44.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_11.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_45.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_25.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_46.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_14.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_47.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_12.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_48.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_13.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_49.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_17.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_50.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_51.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_10.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_18.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_52.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_19.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_53.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_20.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_54.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_21.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_55.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_22.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_56.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_57.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_58.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_24.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_26.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_59.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_60.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_61.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_62.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_63.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_64.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_65.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_66.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_67.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_68.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_69.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_70.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_83.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_84.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_71.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_72.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_73.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_74.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_29.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_81.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_82.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_75.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_76.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_77.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_78.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_79.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-24b/4-24_80.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Including Calculated Results In Stata Graphs </kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Sometimes you want to include a result you've calculated
          		in a Stata graph. For example, you might want to have a
          		note give the mean of a variable. One option of course is to
          		find out the mean ahead of time and just type it in. But what
          		if your data change? Like all Stata commands, <span class="InputCode">graph</span> commands
          		can include macros. So if you have Stata find the number you
          		want and then store it as a macro, you can then use the macro
          		to put that number in your graph.</p>
<p>If you're not familiar with macros, please read  the Local
          		Macros section of <a href="https://www.ssc.wisc.edu/sscc/pubs/stata_prog1.htm">Stata Programming Essentials</a> before continuing. </p>
<p>As an example, load the automobile data set. Then create
          		a scatter plot of mpg vs. weight with a linear fit line overlaid
          		on it, with confidence intervals:</p>
<p class="InputCode">sysuse auto<br/>
            twoway (lfitci mpg weight) (scatter mpg weight)</p>
<p>Be sure to  put the linear fit first so the points from
          		the scatter plot can overlay the shaded 95% confidence interval.</p>
<p><img alt="Scatterplot MPG vs. Weight" height="447" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_1.png" width="640"/></p>
<p>Next add a note giving the R-squared of the implied regression.
          		Find it with:</p>
<p class="InputCode">regress mpg weight</p>
<p>which gives:</p>
<pre>      Source |       SS       df       MS              Number of obs =      74
-------------+------------------------------           F(  1,    72) =  134.62
       Model |   1591.9902     1   1591.9902           Prob &gt; F      =  0.0000
    Residual |  851.469256    72  11.8259619           R-squared     =  0.6515
-------------+------------------------------           Adj R-squared =  0.6467
       Total |  2443.45946    73  33.4720474           Root MSE      =  3.4389

------------------------------------------------------------------------------
         mpg |      Coef.   Std. Err.      t    P&gt;|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
      weight |  -.0060087   .0005179   -11.60   0.000    -.0070411   -.0049763
       _cons |   39.44028   1.614003    24.44   0.000     36.22283    42.65774
------------------------------------------------------------------------------
			</pre>
<p>You could just  add a note with that value:</p>
<p class="InputCode">twoway (lfitci mpg weight) (scatter mpg weight), note(R-squared=.6515)</p>
<p><img alt="Scatterplot with note that R-squared=.6515" height="447" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_2.png" width="640"/></p>
<p>But why not let Stata do the work? After a regression, the R-squared is
				stored as <span class="InputCode">e(r2)</span> . You can store that
				in a macro and put the macro in your graph instead of typing
				the number yourself.</p>
<p>(To see a full list of the stored values
				available to you, type <span class="InputCode">ereturn
					list</span> after an estimation command like this one, or <span class="InputCode">return
					list</span> after a basic command like <span class="InputCode">summarize</span>.)</p>
<p class="InputCode">local r2=e(r2)<br/>
            twoway (lfitci mpg weight) (scatter mpg weight), note(R-squared=`r2')</p>
<p><img alt="Scatterplot with note that R-sqared=.6515312529087511" height="447" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_3.png" width="640"/></p>
<p>It works, but it's rather ugly because the r2 macro contains all sixteen
				digits. Four was much better. Fortunately there's a way to format
				a number before it's stored in a macro. It's done by calling
				on  the <span class="InputCode">display</span> command:</p>
<p class="InputCode">local r2: display %5.4f e(r2)</p>
<p>Here we use a colon (<span class="InputCode">local r2:</span>) to indicate
				we're going to store the results of a <span class="InputCode">display</span> command  in
				the local macro <span class="InputCode">r2</span>. <span class="InputCode">%5.4f</span> is
				the format we'll use: it specifies that the number be displayed
				with no more than five characters (including the decimal point)
				and no more than four digits to the right of the decimal point.
				As a result <span class="InputCode">r2</span> contains .6515 rather than
				.6515312529087511, giving a much nicer result when you create
				the graph.</p>
<p>The complete code to create the nice graph is:</p>
<p class="InputCode">sysuse auto<br/>
            reg mpg weight<br/>
            local r2: display %5.4f e(r2)<br/>
            twoway (lfitci mpg weight) (scatter mpg weight), note(R-squared=`r2')</p>
<p><img alt="Scatterplot with note that R-squared=.6515" height="447" src="https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_4.png" width="640"/></p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/4-25/4-25_4.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>An Introduction to Mata </kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Mata is a matrix language built into Stata, similar in many ways
          		to R, Matlab or GAUSS. It does have some unique and intriguing
          		features however. One is that it is a compiled language rather
          		than interpreted, which improves performance. It also has been
          		parallelized in Stata/MP (available on all the SSCC Linux servers
          		and Condor) which dramatically improves performance.  </p>
<p>Mata is not a replacement for Stata, nor is it intended to be a
          		stand-alone statistical package. It is a tool which is best used
          		as a supplement to Stata, for doing those things
          		Stata does not do well on its own. In particular, Mata does not work
          		in the context of a single data set, giving it additional flexibility.
          		But you should not try to learn Mata unless you are already
          		familiar with Stata or another statistical package. </p>
<p> Mata is a relatively "low level" language. Much of your
          		time in Stata (or SAS or SPSS) is spent using built-in programs,
          		finding just the right combination of options to get Stata
          		to do what you want. In Mata you will take direct control, telling
          		Mata what you want to do step-by-step. (The Mata optimizer, which
          		we will discuss at length, is a notable exception.) That means
          		doing simple things is usually more cumbersome in Mata than in
          		Stata, but Mata has fewer constraints. </p>
<p>This article is primarily written for people who have significant
          		experience using Stata, SAS or SPSS syntax, but no other programming
          		languages. Thus there will be a lot of emphasis on learning how
          		to do useful things by manipulating matrices, and many of the
          		examples are designed to give experience doing so as well as
          		illustrating a particular concept. Matlab and GAUSS veterans
          		may find they can skim these sections, focusing on what is new
          		to them. C programmers will find that Mata imitates C whenever
          		it can, so they can probably skim the sections on standard programming
          		constructs like loops. But no matter what your background, you
          		will learn far more if you read this article at the computer,
          		with Stata running, and actually type in the examples. </p>
<p>Mata runs within Stata, so in order to use Mata you'll need to
          		know how to run a Stata program, called a do file. If you've
          		never used Stata, please read the section on do files in <a href="https://ssc.wisc.edu/sscc/pubs/intro_stata/intro_stata4.htm">An
          		Introduction to Stata</a>. Interactive Stata (i.e. start it up and
          		type in commands) is a great way to learn and that's how you'll
          		do the examples in this article. But for real work you'll
          		want to write everything in do files.</p>
<p>There are several example files associated with this article.
          		There are links to them in the text as they are used. However,
          		if you're using an SSCC Linux server you may want to copy them
          		all ahead of time. To do so type the following at the Linux prompt:</p>
<p class="InputCode">mkdir mataclass<br/>
          	cd mataclass<br/>
          		cp /usr/global/web/sscc/pubs/files/4-26/* . </p>
<p>Most of the commands you'll type as you read are also  contained
          		in <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/mataclass.do">mataclass.do</a>. The two
          		major examples are found in <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/ex1.do">ex1.do</a> and
       		  <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/ex2.do">ex2.do</a>.</p>
<h2>Mata Basics</h2>
<p>To start Mata, first start up Stata and then type </p>
<p class="InputCode">mata</p>
<p>in the command window. Stata will then switch to "Mata mode." It's
          		easy to forget which mode you're in, but if you look carefully
          		at the bottom of the review window, where you normally see a
          		period you'll now see a colon. Of course when you first start
          		Mata there's a big horizontal line that says <span class="MenuOutput">mata</span> but that won't
          		be visible for long. That bar also reminds you of another useful
          		command: to get out of Mata mode, type</p>
<p class="InputCode">end</p>
<p>While Stata is organized around commands, Mata is organized around
          		"statements." For example, you can simply type</p>
<p class="InputCode">2+2</p>
<p>and Mata will return</p>
<p class="InputCode">4</p>
<p>Storing the results in a variable is just as easy:</p>
<p class="InputCode">x=2+2</p>
<p>Note that there was no output this time. If you want to see the
          		value of x, simply type:</p>
<p class="InputCode">x</p>
<p>and you'll get <span class="InputCode">4</span> back.</p>
<h2>Matrix Operators</h2>
<p>In our earlier examples, the plus sign acted as an operator: Mata
          		recognized it as saying "take the thing before the plus sign
          		and the thing after the plus sign  and sum them." Mata
          		also defines matrix operators which carry out matrix manipulations.</p>
<h3>Column and Row Join </h3>
<p>The comma is defined as the "column join" operator, or
          		"take the things before and after the comma and put them next
          		to each other." That means</p>
<p class="InputCode">1,2</p>
<p>is interpreted by Stata as a matrix with one row and two columns.
          		In fact, type it and the output will be:</p>
<pre>       1   2
    +---------+
  1 |  1   2  |
    +---------+
</pre>
<p>The backslash (<span class="InputCode">\</span> not<span class="InputCode"> /</span>,
          		which is division) is the "row join" operator, or "take the thing
          		before the backslash and stack it on top of the thing after it."
          		Thus</p>
<p>1\2</p>
<p>is a matrix with two rows and one column:</p>
<pre>       1
    +-----+
  1 |  1  |
  2 |  2  |
    +-----+
</pre>
<p>The things to be operated on are not limited to scalars, so you
          		can construct matrices.</p>
<p class="InputCode">1,2\3,4</p>
<p>gives</p>
<pre>
       1   2
    +---------+
  1 |  1   2  |
  2 |  3   4  |
    +---------+ </pre>
<h3>Error Messages </h3>
<p>There are limits:</p>
<p class="InputCode">1,2\3\4</p>
<p>gets you</p>
<p> <span class="MenuOutput">&lt;istmt&gt;: 3200 conformability error<br/>
          		r(3200);</span><br/>
<br/>
								 You	can't	make	a matrix whose first
								 row has two columns but whose second and third
								 rows have one column. Stata calls this as a
								 conformability error, a class which also includes
								 things like trying to multiply matrices where
								 the number of columns of the first matrix is different from the number
			    of rows of the second.</p>
<p>This is also a "runtime" error. When you give Mata a
          		statement, the first thing it does is compile the statement into
          		byte code. At that point Mata isn't looking at the specific quantities
          		to be manipulated. All it sees is "put something next to something
          		else, then stack that on top of two other things." That makes
          		sense, so the statement compiles successfully. Only when the
          		code runs does Mata notice that the things to be stacked have
          		different numbers of columns.</p>
<p>A compile time error is generated when the statement doesn't make
          		sense no matter what quantities you plug into it. For example,</p>
<p class="InputCode">1,\3\4</p>
<p>Gets you </p>
<p><span class="MenuOutput">invalid expression<br/>
          		r(3000);</span></p>
<p>Compile time errors are always error code 3000, and don't include
          		<span class="MenuOutput">&lt;istmt&gt;</span>. Noting whether an
          		error is a compile time error or a runtime error can help you
          		in finding the problem. If it was runtime, you know Mata at least
          		understood your code (though there's no guarantee it understood
          		it to mean the same thing you understand it to mean) and it was
          		something about the specific quantities  it was working with
          		that caused the problem. If it's compile time, the code doesn't
          		even make sense to Mata.</p>
<h3>Parentheses</h3>
<p>As you're putting together matrices you're welcome to include parentheses
          		to help clarify things. It's mostly for your benefit:</p>
<p class="InputCode">1,2\3,4<br/>
          		(1,2\3,4)<br/>
          		(1,2)\(3,4)</p>
<p>are all the same to Mata, but if one of them looks clearer to you
          		by all means use that style in all your programs. (I happen to be
          		a fan of the third.) </p>
<h3>Range Operators </h3>
<p>Another set of handy tools for creating matrices are the range
          		operators. The <span class="InputCode">..</span> operator creates
          		a series starting from the number on the left up to the number
          		on the right and makes them into a row vector. The <span class="InputCode">::</span> operator
          		does the same but puts them in a column vector.</p>
<p class="InputCode">1..3<br/>
          	1::3</p>
<p>It's not limited to integers, however:</p>
<p class="InputCode">1.2..3.5</p>
<p>Note that number on the right is not guaranteed to be part of the
          		resulting series.</p>
<h3>Variables</h3>
<p>The results of matrix statements can of course be saved in variables
          		just like other statements. For example:</p>
<p class="InputCode">x=3,4<br/>
          	y=5,6<br/>
          	z=(1,2)\x\y<br/>
          	z</p>
<p>Note how the definition of z looks a lot like the statement we
          		tried earlier that gave a runtime error. It runs now because
          		x and y both have two columns. That's why it was a runtime error
          		and not a compile time error: given the right inputs the statement
          		can work.</p>
<h3>Arithmetic Operators </h3>
<p>The standard arithmetic operators recognize when one or both of
          		their arguments is a matrix, and act accordingly. This includes
          		addition and subtraction, scalar times matrix, and full matrix
          		multiplication.</p>
<p>However, there are also "colon" operators which work element by
          		element. For addition and subtraction it makes no difference,
          		since they're element by element anyway. But it makes a great
          		deal of difference with multiplication. Consider the following:</p>
<p class="InputCode">x=(1,2)\(3,4)<br/>
          	y=(1,2)\(3,4)<br/>
          	x*y<br/>
          	x:*y</p>
<h3>Logical Operators </h3>
<p>Logical operators such as greater than, less than, and equal to
          		are also defined  in both matrix and colon versions (note that
          		the equals operator is ==, as opposed to = for assignment). However,
          		Mata does not have a boolean variable type. Thus (as in Stata)
          		logical operators return one for true and zero for false.</p>
<p>If you compare two matrices using standard greater than, less than
          		or equals, Mata returns one if and only if the condition is true
          		for all the elements of the two matrices. Otherwise it returns
          		zero </p>
<p class="InputCode">x==y<br/>
          		x&gt;y<br/>
          		x&lt;y<br/>
          	z=(1,2)\(3,5)<br/>
          	x==z<br/>
          	x&gt;z<br/>
          	x&lt;z<br/>
          	x&lt;=z</p>
<p>These operators can only work on matrices of the same size. </p>
<p>In their colon form, the result is a matrix containing all of the
          		element-by-element comparisons.</p>
<p class="InputCode">x:==y<br/>
          		x:==z<br/>
       			x:&lt;z</p>
<p>The colon form allows more flexibility about the sizes of the matrices
          		to be compared. If one argument is a scalar, row vector, or
          		column vector, it will be duplicated as needed so as to match
          		the other matrix.</p>
<p class="InputCode">x:==2 <br/>
          		x:==(1,2)<br/>
          		x:==(1\3)<br/>
</p>
<p>The transpose operator is the right single quote ('). It works
          		on just one object, the one to its left, and returns its transpose:</p>
<p class="InputCode">x'</p>
<p>There is no inverse operator, however. Inversion is carried out
          		by functions. </p>
<h2>Subscripts</h2>
<p>To reference a particular element of a matrix, put the row and
          		column number in square brackets after the matrix name. Given
          		the matrix <span class="InputCode">x</span> defined above, <span class="InputCode">x[1,1]</span> is <span class="InputCode">1</span>, <span class="InputCode">x[1,2]</span> is <span class="InputCode">2</span>,
          		etc. Subscripts can be used on either side of an equals sign:</p>
<p class="InputCode">z=x[1,1]<br/>
          	z<br/>
          	x[1,1]=5<br/>
x</p>
<p>If a matrix is a row or column vector, you can use just one subscript. </p>
<p class="InputCode">y=1,2,3<br/>
          		y[2]<br/>
          			y=1\2\3<br/>
       			y[2]</p>
<p>"Missing" for the row or column number is taken to mean
          		all the rows or columns. You can use either the standard period
          		for missing or simply leave the number out. Thus</p>
<p class="InputCode">x[.,1]<br/>
          	x[1,]</p>
<p>You can also replace either number with a row or column vector
          		(and Stata doesn't care which one you use). However, this time
          		parentheses are required so Mata knows where the list of rows
          		ends and the columns begin.</p>
<p class="InputCode">a=(1,2,3)\(4,5,6)\(7,8,9)<br/>
          	a[(1,3),.]</p>
<p>You can repeat rows or columns, mix up the order, or even create
          		matrices bigger than the original.</p>
<p class="InputCode">a[(3,2,1),(3,2,1)]<br/>
          		a[(3,1,2,2,1,3),.]          	</p>
<p>Pre-defined vectors are also just fine:</p>
<p class="InputCode">b=(3,1,1)<br/>
          	a[.,b]</p>
<p>Note that using  vector subscripts like this will be  faster
          		than multiplying by a permutation matrix.</p>
<h3>Subscripting Ranges </h3>
<p>Mata refers to the subscripts we've used thus far as "list" subscripts.
          		Every element we wanted was listed explicitly (well, except for
          		missing meaning "all"). But you'll often want  to specify
          		a range of rows and columns.</p>
<p>There's not much need for ranges with small matrices, so begin
          		by creating a bigger matrix: </p>
<p class="InputCode">x1=1..10<br/>
          	x2=(1::10)*10<br/>
          	x=x1[(1,1,1,1,1,1,1,1,1,1),.]+x2[.,(1,1,1,1,1,1,1,1,1,1)]<br/>
          	x</p>
<p>Take a moment to try to figure out how this worked before reading
          		further. </p>
<p>The first line defines <span class="InputCode">x1</span> as a row
          		vector using the range operator. The second defines a <span class="InputCode">x2</span> column
          		vector, again using the range operator but multiplying the result
          		by ten. The third then defines x as ten copies of x1 stacked
          		on top of each other plus ten copies of x2 placed next to each
          		other. The result is a ten by ten matrix that goes from 11 to
          		110, which will make it easy to tell which rows and columns we've
          		extracted in the next few examples. (Yes, there are easier ways
          		to do this using functions and/or loops, but we haven't covered
          		them yet.)</p>
<p>One method of extracting a range of rows and columns from x is
          		to use the range operators within list subscripts. Thus to get
          		rows 3-7 and columns 4-8 you could do:</p>
<p class="InputCode">x[(4..7),(3..8)]</p>
<p>This is exactly equivalent to typing out: </p>
<p class="InputCode">x[(4,5,6,7),(3,4,5,6,7,8)]</p>
<p>True range subscripts, however, are different. For one thing, they
          		are contained in square brackets and the pipe character (shift-backslash).
          		There are two elements, separated by a backslash: the row and
          		column of the upper left corner of the desired range, and the
          		lower right corner of the desired range. Thus the equivalent
          		to</p>
<p class="InputCode">x[(4..7),(3..8)]</p>
<p>is</p>
<p class="InputCode">x[|4,3\7,8|]</p>
<p>Think of it as replacing "rows four through seven and columns three
          		through eight" with "everything between row four, column three
          		and row seven, column eight, inclusive."</p>
<p>Missing can mean several things in range subscripts. If used
          		in specifying the upper left corner, it means either the first
          		row or the first column. If used in specifying the lower right
          		corner, it means either the last row or the last column. Thus</p>
<p class="InputCode">x[|.,.\.,.|]</p>
<p>is simply all of <span class="InputCode">x</span>.
          		There's also no rule that says the upper left and bottom right
          		corners can't be on the same row or column.</p>
<p class="InputCode">x[|3,3\3,.|]          		</p>
<p>This means "row three, from the third column to the end." </p>
<h2>Getting your Data from Stata to Mata</h2>
<p>Most of the time you won't be creating matrices by hand. Instead
          		you'll want to make matrices containing the data you already
          		have in Stata. You're also likely to want to take your Mata results
          		and copy them to your Stata data set.</p>
<p>The first question you need to answer is whether you want to make
          		a fresh copy of your data, or whether you want to have Mata work
          		with the Stata data directly. Mata can define matrices which
          		are actually "views" of your Stata data. Think of a view
          		as just giving your Stata data a name Mata can use. Views use
          		a trivial amount of memory even if your data are very large.
          		If you  change the tables of a view matrix, the Stata
          		data are also changed. If you make a copy of the data instead
          		you can make changes and keep the original intact, however you'll
          		use twice as much memory.</p>
<h3>st_data</h3>
<p>To make copies of your data you'll use the <span class="InputCode">st_data</span> family
          		of functions. The simplest and the fastest is <span class="InputCode">_st_data</span>.
          		It is used to get a single number from your data set. It takes
          		two arguments: an observation number and a variable number. Think
          		of your data set as a matrix already, and the variable number
          		is simply the column number of the variable you want.</p>
<p>To see this in action, first end Mata by typing <span class="InputCode">end</span>, load
          		the automobile example data set, list observation one, and go
          		back into Mata: </p>
<p class="InputCode">end<br/>
          	sysuse auto<br/>
          	l in 1 <br/>
          	mata</p>
<p>Now get the price of the first car by typing:</p>
<p class="InputCode">_st_data(1,2)</p>
<p>The result will be 4099, which matches what you just listed. Try
          		some other variables to make sure you've got the idea. Note that
          		if you try to get the first column you'll get a missing value.
          		That's because <span class="InputCode">_st_data</span> is only for numeric data. For strings,
          		use <span class="InputCode">_st_sdata</span> which works in pretty much the same way.</p>
<p class="InputCode">_st_sdata(1,1)</p>
<p>Mata can look up the column numbers for you using the <span class="InputCode">st_varindex</span>          		function.
          		It takes the name of the variable you want and returns the index.
          		However, that process will slow things down slightly. Note that
          		you're welcome to use the output of one function as an argument
          		for another function: </p>
<p class="InputCode">_st_data(1,st_varindex("mpg"))</p>
<p>If you want more than  one value, use <span class="InputCode">st_data</span>.
          		<span class="InputCode">st_data</span> can be used just like <span class="InputCode">_st_data</span> (though
          		in that case <span class="InputCode">_st_data</span>          		is
          		faster). However, <span class="InputCode">st_data</span> is more
          		flexible about the arguments it will accept.</p>
<p>The row number can be missing, in which case all observations are
          		returned. It can also be a column vector, in which case only
          		the specified observations are returned. It can also be a matrix
          		with two columns. Each row then represents a range of observations.
          		A missing in this case is interpreted as the last observation. </p>
<p>The column number  can also be missing (all variables) or a vector
          		listing the variables desired. It can also accept the names of
          		the variables rather than their numbers, though this will be
          		slower. It does not allow you to specify ranges like you can
          		for rows.</p>
<p>Like <span class="InputCode">_st_data</span>, <span class="InputCode">st_data</span> cannot handle strings. But there is an equivalent
          		<span class="InputCode">st_sdata</span>. </p>
<p>Try the following:</p>
<p class="InputCode">st_data(.,.)<br/>
          	st_data((1,3),2)<br/>
          	st_data(1,(2,4))<br/>
          	st_data(1,("price","rep78"))<br/>
          	st_sdata(.,1)</p>
<p>Naturally all these results could be stored in matrices for future
          		use.</p>
<p class="InputCode">x=st_data(1,(2,4))<br/>
          	x</p>
<p><span class="InputCode">st_data</span> can also take a third argument:
          		a selection variable. This can be either the index or the name
          		of a variable, and if it is specified then only observations
          		where that variable is not equal to zero are returned. Choosing
          		0 as the select variable has a special meaning: in that case
          		observations will be excluded if they have a missing value for
          		any variable specified.</p>
<p class="InputCode">st_sdata(.,1,"foreign")</p>
<h3>st_view</h3>
<p><span class="InputCode">st_view</span> makes views onto your data
          		rather than copying them, but you can select rows and
          		variables using the exact same methods as <span class="InputCode">st_data</span>.
          		However, <span class="InputCode">st_view</span> gives you the results
          		in a different way. With
          		<span class="InputCode">st_data</span>, the matrix you wanted was
          		what the <span class="InputCode">st_data</span>          		function
          		returned. You could then store the results or simply let them
          		 be displayed on the screen. With <span class="InputCode">st_view</span>,
          		 the function itself returns nothing. Instead you need to pass
          		 in a matrix which will be replaced with the view you select.</p>
<p class="InputCode">st_view(x,.,.)<br/>
          	x</p>
<p>One catch is that the matrix has to exist before you pass it in.
          		It doesn't matter how big it is--in fact it will be completely
          		replaced--but if you try to pass a matrix to st_view that hasn't
          		been defined somehow you'll get a runtime error. One easy way
          		is to simply set the matrix you want to use to zero before passing
          		it in. You can even do that inside your function call: </p>
<p class="InputCode">          	st_view(n=0,1,(2,4))<br/>
          	n</p>
<p><span class="InputCode">x</span> and <span class="InputCode">n</span> now
          		look like a regular matrices, but keep in mind that they are
          		in fact  views. If your objective in using a view is to save
          		memory, you have to be careful not to make copies of it.</p>
<p class="InputCode">y=x</p>
<p>does not create a new view. It creates a new matrix containing
          		the values of <span class="InputCode">x</span>; a copy. More subtly,</p>
<p class="InputCode">x[.,j]</p>
<p>creates a  copy of the jth column of x. If you need a particular
          		column out of x, you can just create a new view:</p>
<p class="InputCode">st_view(xj,.,j) </p>
<p>There's no limit to the number of different views you can set up
          		for the same data.</p>
<h3>Getting your Data from Mata to Stata</h3>
<p>If all you want to do is change the values of existing variables,
          		make a view and change at will. But if you want to add new variables
          		you'll need a couple more functions.</p>
<p><span class="InputCode">st_addvar</span> adds a new variable. It takes two arguments: the variable
          		type and the variable name. It returns the index of the variable,
          		though storing that for future use is optional.</p>
<p>Let's create a new variable: weight*mpg (so, pound-miles per gallon,
          		a unit only an engineer could love).</p>
<p class="InputCode">          	st_view(mpg=0,.,"mpg")</p>
<p>Note that the matrix called <span class="InputCode">mpg</span> is now a view of all rows of the
          		<span class="InputCode">mpg</span> variable.</p>
<p class="InputCode">          	st_view(weight=0,.,"weight")<br/>
          	pmg=weight:*mpg<br/>
          	st_addvar("long","pmg")<br/>
          	st_store(.,"pmg",pmg)</p>
<p>To explore this new variable using the Stata tools you're familiar
          		with, type <span class="InputCode">end</span>. Of course this is
          		an extraordinarily clumsy replacement for</p>
<p class="InputCode">gen long pmg=mpg*weight</p>
<p>This leads to a general principle: use Mata for what it's
          		good at, and Stata for what it's good at.</p>
<p>There are a wide variety of other functions you can use to communicate
          		between Mata and Stata, including adding observations and getting
          		or setting local macros, e() and r() vectors, and much more.
          		See the manual for details. </p>
<h2>Saving and Loading Mata Data</h2>
<p>Most often the goal of a Mata program is to take your Stata
          		data, find a result, and then either display it or put it back
          		into your Stata data. However, you can save Mata matrices themselves
          		if you need to.</p>
<p>To save a matrix, type</p>
<p class="InputCode">mata matsave <span class="Parameter">filename</span> <span class="Parameter">matrixlist</span></p>
<p>Replace <span class="Parameter"><span class="InputCode">filename</span></span> with
          		the name of the file you want to create. Stata will add <span class="InputCode">.mmat</span> to
          		the filename automatically. Replace <span class="Parameter"><span class="InputCode">matrixlist</span></span> with
          		one or more matrices you want to save (separating them with spaces)
          		or with an asterisk (<span class="InputCode">*</span>) to save all
          		the matrices currently in memory.</p>
<p>To load the matrices you've saved previously, type</p>
<p class="InputCode">mata matuse <span class="Parameter">filename</span></p>
<p>This will load all the matrices stored in <span class="Parameter"><span class="InputCode">filename</span></span>. </p>
<p>Both commands will accept the <span class="InputCode">replace</span> option.
          		For <span class="InputCode">matsave</span>, this allows Mata to overwrite
          		the existing file on disk. For <span class="InputCode">matuse</span>,
          		this allows Mata to overwrite existing matrices in memory with
          		the same names as matrices in the file. </p>
<p>These commands are intended for interactive use and cannot be
          		used in functions. If you need to save matrices within a function,
          		check out <span class="InputCode">fopen</span>, <span class="InputCode">fputmatrix</span>, <span class="InputCode">fgetmatrix</span>,
          		and <span class="InputCode">fclose</span>.</p>
<h2>Hierarchical Data</h2>
<p>Hierarchical data has always been a bit awkward to work with in
          		Stata, or any other statistical program that uses a single data matrix.
          		A typical example would be individuals living in households: should
          		each household be one observation, or each individual? Either way
          		there are inefficiencies. In Mata you can have it both ways: one
          		matrix of individuals and one matrix of households. The key is linking
          		them together, but subscripts make that easy.</p>
<p>As an example, take a look at the <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/hh.dta">hh
          			Stata data set</a>, which is in Stata format. It consists of six individuals
          		living in three households. <span class="InputCode">hh</span> is
          		the household ID, <span class="InputCode">hhType</span> is the type
          		of household, and <span class="InputCode">hhInc</span> is the household
          		income. <span class="InputCode">age</span> and <span class="InputCode">female</span> are
          		individual variables. This data is in the long form, with one
          		observation for each individual, which means that the household
          		variables must be duplicated.</p>
<p class="InputCode">end<br/>
          	use hh,replace<br/>
          		l</p>
<p>Now enter mata and load the <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/hh.mmat">hh
          			Mata data set</a>.</p>
<p class="InputCode">mata<br/>
          		mata matuse hh<br/>
          	hh<br/>
          	ind</p>
<p>It contains two matrices, <span class="InputCode">ind</span> and <span class="InputCode">hh</span>.          		 <span class="InputCode">hh</span> contains the household level variables (<span class="InputCode">hhType</span>          		and <span class="InputCode">hhInc</span>). <span class="InputCode">ind</span> contains the individual variables (<span class="InputCode">age</span> and <span class="InputCode">female</span>)
          		plus the household ID. Note however, that <span class="InputCode">hh</span> does not contain an
          		ID: the row number is an implicit ID.</p>
<p>For example, if you wanted to know what type of household person
          		number two lives in, you'd use:</p>
<p class="InputCode">hh[ind[2,3],1] </p>
<p><span class="InputCode">ind[2,3]</span> is the household ID of
          		the second person, or the row in the hh matrix. Column one of
          		<span class="InputCode">hh</span> is the household type.</p>
<p>Of course a regression model may need a single matrix just like
          		Stata does. You can easily recreate the matrix as Stata views it
          		with:</p>
<p class="InputCode">x=ind,hh[ind[.,3],.]</p>
<p>Here <span class="InputCode">ind[.,3]</span> is a column vector
          		listing which row we want from <span class="InputCode">hh</span> for
          		each row of ind<span class="InputCode">.</span> The resulting rows
          		from <span class="InputCode">hh</span> are then placed next to <span class="InputCode">ind</span> to
          		create <span class="InputCode">x</span>.</p>
<h2>Matrix Functions</h2>
<p>Mata has a very large number of matrix functions built into it.
          		This section will hit some of the most useful.</p>
<h3>Creating Matrices</h3>
<p>The <span class="InputCode">I</span> function can take one or two arguments. If it is given one
          		argument, it will return an identity matrix of size equal to
          		the argument it was given. If it is given two arguments, it will
          		return a matrix with that number of rows and columns which is
          		full of zeroes except for ones along the principal diagonal.</p>
<p class="InputCode">I(3)<br/>
          	I(4,3)</p>
<p>The J function creates a matrix of constants. It takes three arguments:
          		the number of rows of the matrix to be created, the number of
          		columns, and what to put in the matrix. The last argument can
          		be of any type.</p>
<p class="InputCode">J(3,3,0)<br/>
          		J(2,3,"a")</p>
<p>The <span class="InputCode">e</span> function creates unit vectors:
          		row vectors with a one in one column and zeroes everywhere else.
          		It takes two arguments: the location of the one, and the size
          		of the row vector.</p>
<p class="InputCode">e(1,3)</p>
<p>Thus you could create an identity matrix by combining <span class="InputCode">e</span>'s,
          		though the <span class="InputCode">I</span> function would of course
          		be much easier.</p>
<p class="InputCode">e(1,3)\e(2,3)\e(3,3)</p>
<p>The <span class="InputCode">uniform</span> function returns a matrix
          		filled with random numbers distributed uniform(0,1). The size
          		is specified in the same way as with the J function.</p>
<p class="InputCode">uniform(5,5)</p>
<p>If you're putting together a  matrix which will be symmetric, the <span class="InputCode">makesymmetric</span>          		function
          		can take care of half the work for you. You put together the
          		lower triangle, and makesymmetric will copy it to the upper triangle
          		(replacing what was there before). It takes one argument, a matrix,
          		and returns the symmetric version.</p>
<p class="InputCode">x=(1,2)\(3,4)<br/>
          		y=makesymmetric(x)<br/>
          	y</p>
<p>There's a second version, _makesymmetric which returns nothing
          		but changes the input matrix instead:</p>
<p class="InputCode">_makesymmetric(x)<br/>
          	x</p>
<h3>Sorting</h3>
<p>The <span class="InputCode">sort</span> function returns a sorted
          		matrix. It takes two arguments: the matrix to sort, and the column(s)
          		to sort by.</p>
<p class="InputCode">x=(2,1)\(1,3)\(1,2)<br/>
          	sort(x,1)</p>
<p>Note that sort is not a "stable" sort. If there are any
          		ties, they will be resolved randomly. Repeat sort(x,1)
          		enough times and you should see some cases when the original
          		second row becomes the first row and others where it 
          		stays the second row. </p>
<p>If the second argument is a row vector, the matrix will be sorted
          		by the first column listed, then ties resolved by the second
          		column, etc. </p>
<p class="InputCode">sort(x,(1,2))</p>
<p><span class="InputCode">sort</span> does not change the matrix
          		it is given--it returns a copy. If you'd prefer to sort the original
          		matrix without making a copy, use <span class="InputCode">_sort</span>.</p>
<p class="InputCode">x<br/>
          	_sort(x,(1,2))<br/>
          	x</p>
<p><span class="InputCode">jumble</span> and <span class="InputCode">_jumble</span> are
          		the opposite of <span class="InputCode">sort</span> and <span class="InputCode">_sort</span>.
          		They take just one argument, a matrix, and put its rows in a random
          		order. </p>
<h3>Sizes of Matrices</h3>
<p><span class="InputCode">rows</span>, <span class="InputCode">cols</span>,
          		and <span class="InputCode">length</span> all take one argument,
          		a matrix. They return the number of rows, the number of columns,
          		and the total number of elements (rows*columns) in that matrix
          		respectively.</p>
<p class="InputCode">rows(x)<br/>
          	cols(x)<br/>
          	length(x)</p>
<p>These can be very useful in for loops where you want to loop over
          		your entire matrix but don't know ahead of time what size it
          		will be.</p>
<p>Of course matrices can have missing values just like ordinary Stata
          		data sets. If you need to know the number of missing values in
          		the whole matrix, a row, or a column, use <span class="InputCode">missing</span>, <span class="InputCode">rowmissing</span>          		or <span class="InputCode">colmissing</span> respectively.
          		<span class="InputCode">missing</span> returns a scalar, rowmissing
          		returns a column vector (one value for each row in the matrix),
          		and colmissing returns a row vector (one value for each column
          		in the matrix).</p>
<p class="InputCode">y=(1,2,.)\(4,.,6)\(7,8,.)<br/>
          	missing(y)<br/>
          	rowmissing (y)<br/>
          	colmissing(y) </p>
<p>To get the number of non-missing
          		values, using <span class="InputCode">nonmissing</span>, <span class="InputCode">rownonmissing</span>,
          		or <span class="InputCode">colnonmissing</span>.</p>
<h3>Descriptive Statistics</h3>
<p>Mata has a set of functions for calculating  descriptive
          		statistics, though by design it's not as rich as Stata's. In
          		their simplest and most commonly used forms, all these functions
          		take a single matrix as their argument.</p>
<p>Sums may be stretching the definition of "descriptive statistic"
          		but they are very useful. There are three main sum functions:
          		<span class="InputCode">sum</span>, <span class="InputCode">rowsum</span>,
          		and <span class="InputCode">colsum</span>. <span class="InputCode">sum</span> adds
          		up the whole matrix, returning a single number. <span class="InputCode">rowsum</span> adds
          		up each row, returning a column vector. <span class="InputCode">colsum</span> adds
          		up each column, returning a row vector.</p>
<p class="InputCode">sum(x)<br/>
          	rowsum(x)<br/>
          	colsum(x)</p>
<p><span class="InputCode">max</span> and <span class="InputCode">min</span> simply return the largest or smallest element of the
          		matrix.</p>
<p class="InputCode">max(x)<br/>
          	min(x)</p>
<p> <span class="InputCode">rowmax</span> and <span class="InputCode">rowmin</span> return a column vector containing the largest
          		or smallest element of each row. Likewise, colmax and colmin
          		return a row vector.</p>
<p class="InputCode">rowmax(x)<br/>
          	colmin(x)</p>
<p>You can get the largest and smallest elements with the <span class="InputCode">minmax</span> functions,
          		including <span class="InputCode">minmax</span>, <span class="InputCode">rowminmax</span>,
          		and <span class="InputCode">colminmax</span>. They return both
          		the min and the max in either two columns or, in the case of <span class="InputCode">colminmax</span>,
          		two rows.</p>
<p class="InputCode">minmax(x)<br/>
          	colminmax(x)</p>
<p>Sometimes you're more interested in <em>where</em> the min or max is than
          		<em>what</em> it is. If so, check out <span class="InputCode">minindex</span> and <span class="InputCode">maxindex</span>. </p>
<p>The <span class="InputCode">mean</span> function returns a row vector containing the column means
          		of the matrix.</p>
<p class="InputCode">mean(x)</p>
<p>If you need  row means, you'll need to construct them yourself:</p>
<p class="InputCode">rowsum(x)/cols(x)</p>
<p>You can also get the variance matrix of your matrix with variance,
          		and the correlation matrix with correlation.</p>
<p class="InputCode">variance(x)<br/>
          	correlation(x)</p>
<h3>Matrix Characteristics</h3>
<p>Mata has functions for finding the most common matrix  characteristics.</p>
<p><span class="InputCode">diagonal</span> returns the principal diagonal
          		of a matrix as a row vector.</p>
<p class="InputCode">x=(1,2)\(3,4)<br/>
          		diagonal(x) </p>
<p> <span class="InputCode">trace</span> returns the sum of the diagonal elements.</p>
<p class="InputCode">trace(x)</p>
<p><span class="InputCode">det</span> returns the determinant (with some round-off error).</p>
<p class="InputCode">det(x)</p>
<p><span class="InputCode">rank</span> returns the rank of the matrix.</p>
<p class="InputCode">rank(x)</p>
<p>As a general rule, using rank to check that a matrix is full rank
          		because a subsequent calculation requires it is redundant--better
          		to let the subsequent calculation fail and handle the failure.
          		Also, when determining the rank of a matrix on a	computer
          		a certain tolerance is required for round-off error. Different
          		functions can use different tolerances, so they may disagree
          		with the <span class="InputCode">rank</span> function. </p>
<h3>Solvers, Inverters and Decomposition </h3>
<p>Matrix solvers are functions designed to solve the equation AX=B
          		for  X. Since inverting a matrix A can be done by solving the
          		equation AX=I, inverters and solvers are closely related. In
          		addition, the solvers and inverters generally work by doing some
          		sort of decomposition, and the decomposition methods can also
          		be accessed directly. Thus there are several families of three
          		related functions. Which family you'll choose depends on the
          		properties of your matrix. We'll focus on Cholesky methods, but the
          		others work in a very similar way. </p>
<p>The Cholesky Decomposition decomposes a symmetric, positive definite
          		matrix into a lower triangular matrix times its transpose. The
          		results can be used to solve matrix equations and find inverses
          		much more quickly than more general methods. To get an example
          		matrix we can work with, we can take advantage of the fact that
          		if x is of full rank, x'x is symmetric and positive definite--and
          		random matrices are all but certain to be full rank. So:</p>
<p class="InputCode">a=uniform(5,5)<br/>
          	a=a'*a</p>
<p>The <span class="InputCode">cholesky</span> function takes one argument, a matrix, and returns
          		 a lower triangular matrix which is its Cholesky Decomposition.</p>
<p class="InputCode">cholesky(a) </p>
<p>To verify that it works, note that</p>
<p class="InputCode">cholesky(a)*cholesky(a)'</p>
<p>is the same as a.</p>
<p>To illustrate solving a matrix equation, we need a right-hand side.   </p>
<p class="InputCode">b=uniform(5,1)</p>
<p>The <span class="InputCode">cholsolve</span> function takes two
          		arguments, both matrices. It them sets up and solves the equation
          		AX=B where A is the first matrix and B is the second, returning
          		X.</p>
<p class="InputCode">cholsolve(a,b)</p>
<p>To verify that it worked, note that</p>
<p class="InputCode">a*cholsolve(a,b)</p>
<p>gives b. </p>
<p>The <span class="InputCode">cholinv</span> function takes one argument, a matrix, and returns
          		its inverse:</p>
<p class="InputCode">cholinv(a)</p>
<p>Again, to verify it worked try</p>
<p class="InputCode">a*cholinv(a)</p>
<p>The result should be an identity matrix.   You'll notice that round-off
          		error makes some of the zeroes not quite zeroes, but it's as
          		close as you can get using a computer.</p>
<p>If your matrix is square but not symmetric, LU Decomposition can
          		do similar things (though it's slower than Cholesky).
          		The <span class="InputCode">lud</span> function
          		is equivalent to <span class="InputCode">cholesky</span>,
          		but more complex because it has to give back three results. Thus
          		the matrices to store the results have to be passed in, similar
          		to <span class="InputCode">st_view</span>.</p>
<p>LU Decomposition breaks a matrix into a lower triangular matrix
          		L, an upper triangular matrix U, and a permutation matrix P.
          		But Mata, instead of using a matrix P, gives a column vector p which
          		can be used with subscripting to do the same thing.</p>
<p class="InputCode">a=uniform(5,5)<br/>
          	lud(a,L=0,U=0,p=0)</p>
<p>Take look at <span class="InputCode">L</span>,<span class="InputCode">U</span>, and <span class="InputCode">p</span>. To verify that it worked, see that</p>
<p class="InputCode">(L*U)[p,.]</p>
<p>is <span class="InputCode">a</span>. Note how we're using subscripts
          		to pull rows from a result, not an existing matrix, and yet it
          		works just fine.</p>
<p><span class="InputCode">lusolve</span> and <span class="InputCode">luinv</span> are
          		much simpler--in fact the usage is identical to <span class="InputCode">cholsolv</span> and <span class="InputCode">cholinv</span>.
          		Try</p>
<p class="InputCode">a*lusolve(a,b)<br/>
          	a*luinv(a)</p>
<p>Similar functions exist for QR decomposition (<span class="InputCode">qrd</span>, <span class="InputCode">qrsolve</span>, <span class="InputCode">qrinv</span>).
          		Singular value decomposition has <span class="InputCode">svd</span> and <span class="InputCode">svsolve</span>, but the related
          		inverter is <span class="InputCode">pinv</span> (which returns the Moore-Penrose pseudoinverse). </p>
<p><span class="InputCode">invsym</span>, for inverting symmetric
          		matrices, has no related decomposition or solver functions. It
          		is, however, what Stata suggests for linear regression. </p>
<h2>Example: Linear Regression</h2>
<p>You're now prepared to do the most common matrix manipulation of
          		all, at least at the SSCC.</p>
<p>Since we have the automobile data set loaded, let's regress price
          		on mpg, rep78, foreign and weight to see which characteristics
          		American consumers were willing to pay for in 1978.</p>
<p>One complication is that rep78 is missing for some observations,
          		so you'll need to drop them from your regression. Of course you
          		could just drop them from the data set entirely, but let's assume
          		that you want to keep them for later use.</p>
<p>The first step is to mark the observations you can actually use.
          		Exit Mata by typing <span class="InputCode">end</span>, then create a new variable touse which
          		is one if all the variables are non-missing and zero otherwise.</p>
<p class="InputCode">gen touse=(price!=. &amp; mpg!=. &amp; rep78!=. &amp; weight!=. &amp; foreign!=.)</p>
<p>Of course in reality the only variable that is ever missing is
          		<span class="InputCode">rep78</span>, but we'll pretend we didn't
          		know that ahead of time. If you wanted to run a regression on
          		a subpopulation (say, just the foreign cars) you could add a
          		condition to mark the subsample too. </p>
<p>Now go back into Mata by typing <span class="InputCode">mata</span>.
          		Next make x a view onto all the independant variables and y a
          		view onto the dependant variable. <span class="InputCode">touse</span> is
          		the selection variable for both views: observations will only
          		be included if it is equal to one. </p>
<p class="InputCode">								st_view(x=0,.,("mpg","rep78","weight","foreign"), "touse")<br/>
								st_view(y=0,.,("price"), "touse")</p>
<p>To include a constant term in the regression you need to add a
          		column of ones to x. Use the J function to create it, then add
          		it to x with the comma (column join) operator. </p>
<p class="InputCode">x=x,J(rows(x),1,1)</p>
<p>Now you can find the betas:</p>
<p class="InputCode">b=invsym(x'*x)*x'*y</p>
<p>Of course they don't mean anything without standard errors. Start
          		by finding the residuals:</p>
<p class="InputCode">e=y-x*b</p>
<p>Then the variance-covariance matrix is</p>
<p class="InputCode">v=(e'*e)/(rows(x)-cols(x))*invsym(x'*x)</p>
<p>The standard errors for each beta can be extracted using the <span class="InputCode">diagonal</span>          		function, along with <span class="InputCode">sqrt</span>, which takes the (element by element)
          		square root.</p>
<p class="InputCode">se=sqrt(diagonal(v))</p>
<p>The t-statistic is the beta divided by the standard error, but
          		this is an element by element division so you need to use the
          		colon operator.</p>
<p class="InputCode">t=b:/se</p>
<p>To find the p-values requires the <span class="InputCode">ttail</span> function,
          		which takes as arguments the degrees of freedom and the t-statistic
          		and returns the probability. It is a single-tailed test however,
          		so you need to multiply by two.</p>
<p class="InputCode">p=2*ttail(rows(x)-cols(x),abs(t))</p>
<p>To put your results together in a readable form, try:</p>
<p class="InputCode">b,se,t,p</p>
<p>Now exit Mata again, and check your results against</p>
<p class="InputCode">reg price mpg rep78 weight foreign</p>
<p>They should be identical.</p>
<h2>If</h2>
<p>In regular Stata, <span class="InputCode">if</span> is almost always used to define
          		which observations a command should act on. It's the equivalent
          		to SQL's <span class="InputCode">where</span> clause. In Mata, <span class="InputCode">if</span> is only used to control program
          		flow. (Though Stata can use <span class="InputCode">if</span> in this way as well—see the
          		appropriate section of <a href="https://www.ssc.wisc.edu/sscc/pubs/stata_prog2.htm">Stata Programming
          		Tools</a>.)</p>
<p>The most basic form of <span class="InputCode">if</span> is simply</p>
<p class="InputCode">if (<span class="Parameter">condition</span>) <span class="Parameter">statement</span></p>
<p>If <span class="Parameter"><span class="InputCode">condition</span></span> is
          		true, then <span class="Parameter"><span class="InputCode">statement</span></span> is
          		executed. Otherwise it is skipped entirely. Note that the condition
          		must be in parentheses.</p>
<p>If you want to do more than one thing if the condition is true,
          		use the following syntax:</p>
<p class="InputCode">if (<span class="Parameter">condition</span>)<br/> 
          		{<br/>
<span class="indent3"><span class="Parameter">statements</span></span><br/>
          	}</p>
<p>You can also use <span class="InputCode">else</span> to specify things that should happen if the
          		condition is not true. Thus you can create fairly elaborate structures:</p>
<p class="InputCode">if (<span class="Parameter">condition1</span>)<br/> 
          		{<br/>
<span class="indent3"><span class="Parameter">statements1</span></span><br/>
          		}<br/>
          		else if (<span class="Parameter">condition2</span>)<br/> 
          		{<br/>
<span class="indent3"><span class="Parameter">statements2</span></span><br/>
          		}<br/>
          		else<br/> 
          		{<br/>
<span class="indent3"><span class="Parameter">statements3</span></span><br/>
          		}</p>
<p>Keep in mind that each condition has a single result, either true
          		or false. For example, If x is a matrix you can't write <span class="InputCode">if
          		(x&gt;5)</span>          		and then list things you want done
          		for those elements of x which are greater than 5. You can write
          		<span class="InputCode">if (x[1,1]&gt;5)</span> followed by <span class="InputCode">if
          		(x[1,2]&gt;5)</span> etc. but of course the easy way to do that is
          		using a loop. </p>
<h2>Loops</h2>
<p>Mata has <span class="InputCode">while</span>, <span class="InputCode">do</span>-<span class="InputCode">while</span>,
          		and <span class="InputCode">for</span> loops available (plus <span class="InputCode">goto</span> for
          		easier conversion of FORTRAN code, but we don't want to endorse
          		spaghetti logic).</p>
<h3>While</h3>
<p>while looks very similar to if:</p>
<p class="InputCode">while (<span class="Parameter">condition</span>)<br/> 
          		{<br/>
<span class="indent3"><span class="Parameter">statements</span></span><br/>
          		}</p>
<p>The difference is that the statements will be executed over and
          		over as long as the condition is true. Thus your first concern
          		should be to make sure that at some point the condition will
          		become false, or the loop will run forever.</p>
<p class="InputCode">x=0<br/>
								while (x&lt;=5)<br/>
								{<br/>
<span class="indent3">x</span><br/>
<span class="indent3">x++</span><br/>
				}</p>
<p>Note that <span class="InputCode">x++</span> is shorthand for <span class="InputCode">x=x+1</span>. </p>
<p>Even though we said x&lt;=5, the final value of x is six.
          		That's because the loop only decides to end  when x becomes
          		six.</p>
<p>You can also put a while loop with a single statement in a single
          		line.</p>
<p class="InputCode">while (x&lt;=5) x++<br/>
          	x</p>
<p>This loop is perfectly legal, but it didn't do anything. The reason
          		is that the condition started out false, so the loop never executed
          		at all. Sometimes you need to make sure that a loop runs at least
          		once, and that's a job for do-while.</p>
<h3>Do-While</h3>
<p>A do-while loop starts with do and ends with the while condition.
          		The statements are always executed at least once. If the condition
          		is true, the loop starts over again from the top.</p>
<p class="InputCode">do<br/>
								 {<br/>
<span class="indent3">x++</span><br/>
								 }
								 while (x&lt;=5)<br/>
          	x</p>
<p>Note that x is increased to seven even though it started out greater
          		than five.</p>
<p>One typical use for do-while loops is to do something until it
          		converges:</p>
<p class="InputCode">do<br/> 
          		{<br/>
<span class="Parameter"><span class="indent3">complex mathematical stuff</span></span><br/>
          		} while (abs(newvalue-oldvalue)&gt;tolerance)</p>
<p>But unless you're absolutely certain your process will actually
          		converge, you'd better put in an escape clause that tells it
          		to stop after a while whether it converges or not:</p>
<p class="InputCode">do<br/> 
          		{<br/>
<span class="Parameter"><span class="indent3">complex mathematical stuff</span></span><br/>
          		} while (abs(newValue-oldValue)&gt;tolerance &amp; iteration&lt;maxIterations)</p>
<h3>For</h3>
<p>Recall our first while loop: </p>
<p class="InputCode">x=0<br/>
          		while (x&lt;=5)<br/> 
          			{<br/>
<span class="indent3">x</span><br/>
<span class="indent3">x++</span><br/>
          		}</p>
<p>This is such a common structure that programmers wanted a quicker
          		way to construct it. The answer was for loops. The for loop equivalent
          		to this while loop is</p>
<p class="InputCode">for (x=0;  x&lt;=5; x++)<br/> 
          		{<br/>
<span class="indent3">x</span><br/>
          		}          	</p>
<p>Note the three components: an initialization step, a rule for when
          		the loop should end, and some sort of progression towards that
          		ending. Strictly speaking you can skip the initialization and
          		the progression--just leave the semi-colons as placeholders.</p>
<p class="InputCode">for(; x&lt;=10;) {<br/>
<span class="indent3">x</span><br/>
<span class="indent3">x++</span><br/>
          		}</p>
<p>All this really means though is that you're promising to take
          		care of those steps yourself. In particular x must already be
          		defined and you need to make sure the loop will in fact end.</p>
<p>By far the most common use of for loops is to loop over the elements
          		of a matrix.</p>
<p class="InputCode">m=J(5,5,0)<br/>
          	for(i=1; i&lt;=rows(m); i++) {<br/>
<span class="indent3">for(j=1; j&lt;=cols(m); j++) {</span><br/>
<span class="indent3"><span class="indent3">m[i,j]=i+(j-1)*cols(m)</span></span><br/>
<span class="indent3">}</span><br/>
          		}
				<br/>
          	m</p>
<h2>Writing Your Own Functions</h2>
<p>Mata allows you to write your own functions--in fact many of the
          		standard functions we've used are written in Mata. As you've
          		seen, calling a function is a matter of typing the function name
          		and then giving a list of arguments in parentheses. Defining a function
          		follows the same structure: first the word <span class="InputCode">function</span> to
          		tell Mata what you're doing, then a name, and then a list of arguments
          		in parentheses. The body of the function follows in curly brackets.
          		If you want your function to return a result, one of the statements
          		in the body needs to be <span class="InputCode">return</span>, followed
          		by the thing to return in parentheses. </p>
<p class="InputCode">function myfunction(x,y)<br/> 
          		{<br/>
<span class="indent3"><span class="Parameter">statements</span></span><br/>
<span class="indent3">return(z)</span><br/>
          		}</p>
<p>As an example, consider the following (not terribly useful) function. </p>
<p class="InputCode">function doubleAndSum(x)<br/> 
          		{<br/>
<span class="indent3">x=x*2</span><br/>
<span class="indent3">return(sum(x))</span><br/>
          		}</p>
<p>This function takes a matrix, multiplies it by the scalar two,
          		and returns the sum of all the elements in the matrix. To test
          		it, try the following:</p>
<p><span class="InputCode">m=I(3)<br/>
          		doubleAndSum(m)<br/>
       			m</span></p>
<p>Note that you passed in a matrix called m even though the function
          		calls it x. That's fine: the doubleAndSum function refers to
          		whatever it is given as x. In fact the input doesn't even have
          		to have a name.</p>
<p class="InputCode">doubleAndSum(I(3))<br/>
          		doubleAndSum(1..3)</p>
<p>In the first case, the argument passed in is the result of the
          		I function. In the second, it is a row vector defined on the
          		spot. On the other hand, in these cases we can't see how the
          		input matrix was doubled as they aren't stored anywhere.</p>
<p>Function arguments in Mata are "passed by reference." If a function
          		changes one of the arguments it is given, that change persists
          		even after the function is completed. </p>
<h2>Example: Loops and Functions  </h2>
<p>Our next example comes from basic physics, but the real point is
          		using loops and functions to get useful results. The classic
          		equation for the motion of a body under uniform acceleration
          		is simply</p>
<p>x(t)=x0+v0*t+1/2*a*t^2</p>
<p>Depending on the level of mathematics used in your last physics
          		course, you may or may not have worked with that as a vector
          		equation, where x,x0,v0 and a are vectors with one number for
          		each dimension. The vector component makes this a good problem
          		for Mata. Let's track and plot the movement of a falling object
          		for ten seconds. </p>
<p>Begin by defining a function x which takes x0,v0,a and t as arguments
          		and returns the position of the body at time t.</p>
<p class="InputCode">function x(x0,v0,a,t)<br/> 
          		{<br/>
<span class="indent3">x=x0+v0*t+1/2*a*t^2</span><br/>
<span class="indent3">return(x)</span><br/>
          		}</p>
<p>This is a good point to pause and test what we've done so far before
          		moving on. Try:</p>
<p class="InputCode">x0=0,0,0<br/>
          		v0=10,0,0<br/>
          		a=0,0,0</p>
<p>This represents a body just moving at 10 meters/second (not that
          		Mata cares about the units) in the positive x direction, so it
          		will be easy to tell if your function works properly or not.</p>
<p class="InputCode">x(x0,v0,a,10)</p>
<p>should give 100,0,0. </p>
<p>But that doesn't guarantee our acceleration term is right, so try</p>
<p class="InputCode">v0=0,0,0<br/>
          		a=0,0,1<br/>
          		x(x0,v0,a,10)</p>
<p>This should give 0,0,50.</p>
<p>Now we'll set up the actual values we want to examine:</p>
<p class="InputCode">x0=0,500<br/>
          		v0=100,0<br/>
          	a=0,-9.8</p>
<p>This is an object starting 500 meters up, moving to the right at
          		100 meters per second, and falling under normal earth gravity
          		(about 9.8 meters per second squared). Note how we suddenly switched
          		from three dimensions to two. Your function won't care in the
          		slightest since they're all still matrices, but it's a lot easier
          		to plot on a two dimensional graph.</p>
<p>Now you need somewhere to put the results. Mata doesn't do graphs,
          		so you'll have to use Stata to plot them. But first we have to
          		think about what the results will be. Your function provides
          		a snapshot of the object at any given time, so we'll take a thousand
          		snapshots spread across the ten second span. Each snapshot will
          		have two numbers, an x coordinate and a y coordinate, so those
          		will be your variables (though to Mata they're just column one
          		and column two of the x row vector).</p>
<p>Get out of Mata, then use standard Stata commands to set up the
          		observations and variables you'll need.</p>
<p class="InputCode">end<br/>
          		clear<br/>
          			set obs 1000<br/>
          			gen x=.<br/>
          			gen y=.<br/>
</p>
<p>Now get back into Mata, and set up a view of these variables. Call
          		it r (as in results): </p>
<p class="InputCode">mata<br/>
          	st_view(r=0,.,.)</p>
<p>Now you're ready to loop over your 1000 snapshots and get the results
          		of the x function for each one:</p>
<p class="InputCode">for(i=1; i&lt;=1000; i++) {<br/>
<span class="indent3">r[i,.]=x(x0,v0,a,i/100)</span><br/>
          		}</p>
<p>Note how the time for each snapshot, i/100, spreads them evenly
          		across 10 seconds as i goes from 1 to 1000.</p>
<p>Finally exit Mata again, and create the graph.</p>
<p class="InputCode">end<br/>
          	scatter y x</p>
<p>It's the classic parabola of projectile motion as you no doubt
          		expected, but of course the real point was to practice using
          		functions and loops to generate and work with data.</p>
<p>As soon as we defined the x() function, Mata compiled it into "object
          		code." This is not quite the same as machine-language code that
          		can be run all by itself. But it is something Mata can understand
          		and run very quickly. If you were planning to use this function
          		in the future you could save the object code. Then future programs
          		wouldn't need to spend time compiling it. If this is something
          		you're interested in, see the <span class="InputCode">mlib</span> and <span class="InputCode">mata
          		mosave</span> commands.</p>
<p>This example is contained in <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/ex1.do">ex1.do</a>. </p>
<h2>Pointers</h2>
<p>A pointer is a variable which contains the memory address of another
          		variable or matrix. Thus it "points" to that other variable.
          		In principle a pointer is just a number, but you'll 
          		never work with the number directly. Instead, you'll use two
          		operators, <span class="InputCode">&amp;</span> and <span class="InputCode">*</span>.
          		Computer scientists call these the "reference" and "dereference"
          		operators, but I like to think of them as "the address of"
          		and "the thing at." </p>
<p>Consider the following:</p>
<p class="InputCode">x=(1..3)\(4..6)\(7..9)<br/>
          		p=&amp;x<br/>
          		*p<br/>
          		(*p)[2,2]</p>
<p>First we define a matrix <span class="InputCode">x</span> so we
          		have something to work with. Then
          		<span class="InputCode">p</span> is defined as "the address
          		of <span class="InputCode">x</span>."  Thus
          		<span class="InputCode">*p</span> or "the thing at <span class="InputCode">p</span>"
          		is just another name for <span class="InputCode">x</span>.
          		You can use subscripts with
          		<span class="InputCode">*p</span> just like you would with <span class="InputCode">x</span>,
          		but note how you have to put <span class="InputCode">*p</span> in
          		parenthesis first. <span class="InputCode">(*p)[2,2]</span>          		means
          		"find the thing at the address contained in <span class="InputCode">p</span> and
          		get the value at row two, column two. " <span class="InputCode">*p[2,2]</span> would
          		mean "get the value at row two, column two of <span class="InputCode">p</span>,
          		and then find the thing at that address" which won't work because <span class="InputCode">p</span> is
          		a scalar.</p>
<p>Note that the matrix you are pointing to doesn't need to have a
          		name. For example:</p>
<p class="InputCode">p=&amp;J(5,5,0)</p>
<p>makes <span class="InputCode">p</span> point to a 5x5 matrix of
          		zeroes (since that's what <span class="InputCode">J</span> returns)
          		even though there's no direct name for that matrix. It's only
          		accessible as <span class="InputCode">*p</span>. </p>
<p>One use for pointers is to construct data structures Mata doesn't
          		handle automatically. For example, you can construct a three
          		dimensional matrix by making a two dimensional matrix of pointers,
          		each of which points to a column vector.</p>
<p>The first step is to define the matrix that will contain the pointers.
          		Matrices can't switch between containing numbers and containing
          		pointers, so you need to make sure that the matrix is defined
          		as containing pointers. On the other hand, we don't have any
          		actual pointers to store yet. Thus we'll set the initial values
          		of the matrix to <span class="InputCode">NULL</span>, a special pointer that doesn't point to
          		anything.</p>
<p class="InputCode">          		x=J(5,5,NULL)</p>
<p>Now loop over all the elements of x, and make each one a pointer
          		to a new (and unique) column vector. </p>
<p class="InputCode">for (i=1; i&lt;=rows(x); i++)<br/> 
          		{<br/>
<span class="indent3">for (j=1; j&lt;=cols(x); j++)</span><br/>
<span class="indent3">{</span><br/>
<span class="indent3"><span class="indent3">x[i,j]=&amp;J(5,1,0)</span></span><br/>
<span class="indent3">}</span><br/>
          		}</p>
<p>To work with an element i,j,k of your three dimensional matrix
          		you'd use the following:</p>
<p class="InputCode">(*(x[i,j]))[k]</p>
<p>Yes, the parentheses are essential. It's rather awkward though,
          		so if you were going to work with such matrices a lot consider
          		defining the following functions:</p>
<p class="InputCode">function put(val,x,i,j,k)<br/> 
          		{<br/>
<span class="indent3">/* Usage: value to put, matrix to put it in,
          					i, j, k to put it at. */</span><br/>
<span class="indent3">(*(x[i,j]))[k,1]=val</span><br/>
          		}</p>
<p class="InputCode">function get(x,i,j,k)<br/> 
          		{<br/>
<span class="indent3">/* Usage: matrix to get from, i, j, k of value
          			to get. */ </span><br/>
<span class="indent3">return((*(x[i,j]))[k,1])</span><br/>
          		}</p>
<p>Then you can do things like:</p>
<p class="InputCode">put(3,x,5,5,5)<br/>
          		get(x,5,5,5) </p>
<p>The fact that you can't mix pointers and regular data within a
          		matrix does limit your flexibility. You can't, for example, have
          		a matrix of individual data including pointers to other data
          		relevant to the individual. You can, however, have two parallel
          		matrices, one containing numbers and the other containing
          		pointers. If row i represents the same individual in both matrices,
          		you can pull information from either or both as needed. </p>
<p>It's also possible to create a pointer to a function. Given your
          		existing function doubleAndSum() try:</p>
<p class="InputCode">p=&amp;doubleAndSum()<br/>
          		(*p)(I(3))</p>
<p>Note how Mata distinguishes between <span class="InputCode">x()</span> the
          		function and <span class="InputCode">x</span> the
          		variable by the parentheses, even though you're not passing in
          		any arguments when you define a pointer.</p>
<p>The main reason you'd want to create a pointer to a function is
          		so that you can use that pointer as the argument of a function.
          		For example, Mata's optimizer functions have you pass in a pointer
          		to the function which is to be optimized. </p>
<h2>The Mata Optimizer</h2>
<p>Many statistical operations involve maximizing or minimizing some
          		quantity--maximum likelihood estimation being the obvious example.
          		Mata includes an optimizer for these operations. Mata's optimizer
          		is actually a family of functions which define and then solve
          		an optimization problem.</p>
<h3>Evaluator functions </h3>
<p>The first function must be written by you: the function to
          		be maximized or minimized. This function can do whatever you
          		want, it may be very complex or very simple, but it must accept
          		a certain set of arguments and return the proper result in order
          		for the optimizer to use it. You can name the arguments whatever
          		you like, but there must be the right number and each must have
          		the proper meaning. </p>
<p>Optimization problems are described using a variety of notations,
          		but if we consider the problem of maximizing
          		y=f(x), the Mata version of f() must take the following arguments:</p>
<ul>
<li>a number indicating whether the function is supposed to calculate
          			(0) just f(x), (1) y=f(x) and f'(x) or (2) f(x), f'(x) and
          			f''(x) </li>
<li>x (the thing that changes as the optimizer looks for the max) </li>
<li>y (where f(x) will be stored) </li>
<li>A variable to store f'(x) if calculated</li>
<li>A variable to store f''(x)  if calculated (often H since it is
          			the hessian in multivariate problems) </li>
</ul>
<p>If you can find an analytic solution for f'(x) and f''(x) and code
          		them in, Mata's optimizer will be much faster and more accurate.
          		This is often impractical though, and Mata is perfectly willing
          		to find numeric approximations to the derivatives it needs. Note,
          		however, that even if your function never calculates derivatives
          		it must still accept variables where they can be stored.</p>
<p>So let's try a very simple function: y=-x^4. If you're willing
          		to let Mata find all the derivatives for you, you can code this
          		as the following:</p>
<p class="InputCode">function f(todo,x,y,g,H)<br/>
          		{<br/>
<span class="indent3">y=-x^4</span><br/>
} </p>
<p>Note that <span class="InputCode">todo</span> (the number telling
          		the function whether to calculate derivatives or not), <span class="InputCode">g</span>,
          		and <span class="InputCode">H</span> are completely unused, but must
          		still be accepted. Note also that we could change all the names.
          		We could call <span class="InputCode">x</span> Fred and <span class="InputCode">y</span> George
          		as long as George=f(Fred).</p>
<p>If we're not quite so lazy we can also code the derivatives for
          		this function quite easily:</p>
<p class="InputCode">function g(todo,x,y,g,H)<br/>
          		{<br/>
<span class="indent3">y=-x^4</span><br/>
<span class="indent3">if (todo&gt;=1)</span><br/>
<span class="indent3">{</span><br/>
<span class="indent3"><span class="indent3">g=-4*x^3</span></span><br/>
<span class="indent3"><span class="indent3">if (todo==2)</span></span><br/>
<span class="indent3"><span class="indent3">{</span></span><br/>
<span class="indent3"><span class="indent3"><span class="indent3">H=-12*x^2</span></span></span><br/>
<span class="indent3"><span class="indent3">}</span></span><br/>
<span class="indent3">}</span><br/>
}</p>
<p>In this case, both x and y were scalars, but you're not limited
          		to scalars. Consider y=-x1^4 - x2^4</p>
<p class="InputCode">function h(todo,x,y,g,H)<br/>
          		{<br/>
<span class="indent3">y=-x[1]^4-x[2]^4</span><br/>
          		}</p>
<p>The two x's are stored in a row vector x, so x1 is x[1] and x2
          		is x[2]. Making sure the optimizer sends in the right size of
          		x is one of the steps in setting it up. </p>
<p>In many cases the quantity you'll want to maximize will be the
          		sum of a column. For example, in maximum likelihood you will
          		probably create a column where each row gives an observation's
          		contribution to the likelihood function. Mata's optimizer will
          		do this automatically with the proper settings, so the previous
          		function could be recast as:</p>
<p class="InputCode">function i(todo,x,y,g,H)<br/>
          		{<br/>
<span class="indent3">y=J(2,1,.) </span><br/>
<span class="indent3">y[1]=-x[1]^4</span><br/>
<span class="indent3">y[2]=-x[2]^4 </span><br/>
} </p>
<p>Note how the function had to define y as a column vector of the
          		proper size--otherwise it is a scalar. </p>
<p>In statistical applications the quantity to be maximized will depend
          		not just on  parameters that can vary (x in our problems thus
          		far) but on  data that do not vary. Mata's optimizer can
          		be set up to pass up to nine additional arguments to your evaluator
          		function, which can contain the data. They go after the first
          		two arguments (and before the final three).</p>
<p>This calls for a change of variable names. Consider maximizing
          		s=f(b). We'll now use x for  the data matrix. Then
          		the function definition would be: </p>
<p class="InputCode">function f(todo, b, x, s, g, H) </p>
<p>x can contain both the independent and dependant variables, but
          		if it's easier to work with a separate matrix y, then the definition
          		becomes:</p>
<p class="InputCode">function f(todo, b, x, y, s, g, H) </p>
<p>We'll do an example using this kind of evaluator shortly.</p>
<h3>Setting Up and Running an Optimization Problem</h3>
<p>Once you've got your evaluator function defined, you're ready to
          		set up the optimization problem. The first step is to call the
          		<span class="InputCode">optimize_init</span> function. <span class="InputCode">optimize_init</span> takes
          		no arguments and returns a variable containing a description
          		of your optimization problem. You'll never look at this description,
          		but you will pass it in to all the other optimization functions.</p>
<p class="InputCode">s=optimize_init()</p>
<p>Next tell it where to find the evaluator:</p>
<p class="InputCode">optimize_init_evaluator(s,&amp;f())</p>
<p>The first argument is the problem description, and the second is
          		a pointer to the evaluator function you already defined.</p>
<p>Now give it a starting value for x--remember the f() function
          		is in the form y=f(x).</p>
<p class="InputCode">optimize_init_params(s,-100)</p>
<p>Of course the correct answer is zero, but we want it to do some
          		work! </p>
<p>Now you're ready to actually run the optimizer:</p>
<p class="InputCode">optimize(s)</p>
<p>This returns the value of x which maximizes f(x). You may want
          		to store this in a variable:</p>
<p class="InputCode">xmax=optimize(s)</p>
<p>If we want to use the g(x) function instead, there's one additional
          		step. Recall that in g(x) we coded the first and second derivatives
          		ourselves so Mata doesn't have to approximate them. Mata refers
          		to this as a "d2" evaluator. A "d1" evaluator codes just the
          		first derivative, and a "d0" evaluator codes no derivatives at
          		all (the f(x) function is a d0 evaluator). Mata will assume functions
          		are d0 unless we say otherwise, so you need to add:</p>
<p class="InputCode">optimize_init_evaluatortype(s,"d2")</p>
<p>Note that the optimizer doesn't care what order all the initialization
          		functions are called in, as long as they're before the actual
          		<span class="InputCode">optimize()</span>. </p>
<p>What about h(x1, x2)? It's identical to f(x), except that we need
          		to set an initial value for both variables:</p>
<p class="InputCode">optimize_init_params(s,(-100,100)) </p>
<p>In doing so we also tell Mata that future x's must have two columns. </p>
<p>Finally,
          		i(x1,x2), where the function to be maximized is the column sum
          		of y, is what Mata calls a "v0" evaluator.
          		The "v" is
          		for vector, and the "0" again means that we didn't code
          		any derivatives. Thus we need </p>
<p class="InputCode">optimize_init_evaluatortype(s,"v0")</p>
<p>To see the complete code to run the optimizer with each evaluator,
          		see the the last parts of <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/mataclass.do">mataclass.do</a>. There is one setup function
          		we haven't needed to call but you should know:</p>
<p class="InputCode">optimize_init_which(s,"min")</p>
<p>changes the problem from maximizing the function (the default)
          		to minimizing it. </p>
<h2>Example: Ranking Teams</h2>
<p>As a final, extended example, consider a problem familiar to any
          		sports fan: determining how good a team is based on its won/loss
          		record.</p>
<p>We'll assume that a team can be characterized by a single "strength"
          		variable s. If team i plays team j, we'll assume that the probability
          		of team i winning is given by exp(si-sj)/(1+exp(si-sj)), better
          		known to Stata as  <span class="InputCode">invlogit(si-sj)</span>.
          		Then, given a record of games played and who won, we can find
          		a set of values for s that maximizes the probability of the given
          		outcome. We'll do a Monte Carlo study by first creating data
          		which fits our assumptions, and then seeing how well the method works.</p>
<h3>Creating the Data </h3>
<p>The first step is to create the data. This is an exercise in matrix
          		manipulation, so if you want to focus on the optimization part
          		of the problem feel free to skip ahead. On the other hand, most
          		readers will benefit from some practice in this area.</p>
<p>First create a row vector <span class="InputCode">str</span> containing
          		the real strengths of each team. For simplicity, use the uniform
          		function, giving strengths distributed uniform(0,1). For our
          		example we'll make 50 teams: </p>
<p class="InputCode">str=uniform(1,50)</p>
<p>Note that the column number within the <span class="InputCode">str</span> vector acts as a sort
          		of team ID. </p>
<p>Next we need a way to keep track of who played who. We'll create
          		a two-column matrix, where each row is a game and the two columns
          		will contain the IDs of the two teams who played in that game.
          		For brevity we'll call the team in column one the "home" team
          		and the team in column two the "visiting" team. We'll assume
          		that each team plays 20 games, 10 as the home team and 10 as
          		the visiting team.</p>
<p>Begin by creating a column vector <span class="InputCode">teams</span> containing
          		the 50 teams using the range operator:</p>
<p>teams=1::50</p>
<p>Now create a column vector <span class="InputCode">season</span> which is just ten copies of <span class="InputCode">teams</span>          		stacked on top of each other: </p>
<p class="InputCode">season=teams<br/>
          		for(i=1;i&lt;10;i++)<br/>
          		{<br/>
<span class="indent3">season=season\teams</span><br/>
          		}</p>
<p>This represents the home teams. Next assign the visiting teams
          		by taking the same vector, putting it in a random order, and
          		column joining it to the original:</p>
<p class="InputCode">season=season,jumble(season) </p>
<p>The only trouble is, it's entirely possible for a team to be randomly
          		assigned to play itself. This wouldn't really bother our
          		estimator, but it does offend any claims that this represents
          		the real world. More importantly, fixing it is good practice.</p>
<p>Create a column vector <span class="InputCode">same</span> with
          		the same number of rows as <span class="InputCode">season</span>          		which
          		contains a 1 if the home and visiting teams are the same and
          		a 0 if they are not:</p>
<p class="InputCode">same=(season[.,1]:==season[.,2])</p>
<p>If a game has the a team playing itself, we will swap the visiting
          		team with the visiting team of a randomly chosen game. Since
          		it's possible we might get the same team yet again, we'll keep
          		checking and swapping until there are no more games between the
          		same team. Here's the code:</p>
<p class="InputCode">while (max(same)==1)<br/>
          		{<br/>
<span class="indent3">for(i=1; i&lt;=rows(season); i++)</span><br/>
<span class="indent3">{</span><br/>
<span class="indent3"><span class="indent3">if (same[i])</span></span><br/>
<span class="indent3"><span class="indent3">{</span></span><br/>
<span class="indent3"><span class="indent3"><span class="indent3">swap=trunc(uniform(1,1)*rows(season))+1</span></span></span><br/>
<span class="indent3"><span class="indent3"><span class="indent3">temp=season[swap,2]</span></span></span><br/>
<span class="indent3"><span class="indent3"><span class="indent3">season[swap,2]=season[i,2]</span></span></span><br/>
<span class="indent3"><span class="indent3"><span class="indent3">season[i,2]=temp</span></span></span><br/>
<span class="indent3"><span class="indent3">}</span></span><br/>
<span class="indent3">}</span><br/>
<span class="indent3">same=(season[.,1]:==season[.,2])</span><br/>
}</p>
<p>Note how <span class="InputCode">max(same)</span> will be zero
          		if there are no longer any games where the home and visiting
          		teams are the same, so that's how we know when we're done.</p>
<p>We then loop over the rows, stopping to change those where <span class="InputCode">same[i]</span>          		is
          		one (or true). In those cases, we pick a random row and swap
          		visiting teams with it, using a temp variable to store its visiting
          		team's ID as we do. We then recalculate <span class="InputCode">same</span> based
          		on the new version of
          		<span class="InputCode">season</span> before the while condition
          		is reevaluated.</p>
<p>Now we need to decide who won each game. We'll create a column
          		vector winner, which will contain a 1 if the home team won and
          		a zero if the visiting team won. </p>
<p class="InputCode">winner=J(rows(season),1,.)<br/>
          		for(i=1; i&lt;=rows(season); i++)<br/>
          		{<br/>
<span class="indent3">winner[i]=uniform(1,1):&lt;invlogit(str[season[i,1]]-str[season[i,2]])</span><br/>
}</p>
<p>Note how indexing is used to pull up the strength (<span class="InputCode">str</span>) of the
          		appropriate team--we'll be doing that a lot.</p>
<h3>The Maximum Likelihood Estimator </h3>
<p>Now we're ready to construct the (log) likelihood function to be
          		maximized. We'll start with a version that's easy to understand,
          		and try to make it efficient later.</p>
<p class="InputCode">function llf(todo,strhat,season,winner,llf,g,H)<br/>
          		{<br/>
<span class="indent3">llf=J(rows(season),1,.)</span><br/>
<span class="indent3">for(i=1;i&lt;=rows(season);i++)</span><br/>
<span class="indent3">{</span><br/>
<span class="indent3"><span class="indent3">if (winner[i]) llf[i]=log(invlogit(strhat[season[i,1]]-strhat[season[i,2]]))</span></span><br/>
<span class="indent3"><span class="indent3">else llf[i]=log(invlogit(strhat[season[i,2]]-strhat[season[i,1]]))</span></span><br/>
<span class="indent3">}</span><br/>
}</p>
<p>This will be a v0 evaluator which takes <span class="InputCode">season</span> and <span class="InputCode">winner</span> as
          		additional arguments. The estimated strengths are stored in strhat,
          		and the column of log likelihoods (which will be summed automatically
          		by virtue of being v0) is stored in <span class="InputCode">llf</span>.</p>
<p>We have two possible outcomes, and the formula for finding the
          		log likelihood is different in each outcome. For now we'll handle
          		the two possibilities with an if/else structure, but there are
          		more efficient ways.</p>
<p>Now to set up the optimization problem:</p>
<p class="InputCode">s=optimize_init()<br/>
          		optimize_init_evaluator(s, &amp;llf())<br/>
          		optimize_init_evaluatortype(s,"v0")<br/>
          		strhat0=J(1,rows(teams),.5)<br/>
          		optimize_init_params(s,strhat0)<br/>
          		optimize_init_argument(s,1,season)<br/>
          		optimize_init_argument(s,2,winner)<br/>
          		strhat1=optimize(s)</p>
<p>Most of these you've seen before.  Note that <span class="InputCode">strhat0</span> is
          		the vector of starting values for our estimate of <span class="InputCode">str</span>.
          		Since the actual strengths are distributed uniform(0,1) we'll
          		start by setting them all to 0.5.</p>
<p>What is new is <span class="InputCode">optimize_init_arguments</span>.
          		This is where you tell the optimizer to pass in <span class="InputCode">season</span> and <span class="InputCode">winner</span> to
          		your evaluator. As you see <span class="InputCode">optimize_init_arguments</span> takes
          		three arguments: the optimization problem, the number of the
          		argument you're setting, and what to pass in.</p>
<p>Run the code. It will take a while  but it should work.</p>
<h3>Efficiency</h3>
<p>So how can we make it faster? It would be nice if we didn't have
          		to figure out which formula to use for the likelihood. So let's
          		rearrange the data a bit: instead of column one being the "home"
          		team and column two the "visiting" team, terms which have no
          		real meaning in our model, let's make column one the winner and
          		column two the loser.</p>
<p>Create a new matrix <span class="InputCode">season2</span> with the new arrangement:</p>
<p class="InputCode">season2=J(rows(season),2,.)<br/>
          		for(i=1;i&lt;=rows(season);i++)<br/>
          		{<br/>
<span class="indent3">if (winner[i]) season2[i,.]=season[i,.]</span><br/>
<span class="indent3">else season2[i,.]=season[i,(2,1)]</span><br/>
				}<br/>
</p>
<p>Of course this loop takes time to run, but it only runs once. It's
          		the evaluator that must be run over and over, so taking a bit
          		more time to set things up so that the evaluator runs faster
          		is well worth it.</p>
<p>One general principle when it comes to writing fast Mata code is
          		that matrix operations are  faster than loops you write
          		out. There's no matrix operation that would allow you to look
          		in one matrix for the estimated strength of a team identified
          		in another matrix, but you can take calculating the <span class="InputCode">log</span> and <span class="InputCode">invlogit</span>          		functions
          		out of the loop.</p>
<p>Here's a second and more efficient version of the evaluator
          		function:</p>
<p class="InputCode">function llf2(todo,strhat,season,llf,g,H)<br/>
          		{<br/>
<span class="indent3">x=J(rows(season),1,.)</span><br/>
<span class="indent3">for(i=1;i&lt;=rows(season);i++)</span><br/>
<span class="indent3">{</span><br/>
<span class="indent3"><span class="indent3">x[i]=strhat[season[i,1]]-strhat[season[i,2]]</span></span><br/>
<span class="indent3">}</span><br/>
<span class="indent3">llf=log(invlogit(x))</span><br/>
} </p>
<p>Note how it doesn't need  to have the <span class="InputCode">winner</span> matrix passed in anymore--it
          		expects a version of <span class="InputCode">season</span> (<span class="InputCode">season2</span>) that conveys that information
          		by which team is in column one. </p>
<p>Here's the setup needed to run this version:</p>
<p class="InputCode">s=optimize_init()<br/>
          		optimize_init_evaluator(s, &amp;llf2())<br/>
          		optimize_init_evaluatortype(s,"v0")<br/>
          		strhat0=J(1,rows(teams),.5)<br/>
          		optimize_init_params(s,strhat0)<br/>
          		optimize_init_argument(s,1,season2)<br/>
          		strhat2=optimize(s) </p>
<p>You'll see that this runs in about half the time of	the original.
          		Most of the gain comes from moving the calculation of  <span class="InputCode">log</span>          		and <span class="InputCode">invlogit</span> out
          		of the loop.</p>
<p>For those looking for the absolute best performance, consider turning
          		on matastrict (<span class="InputCode">mata set matastrict on</span>).
          		Matastrict requires that you declare the names and types of all
          		variables before using them rather than letting Mata choose.
          		Mata has more variable types than most languages, and they can
          		be confusing. On the other hand, declaring your variables can
          		help you avoid errors. More importantly, Mata's compiler can
          		use the additional information to create slightly more efficient
          		object code.</p>
<p>If you are interested in using matastrict, see the manuals and
          		especially the section on declarations. </p>
<h3>Constraints</h3>
<p>One characteristic of this model is that only the difference between
          		teams is identified. You could add 100 or -1,000,000 to all the
          		strengths and the probability of each outcome would remain the
          		same. Thus two different runs on the same data could give very
          		different numbers and both be right. However, if we constrain
          		just one strength to be a given number, then all the strengths
          		are identified.</p>
<p>Mata's optimizer accepts constraints on the parameters in the form
          		of two matrices <span class="InputCode">C</span> and <span class="InputCode">c</span>. The parameters <span class="InputCode">p</span> are then constrained
          		such that <span class="InputCode">Cp=c</span>.</p>
<p>Let's constrain the strength of team one to be zero. To implement
          		this, the <span class="InputCode">C</span> matrix needs to be a row
          		vector with a column for each team. It will have a one in the
          		first column and a zero in all other columns, which makes it
          		a unit vector. <span class="InputCode">c</span> will
          		be simply the scalar zero. </p>
<p class="InputCode">C=e(1,rows(teams))<br/>
          		c=0</p>
<p>You then pass in this constraint using the <span class="InputCode">optimize_init_constraints</span>          		function.
          		It takes two arguments: the problem <span class="InputCode">s</span>,
          		as usual, and then a matrix which is the row join of <span class="InputCode">C</span> and <span class="InputCode">c</span>.
          		I'm not sure why it doesn't just take them as two separate arguments,
          		but it's easy to join them.</p>
<p class="InputCode">optimize_init_constraints(s,(C,c))</p>
<p>Since you've made no other changes to the problem, you can simply
          		run it again by calling optimize.</p>
<p class="InputCode">strhat3=optimize(s)  </p>
<p>This version will actually run significantly faster.</p>
<p>As an exercise, consider constructing some sort of metric
          		for how well your estimator does. (One easy one would be how
          		often it correctly identifies the best team.) Then vary the number
          		of games per season and see how many it takes to get reasonable
          		accuracy. However, don't do this if you want to continue to take
          		the ranking systems of actual sports seriously.</p>
<p>This example (with additional commands for timing each method)
          		is found in <a href="https://ssc.wisc.edu/sscc/pubs/files/4-26/ex2.do">ex2.do</a>. </p>
<h2>Learning More</h2>
<p>This article has just scratched the surface of what's possible
          		in Mata. There's obviously much more to learn, and even
          		more to be looked up when you need it.</p>
<p>As usual, Stata Corp. has included most of the Mata documentation
          		in the online help. There is one trick though: to get help for
          		Mata you need to type <span class="InputCode">help mata <span class="Parameter">topic</span></span> rather
          		than just <span class="InputCode">help
          		<span class="Parameter">topic</span></span>. This is especially important
          		for functions and such that exist in both Mata and Stata. For
          		example, compare the results of the following:</p>
<p class="InputCode">help abs<br/>
          		help mata abs</p>
<p>A couple useful starting places:</p>
<p class="InputCode">help mata<br/>
          		help mata functions</p>
<p>The Mata manuals are available in the CDE Library and the 4218
          		lab. There are two books, but they should be thought of as two
          		volumes of the same manual. </p>
<p>You are also welcome to ask the
          			<a href="https://ssc.wisc.edu/sscc/helpdesk.htm">Help Desk</a> for assistance. Mata is new
          		to us as well, but we'll try to figure things out together. </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Bootstrapping in Stata </kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Stata's <span class="InputCode">bootstrap</span> command makes
          		it easy to bootstrap just about any statistic you can calculate.
          		The results of almost all Stata commands can be bootstrapped
          		immediately, and it's relatively straightforward to put any other
          		results you've calculated in a form that can be bootstrapped. This
          		article will show you how. </p>
<p>If you're just looking to bootstrap the results of a Stata command,
          		all you'll need is a basic familiarity with Stata. However, if
          		you need to calculate something else and then bootstrap it you'll
          		need to write an official Stata program to do so. If you're
          		not familiar with writing Stata programs (which are not the same
          		as do files) you'll want to take a look at <a href="https://ssc.wisc.edu/sscc/pubs/stata_prog2.htm">Stata Programming Tools</a>,
          		in particular the <a href="https://ssc.wisc.edu/sscc/pubs/stata_prog2.htm#Programs">section on programs</a>.</p>
<h2><a id="BootstrappingResultsfromStataCommands" name="BootstrappingResultsfromStataCommands"></a>Bootstrapping Results from Stata Commands</h2>
<p>If there is a single Stata command that calculates the result
          		you need, you can simply tell Stata to bootstrap the result of
          		that command. As an example, load the automobile data that comes
          		with Stata and consider trying to find the mean of the <span class="InputCode">mpg</span> variable.
          		The <span class="InputCode">summarize</span> (<span class="InputCode">sum</span>)
          		command will do exactly what you want: </p>
<p class="InputCode">sysuse auto<br/>
          	sum mpg </p>
<p>But how will the <span class="InputCode">bootstrap</span> command find the number it needs in
          		all that output? The answer is that you will tell it where to
          		look in the return vector.</p>
<h3>The Return Vector</h3>
<p>In addition to the output you see on the screen or in your log,
          		all Stata commands quietly put their results in a return vector.
          		You can refer to this vector in subsequent commands, or in the
          		case of <span class="InputCode">bootstrap</span> you can tell it
          		what part of the return vector you care about.</p>
<p>To see the current tables of the return vector, type</p>
<p class="InputCode">return list</p>
<p>The <span class="InputCode">sum</span> command is a basic command (as opposed
          		to an estimation command) so its return vector is called <span class="InputCode">r().</span>          		Looking over the list, you'll see that <span class="InputCode">r(mean)</span> is
          		the number you want. You're now ready to actually carry out the
          		bootstrap.</p>
<h3>The bootstrap Command Syntax </h3>
<p>The basic syntax for a bootstrap command is simple:</p>
<p class="InputCode">bootstrap <span class="Parameter">var</span>=r(<span class="Parameter">result</span>):
          		<span class="Parameter">command</span></p>
<p>Here <span class="InputCode"><span class="Parameter">var</span></span> is
          		simply what you want to call the quantity you're bootstrapping.
          		You're welcome to choose any name you	like	as long as it
          		meets the usual rules for a Stata variable name. In our case
          		<span class="InputCode">meanMPG</span> would be appropriate. </p>
<p><span class="InputCode">r(<span class="Parameter">result</span>)</span>tells
          		the bootstrap command to look in the <span class="InputCode">r()</span> vector
          		for the particular result you're interested in. We're interested
          		in <span class="InputCode">r(mean)</span>. </p>
<p>Finally <span class="Parameter"><span class="InputCode">command</span></span> should
          		be replaced by the actual command that calculates the result
          		you want. In our case it's <span class="InputCode">sum mpg</span>. </p>
<p>Putting this all together, the command to bootstrap the mean of
          		the variable <span class="InputCode">mpg</span> is simply:</p>
<p class="InputCode">bootstrap meanMPG=r(mean): sum mpg</p>
<p>When you run that you'll get a note explaining that bootstrap can't
          		exclude missing values and such unless you're  working with
          		an estimation command (more on them shortly) but that won't be
          		a problem in this case. The results you want will follow.</p>
<p>What if you wanted to bootstrap two different quantities? No problem,
          		just list them both:</p>
<p class="InputCode">bootstrap meanMPG=r(mean) maxMPG=r(max): sum
          		mpg</p>
<h3>Bootstrapping Estimation Commands</h3>
<p>Estimation commands are slightly different in that they store their
          		results in the <span class="InputCode">e()</span> vector rather than the <span class="InputCode">r()</span> vector and must
          		be listed by typing <span class="InputCode">ereturn list</span> rather
          		than <span class="InputCode">return
          		list</span>. To see this, type the following:</p>
<p class="InputCode">reg mpg weight foreign<br/>
          		ereturn list</p>
<p>One warning: bootstrap is an estimation command, so after running
          		it the <span class="InputCode">e()</span> vector will contain the results of the bootstrap,
          		not the results of the command you were bootstrapping. </p>
<p>Suppose you wanted to bootstrap the F-statistic for some odd reason.
          		All you'd have to do is type:</p>
<p class="InputCode">bootstrap f=e(F): reg mpg weight foreign </p>
<p>A more common example would be to bootstrap the coefficients.
          		They're available in <span class="InputCode">e(b)</span> but that's
          		a matrix so getting at them individually would be complicated.
          		Fortunately this is so common that it's set up as a convenient
          		special case: if
          		<span class="InputCode">bootstrap</span> is given nothing to bootstrap,
          		it will look for an
          		<span class="InputCode">e(b)</span> matrix and bootstrap that. Thus
          		all you need to type is:</p>
<p class="InputCode">bootstrap: reg mpg weight foreign</p>
<h2><a id="BootstrapOptions" name="BootstrapOptions"></a>Bootstrap Options</h2>
<p>The <span class="InputCode">bootstrap</span> command has  a fair
          		number of options available. The <span class="InputCode">nowarn</span> option
          		will get rid of that annoying message about <span class="InputCode">e(sample)</span> that
          		you got after our first example. The <span class="InputCode">reps</span> option
          		allows you choose how many bootstrap replications are performed--the
          		default is 50. For a full list of options type <span class="InputCode">help
          		bootstrap</span>.</p>
<p>However, all these options apply to the <span class="InputCode">bootstrap</span> command
          		and not to the  command you're bootstrapping. Thus they go after
          		a comma as always, but before the semicolon that ends the bootstrap
          		part of the command. You could then have another comma at the
          		end of the command to be bootstrapped, followed by options that
          		apply to it. For example:</p>
<p class="InputCode">bootstrap perc90=r(p90), nowarn reps(25):
          			sum mpg, detail</p>
<p>This bootstraps the 90th percentile of <span class="InputCode">mpg</span>,
          		which is only available if <span class="InputCode">sum</span> is
          		given the <span class="InputCode">detail</span> option. It also suppresses
          		the warning message and only does 25 replications. Note where all
          		those options are located in the command.</p>
<h2><a id="BootstrappingResultsYouveCalculated" name="BootstrappingResultsYouveCalculated"></a>Bootstrapping Results You've Calculated</h2>
<p>If all you need to do is bootstrap the results of existing Stata
          		commands you may want to stop here, especially since things are about
          		to get a bit more complicated.</p>
<p>If there's no single Stata command that will calculate a result
          		you want to bootstrap, you'll just have to write your own. As
          		you may know from reading <a href="https://ssc.wisc.edu/sscc/pubs/stata_prog2.htm#Programs">Stata Programming Tools</a>, Stata allows you to write programs that act like regular
          		Stata commands. You can even make them return results so that
          		they'll work with <span class="InputCode">bootstrap</span>. </p>
<p>Suppose you wanted to bootstrap the statistic "Mean weight of those
          		cars in the top quartile for mpg." Calculating the statistic
          		isn't hard to do:</p>
<p class="InputCode">xtile quartile=mpg, nq(4)<br/>
          		sum weight if quartile==4</p>
<p>But since it requires two commands it can't be bootstrapped as
          		is. We'll need to write a program that carries out those two
          		steps and returns the result in <span class="InputCode">r()</span>.</p>
<p class="InputCode">program define topQuartileMean, rclass<br/>
<span class="indent3">xtile quartile=mpg, nq(4)</span><br/>
<span class="indent3">sum weight if quartile==4</span><br/>
<span class="indent3">return scalar tqm=r(mean)</span><br/>
<span class="indent3">drop quartile</span><br/>
end</p>
<p>Most of this should be familiar, but there are a few additional
          		elements that need to be explained. </p>
<p>Adding the <span class="InputCode">rclass</span> option to the
          		program definition tells Stata that this program will be putting
          		things in the <span class="InputCode">r()</span> vector.  The
          		<span class="InputCode">return</span> command is what actually does
          		so, and <span class="InputCode">scalar</span> means this particular
          		result is a single number as opposed to a matrix like <span class="InputCode">e(b)</span>.
          		We're calling our returned value <span class="InputCode">tqm</span> (as
          		in top quartile mean) so it will be available after the program
          		runs as <span class="InputCode">r(tqm)</span>.
          		The number we're putting in it is the <span class="InputCode">r(mean)</span> result
          		from the previous <span class="InputCode">sum</span> command--not
          		a result of our <span class="InputCode">topQuartileMean</span> program,
          		which doesn't have results yet.</p>
<p> Also note that we
          		need to drop the <span class="InputCode">quartile</span> variable
          		at the end so we can create a new one in the next bootstrap replication.</p>
<p>Now that the program <span class="InputCode">topQuartileMean</span> is defined, you can use it
          		with bootstrap just like any other Stata command:</p>
<p class="InputCode">bootstrap tqm=r(tqm): topQuartileMean</p>
<p>You'll then get your results.  </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title> Using Reshape to Manage Hierarchical Data</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Hierarchical data is any kind of data where observations fall into groups or clusters. The most common examples at the SSCC are individuals living in a household and a subject being observed multiple times, but there are many other applications: schools within a district, courses taken by a student, or even  individuals who are part of a subject's social network can all be treated as hierarchical data. Hierarchies can also have more than two levels; for example students may be grouped into classrooms which are grouped into schools which are grouped into districts.</p>
<p>One of the most useful tools for managing hierarchical data in Stata is the <span class="InputCode">reshape</span> command. It is very simple to use, but you need to be able to picture in your mind what it does and why. This article will try to give you that picture and then discuss using <span class="InputCode">reshape</span> in a variety of situations.</p>
<p>Note that SPSS has a tool called the <span class="MenuOutput">Restructure Data Wizard</span> which looks very different but  does essentially the same thing, and you can <a href="http://ssc.wisc.edu/sscc/pubs/4-18.htm#ExampleReshapingData">write a program to do it in SAS</a> (though with substantially more effort). Thus the conceptual parts of this article may be of interest even if you don't use Stata.</p>
<h2><a id="DescribingHierarchicalData" name="DescribingHierarchicalData"></a>Describing Hierarchical Data</h2>
<p>Since hierarchical data can describe so many different things, we need some to define terms that can apply to all of them. We'll describe the smallest unit in the data as the level one unit. In the examples mentioned above the level one unit would be an individual within the household, a particular time the subject was observed, a school within the district, a course taken by the student, or an individual within the subject's social network. A level two unit is then a group of level one units: the household in which the individuals live, the subject which is measured repeatedly, the district which contains the schools, the student who takes the courses or the subject whose social network is being described. If needed, a level three unit is  a collection of level two units, and so forth.</p>
<p>Normally a hierarchical data set will include some variables which describe the level one units and some which describe the level two units. For example, a data set of individuals living in households may contain the age and sex of each individual, plus the household income of the household as a whole. Age and sex would then be level one variables while household income would be a level two variable.</p>
<p>Level two variables are easy to identify: they always have the same value for all level one units in the same level two unit. For example, the total number of people in the household must be the same for every member of a household, or if a subject is observed multiple times he or she must have the same race each time. Anything that varies within a level two unit is a level one variable: individuals within a household can obviously have different employment statuses, so employment status must be a level one variable. What occasionally gets forgotten is that individuals observed over time can change their education level or marital status, so those must be level one variables as well. While it's rarely difficult to identify which of your variables are level one and which are level two, taking a moment to do so during the planning stage of your project and before writing any code can help you avoid a lot of headaches.</p>
<p>In an ideal world, each level would have an associated  identifier: for example a household ID and an individual ID, or a subject ID and a wave ID. The level one identifiers only need to be unique within a level two group, and in fact <span class="InputCode">reshape</span> will only be able to use it if this is the case. Often data sets do not come with a usable level one identifier, but <a href="#CreatingaLevelOneIdentifier">one can be created very easily</a>.</p>
<h2><a id="RepresentingHierarchicalDataasaMatrix" name="RepresentingHierarchicalDataasaMatrix"></a>Representing Hierarchical Data as a Matrix</h2>
<p>Stata (like most statistical programs) stores its data in a matrix, where rows are observations and columns are variables. But when working with hierarchical data "observation" is an ambiguous term: it could mean either a level one unit or a level two unit. The purpose of the <span class="InputCode">reshape</span> command is to allow you to go back and forth between the two definitions at will, restructuring your data accordingly.</p>
<p>If an observation represents a level one unit, then your data are in the long form. The long form is so named because it has a larger number of observations but fewer variables. In the long form, both level one and level two variables are represented by columns in the data matrix. However, level two variables will have many repeated values, since all the observations in the same level two group will share the same values of all the level two variables.</p>
<p>If, on the other hand, an observation represents a level two unit, then your data are in the wide form. The wide form is so named because it has fewer observations but more variables. In wide form, level two variables are represented by columns as usual. However, level one variables are represented by sets of columns, with each set containing a column for each level one unit. Thus the values of the level one variables for each level one unit within a level two unit are stored in the same row, but in different columns.</p>
<p>Consider the following data (taken from the <a href="http://pwt.econ.upenn.edu/php_site/pwt_index.php">Penn World 
	Table</a>).</p>
<a id="long" name="long"></a><table align="center" border="1" cellpadding="4" cellspacing="0">
<tr align="left">
<th>Country</th>
<th>Continent</th>
<th>Year</th>
<th>Population</th>
<th> GDP Per-Capita</th>
</tr>
<tr>
<td>Afghanistan</td>
<td>Asia</td>
<td>2000</td>
<td>25889</td>
<td>478</td>
</tr>
<tr>
<td>Afghanistan</td>
<td>Asia</td>
<td>2001</td>
<td>26813</td>
<td>428</td>
</tr>
<tr>
<td>Afghanistan</td>
<td>Asia</td>
<td>2002</td>
<td>27756</td>
<td>547</td>
</tr>
<tr>
<td>Albania</td>
<td>Europe</td>
<td>2000</td>
<td>3474</td>
<td>3797</td>
</tr>
<tr>
<td>Albania</td>
<td>Europe</td>
<td>2001</td>
<td>3490</td>
<td>4269</td>
</tr>
<tr>
<td>Albania</td>
<td>Europe</td>
<td>2002</td>
<td>3509</td>
<td>4431</td>
</tr>
<tr>
<td>Algeria</td>
<td>Africa</td>
<td>2000</td>
<td>31194</td>
<td>5753</td>
</tr>
<tr>
<td>Algeria</td>
<td>Africa</td>
<td>2001</td>
<td>31736</td>
<td>5534</td>
</tr>
<tr>
<td>Algeria</td>
<td>Africa</td>
<td>2002</td>
<td>32278</td>
<td>5639</td>
</tr>
</table>
<p>This is panel data, where countries are observed over time. Thus a level two unit is a country and a level one unit is a country's data in a particular year. Population and GDP Per-Capita are level one variables as they change over time. Continent is a level two variable as it does not change (at least not over the time scale we're interested in). As listed above, each row represents a level one unit. Thus this data set is in the long form. Now consider the exact same data in a different format:</p>
<a id="wide" name="wide"></a>
<table align="center" border="1" cellpadding="4">
<tr>
<th scope="col">Country</th>
<th scope="col">Pop2000</th>
<th scope="col">CGDP2000</th>
<th scope="col">Pop2001</th>
<th scope="col">CGDP2001</th>
<th scope="col">Pop2002</th>
<th scope="col">CGDP2002</th>
<th scope="col">Continent</th>
</tr>
<tr>
<td> Afghanistan</td>
<td>25889</td>
<td>478</td>
<td>26813</td>
<td>428</td>
<td>27756</td>
<td>547</td>
<td>Asia</td>
</tr>
<tr>
<td>Albania</td>
<td>3474</td>
<td>3797</td>
<td>3490</td>
<td>4269</td>
<td>3509</td>
<td>4431</td>
<td>Europe</td>
</tr>
<tr>
<td>Algeria</td>
<td>31194</td>
<td>5753</td>
<td>31736</td>
<td>5534</td>
<td>32278</td>
<td>5639</td>
<td>Africa</td>
</tr>
</table>
<p>Now a row represents a level two unit, so this is the wide form. The level one variables Population and GDP Per-Capita (abbreviated Pop and CGDP) are represented by three columns each: one for the year 2000, one for 2001, and one for 2002.</p>
<h2><a id="UsingReshape" name="UsingReshape"></a>Using Reshape</h2>
<p>Stata's <span class="InputCode">reshape</span> command allows you switch between the two forms at will. The general syntax is:</p>
<p class="InputCode">reshape [<span class="Parameter">long or wide</span>] [<span class="Parameter">"stubs" of level one variable names</span>], i(<span class="Parameter">level two ID</span>) j(<span class="Parameter">level one ID</span>)</p>
<p>Before talking through the syntax in detail let's do an example. First load the Stata version of this data by typing (or more likely, copying and pasting): </p>
<p class="InputCode">use http://ssc.wisc.edu/sscc/pubs/files/4-28/reshape1</p>
<p>Do a list (<span class="InputCode">l</span>) and you'll see it's currently in the long form (as in <a href="#long">this table</a>). To change that, type:</p>
<p class="InputCode">reshape wide pop cgdp, i(country) j(year)</p>
<p>Do another list to see the results (it should look like <a href="#wide">this table</a>). To go back to long form, type: </p>
<p class="InputCode"> reshape long pop cgdp, i(country) j(year)</p>
<p>Referring back to the general syntax, <span class="InputCode">long</span> or <span class="InputCode">wide</span> is the form in which you want to put the data. Next comes a list of level one variables, but note that when the data set is in wide form it does not contain any variables called literally <span class="InputCode">pop</span> or <span class="InputCode">cgdp</span>. Instead you have <span class="InputCode">pop2000</span>, <span class="InputCode">pop2001</span> and so forth. Note too that <span class="InputCode">continent</span> is not in the list, as it is a level two variable.</p>
<p> The <span class="InputCode">i()</span> option is where you give the level two identifier variable. <span class="InputCode">j()</span> is then the level one identifier--but  note again that in wide form the data set does not have a variable called <span class="InputCode">year</span>. When reshaping from wide to long, <span class="InputCode">pop cgdp</span> combined with <span class="InputCode">j(year) </span>can be interpreted as "look for variables that start with <span class="InputCode">pop</span> or <span class="InputCode">cgdp</span>, then take whatever follows that and put it in a new variable called <span class="InputCode">year</span>."</p>
<p>Incidentally this is why <span class="InputCode">reshape</span> can't use Stata's <em>varlist</em> syntax (which is unfortunate if your data set includes a large number of level one variables). The stubs  aren't really variable names. </p>
<h2><a id="RemovingExtraneousCases" name="RemovingExtraneousCases"></a>Removing Extraneous Cases</h2>
<p>Now consider a (fabricated) data set consisting of individuals living in households:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th scope="col">household</th>
<th scope="col">income</th>
<th scope="col">age1</th>
<th scope="col">female1</th>
<th scope="col">age2</th>
<th scope="col">female2</th>
<th scope="col">age3</th>
<th scope="col">female3</th>
</tr>
<tr>
<td>1</td>
<td>30000</td>
<td>30</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>2</td>
<td>90000</td>
<td>45</td>
<td>0</td>
<td>43</td>
<td>1</td>
<td>15</td>
<td>0</td>
</tr>
</table>
<p>Here the level one unit is an individual, the level two unit is a household (with the <span class="InputCode">household</span> variable as the identifier), <span class="InputCode">income</span> is a level two variable, and <span class="InputCode">age</span> and <span class="InputCode">female</span> are level one variables. Since an observation represents a household, the level two unit, this data set is in wide form.</p>
<p>Load this data with:</p>
<p class="InputCode">use http://ssc.wisc.edu/sscc/pubs/files/4-28/reshape2</p>
<p>If you need an observation to represent an individual instead, all you need to do is reshape the data into the long form:</p>
<p class="InputCode">reshape long age female, i(household) j(j)</p>
<p>Most of this is familiar, but there is one puzzle: what is <span class="InputCode">j</span>? At one level the answer is "The number at the end of <span class="InputCode">age</span> and <span class="InputCode">female</span>." But if you want to go further and ask "What does <span class="InputCode">j</span> mean?" the answer in this case is "We don't know." It's the order in which the individuals in the household are listed in the data set, but they may have been listed in more or less random order--in which case <span class="InputCode">j</span> would mean absolutely nothing. Or <span class="InputCode">j</span> may be very important--person one may always be the respondent, or the head of the household. We don't know without consulting the documentation for the data set (and since this data set was fabricated no documentation exists). So we'll punt and just call it <span class="InputCode">j</span>.</p>
<p>Here is the result of the reshape command:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th scope="col">household</th>
<th scope="col">j</th>
<th scope="col">income</th>
<th scope="col">age</th>
<th scope="col">female</th>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>30000</td>
<td>30</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>30000</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>30000</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>90000</td>
<td>45</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>90000</td>
<td>43</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>90000</td>
<td>15</td>
<td>0</td>
</tr>
</table>
<p>There's just one problem: person number three in household one. Note that in wide form the number of columns is determined by the household with the largest number of members--the data set must be wide enough to contain all the individuals in that household. However, since all rows have the same number of columns, smaller households have as many columns as the biggest household. In this data set, household one only has two people so <span class="InputCode">age3</span> and <span class="InputCode">female3</span> are missing. But the reshape command doesn't choose not create an observation just because these variables don't have values. After all, conceivably there could  be a third person in household one and we just don't know their age or sex.</p>
<p>Such agnosticism is rarely an option with real data. In big surveys the largest household tends to be very large indeed, so you could easily have variables like <span class="InputCode">age26</span> and <span class="InputCode">female26</span>. Converting them all to observations results in a data set consisting mostly of missing values. Thus you most likely want to drop these extraneous observations:</p>
<p class="InputCode">drop if age==. &amp; female==.</p>
<p>If you had more level one variables you would still use all of them in the <em>if</em> condition, just to be sure that you don't eliminate a real person who is only missing a few variables.</p>
<p>Note that what we've discussed so far covers 90%  of the ways <span class="InputCode">reshape</span> is used. The remaining examples in this article cover special cases, so continue reading at your discretion.</p>
<h2><a id="CreatingaLevelOneIdentifier" name="CreatingaLevelOneIdentifier"></a>Creating a Level One Identifier</h2>
<p>Now suppose you had gotten the data in long form, but without the <span class="InputCode">j</span> variable.</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th scope="col">household</th>
<th scope="col">income</th>
<th scope="col">age</th>
<th scope="col">female</th>
</tr>
<tr>
<td>1</td>
<td>30000</td>
<td>30</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>30000</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>90000</td>
<td>45</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>90000</td>
<td>43</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>90000</td>
<td>15</td>
<td>0</td>
</tr>
</table>
<p>Type:</p>
<p class="InputCode">use http://ssc.wisc.edu/sscc/pubs/files/4-28/reshape3</p>
<p>to load this in Stata.</p>
<p>This data set contains all the information in the original data set. But what if you had to convert it to wide form? There's no j variable and nothing that can be used as a j variable. So you'll  have to make one:</p>
<p class="InputCode">bysort household: gen j=_n</p>
<p>A list (<span class="InputCode">l</span>) will verify that this works, but you should be very careful if the order of the household members is important. By default Stata's sort algorithm is not "stable" meaning that ties are not necessarily left in the same order they started in. Thus when you sort by <span class="InputCode">household</span>, you could change the order of the individuals within each household.</p>
<p>One solution is to add the <span class="InputCode">stable</span> option to all your sorts. Then Stata will use a (slightly slower) stable sort algorithm. However, this can't be used with <span class="InputCode">bysort</span>. Thus you'd have to instead type:</p>
<p class="InputCode">sort household, stable<br/>
            by household: gen j=_n</p>
<p>Another approach is to create a new variable that keeps track of the original order. This has the advantage of of allowing you to return to the proper sort order later if you ever have to sort by something else.</p>
<p class="InputCode">gen originalOrder=_n<br/>
              sort household originalOrder<br/>
              by household: gen j=_n</p>
<p>This can  be done with <span class="InputCode">bysort</span>, since <span class="InputCode">bysort</span> understands variables in parentheses as variables it should sort by but not use to form <em>by</em> groups:</p>
<p class="InputCode">gen originalOrder=_n<br/>
              bysort household (originalOrder): gen j=_n<br/>
</p>
<h2><a id="UsingStringsasIdentifiers" name="UsingStringsasIdentifiers"></a>Using Strings as Identifiers</h2>
<p>Suppose you had data on students who have taken the SAT, including their SAT section scores. The SAT has three sections, which we'll call <span class="InputCode">verbal</span>, <span class="InputCode">math</span> and <span class="InputCode">writing</span> (officially they're now called Critical Reading, Mathematics and Writing). Each student takes all three sections.</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>id</th>
<th>section</th>
<th>score</th>
</tr>
<tr>
<td>13</td>
<td>verbal</td>
<td>571</td>
</tr>
<tr>
<td>13</td>
<td>math</td>
<td>236</td>
</tr>
<tr>
<td>13</td>
<td>writing</td>
<td>533</td>
</tr>
<tr>
<td>55</td>
<td>verbal</td>
<td>722</td>
</tr>
<tr>
<td>55</td>
<td>math</td>
<td>353</td>
</tr>
<tr>
<td>55</td>
<td>writing</td>
<td>226</td>
</tr>
<tr>
<td>68</td>
<td>verbal</td>
<td>454</td>
</tr>
<tr>
<td>68</td>
<td>math</td>
<td>739</td>
</tr>
<tr>
<td>68</td>
<td>writing</td>
<td>513</td>
</tr>
</table>
<p>First load the data:</p>
<p class="InputCode">use http://ssc.wisc.edu/sscc/pubs/files/4-28/reshape4</p>
<p>The level one unit in this data set is a section and the level two unit is a student. The variables <span class="InputCode">id</span> and <span class="InputCode">section</span> are the level two and level one identifiers respectively, and <span class="InputCode">score</span> is a level one variable. However, <span class="InputCode">section</span> is stored as a string. That's not a problem: just add the <span class="InputCode">string</span> option to  <span class="InputCode">reshape</span>:</p>
<p class="InputCode">reshape wide score, i(id) j(section) string</p>
<p>The process of reshaping the data is the same, but the values of <span class="InputCode">section</span> which are added to the <span class="InputCode">score</span> stub are now <span class="InputCode">verbal</span>, <span class="InputCode">math</span> and <span class="InputCode">writing</span> rather than numbers. The resulting variables are <span class="InputCode">scoremath</span>, <span class="InputCode">scoreverbal</span> and <span class="InputCode">scorewriting</span>.</p>
<p> These variable names are functional, but somewhat hard to read. One solution would be rename <span class="InputCode">score</span> to <span class="InputCode">score_</span>  before reshaping (<span class="InputCode">ren score score_</span>). Then the reshaped variables would be <span class="InputCode">score_math</span>, <span class="InputCode">score_verbal</span> and <span class="InputCode">score_writing</span>. Another would be to capitalize the first letter in the values of <span class="InputCode">section</span> using the <span class="InputCode">proper</span> function (<span class="InputCode">replace section=proper(section)</span>). Then the variables would be <span class="InputCode">scoreMath</span>, <span class="InputCode">scoreVerbal</span> and <span class="InputCode">scoreWriting</span>.</p>
<p>In any case the structure will be the same:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>id</th>
<th>scoreMath</th>
<th>scoreVerbal</th>
<th>scoreWriting</th>
</tr>
<tr>
<td>13</td>
<td>236</td>
<td>571</td>
<td>533</td>
</tr>
<tr>
<td>55</td>
<td>353</td>
<td>722</td>
<td>226</td>
</tr>
<tr>
<td>68</td>
<td>739</td>
<td>454</td>
<td>513</td>
</tr>
</table>
<h2><a id="HandlingNonstandardVariableNames" name="HandlingNonstandardVariableNames"></a>Handling Non-standard Variable Names</h2>
<p>Now suppose you got this data set in wide form and needed to convert it to long, but it had slightly different variable names:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>id</th>
<th>SATMathScore</th>
<th>SATVerbalScore</th>
<th>SATWritingScore</th>
</tr>
<tr>
<td>13</td>
<td>236</td>
<td>571</td>
<td>533</td>
</tr>
<tr>
<td>55</td>
<td>353</td>
<td>722</td>
<td>226</td>
</tr>
<tr>
<td>68</td>
<td>739</td>
<td>454</td>
<td>513</td>
</tr>
</table>
<p>Load this with:</p>
<p class="InputCode">use http://ssc.wisc.edu/sscc/pubs/files/4-28/reshape5</p>
<p>These variable names are very clear, but they don't follow the stub+suffix convention. Fortunately you can tell Stata where to find the j variable within the stub using the @ sign:</p>
<p class="InputCode"> reshape long SAT@Score, i(id) j(section) string</p>
<p>This tells Stata to look for variables than start with <span class="InputCode">SAT</span> and end with <span class="InputCode">Score</span>, and then the j variable, <span class="InputCode">section,</span> is everything in between.</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>id</th>
<th>section</th>
<th>SATScore</th>
</tr>
<tr>
<td>13</td>
<td>Math</td>
<td>236</td>
</tr>
<tr>
<td>13</td>
<td>Verbal</td>
<td>571</td>
</tr>
<tr>
<td>13</td>
<td>Writing</td>
<td>533</td>
</tr>
<tr>
<td>55</td>
<td>Math</td>
<td>353</td>
</tr>
<tr>
<td>55</td>
<td>Verbal</td>
<td>722</td>
</tr>
<tr>
<td>55</td>
<td>Writing</td>
<td>226</td>
</tr>
<tr>
<td>68</td>
<td>Math</td>
<td>739</td>
</tr>
<tr>
<td>68</td>
<td>Verbal</td>
<td>454</td>
</tr>
<tr>
<td>68</td>
<td>Writing</td>
<td>513</td>
</tr>
</table>
<h2><a id="WorkingWithMoreThanTwoLevels" name="WorkingWithMoreThanTwoLevels"></a>Working With More Than Two Levels</h2>
<p>If you have more than two levels things get more complicated at the conceptual level, but the Stata code remains the same except that you may have to apply the <span class="InputCode">reshape</span> command multiple times. Suppose you had data on two schools, each with two classes, each of which has two students (yes, these are very small schools and classes, but it makes for manageable tables). Thus the level one unit is a student, the level two unit is a class and the level three unit is a school. The data set includes an identifier for each level (<span class="InputCode">school</span>, <span class="InputCode">class</span>, <span class="InputCode">student</span>) and one variable for each level (<span class="InputCode">lunch</span>--percentage of the school's students receiving free or reduced price lunches, <span class="InputCode">exp</span>--the number of years of teaching experience the class's teacher has, and <span class="InputCode">score</span>--the student's score on a test). Also note that the identifiers are 1 and 11 rather than 1 and 2 or random numbers. This is to guarantee we run into a problem that is otherwise merely common.</p>
<p>Load this with:</p>
<p class="InputCode">use http://ssc.wisc.edu/sscc/pubs/files/4-28/reshape6</p>
<p>Now that there are three levels, a row could represent a level one unit, a level two unit or a level three unit. The structure where a row represents a level one unit is sometimes called the long-long form:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>school</th>
<th>lunch</th>
<th>class</th>
<th>exp</th>
<th>student</th>
<th>score</th>
</tr>
<tr>
<td>1</td>
<td>45</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>83</td>
</tr>
<tr>
<td>1</td>
<td>45</td>
<td>1</td>
<td>1</td>
<td>11</td>
<td>82</td>
</tr>
<tr>
<td>1</td>
<td>45</td>
<td>11</td>
<td>4</td>
<td>1</td>
<td>96</td>
</tr>
<tr>
<td>1</td>
<td>45</td>
<td>11</td>
<td>4</td>
<td>11</td>
<td>71</td>
</tr>
<tr>
<td>11</td>
<td>26</td>
<td>1</td>
<td>7</td>
<td>1</td>
<td>90</td>
</tr>
<tr>
<td>11</td>
<td>26</td>
<td>1</td>
<td>7</td>
<td>11</td>
<td>91</td>
</tr>
<tr>
<td>11</td>
<td>26</td>
<td>11</td>
<td>8</td>
<td>1</td>
<td>90</td>
</tr>
<tr>
<td>11</td>
<td>26</td>
<td>11</td>
<td>8</td>
<td>11</td>
<td>76</td>
</tr>
</table>
<p>Now consider reshaping so that a row represents a level two unit. The j variable is clearly <span class="InputCode">student</span>. But the i variable is not just <span class="InputCode">class</span>, because <span class="InputCode">class</span> only uniquely identifies a class within a school. To fully identify a class you need both <span class="InputCode">school</span> and <span class="InputCode">class</span>. Thus the command is:</p>
<p class="InputCode">reshape wide score, i(school class) j(student)</p>
<p>And the result is:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>school</th>
<th>class</th>
<th>score1</th>
<th>score11</th>
<th>lunch</th>
<th>exp</th>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>83</td>
<td>82</td>
<td>45</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>11</td>
<td>96</td>
<td>71</td>
<td>45</td>
<td>4</td>
</tr>
<tr>
<td>11</td>
<td>1</td>
<td>90</td>
<td>91</td>
<td>26</td>
<td>7</td>
</tr>
<tr>
<td>11</td>
<td>11</td>
<td>90</td>
<td>76</td>
<td>26</td>
<td>8</td>
</tr>
</table>
<p>This is sometimes called long-wide form. It is long with respect to classes, but wide with respect to students.</p>
<p> To make a row represent a level three unit, a school, you need to reshape again:</p>
<p class="InputCode">reshape wide score1 score11 exp, i(school) j(class)</p>
<p>But this gives an error:</p>
<p><span class="Red">score11 already defined</span><br/>
<span class="Blue">r(110);</span><br/>
</p>
<p>The trouble is the identifiers. The reshape command identifies the values of the j variable (<span class="InputCode">class</span>) as 1 and 11. It then tries to add them to the names of the existing variables <span class="InputCode">score1</span> and <span class="InputCode">score11</span>. But that means the score for student 1 in class 1 would be stored as <span class="InputCode">score11</span>, and that variable already exists. It's true that the existing <span class="InputCode">score11</span> will be renamed something else shortly, but even if Stata recognized that and proceeded  the results would still be problematic: both student 1, class 11 and student 11, class 1 would have their scores stored as <span class="InputCode">score111</span>.</p>
<p>While this data set was constructed specifically to ensure that this problem arose, it will probably come up on its own if you have more than two levels and the values of the identifiers do not always have the same lengths. The solution is to separate the student numbers and the class numbers somehow. The following adds an underscore between them:</p>
<p class="InputCode">ren score1 score1_<br/>
              ren score11 score11_<br/>  
            reshape wide score1_ score11_ exp, i(school) j(class)</p>
<p>The result is the following:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>school</th>
<th>score1_1</th>
<th>score11_1</th>
<th>exp1</th>
<th>score1_11</th>
<th>score11_11</th>
<th>exp11</th>
<th>lunch</th>
</tr>
<tr>
<td>1</td>
<td>83</td>
<td>82</td>
<td>1</td>
<td>96</td>
<td>71</td>
<td>4</td>
<td>45</td>
</tr>
<tr>
<td>11</td>
<td>90</td>
<td>91</td>
<td>7</td>
<td>90</td>
<td>76</td>
<td>8</td>
<td>26</td>
</tr>
</table>
<p>This is sometimes known as the wide-wide form, because it is wide in both class and student.<br/>
</p>
<p>Note that Stata doesn't really understand  the nesting structure of your data set and will allow you to do things that don't  make much sense. For example, you could start with the original data in long-long form and type:</p>
<p class="InputCode">reshape wide score exp, i(school student) j(class)</p>
<p>Stata will carry out its instructions without complaint, but this is treating a class as the level one unit and a student as the level two unit--as if all the student 1s had something important in common. While Stata will prevent you from doing a reshape that is clearly wrong (for example, misidentifying a level one variable as a level two variable) it is your responsibility to make sure you've correctly identified the levels and that the reshape  makes sense.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Redirecting and Customizing Tabular Output in SAS</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>SAS introduced the Output Delivery System (ODS) in version 7 which 
              provides a way of managing your SAS output. This document illustrates 
              how you can use ODS to:</p>
<ul>
<li>create SAS data sets from procedure output</li>
<li>redirect tabular output to HTML, Rich Text Format (RTF), or 
                PostScript formatted files for inclusion in other programs like 
                Internet Explorer, Word, WordPerfect, or Latex.</li>
<li>select and exclude components of the tabular output</li>
<li>use templates to customize the appearance of tabular output 
                layout, format, and headers.</li>
</ul>
<p>SAS has extended the capabilities of ODS in version 9.1 to include 
              graphics for some statistical procedures. Graphics produced through 
              ODS require minimal syntax, unlike graphs produced through SAS/GRAPH. 
              ODS for statistical graphics is documented in  
              <a href="https://www.ssc.wisc.edu/sscc/pubs/4-21.htm">A Simple Procedure 
              for Producing Publication-Quality Graphs using SAS</a>.</p>
<h2>Creating SAS Data Sets from Procedure Output</h2>
<p>SAS procedures have always made the most important statistics available as 
  output data sets (using <span class="InputCode">OUT=</span> options or <span class="InputCode">OUTPUT</span> 
  statements), but with ODS, every number in every table of every procedure can 
  be accessed via a data set.</p>
<p>ODS divides procedure output into components called output objects. Look at 
  the following default output from the TTEST procedure:</p>
<p> <br/>
</p>
<pre>
                                  Statistics
 
                             Lower CL          Upper CL  Lower CL
Variable  gender          N      Mean    Mean      Mean   Std Dev  Std Dev
score     f               7    74.504  76.857    79.211    1.6399   2.5448
score     m               7    79.804  82.714    85.625     2.028   3.1472
score     Diff (1-2)            -9.19  -5.857    -2.524    2.0522   2.8619


                          Statistics
 
                      Upper CL
Variable  gender       Std Dev    Std Err    Minimum    Maximum
score     f             5.6039     0.9619         73         80
score     m             6.9303     1.1895         78         87
score     Diff (1-2)    4.7242     1.5298                      


                               T-Tests
 
Variable    Method           Variances      DF    t Value    Pr &gt; |t|
score       Pooled           Equal          12      -3.83      0.0024
score       Satterthwaite    Unequal      11.5      -3.83      0.0026


                    Equality of Variances
 
Variable    Method      Num DF    Den DF    F Value    Pr &gt; F
score       Folded F         6         6       1.53    0.6189

  </pre>
<p>ODS defines three output objects in the above output: a "Statistics" 
  table, "T-Tests" table, and "Equality of Variances" table. 
  Any object can be written to a SAS data set once you know ODS's name for the 
  object.</p>
<h3>Determining the Names of Output Objects</h3>
<p>Use the <span class="InputCode">ODS TRACE</span> statement to determine the 
  names of procedure objects:</p>
<p class="InputCode">ods trace output;</p>
<p class="InputCode"> proc ttest;<br/>
  class gender;<br/>
  var score;<br/>
  title 'GOLF SCORES';<br/>
  run;</p>
<p class="InputCode">ods trace off;</p>
<p>When the trace is turned on (<span class="InputCode">ODS TRACE OUTPUT;</span>), 
  information about the objects, including their names, is written to the log:</p>
<p class="InputCode">Output Added:<br/>
  -------------<br/>
  Name: Statistics<br/>
  Label: Statistics<br/>
  Template: Stat.TTest.Statistics<br/>
  Path: Ttest.Statistics<br/>
  -------------</p>
<p class="InputCode">Output Added:<br/>
  -------------<br/>
  Name: TTests<br/>
  Label: T-Tests<br/>
  Template: Stat.TTest.TTests<br/>
  Path: Ttest.TTests<br/>
  -------------</p>
<p><span class="InputCode">Output Added:<br/>
  -------------<br/>
  Name: Equality<br/>
  Label: Equality of Variances<br/>
  Template: Stat.TTest.Equality<br/>
  Path: Ttest.Equality<br/>
</span> </p>
<p>The three output objects are called Statistics, Ttests, and Equality.</p>
<p><span class="InputCode">ODS TRACE OFF;</span> turns off the trace. (No <span class="InputCode">RUN</span> 
  statement is needed.)</p>
<h3>Redirecting the Output</h3>
<p>Once you know the name of the object you want to make a SAS data set from, 
  use the <span class="InputCode">ODS OUTPUT</span> statement to save the results. 
  The <span class="InputCode">ODS OUPUT</span> statement can be placed anywhere 
  before the RUN statement in the procedure step. For example, to save the Statistics 
  object:</p>
<p> <span class="InputCode">proc ttest;<br/>
  class gender;<br/>
  var score;<br/>
  title 'GOLF SCORES';<br/>
  ods output Statistics = tstats;<br/>
  run;</span></p>
<p>Below is a listing of the fourteen variables and three observations that got 
  written to the TSTATS data set:</p>
<pre>                               Lower           Upper    Lower    UMPULower
Variable  Class           N  CLMean    Mean  CLMean  CLStdDev  CLStdDev

 score    f               7  74.504  76.857  79.211   1.6399    1.5634  
 score    m               7  79.804  82.714  85.625    2.028    1.9335  
 score    Diff (1-2)      _   -9.19  -5.857  -2.524   2.0522    2.0019  

          UMPUUpper     Upper
StdDev    CLStdDev     CLStdDev    StdErr    Minimum    Maximum

2.5448     5.2219       5.6039     0.9619        73         80 
3.1472     6.4579       6.9303     1.1895        78         87 
2.8619     4.5727       4.7242     1.5298         _          _ 
</pre>
<h2>Redirecting Output to HTML, RTF, or PostScript Files</h2>
<p>SAS data sets are not the only place you can redirect output to. You can also 
  redirect output to RTF, HTML, or PostScript formatted files. For example, to 
  redirect the <span class="InputCode">TTEST</span> procedure's output in the 
  example above to an RTF file, add the following two ODS statements to your program:</p>
<p class="InputCode">ods rtf file="tstats.rtf";<br/>
  proc ttest;<br/>
  class gender;<br/>
  var score;<br/>
  title 'GOLF SCORES';<br/>
  run;<br/>
  ods rtf close;</p>
<p>You could then insert the file tstats.rtf into a WORD or WORDPERFECT document 
  and have nicely formatted tables.</p>
<p>To redirect the output to an HTML file, use the <span class="InputCode">ODS 
  HTML</span> statement:</p>
<p class="InputCode">ods html body="tstats.htm";</p>
<p class="InputCode"> proc ttest;<br/>
  class gender;<br/>
  var score;<br/>
  title 'GOLF SCORES';<br/>
  run;</p>
<p class="InputCode">ods html close;</p>
<p>You could then view the output from a browser like Internet Explorer or Netscape.</p>
<p>To create high-resolution printer output, use <span class="InputCode">ODS PRINTER</span> 
  to redirect the output to a PostScript file:</p>
<p class="InputCode">ods printer file="tstats.ps";</p>
<p class="InputCode"> proc ttest;<br/>
  class gender;<br/>
  var score;<br/>
  title 'GOLF SCORES';<br/>
  run;</p>
<p><span class="InputCode">ods printer close;</span><br/>
<br/>
  Use the Linux <span class="InputCode">lpr</span> command to print the file.</p>
<p></p>
<h3>Selecting and Excluding Components of the Output</h3>
<p>You can also use ODS to control which output objects you want included or excluded 
  from your output. For example, to request only the Statistics object in your 
  output:</p>
<p class="InputCode">ods select Statistics;<br/>
  ods html body="tstats.htm";</p>
<p>To exclude the Statistics object from the output:</p>
<p class="InputCode">ods exclude Statistics;<br/>
  ods rtf file="tstats.rtf";</p>
<p>You can also use the <span class="InputCode">ODS SELECT</span> and <span class="InputCode">EXCLUDE</span> 
  statements to control which tables you want displayed in your default listing 
  (<span class="InputCode">.lst</span> file):</p>
<p class="InputCode">ods listing;<br/>
  ods exclude Statistics;<br/>
  proc ttest;<br/>
  class gender;<br/>
  var score;<br/>
  title 'GOLF SCORES';<br/>
  run;</p>
<p>Note that the <span class="InputCode">LISTING</span> destination is open by 
  default so the only time you need to include an <span class="InputCode">ODS 
  LISTING</span> statement is when you have used another destination like RTF 
  or HTML previously in the program.</p>
<p>To summarize what has been illustrated so far, there are currently five destinations 
  you can specify for your procedure output: </p>
<p><span class="InputCode">LISTING</span> the default; traditional .lst file<br/>
<span class="InputCode">OUTPUT</span> SAS data set<br/>
<span class="InputCode">HTML</span> html file<br/>
<span class="InputCode">RTF</span> rtf file for inclusion in Word or WordPerfect<br/>
<span class="InputCode">PRINTER</span> PostScript file for high resolution output</p>
<p>and you use an <span class="InputCode">ODS SELECT</span> or <span class="InputCode">EXCLUDE</span> 
  statement to control which parts of the procedural output you want.</p>
<h2>Customizing The Appearance of Your SAS Output</h2>
<p>With ODS you can change the appearance of most of your SAS output. You can 
  reorder columns, change the style of the output including justification, cell 
  formats, colors, fonts, etc. You can apply these changes to the entire SAS output 
  or just to a particular output object. </p>
<p>SAS uses templates to describe what a particular piece of output is supposed 
  to look like by default. The <span class="InputCode">TEMPLATE</span> procedure 
  enables you to create and edit templates. The <span class="InputCode">TEMPLATE</span> 
  procedure can get complicated very quickly. In this section, only a very simple 
  example is provided. For more detailed information, please refer to the on-line 
  manual at <a href="http://support.sas.com/documentation/onlinedoc/91pdf/sasdoc_913/base_ods_9268.pdf">http://support.sas.com/documentation/onlinedoc/91pdf/sasdoc_913/base_ods_9268.pdf</a>.</p>
<p>In the example below, the output for the means values in the Statistics table 
  of the <span class="InputCode">TTEST</span> procedure is reformatted to display 
  with only one significant digit after the decimal point. By default, three significant 
  digits are displayed. First, the <span class="InputCode">PROC TEMPLATE</span> 
  step is run to define the new template. Second, the <span class="InputCode">TTEST</span> 
  procedure is run redirecting the output to a SAS data set. Third, the reformatted 
  output is displayed using a <span class="InputCode">DATA</span> step:</p>
<p class="InputCode">proc template;<br/>
  edit Stat.TTest.Statistics as test; <br/>
  edit mean; format=8.1; end;<br/>
  end;<br/>
  run;</p>
<p class="InputCode">ods listing close;<br/>
  ods output statistics=tstats; <br/>
  proc ttest;<br/>
  class gender;<br/>
  var score;<br/>
  title 'GOLF SCORES';<br/>
  run;</p>
<p class="InputCode">ods listing;<br/>
  data _null_;<br/>
  set tstats;<br/>
  file print ods=(template='test');<br/>
  put _ODS_;<br/>
  run;</p>
<p>Notes:</p>
<ol>
<li>The first <span class="InputCode">EDIT</span> statement 
    in <span class="InputCode">PROC TEMPLATE</span> is where you name the template 
    you want to modify. The <span class="InputCode">ODS TRACE</span> output (refer 
    to p. 2) provides the name of the template for each object. </li>
<li>The second edit statement specifies that the means in 
    the Statistics table should be formatted with a width of 8 and 1 digit to 
    the right of the decimal point. </li>
<li>The <span class="InputCode">FILE</span> statement in 
    the <span class="InputCode">DATA</span> step tells SAS to print the results 
    to the SAS output file (<span class="InputCode">.lst</span> file) using the 
    "test" template created above in the <span class="InputCode">PROC 
    TEMPLATE</span> call.</li>
<li>The <span class="InputCode">PUT</span> statement tells 
    SAS to write the output using ODS.</li>
</ol>
<p>You can already see how complicated things get just for this simple example. 
    Again, if you need to customize output, you should refer to the complete documentation 
    on ODS.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Keeping Your PC Secure</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Recent outbreaks of various worms and viruses have demonstrated the importance 
  of keeping all PCs secure. These programs took control of hundreds of thousands 
  of computers, and their attempts to find more PCs to infect swamped the Internet. 
  And the big ones were relatively benign--they did nothing but attempt to propagate 
  themselves. Had they been programmed to do something harmful after taking over 
  a computer, it could have been much worse.</p>
<h2><a id="TheThreat" name="TheThreat"></a>The Threat</h2>
<p>Today's computing environment is extremely complex and interdependent. All 
  of the systems that make it work, from Windows running on your PC to the Internet 
  protocols that connect servers, are under constant scrutiny from a variety of 
  sources. Most of the time security problems are discovered by the "good 
  guys," security professionals in academia, business, and government. The 
  usual procedure is to report the problem to the company making the software, 
  give them time to fix it, and then make an announcement after a patch is available. 
  The alternative is to let the "bad guys" find the problem before anyone 
  else knows it is there.</p>
<p>The problem is that once a bug has been identified and announced, writing a 
  bit of code that exploits it is usually not difficult. Thus it is almost inevitable 
  that someone will write a piece of "malware" (malicious software) 
  and try to make it spread. It's just a matter of time--usually days. </p>
<p>Malware comes in two main varieties. Viruses are probably more familiar. These
   are malicious programs attached to email messages. Generally the user must
  open  the attachment itself for the virus to run--yet SoBig.F infected about
  150,000  computers. The second variety, worms, require no human intervention:
  an infected  computer will repeatedly pick a random Internet address and try
  to infect the  computer that owns it. This means the rate at which it can spread
  is limited  only by the available bandwidth, the number of vulnerable machines,
  and how  the worm is written. The SQL Slammer worm is estimated to have infected
  90%  of the vulnerable machines in the world in about ten minutes.</p>
<p>It is not clear how much harm recent malware authors intended to do. Some did 
  nothing but try to infect other computers. Others tried to bring down "establishment" 
  web sites such as those belonging to Microsoft or the White House. One patched 
  the computer it infected, fixing the security hole that allowed it to take over 
  the machine before other malware could do so!</p>
<p>However, even the "best" malware consumes bandwidth at an enormous 
  rate as it attempts to spread. The SQL Slammer worm, for example, all but shut 
  down the Internet in South Korea, as well as many ATMs, despite doing nothing 
  but propagating itself. When SoBig.F hit campus, traffic on SSCC's email server 
  almost tripled, and DoIT shut down their email server. Finally the malware must 
  be removed from each machine it has infected--estimates of the cost to clean 
  up after Blaster run in the tens of billions of dollars worldwide.</p>
<p>But it could be worse. Once malware has control of a computer, it could then 
  give control to the malware's author. Malware that does so has thus far been 
  much less widespread. There have been cases where private information such as 
  user names, passwords, and credit card or bank account numbers have been stolen 
  from the hard drives of infected computers. Some viruses install spyware used 
  by mass marketers. Infected computers have been used to distribute spam, pirated 
  movies and software, or pornography. Large numbers of infected computers have 
  been harnessed to attack a variety of web sites, flooding them with so much 
  traffic that they cannot respond to legitimate requests.</p>
<p>All of this makes it vital that every PC connected to a network be kept secure. 
  This is reflected in the <a href="http://www.cio.wisc.edu/policies/devices.aspx">campus 
  policy on networked computers</a>. Every computer attached to a network <strong>must</strong> 
  1) keep its operating system up to date, and 2) run up to date antivirus software. 
  Fortunately this is not difficult to do.</p>
<p> If your computer logs in to the PRIMO domain, we will take care of this for 
  you automatically. Just make sure that you tell your computer to restart when 
  you leave for the day, so that the patches can take effect and it will be all 
  ready for you in the morning. But for your home PC, or any other PC that doesn't 
  log in to PRIMO, follow the steps below.</p>
<h2><a id="UpdatingWindows" name="UpdatingWindows"></a>Updating Windows</h2>
<p>The ultimate defense is bug-free software that cannot be compromised. While 
  we'll never reach that ideal, every patch you install should bring you closer. 
  Recall that most malware depends on exploiting problems that have already been 
  identified and fixed. Thus if you've installed the fix on your PC, you are safe 
  from that exploit. Fortunately, having had to do this many, many times and having 
  been much criticized in the process, Microsoft has made it quite easy to get 
  patches that fix problems with Windows.</p>
<p>Start up Internet Explorer (surprisingly enough this won't work with other 
  browsers) and go to <a href="http://windowsupdate.microsoft.com">windowsupdate.microsoft.com</a>. 
  You'll be automatically redirected to a Microsoft page with a name that's much 
  harder to remember. The first time you go to this page, you will be asked to 
  allow installation of a program that checks what updates you have and what you 
  need. It’s safe to allow this. If you choose not to, you will not be able 
  to use the automated Windows Update, and will have to locate and install updates 
  yourself.</p>
<p>After this plug-in is installed, your web browser will show a slightly different 
  page, with a place to click to <span class="MenuOutput">Scan for updates</span>. 
</p>
<p><img height="606" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/update_scan.png" width="642"/></p>
<p>Click on <span class="MenuOutput">Scan for Updates</span>, and it will identify 
  what operating system you have, what updates are available, and what updates 
  you already have installed. If there are any updates you need, that information 
  will appear on the left. You will be encouraged to install critical updates 
  first.</p>
<p><img height="649" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_1.png" width="642"/></p>
<p>The critical updates  are the ones that will prevent your computer from
   being infected. They deal with security issues or with problems in the operating
   system that will affect how your computer runs. Install all of these.</p>
<p>The Windows updates deal with a variety of less essential topics and issues. 
  Some are language-specific, and may of no use to you. Some deal with adjunct 
  programs that you may not have installed, such as the .NET framework or the 
  Windows Media Player. You can decide whether or not you want to install each 
  of these on an individual basis.</p>
<p>If your operating system is Windows 2000 or Windows XP, you will also see driver 
  updates. These are not required, but they are worth installing. Microsoft is 
  working with hardware manufacturers, and the drivers come from the manufacturers 
  – Microsoft is just assisting with distribution. However you may see better 
  results getting the drivers directly from the manufacturer.</p>
<p>Click <span class="MenuOutput">Review and install updates</span>, and you'll 
  be given a list of critical updates to install. Click on another category and 
  you'll be given the list of updates to install for that category.</p>
<p><img height="649" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_2.png" width="642"/></p>
<p>It could happen that one or more of the available updates need to be installed
   separate from any other updates. That will be noted in the brief description.
   Otherwise you can install them all at the same time.</p>
<p>When you have removed any that you don’t want to install, click the <span class="MenuOutput">Install 
  Now</span> button. Sometimes you will get a license agreement box:</p>
<p><img height="411" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_3.png" width="380"/><br/>
</p>
<p>You need to accept the agreement in order to install the updates.</p>
<p>Then the updates will begin to download and install:</p>
<p><img height="240" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_4.png" width="330"/></p>
<p>When the installation is completed, you will be informed by a note in your 
  web browser. You may also need to restart your PC:</p>
<p><img height="139" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_5.png" width="617"/></p>
<p>You will have to restart for the updates to take effect. If it’s an update 
  related to a security issue, it’s best to restart immediately. If not, 
  it’s ok to wait until you are done working for the day.</p>
<p>Because some updates must be installed separately, finishing this process once 
  does not mean you're done. As soon as your computer reboots, go back to <a href="http://windowsupdate.microsoft.com">windowsupdate.microsoft.com</a> 
  and have it scan your computer again. It will tell you when there are no more 
  critical updates to install at this time.</p>
<p>Microsoft normally releases updates on the second Tuesday of every month, if 
  needed. Of course if there is an urgent problem they will release a patch as 
  soon as possible. So plan to update your computer every month, but if you hear 
  of any new virus or worm threats, take a moment to check if there is an associated 
  patch. </p>
<h3>Software updates</h3>
<p>Windows is not the only program out there with bugs in it. Most software is 
  not completely perfect and foolproof when it is released. Because of this, there 
  are often updates and patches for specific programs, just as there are for the 
  Windows operating system. Bugs in other software rarely pose the security risk 
  that a bug in Windows can, but they can cause problems for you.</p>
<p>For the most part, you should look for software updates, patches, and fixes 
  on the web site of the program developer. For example, check for WordPerfect 
  Office updates at <a href="http://www.corel.com">www.corel.com</a>. Most often, 
  they will be in a section called “downloads”, “support”, 
  or “updates.” Some more recently developed software can check for 
  updates for you, particularly if you always have internet access, and will tell 
  you when there is an update available. Each update should have installation 
  instructions. There is no standard way to install or update a software package.<br/>
</p>
<h2><a id="UpdatingAntivirusSoftware" name="UpdatingAntivirusSoftware"></a>Updating Antivirus Software</h2>
<p>A second line of defense against malware is antivirus software: programs that 
  detect and can usually eliminate malware. Good antivirus programs protect your 
  computer in two ways. The first and possibly more familiar, is that it can scan 
  your computer, searching your memory and hard drive for known malware. The second 
  is that it will run in the background and attempt to block malware when it first 
  attacks. This "real time protection" will usually prevent malware 
  from ever installing itself on your computer.</p>
<p>DoIT has purchased a license for Norton Antivirus that allows UW faculty, staff 
  and students to install it on their machines for free (see <a href="https://techstore.doit.wisc.edu/nav/nav_login.asp">https://techstore.doit.wisc.edu/nav/nav_login.asp</a>). 
  SSCC recommends you install Norton Antivirus (and this article will give 
  detailed directions for keeping it up to date), but you are free to use any 
  antivirus software you wish.</p>
<p>However, any antivirus software can only locate or block malware if it knows
   about it. When new malware is detected, the makers of antivirus software immediately
   go to work figuring out how to have their program defend against it. They
  will  then make new "virus definition files" available, telling their
  program  about the new malware.</p>
<p>But this does no good if the new virus definition files are not installed on 
  your computer. Good antivirus software makes this very easy. Each program is 
  different, but it should be fairly obvious how to update your virus definition 
  files.</p>
<h3>Updating Norton Antivirus</h3>
<p>Assuming you installed it, Norton should already be running in the background, 
  providing real time protection. If so, there will be a small yellow icon in 
  the lower right of your screen:</p>
<p><img height="15" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton.png" width="15"/></p>
<p>Start Norton Antivirus by double-clicking on this icon. If you don't see it, 
  <a href="mailto:helpdesk@ssc.wisc.edu">contact the Help Desk</a>. Once the Norton 
  window opens, click on the <span class="MenuOutput">LiveUpdate</span> button.</p>
<p><img alt="Norton Window" height="420" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton1.png" width="664"/></p>
<p>You'll be asked how to connect to the LiveUpdate server. Assuming you have 
  an internet connection just click <span class="MenuOutput">Next</span>.</p>
<p><img height="357" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton2.png" width="483"/></p>
<p>Norton will then check to see if any components need updating, including the 
  virus definition files.</p>
<p><img height="357" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton3.png" width="483"/></p>
<p>If there are any updates, Norton will obtain and install them automatically. 
  Just click <span class="MenuOutput">Finish</span> when it's done.</p>
<h3>Setting Norton to Update Automatically</h3>
<p>You also have the option of having Norton download the latest virus definition 
  files automatically, and this is highly recommended. In the main Norton window 
  click <span class="MenuOutput">File</span>, <span class="MenuOutput">Schedule 
  Updates</span>. You'll see the following:</p>
<p><img height="202" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton4.png" width="444"/></p>
<p>Check <span class="MenuOutput">Enable scheduled automatic updates</span> and 
  then click the <span class="MenuOutput">Schedule</span> button.</p>
<p><img height="257" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton5.png" width="413"/></p>
<p>Norton normally releases updates on Thursdays, but will release virus files 
  as soon as possible when needed. So for the best protection you may want to 
  update daily, but weekly will suffice. Choose a time of day when your computer 
  is likely to be on, but Norton will do updates later if it misses one.</p>
<h2><a id="ConnectingtotheInternetthroughaRouter" name="ConnectingtotheInternetthroughaRouter"></a>Connecting to the Internet through a Router</h2>
<p>Home PC's with broadband connections to the internet (cable or DSL) are more 
  vulnerable to worms in that they are connected to the internet continuously. 
  But you can easily provide a third layer of protection by connecting through 
  a router. This is not necessary (or possible) if you are using dial-up.</p>
<p>The original purpose of a router was to allow more than one PC to share a single 
  internet connection and IP address, but it has turned out to be a useful device 
  even if you only have one PC. When a PC behind a router requests something from 
  a server, say, a web page or an email message, the router takes the request 
  and sends it out as if it came from the router itself. But the router keeps 
  track of which PC made a request of which server so when it gets the reply it 
  can route the reply to that PC.</p>
<p>What happens if a "reply" comes that no PC requested? It is simply 
  discarded, and that's why a router protects PCs fairly well against worms. The 
  router will not route the worm's infection attempts to a PC because it knows 
  that no PC requested them.</p>
<p>Most routers also include a firewall. A firewall blocks illegitimate attempts
   to connect to your PC from the Internet, providing even greater protection.
   If you're buying a router make sure it has a firewall, but almost all of them
   do. </p>
<p>Simple, cheap, routers are available from places like CompUSA or Best Buy.
   LinkSys is a particularly good brand. Many routers include wireless capabilities,
   but these are typically more expensive. Installation is easy and should be
  well-documented.  Usually it's just a matter of plugging your cable or DSL
  modem into one side  and your computer into the other and then turning all
  three on. Everything should  happen automatically from there.</p>
<h2>Getting Help</h2>
<p>SSCC staff are eager to make sure your computer is secure--especially if it 
  is connected to the building network. If you are bringing a computer into the 
  building (laptop or desktop) please <a href="mailto:helpdesk@ssc.wisc.edu">contact 
  the Help Desk</a> to set up a time for us to both configure it for the network 
  and to make sure it is secure.</p>
<p> If you believe your computer is infected, please contact us at once. Just 
  one caveat--almost all email viruses forge the From: field in the messages they 
  send. So if someone tells you they got a virus that said it was from you, it 
  almost certainly came from someone else. On the other hand, what we'd really 
  like to do is help you prevent your computer from being infected. If for whatever 
  reason you have difficulty taking the steps described in this article, please 
  don't let that stop you. We'll be happy to help.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/update_scan.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_4.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/Updates_5.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton4.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-12/norton5.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Writing a CD Using Ahead Nero</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>CDs are a cheap, convenient, and durable solution for backing up data or transferring 
  files from place to place. The SSCC strongly recommends that you keep backups 
  of your critical data on CD, or ideally several identical CDs. The long-term 
  archival qualities of CDs are not yet known--they simply haven't been around 
  long enough to see significant failures due to age. But they are more durable 
  than tapes or magnetic disks. CD readers are also ubiquitous--you'll rarely 
  have to worry about finding the right kind of drive to read your CD.</p>
<p>The SSCC makes CD writers available in rooms 2470, 3218, and 4218. If your
  PC has a CD writer, Ahead Nero may have come with it, or it can be purchased
  online. The SSCC does not provide CDs, though you may be able to get them from
  your department. We currently do not recommend "rewriteable" CDs,
  as some CD readers have difficulty with them.</p>
<p>Please be aware of copyright issues when using CD writers.</p>
<h2>Setting Up</h2>
<p>Before you can write files to a CD, they need to be copied to the computer's 
  local hard drive (<span class="MenuOutput">C:</span>). It will not work to copy 
  files to a CD directly from network drives like <span class="MenuOutput">U:</span>. 
  Your desktop is stored on the <span class="MenuOutput">C:</span> drive and is 
  a convenient location for temporary storage, though storing large files on the 
  desktop can reduce performance. If you need to write more than one file, put 
  them in a folder on your desktop so you can easily delete them when you're done 
  without accidentally deleting anything else.</p>
<p>Next put a writeable CD in the writer, shiny side down. It's not always obvious 
  which drive is the CD writer and which is the ordinary CD reader, but if Nero 
  tells you there's no disk in the writer, you probably need to switch.</p>
<p>Now start Ahead Nero, the program that writes CDs, by clicking <span class="MenuOutput">Start</span>, 
  <span class="MenuOutput">Programs</span>, <span class="MenuOutput">Ahead Nero</span>, 
  <span class="MenuOutput">Nero-Burning ROM</span>. When the program starts you'll 
  see the following:</p>
<p><img alt="Setting up" height="372" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_5.png" width="614"/></p>
<p>If your CD has nothing on it, select <span class="MenuOutput">Start Multi-session
     disc</span>. If you already have data on the CD, choose <span class="MenuOutput">Continue
      Multisession disc</span>. If you choose the second, look carefully at the
      options  in the lower half of this windows, and make sure you set it the
      way you want.  There are no right or wrong answers for these, just personal
      preferences. The  default is fine if you don't care.</p>
<p>When you're satisfied with your choices, click <span class="MenuOutput">New</span> 
  on the far right. If you want to answer a number of additional questions on 
  the way, click <span class="MenuOutput">Wizard</span> instead. It’s not 
  necessary, but many people are used to seeing those options.</p>
<p>Either way you'll soon reach the window where you can decide what goes on your 
  CD:</p>
<p><img alt="Choosing what goes on your CD" height="453" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_4.png" width="642"/></p>
<p>The top half shows the tables of your hard drive and any removable or mapped 
  drives. The bottom half shows the tables of the CD. To place folders or files 
  on the CD, simply drag them from the top to the bottom. Watch the bar at the 
  bottom of the window to see how much room you have left on the CD. When you 
  are done, click the <span class="MenuOutput">Write to CD</span> button.</p>
<p>This will open a window for the actual copying procedure.</p>
<h2>Writing Your CD</h2>
<p><img height="372" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_1.png" width="614"/></p>
<p>If you are not sure of your CD, you can choose <span class="MenuOutput">Simulation</span> 
  as your <span class="MenuOutput">Action</span>, to make sure everything will 
  work all right. Otherwise stick with the default <span class="MenuOutput">Write</span>, 
  and click the <span class="MenuOutput">Write</span> button in the top-right 
  corner.</p>
<p>A new window will show you the writing process.</p>
<p><img alt="Writing the CD" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_2.png" width="492"/></p>
<p>You can stop the it at any time using the <span class="MenuOutput">Cancel</span> 
  button, but this will probably render your CD unusable if you do it after the 
  burn process has started.</p>
<p>When the your CD is done, you'll see the following:</p>
<p><img alt="Done" height="119" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_3.png" width="347"/></p>
<p>Click <span class="MenuOutput">OK</span>, and one last window will open, asking 
  what you want to do with the messages logged along the way.</p>
<p><img alt="Dealing with Messages" height="504" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_6.png" width="492"/></p>
<p>If you want to keep a record of the burn process, then choose <span class="MenuOutput">Save</span> 
  or <span class="MenuOutput">Print</span> at the bottom of this window. But you 
  probably want to choose <span class="MenuOutput">Discard</span> and not keep 
  the messages.</p>
<p>Once you make this choice, the CD writer door will open, and you can remove 
  your CD. This will also take you back to the window that you used for choosing 
  files to be placed on the CD. When you close Nero it will ask if you want to 
  save your setup. It won't load properly anyway, so click <span class="MenuOutput">No</span>. 
  Once you are done, don’t forget to delete any files you may have copied 
  onto your hard drive just for the purpose of creating this CD.</p>
<p>You can label the top of your CD with any permanent marker.</p>
<p>Before you rely on this CD, we strongly recommend that you test it. Put it 
  in a CD reader and make sure you can read it. Ideally use the same reader you 
  anticipate using in the future. For vital data, your complete dissertation research 
  for example, we suggest making two or three identical CDs and storing them in 
  separate locations.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_5.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_4.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-13/5-13_6.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Printing on Special Paper</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>SSCC users occasionally need to print on special paper, including letterhead,
   forms, or dissertation-quality paper. If you need to print a long document
  on  special paper, like a dissertation, please speak with the operator and
  they  will assist you. But for short documents on special paper, you can use
  the printer  in 2470. This article will tell you how to do so from Windows
  (if you are  using a different operating system you'll want to connect to one
  of the terminal  servers).</p>
<p>Please note that doing anything out of the ordinary with computers has a chance 
  of running into problems. You would be wise to bring some extra paper and allow 
  yourself some extra time when printing on special paper.</p>
<h2>Telling the Printer to Use Your Paper</h2>
<p>Start to print your document as usual, but make sure you use a method that 
  will allow you to choose the printer rather than using the default printer automatically 
  (typically <span class="MenuOutput">File</span>, <span class="MenuOutput">Print</span>). 
  Select the printer called <span class="MenuOutput">\\print\SSCC2470</span>, 
  and click <span class="MenuOutput">Properties</span>. The following picture 
  is from Microsoft Word, but you'll get something similar in most programs:</p>
<p><img alt="Choose SSCC2470 and click Properties" height="389" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-15/5-15_1.png" width="522"/></p>
<p>If the SSCC2470 printer is not available, you'll need to add it. See <a href="https://ssc.wisc.edu/sscc/pubs/5-24.htm">Setting 
  Up Network Printers in Windows</a> for instructions.</p>
<p>Once there, click on the <span class="MenuOutput">Paper/Quality</span> tab 
  and then set the <span class="MenuOutput">Paper Source</span> to <span class="MenuOutput">Tray 
  1 (Manual)</span>.</p>
<p><img alt="Choose Tray 1 (Manual)" height="416" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-15/5-15_2.png" width="464"/></p>
<p>Now take your special paper down to room 2470. Remember that this room is
		locked,  and you'll need your UW ID and a PIN to get in. If you do not
		have	a PIN, you 
  can request one by filling out the form available on the bulletin board outside
		 room 4226.</p>
<h2>Putting Your Special Paper in the Printer</h2>
<p>When you get to room 2470, the printer may be busy with other jobs. If so you'll 
  need to wait until your job comes up in the queue. When it does, it will print 
  a yellow cover sheet with your name on it as usual. It will then stop, and a 
  message will appear in the LCD window saying "Manually Feed Letter." 
  This is your cue to put your paper in the printer.</p>
<p>If you are facing the front of the printer, tray 1, the one you want, will
   be around on the right side of the printer. It is also labeled with a "1." 
  Use the handle to open the tray, and then pull to extend it. You can then place
   your paper on the tray. Put the sheet in face-down, with the top of the page
   away from you. When the paper is placed properly, the printer will automatically
   take it. You can then put in a second sheet if needed, and so forth (if you
   need to print many sheets the operator will use a different method that does
   not involve feeding the sheets in one at a time). When you're done, close
  the  tray.</p>
<p>Note that the printer will not print any other jobs until your job is complete! 
  Once you submit a job using the manual tray, please go to 2470 immediately and 
  make sure your job is completed as soon as possible. Otherwise jobs submitted 
  to the printer will just wait in the queue until your job is done, inconveniencing 
  your fellow users.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-15/5-15_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-15/5-15_2.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Creating Web Pages Using Dreamweaver</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Web pages no longer need any introduction: it's almost taken for
            	granted that anything of importance can be found somewhere on
            	the web. This article will teach you the basics of creating
            	 web pages using Dreamweaver.</p>
<p>Our approach will be to some degree that of the HTML "purist," 
              meaning that we'll emphasize following HTML standards and using
              	 HTML the way it was intended. Web pages are different from printed
              	 pages in that they can be read by a variety of browsers, from
              	the  typical PC running Firefox or Internet Explorer, to handheld
              	computers,  to wireless Internet phones, to assistive technology
              	like screen  readers. All these devices will present a web page
              	in a different  way, but a page that follows HTML standards
              	will be clear and readable  in all of them. The problems
              	come when authors either don't understand  the purpose of HTML
              	markup, or intentionally misuse it to make their  page look the
              	way they want it to on a standard PC. Cascading Style  Sheets,
              	which we'll also discuss, give you more control over appearance
              	than HTML markup, are easier to use, and won't confuse other
              	browsers.</p>
<p>This document is intended for both novice web authors and web
            	veterans  who want to move up to Dreamweaver. It is a tutorial
            	in that we will go step by step through the process of creating
            	a sample page. Novices should follow all the steps--the only
            	way to learn web design is to actually do it. Veterans may want
            	to just read through for the techniques and then apply them to
            	their own pages. If you do follow all the steps,  be careful
            	not to overwrite your current web pages.</p>
<p>Web authors should be aware of the  University's 
              <a href="http://www.wisc.edu/wiscinfo/policy/wwwap.html">Policy
               Governing World Wide Web Accessibility</a>. There is no enforcement
               mechanism for this policy, but that does not mean
            	making  your pages accessible isn't the right thing to do. Fortunately,
            	writing proper HTML gets you most of the way there. </p>
<h2><a id="HTML" name="HTML"></a>The HyperText Markup Language</h2>
<p>The World Wide Web is nothing more than a collection of computers
            	 that promise to send out web pages when asked. Web pages (at
            	least the ones we're going to make) are written in HTML, which
            	stands for HyperText Markup Language. HTML was developed by physicists
            	 at CERN, and it shows. Fortunately we will rarely have to deal
            	with  HTML directly--we'll get Dreamweaver to write HTML for
            	us. But let's take a look at some just to see what it's like.
            	Consider this <a href="https://ssc.wisc.edu/sscc/pubs/files/HTMLSample.htm">HTML 
              Sample</a>. Now use your browser to look at
              the HTML  that creates this page: click <span class="MenuOutput">View</span>,
               then click on either <span class="MenuOutput">Page Source</span> or
               <span class="MenuOutput">Source</span> depending
               on what browser you're using. It starts with a bunch of information
               for your browser; the actual text starts after where it says <span class="MenuOutput">&lt;body&gt;</span>.</p>
<p>HTML uses "tags" to provide information about the text, 
              and a browser uses these tags to decide what to display to the user. 
              For example <span class="MenuOutput">&lt;p&gt;</span> marks the 
              beginning of a paragraph, and <span class="MenuOutput">&lt;/p&gt;</span> 
              marks the end. <span class="MenuOutput">&lt;h1&gt;</span> and <span class="MenuOutput">&lt;/h1&gt;</span> 
              do the same for a level one heading. If you compare the code you're 
              looking at with what your browser is displaying, you'll see that 
              your browser decided to make the level one heading big and bold. 
              Headings are examples of what is called "structural markup" 
              because they give information about the structure of the document.            </p>
<p>The next line says it's a level one heading, but if you look at
            	 the HTML markup you'll see it's really just an ordinary paragraph
            	 with some additional tags that tell the browser to make the
            	text big and bold. The next line does the reverse. It's just
            	some text that we want to be big and bold. This is considered
            	very bad form, and an example will explain why: screen readers
            	(programs that read web pages out loud for the blind) often denote
            	a heading by pausing before and after reading it. If we mark
            	headings as "big and bold" rather than as headings, or mark regular
            	text as a heading just to make it big and bold, we sabotage this
            	process. </p>
<p>The
            	goal  is to make sure that a page retains its functionality,
            	if not its appearance, no matter how it is presented. Screen
            	readers make good examples because having a page read out loud
            	is about as different from seeing it on a PC as it gets, but
            	the same principles apply to handheld computers, wireless Internet
            	phones, and devices we haven't even seen yet. The World Wide
            	Web Consortium (W3C, the people who write HTML standards) refers
            	to this as "transforming gracefully."</p>
<p>Most documents you've probably worked with (Word, PDF, etc) have
            	a single form. HTML pages do not. HTML pages are "rendered" by
            	the reader's web browser and different browsers
            	may render them differently. We add another layer to this
            	process when we choose to use an HTML editor like Dreamweaver
            		rather than writing the HTML ourselves. Dreamweaver will
            	translate what we write into HTML, which a browser will then
            	translate into what the user actually sees.</p>
<p>If this sounds
            	hard to control, you've got the idea. But
            	if you can give up on controlling the exact appearance of your
            	pages, you'll see how this flexibility allows your pages to be
            	used by the broadest possible audience without any additional
            	effort on your part. Nor does this mean your pages have to look
            	ugly: while controlling appearance with HTML is a bad idea, controlling
            	appearance is the whole point of Cascading Style Sheets, which
            	we'll cover as well. </p>
<h2><a id="RunningDreamweaver" name="RunningDreamweaver"></a>Running Dreamweaver</h2>
<p>The SSCC has made Dreamweaver available to all SSCC users on Winstat.
            	Please see <a href="https://www.ssc.wisc.edu/sscc/pubs/winstat.htm">Using
            	  Winstat</a> for instructions on logging in. When running Winstat
            	  you are essentially using a different computer. You may need
            	  to redo drive mappings and other customizations you are used
            	  to on your own PC.</p>
<p> If you are going to be using Dreamweaver on a regular basis you
            	 may want to consider purchasing a copy for your own PC. It is
            	available from <a href="http://www.doit.wisc.edu">DoIT</a>.</p>
<h2><a id="SettingUp" name="SettingUp"></a>Setting Up</h2>
<p>We'll start by setting up all the files and folders we're going
            	 to use in this tutorial. Most of the time you'll do your file
            	management through Dreamweaver, including putting files on the
            	web server itself. Your web folder on the server already exists.
            	It's called PUBLIC_web and is in your Linux home directory, also
            	known as the <span class="MenuOutput">Z:</span> drive. </p>
<h3>Creating a Local Folder </h3>
<p>Dreamweaver allows you to set up a separate folder where you can
            	 work on pages before publishing them to the world. Normally
            	the best place is in your Windows Network home directory. Using
            	Windows Explorer (or your favorite way of working with files)
            	make a folder in the <span class="MenuOutput">U:</span> drive  called <span class="MenuOutput">Web
            	 Site</span>. We're
               going to want some files we can play with later, so go to <span class="MenuOutput">X:\SSCC
                Tutorials\Web Class</span> and copy everything in this directory
                 to your new <span class="MenuOutput">Web Site</span> folder.</p>
<h2><a id="DefiningYourSiteinDreamweaver" name="DefiningYourSiteinDreamweaver"></a>Defining Your Site in Dreamweaver</h2>
<p>Now we're ready to start up Dreamweaver (find it by clicking <span class="MenuOutput">Start</span>,
            	<span class="MenuOutput">Programs</span>). The first step will be
            	to define your web site. You can use Dreamweaver to edit individual
            	pages, but many of the best features will only be available in the
            	context of a defined site. Setting up a site can be a bit confusing,
            	but it only has to be done once.</p>
<p>To begin, click <span class="MenuOutput">Site</span>, <span class="MenuOutput">New
            		Site</span>. Enter a name in the box under
            	<span class="MenuOutput">What would you like to name your site?</span> This
            	name is for your reference only, so you can put it anything you
            	like. Under What is the HTTP Address (URL) of your site, enter
            	<span class="InputCode">https://www.ssc.wisc.edu/~</span> followed
            	by your SSCC username (e.g. <span class="InputCode">https://www.ssc.wisc.edu/~rdimond</span>).
            	Then click <span class="MenuOutput">Next</span>. </p>
<p><img alt="Site Definition, screen 1--name and URL" height="574" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_1.png" width="580"/></p>
<p>The next screen asks if you'll be using some sort of programming
            	language on the server. Choose <span class="MenuOutput">No</span> and click <span class="MenuOutput">Next</span>. </p>
<p><img alt="Screen 2--server technology" height="574" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_2.png" width="580"/></p>
<p>Next you'll tell Dreamweaver where to store the "local" copy of
            	your files. Make sure <span class="MenuOutput">Edit local copies
            	on my machine, then upload to server when ready</span> is selected,
            	and then under <span class="MenuOutput">Where
            	on your computer do you want to store your files?</span> type the
            	directory you set up earlier, <span class="InputCode">U:\Web Site</span>. </p>
<p><img alt="Screen 3--local folder" height="574" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_3.png" width="580"/></p>
<p>Now you'll tell Dreamweaver where to put files that are ready
            	to be published on the web server. Set <span class="MenuOutput">How
            	do you connect to your remote server?</span> to <span class="MenuOutput">Local/Network</span>.
            	Under <span class="MenuOutput">What folder on your server do you
            	want to store your files in?</span> type <span class="InputCode">z:\PUBLIC_web</span>. </p>
<p><img alt="Screen 4--remote settings" height="574" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_4.png" width="580"/></p>
<p>Dreamweaver will then ask if you want to enable checking in and
            	out files. You might want to turn this on if there are lots of
            	people who work on the site, but for your own pages choose <span class="MenuOutput">No</span>. </p>
<p><img alt="Screen 5--check in/out" height="574" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_5.png" width="580"/></p>
<p>The last screen just confirms the information you've entered.
            	Look it over, and if everything is okay click <span class="MenuOutput">Done</span>. If not, click
            	<span class="MenuOutput">Back</span> until you get to the relevant screen and make corrections.</p>
<p><img alt="Screen 6--confirmation" height="574" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_6.png" width="580"/></p>
<h3>Saving Your Site Definition</h3>
<p>Unfortunately Dreamweaver on Winstat has a problem where it occasionally drops site definitions. (Winstat, being a Windows Terminal Server, is not quite like a regular Windows PC and this is one case that causes trouble.) However, you can save your site definition as a file which you can load in case this happens to you.</p>
<p>Click <span class="MenuOutput">Site</span>, <span class="MenuOutput">Manage Sites</span>, make sure your web site is selected, and then click <span class="MenuOutput">Export</span> and <span class="MenuOutput">Save</span>. This will save the site definition file in your local web directory.</p>
<p>If Dreamweaver does drop your site definition, you'll probably notice when you can no longer put files on the web server (since Dreamweaver doesn't know where to put them). At that point you should click <span class="MenuOutput">Site</span>, <span class="MenuOutput">Manage Sites</span>, <span class="MenuOutput">Import</span> and select the site definition file. You'll then be back to normal.</p>
<h2>The Dreamweaver Workspace</h2>
<p>Dreamweaver has a tendency to make too much available at once
            	(one suspects they wanted to impress people who are evaluating
            	the program with how much it can do). Fortunately you can close
            	the panels you don't need. The panels you're most likely to need
            	are <span class="MenuOutput">Files</span>, <span class="MenuOutput">Properties</span>,
            	and <span class="MenuOutput">CSS</span>. To close the others, right-click
            	on their names and choose <span class="MenuOutput">Close panel group</span>.
            	This would leave you with the following layout:</p>
<p><img alt="Workspace with suggested panels" height="493" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_7.png" width="640"/></p>
<p>Note that this picture is not of a full screen--you'll probably
            	have much more room. But as you're writing you may want even
            	more. Just press <span class="InputCode">F4</span> to make the document
            	fill the entire Dreamweaver window. Alternatively you can click
            	the small black triangles between the document and the panels
            	at the right and bottom to close them temporarily. Click the
            	arrows again to get the panels back. You can also control what
            	panels you see by clicking on <span class="MenuOutput">Window</span> at
            	the top.</p>
<h2><a id="YourHomePage" name="YourHomePage"></a>Your Home Page</h2>
<p>At long last, let's make a web page. Click <span class="MenuOutput">File</span>, <span class="MenuOutput">New</span>.
            	Then choose the <span class="MenuOutput">Basic page</span> category and <span class="MenuOutput">HTML</span>, then click <span class="MenuOutput">Create</span>.</p>
<p><img alt="Creating a basic HTML page" height="503" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_9.png" width="600"/></p>
<p>You'll get a blank page. Dreamweaver will have an easier time
            	creating links if it knows where this file will be, so let's
            	save it right away. Click <span class="MenuOutput">File</span>, <span class="MenuOutput">Save
            	as</span>, and give it the name <span class="InputCode">home.htm</span>.
            	If someone goes to your web site but does not specify what page
            	they want they'll be given <span class="MenuOutput">home.htm</span> if
            	it exists, so that makes a logical starting point.</p>
<h3>Page Title </h3>
<p>The first thing we'll do is set a title for the page. This is
            	what will show up in the title bar of the user's browser while
            	they're looking at the page. Leaving the page title set to "Untitled
            	Document" makes the reader think "newbie web author."</p>
<p>Make sure the <span class="MenuOutput">Properties</span> pane
            	is open at the bottom of your screen. Then make sure it's set
            	to full size by clicking on the small triangle in the lower right.
            	Then you should see a button labeled
            	<span class="MenuOutput">Page Properties</span>.</p>
<p>Click on it, and you'll get a new window with a variety of settings.
            	Select the <span class="MenuOutput">Title/Encoding</span> category. In the <span class="MenuOutput">Title</span> box,
            	type a title for the page--something like "<span class="InputCode">&lt;Your
            	Name&gt;'s Home Page</span>." Ignore
            	the other settings for now and click <span class="MenuOutput">OK</span>. </p>
<p><img alt="Setting the page title" height="387" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_10.png" width="603"/> </p>
<p>This window also allows you to control many aspects of the appearance
            	of your page. We're not talking about controlling appearance
            	right now, and when we do we'll do it a bit more directly. But you
            	may want to make a note of this window for future use. </p>
<h3>Text and Headings </h3>
<p>Let's start with just some text. Type in <span class="InputCode">&lt;Your
            		 Name&gt;'s Home Page</span>. As you see the text appears
            		 on the page just as if you were working in Word. You may
            		 be tempted at this point to  change the appearance of these
            		 words--to make them bigger or something. But before you
            		 reach for the <span class="MenuOutput">Size</span> menu
            		 on the <span class="MenuOutput">Properties</span> panel, ask yourself
            		 why you think these words ought to be bigger.</p>
<p>The reason (translated into HTML terms) is that they are a heading,
            	specifically a level one heading. You can mark them as such by
            	selecting the words, then going to the <span class="MenuOutput">Properties</span> panel
            	and setting
            	<span class="MenuOutput">Format</span> to <span class="MenuOutput">Heading
            	1</span>. Note that Dreamweaver immediately made the words big and
            	bold, and this is what a standard web browser will do as well.
            	However, non-standard browsers will also find a way to tell the
            	reader that this is a heading, ways that may have nothing to
            	do with size or font.</p>
<p>Recall that the HTML "tag" for a level one heading is <span class="MenuOutput">&lt;h1&gt;</span>.
            	If you look in the lower left corner of the document window,
            	you'll see <span class="MenuOutput">&lt;body&gt;&lt;h1&gt;</span> in
            	the border of the window (if you don't see the <span class="MenuOutput">&lt;h1&gt;</span> make
            	sure the cursor is somewhere in the heading of the page). This
            	shows the tags that apply at the current location of the cursor.
            	This is a great way to learn HTML, and once you know some HTML
            	it's a great way to see how Dreamweaver is turning your ideas
            	into HTML. </p>
<h3>Images</h3>
<p>It's almost too simple to put images in a web page. It's easy
            	when you are on campus with a direct connection to the Internet
            	to ignore how big your pictures are and how long it will take
            	for them to download. But let's do it anyway. </p>
<p>Move the cursor to a new line and either press <span class="InputCode">CRTL-ALT-i</span> 
              or click <span class="MenuOutput">Insert</span>, <span class="MenuOutput">Image</span>.
               Then select <span class="MenuOutput">uwlogo.gif</span>. You'll
               immediately be asked to set the <span class="MenuOutput">Alternate
               text</span>. Type in <span class="InputCode">University of Wisconsin-Madison </span>               and
               click <span class="MenuOutput">OK</span>. </p>
<p><img alt="Setting an ALT text" height="202" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_11.png" width="477"/></p>
<p>This is perhaps the most important thing you can do to make your
            	page accessible to people with disabilities, so it deserves some
            	 explanation. The <span class="MenuOutput">Alternate text</span> is
            	what a browser will display if it cannot display the image itself.
            	It could be a simple as the user turning off images to save loading
            	 time, or it could be that the user is blind and the
            	page is being read to them. Alternate texts must be short, so
            	if you need to give a longer description you'd put it in a separate
            	web page and put the URL of that web page in <span class="MenuOutput">Long
            	description</span>. This is rarely necessary--normally you'd  only
            	do this if a graph or diagram is a critical part of the information
            	you're trying to convey.</p>
<p>The alternate text for this image was a no-brainer, since the
            	image is just a picture of text in a particular format. In general
            	choosing good alternate texts is an art form, but the basic principle
            	is to convey the same information that the image is trying to
            	convey. Do not attempt to describe what the image looks like.
            	Someone who is blind doesn't care that in our image the
            	words are red!</p>
<p> If an image is purely decorative, click the drop-down
            	menu to the right and choose <span class="MenuOutput">&lt;empty&gt;</span>.
            	Keep in mind that screen reader programs cannot skip ahead the
            	way a sighted reader can, so hearing "Picture of the Sewell
            	Social Sciences Building on a sunny day with a few puffy clouds
            	and the Carillon tower visible in the foreground" every time
            	they load your page probably won't be appreciated. Graphical
            	layouts containing dozens of tiny images with the alternative
            	text of "Spacer" are even worse.  On the other hand, setting
            	the alternate text to <span class="MenuOutput">&lt;empty&gt;</span> is
            	very different from not setting it at all. One says "this image
            	conveys no important information." The other says "I really
            	didn't pay any attention to accessibility issues, so for all
            	you know this entire page is useless if you can't see this image."</p>
<p>At the bottom of the screen there is a little box that says how
            	 big your page is and how long it will take to download on a
            	28.8 modem. This is a conservative estimate of how long it would
            	take someone to download your page at home on a dial-up connection.
            	People with cable or DSL, or who are on campus, will be able
            	to download it much more quickly. Thus "how big is too big?"
            	depends on your intended audience. If you do decide that your
            	page is bigger than you want it to be, focus on the images. A
            	picture may be worth a thousand words, but a thousand words will
            	download much more quickly.</p>
<h2><a id="Links" name="Links"></a>Links</h2>
<p>The whole point of the web is to link information together in
            	logical  ways. So let's learn how to make links. Let's pretend
            	you are teaching a course and want to make a link on your home
            	page to the course calendar. We'll make a new section
               by pressing <span class="InputCode">CTRL-2</span> (level two heading)
                and typing <span class="InputCode">Teaching</span>. Note how
                the level two heading is a subsection of the level one heading
                (your home page). Now go to the next line and type <span class="InputCode">Course
                Calendar</span>. </p>
<p>There are many ways to
            	turn text into a link, but they all start by selecting the text.
            	Then you can:</p>
<ul>
<li>Type the name of the web page you want to link to in the <span class="MenuOutput">Link</span>            		box
            		of the <span class="MenuOutput">Properties</span> panel</li>
<li>Drag the small circle to the right of the <span class="MenuOutput">Link</span> box to the file
            		in the <span class="MenuOutput">File</span> panel you want to link to</li>
<li>Click <span class="MenuOutput">Modify</span>, <span class="MenuOutput">Make
            			Link</span> or press <span class="InputCode">CTRL-l</span>, then
            			select the file you want to link to </li>
</ul>
<p>If you plan ahead, you can insert both the text and the link at
            	the same time by clicking <span class="MenuOutput">Insert</span>, <span class="MenuOutput">Hyperlink</span>. If you do, note
            	that the only boxes you'll usually fill out are <span class="MenuOutput">Text</span> (the
            	text the user will read) and <span class="MenuOutput">Link</span>,
            	the file you're linking to.</p>
<p>In this case what we want to link to is <span class="MenuOutput">calendar.htm</span>,
            	so choose one of the methods above and make <span class="MenuOutput">Course
            	Calendar</span> a
            	link to it. You'll know it worked when the words are blue and
            	underlined. </p>
<p>By default Dreamweaver will use what are known as
            	document-relative links, and normally that's what you want. If
            	the link just says <span class="MenuOutput">calendar.htm</span> that
            	means the server should look for a file with that name in the
            	same directory as the file you're currently reading. The advantage
            	to this approach is that you can pick up the whole web site,
            	move it somewhere else, and all the links will still work. </p>
<p>Now let's add a research section. 
              Create a level two heading called <span class="InputCode">Research</span> 
              and under it type <span class="InputCode">Data</span>. Make that
              a link to the file <span class="MenuOutput">data.dta</span>, and
              just for fun use a different method than the one you used before. </p>
<p>You may be  wondering what kind of data this is and how someone
            	is going to be able to read it. These are excellent questions.
            	You can put any kind of file you want on the web, but consider
            	ahead of time whether your intended audience will be able to
            	do anything with it. For example, <span class="MenuOutput">data.dta</span> is
            	a Stata data set, and only people who have Stata on their computers
            	will be able to open it. And while Stata is pretty
            	well-behaved, the data files of other programs may be unreadable
            	by different versions of the same program or the same program
            	running on different types of computers. You're usually safe
            	in assuming that everyone has or can get Adobe Reader and can
            	thus read PDF files. Most people have programs that can read
            	Word and Excel files (notably, Word and Excel). But before you
            	put anything but web pages on the web, find out as much
            	as you can about your intended audience and what they have available,
            	experiment, and plan ahead. There is nothing more frustrating
            	than rushing to meet a deadline and suddenly realizing your collaborators
            	can't read the files you're trying to share with them.</p>
<p>Now let's link to something outside your web site. Since it is
            	outside your  site, you need to tell the reader's browser
            	exactly how to find it, right down to the protocol (normally
            	http). If you know
            	the URL of the page you are linking to you can type it in the
            	Link box of the Properties panel, but that's asking for typos.
            	You can avoid that by first finding the page you want in a web
            	browser, then copying the address from the browser and pasting
            	it into Dreamweaver. That way you know it's correct.</p>
<p>Open a web browser and go to the SSCC's home page (<a href="http://ssc.wisc.edu/">http://ssc.wisc.edu/</a>).
            	Copy the tables of the address bar and then switch back to
            	Dreamweaver. At the end of your web page type <span class="InputCode">The
            	host of this web site</span> (this is an exercise--there's no need
            	to put this link in an actual web page even if it is hosted on
            	the SSCC's web server). Select that text, click inside the <span class="MenuOutput">Link</span> box
            	in the <span class="MenuOutput">Properties</span> panel so that
            	the cursor is there, and then either right-click and choose <span class="MenuOutput">Paste</span> or
            	press <span class="InputCode">CTRL-v</span>. The URL you pasted
            	should appear in the <span class="MenuOutput">Link</span> box and
            	the text will turn into a link to the SSCC home page.</p>
<p>Note that we did not use the <span class="MenuOutput">Make Link</span> dialog box to do this--it
            	doesn't like addresses that don't include a specific file.</p>
<h3>Email Links</h3>
<p>When the reader clicks on an email link, the browser attempts
            	to open the default mail program on their computer, then creates
            	a message addressed to the address in the link. Thus email links
            	provide a very simple way for your audience to contact you. </p>
<p>The University Accessibility Policy requires that every web page
            	 name a person to contact if someone cannot access the page,
            	so we'll fulfill that requirement and learn to make an email
            	link at the same time. Type <span class="InputCode">If
            	you have trouble accessing this page, please contact: {<span class="Parameter">your
            	name</span>}
            	({<span class="Parameter">your
            	email address</span>}</span>). 
            	Select your email address and click <span class="MenuOutput">Insert</span>, 
            	<span class="MenuOutput">Email Link</span>. Since the text you selected
            	is an email address, Dreamweaver will cleverly deduce that that's
            	the address you want to the reader to send mail to when they
            	click on it.</p>
<p><img alt="Inserting an email link" height="142" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_12.png" width="405"/></p>
<p>So why didn't we just make your name the link? Not
            	everyone uses an email program that communicates with a browser.
            	They'll need to enter your email address themselves, so you need
            	to put it in the text where they can read it.</p>
<h3><a id="NamedAnchors" name="NamedAnchors"></a>Named Anchors</h3>
<p>Our page isn't really long enough to need this yet, but let's
            	put  in a link that takes us back to the top of the page. At
            	the very bottom type <span class="InputCode">Back to Top</span>.
            	Select it and in the <span class="MenuOutput">Link</span> box type <span class="InputCode">#Top</span>.
            	 This will take us to an anchor called <span class="InputCode">Top</span> 
              within this document. Think of an anchor as a bookmark, except
              it  must be placed by the author.</p>
<p>All we need now is an anchor called <span class="InputCode">Top</span>. 
              Move the cursor to the very beginning of the document, then click 
              on <span class="MenuOutput">Insert, Named Anchor</span> 
              (or you can press <span class="InputCode">CTRL-ALT-A</span>). You'll 
              get the following:</p>
<p><img alt="Inserting a named anchor" height="133" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_13.png" width="377"/></p>
<p>Type <span class="InputCode">Top</span> for the <span class="MenuOutput">Anchor 
              Name</span>. You'll see a yellow thing with an anchor on it to the 
              left of your title. Rest assured it will not be visible when viewed 
              in a browser. But when the user clicks on the <span class="InputCode">Back 
              to Top</span> link, the browser will jump to this anchor.</p>
<h3>Navigation Bars</h3>
<p>One very useful feature for almost any web site is a navigation
            	 bar which  allows quick access to the most important pages
            	on your site. See the <a href="https://www.ssc.wisc.edu">SSCC Home
            	Page</a> for
            	an example (the stuff on the left). Once your web site has more
            	than one page in it, consider putting together a navigation bar
            	so readers can get to all of them. A navigation bar is just a
            	list of links. The challenging part is seeing your web site from
            	the point of view of the reader and helping them get to what
            	they're looking for quickly and easily.</p>
<h2><a id="Lists" name="Lists"></a>Lists</h2>
<p>Lists are a very common structure in documents, and HTML handles
            	 them very easily. Let's make the link under <span class="MenuOutput">Teaching</span> 
              the beginning of an official list of links. First select the link
               text <span class="MenuOutput">Course Calendar</span>. Now under <span class="MenuOutput">Text</span> 
              on the menu bar select <span class="MenuOutput">List </span>and<span class="MenuOutput">
</span>then <span class="MenuOutput">Unordered List</span>. This
               will create a bullet list, while an <span class="MenuOutput">Ordered
                list</span> will be numbered.  If you are
                in a list element and hit <span class="InputCode">ENTER</span>,
                  Dreamweaver will automatically create a new list element for
                 you--just be sure you don't have  text selected, or you'll
                replace it instead. Keep in mind that lists are structural markup.
                They should be used for actual lists, not just to get indentation
                or other presentational effects.</p>
<h2><a id="Tables" name="Tables"></a>Tables</h2>
<p>Tables were included in HTML so people could put tables of data
            	in web pages. However, people rapidly figured out that you could
            	use a table to control the layout of your web page. This is definitely
            	a case of using structural markup for presentational purposes,
            	but the alternative (positioning by CSS) is a lot harder to do
            	and much less reliable. Poorly designed layout tables can wreak
            	havoc with screen readers and other browsers that can only deal
            	with a small part of the page at a time. But if you're aware
            	of the issues it's easy to create tables which will work just
            	fine. </p>
<p>Our web page is getting a bit long, but there's plenty of blank 
              space on the right side. Let's move the Teaching section and the 
              Research section into two parallel columns. Put the cursor just 
              above <span class="InputCode">Teaching</span> and click on <span class="MenuOutput">Insert</span>, 
              then <span class="MenuOutput">Table</span>. You'll see the following:</p>
<p><img alt="Inserting a table" height="422" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_14.png" width="414"/></p>
<p>We want one row (why in a moment) and two columns. We'll adjust
            	the width later so it doesn't really matter what you set it
            	to for now. We want a border on our table, but if you didn't
            	you could set <span class="MenuOutput">Border
            	thickness</span> to <span class="InputCode">0</span>. </p>
<p>The accessibility features are mostly intended for data tables.
            	The structure of a data tables can be hard to understand if you
            	cannot see the entire table at once. Use the captions and
            	summaries to explain that structure. However, for layout
            	tables, like we're doing, there's usually nothing to summarize.</p>
<p>Now drag the entire  Teaching section into the left table cell,
            	and the entire  Research section into the right table cell. Of
            	course it's usually more efficient to make the table first and
            	then make the stuff that will go inside it. </p>
<p>Now that the table is in place, you can decide if you like the
            	look of it. If not, click on <span class="MenuOutput">&lt;table&gt;</span> in
            	the bottom border of the document window. Then the <span class="MenuOutput">Properties</span> panel
            	will show the properties of the table.</p>
<p>The table width is in the box marked <span class="MenuOutput">W</span>.
            	This can be measured either in pixels or percents. Using percents
            	is highly recommended, as screen sizes vary. Try 70% for this
            	table. Alternatively you can delete everything in that box and
            	let the browser decide--it will choose a width just big enough
            	to fit everything in the table. This makes for a very flexible
            	design.</p>
<p>Cell padding (<span class="MenuOutput">CellPad</span>) will leave
            	some space around the text in the tables, making them easier
            	to read and less cluttered-looking. Try 10 to see the effect.</p>
<p>You can adjust the column widths simply by dragging the column
            	border. If the table width is measured in percentages the column
            	widths will be too. </p>
<p>To adjust parts of the table it helps to know what HTML calls
            	them. The <span class="MenuOutput">&lt;tr&gt;</span> tag stands
            	for "table row" while <span class="MenuOutput">&lt;td&gt;</span> is
            	"table data" or a single cell. Thus to adjust a particular
            	cell, click inside that cell and then click the <span class="MenuOutput">&lt;td&gt;</span> tag
            	at the bottom of the screen to see the properties of the cell
            	itself.</p>
<p>You'll often finding yourself changing the alignment of individual
            	cells. <span class="MenuOutput">Horz</span> and <span class="MenuOutput">Vert</span> control
            	the horizontal and vertical alignment respectively of the text
            	within the cell. To see it in action, add some blank lines to
            	one cell so it's now longer than the other. You'll notice that
            	the <span class="MenuOutput">Teaching</span> and <span class="MenuOutput">Research</span> headings
            	no longer line up. That's because the default is to center them
            	within the cell, so as the cells got taller, the text in the cell
            	with less table moved down. You can fix that by setting <span class="MenuOutput">Vert</span> to <span class="MenuOutput">Top</span> for
            	both cells--that way they'll both start at the top regardless
            	of their relative sizes. </p>
<p>Given that our sections consist of rows of text, you might think
            	it would make sense to make a table with multiple rows. If you
            	set the borders properly you could even make it look identical.
            	But to a screen reader, the result would be completely different.
            	Screen readers read tables from left to right and then top to
            	bottom. Thus it reads an entire row before moving to the next
            	one. The way we made this table it will read
            	Teaching...Course Calendar...Research...Data, which makes sense.
            	If we had put the second row of text on a separate row in the
            	table it would read Teaching...Research...Course Calendar...Data,
            	which makes no sense at all. It's easy to make tables which look
            	fine to a sighted reader but are nonsensical when read by a screen
            	reader. On the other hand, it's also easy to 
            	read your table left to right, top to bottom, and make sure that
            	it makes sense when read that way.</p>
<h2><a id="PublishingYourPage" name="PublishingYourPage"></a>Publishing Your Page</h2>
<p>When we defined your web site we gave Dreamweaver two locations:
            	one on the web server, and one in your Windows home directory.
            	When you click <span class="MenuOutput">File</span>, <span class="MenuOutput">Save</span>, you will be saving the document in
            	your home directory. Before others can see it you need to publish
            	it to the server. To do that, you can:</p>
<ul>
<li>Press <span class="InputCode">CTRL-SHIFT-U</span></li>
<li>Click <span class="MenuOutput">Site</span>, <span class="MenuOutput">Put</span>  on
            		the menu bar at the top </li>
<li>Right-click on the file in the <span class="MenuOutput">Files</span> panel
            		and choose <span class="MenuOutput">Put</span></li>
</ul>
<p>Since you're working with computers,  nothing is done until it's
            	tested. Start up a web browser and type in <span class="InputCode">www.ssc.wisc.edu/~&lt;your
            	  login name&gt;</span>. You should be able to see your new home
            	  page.  Look it over, try out the links, see if everything works
            	  as you  expected. If not, go back to Dreamweaver and try to
            	  fix it. Make sure you did everything just as described. When
            	  you click on the 
              <span class="MenuOutput">Data</span> link, the browser will probably
              ask you if you want to save the file to disk. That's because unless
              you have Stata, your computer will have no idea what else to do
              with <span class="MenuOutput">data.dta</span>.</p>
<p>An alternative to putting files is to "synchronize" your entire site. Synchronization asks Dreamwever to identify any files which need to be uploaded to the server and do so automatically. You can do this by clicking the two circular arows at the top of the <span class="MenuOutput">Files</span> panel or by clicking <span class="MenuOutput">Site</span>, <span class="MenuOutput">Synchronize Sitewide</span>. There's just one catch with synchronization: since Windows and Linux handle time differently, all synchronization information gets scrambled at the begining and end of Daylight Savings Time. The simplest (but slowest) solution is to put your entire site right after the time change, so all the synchronization information is updated. For alternatives see <a href="http://kb2.adobe.com/cps/401/kb401070.html">Adobe's TechNote</a> on the issue. Synchronize is mostly useful if you have a large site with lots of non-HTML files like PDFs of papers.</p>
<h2><a id="Templates" name="Templates"></a>Templates</h2>
<p>As you move beyond making a web page and begin to develop a web
            	site, there will probably be things that should be the same on
            	every page. University policy requires you put contact information
            	on every page, you'll almost certainly want a navigation bar,
            	and you probably want to give all your pages a similar layout.
            	Even if you're not concerned about establishing an "identity"
            	for your site, making web web pages is quicker and easier if
            	you reuse components.</p>
<p>Dreamweaver templates allow you to set up a starter page with
            	all the common elements already in place, and then you can
            	simply add in the the table that makes each individual page
            	unique. Even better, if you decide to change the template Dreamweaver
            	will automatically update all the pages based on that template.
            	Consider changing the name of a web page that your navigation
            	bar links to. Without templates, you'd have to change the link
            	in all your pages one by one. With them, you simply
            	change the template  and you're done. Nor are templates limited
            	to navigation bars: the SSCC recently gave our web site a complete
            	graphical makeover but thanks to templates, the task of converting
            	all the individual pages to the new layout took about 15 minutes.</p>
<h3>Creating a Template </h3>
<p>To create a template you start by creating a regular web page--in
            	fact it's quite common to first make a page and then say "I
            	like that--I want all my pages to look like this one." We'll
            	use our sample home page to illustrate. Click <span class="MenuOutput">File</span>,
            	<span class="MenuOutput">Save as Template</span>. You'll be given
            	the opportunity to give a description of the template and to
            	name the resulting file something other than <span class="MenuOutput">home</span>,
            	but don't bother. Do allow Dreamweaver to update links.</p>
<p>Several things will happen. First, Dreamweaver will automatically
            	create a folder called <span class="MenuOutput">Templates</span> in
            	the root of your local site. This isn't meant to go on the server
            	or to be visible to anyone but you. Second, the file you have
            	open will now be called <span class="MenuOutput">home.dwt</span> (<span class="MenuOutput">dwt</span> standing
            	for Dreamweaver template) rather
            	than <span class="MenuOutput">home.htm</span>, though <span class="MenuOutput">home.htm</span> is
            	still there on the disk. Third, the file is automatically saved
            	in the <span class="MenuOutput">Templates</span> folder. Templates
            	must be stored in the <span class="MenuOutput">Templates</span> folder
            	or Dreamweaver won't find them. </p>
<p>Next we need to decide what we want to be the same on all our
            	pages, and what we want to be different. Let's leave the title
            	 and the links at the bottom the same, but the part where the
            	table is now will be different. To do that, go ahead and delete
            	the entire table. Then, leaving the cursor there, click <span class="MenuOutput">Insert</span>, <span class="MenuOutput">Template
            	Objects</span>, <span class="MenuOutput">Editable Region</span>.
            	You'll be asked to give the editable region a name. Type in <span class="InputCode">Content</span>,
            	as this region will contain the actual table of the page.</p>
<p>Templates can contain many editable regions, but one will do for
            	our purposes. Save the template, and then we'll make a page based
            	on it. </p>
<h3>Using a Template </h3>
<p>To create a new page based on a template, click <span class="MenuOutput">File</span>, <span class="MenuOutput">New</span>. Then
            	choose the <span class="MenuOutput">Template</span> tab, select the <span class="MenuOutput">home</span> template, and click
            	<span class="MenuOutput">Create</span>. </p>
<p><img alt="Selecting the template" height="503" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_15.png" width="600"/></p>
<p>A new page will appear with all the common elements already in
            	place. In fact if you try to change them Dreamweaver won't let
            	you. What you can edit are the editable regions, in our case
            	what's in the <span class="MenuOutput">Content</span> box we just
            	created. Go ahead and put some random text in that box, then
            	save the page as <span class="MenuOutput">templatetest.htm</span>.</p>
<h3>Editing a Template</h3>
<p>You've seen how templates can save you time when you create new
            	pages. Now let's see how they make it easy to change
            	your entire web site. It doesn't make much sense to have all
            	your pages claim to be your home page in the title. So go back
            	to the template (<span class="MenuOutput">home.dwt</span>) and change
            	<span class="MenuOutput">{<span class="Parameter">your name's</span>}
            	Home Page</span> to <span class="MenuOutput">{<span class="Parameter">your
            	name's</span>} Web Site</span>. Now click <span class="MenuOutput">File</span>, <span class="MenuOutput">Save</span>.
            	You'll notice it takes a little longer than you might expect.
            	But now switch back to <span class="MenuOutput">templatetest.htm</span>:
            	you'll see that the title has already been changed to match the
            	new template. It would have been just as easy (though it would
            	have taken longer) if you had had a hundred pages in your web
            	site. </p>
<h2><a id="CascadingStyleSheets" name="CascadingStyleSheets"></a>Cascading Style Sheets</h2>
<p>The purpose of HTML is to tell the reader's web browser about
            	the structure of your document. Cascading Style Sheets (CSS)
            	tell the browser what you want it to look like. CSS allows you
            	to define "classes" (or styles) and then apply those styles to
            	pieces of text. Alternatively you can define the way standard HTML
            	tags (<span class="MenuOutput">&lt;h1&gt;</span> for
            	example) are displayed.</p>
<p>There are three places you can put CSS: in an external style sheet
            	which can then be linked to many web pages, at the beginning
            	of a web page so it applies to all of that page, or in an individual
            	tag so it applies to just that tag. The "cascading" part of CSS
            	means that the closest tag will take precedence. If you start
            	using the various tools in Dreamweaver to control appearance
            	Dreamweaver will insert CSS in the page or tag as needed. But we're
            	going to focus on creating an external style sheet which you can
            	use for many pages. That way, like with a template, changes to the
            	style sheet carry over to all the pages in your web site. </p>
<h3>Using a Style Sheet </h3>
<p>We'll start by learning to use styles which have already been
            	defined. Shrink the <span class="MenuOutput">File</span> panel and
            	expand the <span class="MenuOutput">CSS</span> panel by clicking
            	on the small triangles next to their names. Near the bottom of
            	the panel is a small icon of two chain links--click on it to
            	link in an external style sheet. Click Browse and choose <span class="MenuOutput">basic.css</span>,
            	a style sheet with a few basic styles in it.</p>
<p><img alt="Linking an external style sheet" height="211" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_16.png" width="467"/> </p>
<p>You'll see that the CSS panel now has some styles in it. These
            	are the styles defined in <span class="MenuOutput">basic.css</span>, and you can now 
            	use any of them in your page. </p>
<p>As an example, let's put the "boilerplate" contact information
            	line in italics. Select that entire line, then in the <span class="MenuOutput">Properties</span>            	panel
            	click on the small triangle by <span class="MenuOutput">Style</span>.
            	This will give you a list of the styles you have available. Choose
            	<span class="MenuOutput">Italic</span>, and the text you selected will be shown in italics.</p>
<p><img alt="Applying a style" height="298" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_17.png" width="337"/> </p>
<p>Now let's put the email address itself in bold. Select the address,
            	then choose <span class="MenuOutput">Bold</span>. Note how the text
            	is both bold and italic: that's because we applied italic to
            	the entire paragraph.</p>
<h3>Creating New Styles</h3>
<p>Now let's create a style of our own. At the bottom of the <span class="MenuOutput">CSS</span>            	panel
            	is a piece of paper with a plus sign over it. This allows you
            	to add new styles to the style sheet. To start with, let's define
            	a style that turns  text red. First click the
            	plus sign. Then set <span class="MenuOutput">Selector Type</span> to Class, and for the name
            	type in <span class="InputCode">red</span>. Make sure <span class="MenuOutput">Define
            	in</span> is set to <span class="MenuOutput">basic.css</span>, so the
            	style goes into the external style sheet rather than just this
            	web page. </p>
<p><img alt="Creating a new class" height="199" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_18.png" width="465"/></p>
<p>By making this a class, we're creating a style which we can apply
            	at will, just like the <span class="MenuOutput">Italic</span> and <span class="MenuOutput">Bold</span> style we've used already.
            	We'll look at the other options shortly.</p>
<p>Click <span class="MenuOutput">OK</span>, and you'll get to define
            	what this style does. The number of options here is overwhelming,
            	but let's just stick with setting the color for now. Click on
            	the little box next to <span class="MenuOutput">Color</span> and
            	the color selector window will appear. The classic "red" is on
            	the far left side, but I find it's a little light for easy reading
            	and would actually suggest something a bit darker. Whatever you
            	choose, Dreamweaver will automatically translate that into an
            	RGB (Red, Green Blue) code (my slightly darker red is #CC0000).
            	Click <span class="MenuOutput">OK</span>,
            	and your style is ready for use. Apply it to something to see
            	it in action. </p>
<p><img alt="Defining the red style" height="392" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_19.png" width="540"/> </p>
<p>Up to this point, all the styles we've used have been named
            	for their effect: red, italic, or bold. In practice, I'd suggest
            	creating styles based on what they'll be used for. For example,
            	this document includes one style for <span class="MenuOutput">things
            	that  appear on your screen</span> and another for <span class="InputCode">things
            	that you  type</span>. In a way, you're creating your own structural
            	markup. In your sample home page, you might want
            	to create a style specifically for the contact information line.
            	That way, if you decide that you want that line to be set off
            	by being in a different font rather than by being in italics,
            	you can just change the style without worrying about everything
            	else you've put in italics. </p>
<h3>Changing the Appearance of HTML Tags </h3>
<p>Given that you're going to mark up your web pages with HTML tags
            	anyway, one of the easiest ways to control the appearance of
            	the page is to control what those HTML tags look like. Let's
            	start by changing the title of our page, which is marked as <span class="MenuOutput">&lt;h1&gt;</span> (level
            	one heading). </p>
<p>Click on the plus sign again, but this time set <span class="MenuOutput">Selector
            		Type</span>            	to <span class="MenuOutput">Tag</span>. In <span class="MenuOutput">Tag</span>, type or select <span class="MenuOutput">h1</span>. </p>
<p><img alt="Changing the appearance of &lt;h1&gt;" height="199" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_20.png" width="465"/></p>
<p>We'll be a bit more ambitious this time. Set <span class="MenuOutput">Font</span> to <span class="MenuOutput">Arial,
            		Helvetica, sans-serif</span>. Different browsers running on different
            		computers may have different fonts available, so this means
            		Arial is the first choice, Helvetica is the second, and neither
            		are available then use any generic sans-serif font.</p>
<p> Set <span class="MenuOutput">Size</span> to <span class="MenuOutput">250%</span>.
            	You can set font sizes using points, which is probably more
            	familiar. But if you do, the reader is stuck with your
            	font sizes. If the reader has poor vision, for example, and
            	would like to increase the size of all the text on the page,
            	setting font sizes in points prevents them from doing so.
            	However,  <span class="MenuOutput">250%</span> means "2.5
            	times the size of the default." Thus if the reader increases
            	their default text size, your level one headings will scale
            	accordingly.</p>
<p> Finally, choose a color. But don't click OK yet--we're going
            	to move beyond the <span class="MenuOutput">Type</span> category. </p>
<p><img alt="Type characteristics of &lt;h1&gt;" height="392" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_21.png" width="540"/></p>
<p>Now go to the <span class="MenuOutput">Block</span> category on
            	the left and set <span class="MenuOutput">Text align</span> to <span class="MenuOutput">center</span>.
            	A "block" tag in HTML always comes on its own line. Examples
            	include paragraphs and headings. Certain styles only make sense
            	in the context of a block, including center (what would it mean
            	to center half of a line of text?) and those styles are found
            	in the <span class="MenuOutput">Block</span> category. </p>
<p><img alt="Setting text align to center" height="392" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_22.png" width="540"/></p>
<p>Click <span class="MenuOutput">OK</span> and you'll see that your
            	page title changes immediately. Since it's already marked as a level
            	one heading, the style for level one headings was applied to it
            	automatically.</p>
<p>There are many, many things you can do with CSS. Feel free to
            	just poke around the various categories, try things out, and
            	see how they work. There's just one caveat: some of the more
            	esoteric CSS properties are not supported by all browsers, and
            	some are not supported by any current browser.</p>
<h2><a id="NextSteps" name="NextSteps"></a>Next Steps</h2>
<p>Now that you've got a basic understanding of Dreamweaver and web
            	pages, what should you do next? The first step should probably
            	be to remove the test pages you created from the web server so
            	they aren't available to the world--Google will find them eventually
            	(it's fine to leave them on your local site). Go to the <span class="MenuOutput">File</span> panel,
            	and change  <span class="MenuOutput">Local
            	view</span> in the top right to <span class="MenuOutput">Remote
            	view</span>. You're now looking at what's on the web server. Go
            	ahead and delete all the files.</p>
<p>Next, take a step back and think about your future web site as
            	a whole. What information do you have to share? What categories
            	does that information fall into? Who will be coming to read it?
            	How can you organize it so they can easily find what they need?
            	How many pages will you need? How will they be linked? </p>
<p>Then start thinking about the design of the individual pages.
            	Can they all have the same layout? If you'll be including a navigation
            	bar (and you probably should) where will it be? On the left?
            	At the top and/or bottom? Here's where you may want to look at
            	other pages, especially those with similar goals to yours, and
            	see what you like and don't like about them.</p>
<p>Once you have an idea of the page layout you want, start building
            	a template that implements it. As you do, create a style
            	sheet to give it the look you want. Then, when the template is
            	ready, start making individual pages based on it.</p>
<p>Of course you're not likely to get it exactly right the first
            	time. That's why templates and external style sheets are so useful:
            	as you identify problems with your site design, you can easily
            	go back and make changes to them, and those changes will be applied
            	to the entire site.</p>
<p>If you run into problems, from links that don't work to things
            	that just don't look right, feel free to ask the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">SSCC
            	Help Desk</a>            	for assistance. We can't make  web pages for
            	you, but we're happy to help you make them work. </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_4.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_5.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_6.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_7.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_9.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_10.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_11.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_12.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_13.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_14.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_15.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_16.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_17.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_18.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_19.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_20.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_21.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-17c/5-17_22.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Connecting to SSCC Linux Computers using X-Win32</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>X-Win32 is the SSCC's suggested Linux client for Windows PCs. To install X-Win32,
	first <a href="https://ssc.wisc.edu/sscc/downloads/download-xwin32.php">download
		it</a> from the SSCC web server. You'll need to give your SSCC user name and
		password, as X-Win32 is only licensed for UW faculty, staff, and students.
		Save the file in a convenient location, and then double-click on it.
		It will  install and configure itself. The first time you run X-Win32 you will probably get two messages saying that the Windows Firewall has blocked features of the program. Click <span class="MenuOutput">Allow Access</span> for both of them so that X-Win32 can function properly.</p>
<p><strong>If you are not on the UW-Madison campus you must establish a VPN connection to campus before using X-Win32.</strong> <a href="https://ssc.wisc.edu/sscc/pubs/vpn.htm">Connecting to the SSCC Network via VPN</a> has instructions.</p>
<p>To start Linstat after installing X-Win32, simply click the "Linstat" icon in the Start menu. To see all X-Win32 connections and change settings, select X-Win32 19 from the start menu.</p>
<h2><a id="SettingupNewSessions" name="SettingupNewSessions"></a>Setting up New Sessions</h2>
<p>If you need to connect to a particular Linstat server (most likely to monitor a job you started previously—see <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a>) or if you want to connect to some other server, you'll need to set up a new session. This is easy to do:</p>
<ol>
<li>Launch X-Win32 19 from the Start menu to start the X-Config program. Click the folder named "My Connections" to select it, then click the <strong>Wizard</strong> button under <strong>New Connection</strong> on the right sidebar.
    <p><img alt="" height="742" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin1.png" width="563"/></p>
</li>
<li>
<p>Give the session a <span class="MenuOutput">Name</span> (for your own purposes—the
      computer doesn't care what it is). Choose <span class="MenuOutput">SSH</span> as
      the <span class="MenuOutput">Type</span>. Then click <span class="MenuOutput">Next</span>. </p>
<p><img alt="" height="452" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin2.PNG" width="502"/></p>
</li>
<li>
<p>Give the address of the server you want to connect to and click <span class="MenuOutput">Next</span>. The four Linstat servers are <span class="InputCode">linstat1.ssc.wisc.edu</span>, <span class="InputCode">linstat2.ssc.wisc.edu</span>, <span class="InputCode">linstat3.ssc.wisc.edu</span>, and <span class="InputCode">linstat4.ssc.wisc.edu</span>.</p>
<p><img alt="" height="452" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin3.PNG" width="502"/></p>
</li>
<li>
<p>Type in your username and password. Click <span class="MenuOutput">Next</span>. </p>
<p><img alt="" height="452" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin4.PNG" width="502"/></p>
</li>
<li>
<p>The next screen allows you to choose which terminal program to run. Our suggestion is that you use the GNOME Desktop, and that is what the pre-defined sessions use.</p>
<p><img alt="" height="452" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin5.PNG" width="502"/></p>
<p> However, if you prefer xterm, just click on "Linux XTERM" and X-Win32 will enter it for you automatically.</p>
<p><img alt="" height="452" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin6.PNG" width="502"/></p>
</li>
<li>Click <span class="MenuOutput">Finish</span>, and your session will be ready for use.</li>
</ol>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin2.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin3.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin4.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin5.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/5-2/xwin6.PNG</img_base_url>
</kb_document>
<kb_document>
<kb_title>Cleaning Out Your Email</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Whenever you check
		your Inbox for new email or open a mailbox, your email program
		must	go	through all the messages and download at least the message
		headers.	If	you	have
		a large volume of email, this process will be slow--especially on a slow
		Internet connection.	If	it's	too	large,	it	may	fail completely.
		This	also	places	a large	burden	on the email server. Just the
		disk space required has become a problem: the SSCC's email server
		currently stores well over 250 gigabytes of email. Keeping
				your	email	under control will improve the performance of
		both your	email	program	and the	email
server.</p>
<p>The main reasons for keeping email seem to be:</p>
<ul>
<li>Lack of time to evaluate and delete messages</li>
<li>Needing it for archival purposes</li>
<li>Needing to keep files attached to email</li>
</ul>
<p>There's no magic solution to any of these, but we do have some suggestions.</p>
<h2>Use Sorting to  Identify Unneeded Email Quickly</h2>
<p>
		Sorting can greatly speed up the process of deciding which emails are
				needed and which can go.	 Sorting
				by date can	help locate the oldest messages,
		which are more likely to be unnecessary. Sorting by size or attachment
		status can quickly locate the largest messages, and deleting a few of
		those	can often
		free a great deal of space. Sorting by subject can put all the related
		messages	together, so you can delete a group of them at once.</p>
<h2>Archiving</h2>
<p>		An email mailbox is merely a single file that contains all the
						body and header information for each message in the mailbox. If your mailbox
						has a
						large number of messages, or very large messages, then
						the file will become quite large as well. Whenever you open the mailbox,
						the computer you are
						using has to have space for the entire file, not just
						the few messages that	you want to look at.</p>
<p>If there are mailboxes or large portions of mailboxes that you just want to
		save but do not refer to on a regular basis, you can simply move them elsewhere.
		You can save mailboxes onto an external storage medium, like a CD. The mailbox
		can be restored as a mailbox by copying it back to the mail directory if you
		need to use it again. </p>
<p>Some email programs, such as Outlook, have an archiving function, and some,
		such as Outlook Express, allow you to export mailboxes. Even without these
		options, moving your archive mailboxes to an external storage device is very
		straightforward. You can find all your mailboxes in the “mail” sub-directory
		of your Linux home directory. Just copy from there to your hard drive to create
		the CD, and then delete the mailbox, either within or outside of the email
		program.</p>
<p>Another space-saver to consider with either your archived mailboxes or your
		attachments is file compression. If you zip your files, they will take up less
		space, whether it’s on a CD or on a computer or server. You can also
		use this to organize your attachments, putting related files into the same
compressed archive.</p>
<h2>Saving Attachments</h2>
<p>		Attachments account for nearly all of the really large email messages.
				Sometimes the email message itself is not very important, and
				what really	matters is the attachment. If that’s why you’re saving
				an email message, consider saving the attachment as a regular
				file independent	of the	message. You	may need
				to create some subdirectory structure within your disk space
				that	will help you find the file easily, but that’s a one-time job
				that	may be worth the effort.</p>
<p>		In Outlook Express, there are 2 methods. One option is to use the <span class="MenuOutput">File</span>  menu.</p>
<p><img alt="Save attachments from the File menu" height="358" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_1.png" width="258"/></p>
<p><br/>
Clickspan class="MenuOutput">File</span>, <span class="MenuOutput">Save Attachments</span>.</p>
<p><br/>
<img alt="Choose the attachment to save" height="301" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_2.png" width="450"/></p>
<p>Select which attachments you want to save and click <span class="MenuOutput">Browse</span>.</p>
<p><br/>
<img alt="Choose a folder to save the attachment in" height="482" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_3.png" width="672"/><br/>
</p>
<p>Specify the folder that the saved attachments should go to, click	<span class="MenuOutput">Ok</span>,
and	then <span class="MenuOutput">Save</span>.</p>
<p>		Alternatively, you can just drag the attachment directly from the message
		to a folder.</p>
<p>Once the attachment is saved, there’s no need to keep the email message.
		The flip-side of this is that your email program may save a second copy
		of	your
		attachments on your local hard drive, and does not delete them
		even	after	the	email	message	has	been	deleted.	It’s
		worth checking	the directory that is designated for attachments to see
		if everything in it is really necessary. In Eudora, you can find that
		directory	in
		the <span class="MenuOutput">Tools</span>, 
		<span class="MenuOutput">Options</span> menu, under <span class="MenuOutput">Attachments</span>. Note that checking <span class="MenuOutput">Delete
attachments	when emptying Trash</span> does not work with an IMAP mail server
like ours.</p>
<p><br/>
<img alt="Finding your attachments folder" height="391" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_4.png" width="414"/></p>
<p>In Outlook Express, the attachment is not automatically downloaded until you
		open it, and then it is placed in the <span class="MenuOutput">My Documents</span> folder associated
		with your username, usually on the C: drive. On the terminal servers,
		this	folder is
		part of your profile and must be downloaded every time you log in – the
more you store there, the longer it takes to log in and out.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_3.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-22/5-22_4.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Setting Up Network Printers in Windows</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>The SSCC provides network printers accessible to all SSCC members in 4218, 3218 and 2470 Sewell
	 Social Sciences Building. Note that to pick up your print jobs from 4218 or 3218 after <a href="https://ssc.wisc.edu/sscc/instruction/labusers.htm">hours</a> or from 2470 at any time, you will need <a href="https://www.ssc.wisc.edu/sscc_jsp/account/lab.jsp">after-hours access to the SSCC computer labs</a>.</p>
<p>If you are not plugged into the wired network in the Sewell Social Science Building, you first need to establish a <a href="https://ssc.wisc.edu/sscc/pubs/vpn.htm">VPN connection</a> to the SSCC network before connecting to SSCC printers.</p>
<h2>Adding a Printer</h2>
<p>Click the Start (or  Windows logo) button and then type <span class="InputCode">\\print</span> in the <span class="MenuOutput">Search programs and files</span> (or just <span class="MenuOutput">Run</span>) box.</p>
<p><img alt="Connecting to print" height="206" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-24b/5-24_image1.PNG" width="399"/></p>
<p>This will open a window showing all the printers on print, the SSCC's print server.</p>
<p><img alt="Printer list" height="609" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-24b/5-24_image2.PNG" width="577"/></p>
<p> Most of these are for particular departments or groups. The  printers available to all SSCC members are:</p>
<table align="center" border="1" cellpadding="3" width="50%">
<caption align="top">
<a id="Names" name="Names"></a>SSCC Printer Network Names
  </caption>
<tr>
<th scope="col">Room</th>
<th scope="col">Printer Name</th>
</tr>
<tr>
<td align="center">4218</td>
<td align="center" class="MenuOutput">SSCC4218</td>
</tr>
<tr>
<td align="center">3218</td>
<td align="center" class="MenuOutput">SSCC3218</td>
</tr>
<tr>
<td align="center">2470</td>
<td align="center" class="MenuOutput">SSCC2470</td>
</tr>
</table>
<p>Each room has several physical printers, but when you submit a job to that room's virtual printer it will be printed on the first available physical printer.</p>
<p>To connect to a printer, simply double-click on it. A window will open showing the printer's current queue. You can close this window and the printer will still be available when you go to print.</p>
<p>If you are printing JSTOR articles or other large PDF files, please use the 4218 printers. These printers have the least problems with 
  complex PDF files. In addition, they are our fastest printers and this will 
  significantly reduce the amount of time others may have to wait while your job 
  is printing.</p>
<h2>Setting Your Default Printer</h2>
<p>To set your default printer, click <span class="MenuOutput">Start</span> (or the Windows logo button), <span class="MenuOutput"> Devices and Printers</span> (or some variation on that depending on the version of Windows you're using). Alternatively, hold down the Windows logo key on your keyboard and press <span class="InputCode">r</span>, then type <span class="InputCode">control printers</span> in the box.</p>
<p>You'll then get a list of printers that have been set up on your computer.</p>
<p><img alt="" height="541" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-24b/win10_setdefault_new.PNG" width="617"/></p>
<p>The one with the small checkmark on it is your current default printer. To make a different printer the default, right-click on it and select <span class="MenuOutput">Set as Default Printer</span>.</p>
<p>Note that if you log in to Winstat from your computer, the Citrix Receiver will make your default printer available from within your Winstat session. Be sure your default printer is the one you want to use before you log in.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-24b/5-24_image1.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/5-24b/5-24_image2.PNG, https://ssc.wisc.edu/sscc/pubs/screenshots/5-24b/win10_setdefault_new.PNG</img_base_url>
</kb_document>
<kb_document>
<kb_title>Mapping a Drive to a Network Share in Windows</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>(Mac users should read <a href="https://ssc.wisc.edu/sscc/pubs/diskfrommac.htm">Using SSCC Network  Disk Space from Macs</a> instead of this article.)</p>
<p>In Windows networks, network disk space is organized into "shares." 
  Mapping a drive allows you to use one of these shares as if it were a local
  hard drive. If you are logging into the PRIMO domain, most of the shares
  you might want to use are mapped automatically. However, there are some situations
  where you might want to map a drive to a network share yourself. If you are
  connecting to the SSCC network from home using <a href="https://ssc.wisc.edu/sscc/pubs/vpn.htm">VPN</a> the usual shares are available
  but not mapped automatically. Also, there are some Linux shares you might need at some point which are not mapped
  for you.</p>
<p>This article will show you both how to map a drive to a network share,
	and tell you some of the shares you might want to map.</p>
<h2><a id="MappingaDrive" name="MappingaDrive"></a>Mapping a Drive</h2>
<ol>
<li>Open Windows Explorer</li>
<li>Click on <strong>This PC</strong> on the left.</li>
<li>Click the <strong>Computer</strong> tab at the top and select <span class="MenuOutput">Map network drive</span>.</li>
<li>Set <span class="MenuOutput">Drive</span> to the letter you want to give the mapped drive.</li>
<li>In <span class="MenuOutput">Folder</span> type the location you want to map a drive to. See the <a href="#LocationsYouCouldMap">table</a> below for a list of locations you might want to use.</li>
<li>Check <span class="MenuOutput">Reconnect 
    at Logon</span>.</li>
<li>If you are not logging in from a PC in the SSCC's PRIMO domain, check <span class="MenuOutput">Connect using different credentials</span>. (If you're not sure, it won't hurt to check this box regardless.) When you are  asked to give your username and password  specify that you are part of the SSCC's PRIMO domain by giving your username as <span class="InputCode">PRIMO\<span class="Parameter">username</span></span> (e.g. <span class="InputCode">PRIMO\rdimond</span>).</li>
<li>Click<span class="MenuOutput"> Finish</span>.<img alt="" height="451" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-26/mapnetworkdrive_win10.png" width="610"/></li>
</ol>
<h2 style="margin-bottom: 1.5ems"><a id="LocationsYouCouldMap" name="LocationsYouCouldMap"></a>Locations You Could Map on the SSCC Network</h2>
<table align="center" border="1" cellpadding="3">
<tr>
<th scope="col">Location</th>
<th scope="col">Use</th>
<th scope="col">Notes</th>
</tr>
<tr>
<td class="InputCode">\\sscwin.ads.ssc.wisc.edu\dfsroot\users\<span class="Parameter">username</span></td>
<td>Windows Home Directory </td>
<td>Mapped as <span class="MenuOutput">U:</span> if you log into PRIMO </td>
</tr>
<tr>
<td class="InputCode">\\sscwin.ads.ssc.wisc.edu\dfsroot\labusers\<span class="Parameter">username</span></td>
<td>Windows Home Directory for Lab Users</td>
<td>Mapped as <span class="MenuOutput">U:</span> if you log into PRIMO </td>
</tr>
<tr>
<td class="InputCode">\\sscunix.ssc.wisc.edu\<span class="Parameter">username</span></td>
<td>Linux Home Directory </td>
<td>Mapped as <span class="MenuOutput">Z:</span> if you log into PRIMO </td>
</tr>
<tr>
<td class="InputCode">\\sscwin.ads.ssc.wisc.edu\dfsroot\project</td>
<td>Windows Project Directories </td>
<td>Mapped as <span class="MenuOutput">X:</span> if you log into PRIMO </td>
</tr>
<tr>
<td class="InputCode">\\sscunix.ssc.wisc.edu\project</td>
<td>Linux Project Directories </td>
<td>Mapped as <span class="MenuOutput">V:</span> if you log into PRIMO </td>
</tr>
<tr>
<td class="InputCode">\\sscwin.ads.ssc.wisc.edu\dfsroot\Temp30days</td>
<td>Windows Temporary Disk Space </td>
<td>Mapped as <span class="MenuOutput">Y:</span> if you log into PRIMO<br/>
			All files deleted after 30 days </td>
</tr>
<tr>
<td class="InputCode">\\sscunix.ssc.wisc.edu\temp30days</td>
<td> Linux Temporary Disk Space </td>
<td>All files  deleted after 30 days </td>
</tr>
<tr>
<td class="InputCode">\\sscunix.ssc.wisc.edu\web</td>
<td>Web sites of SSCC member agencies </td>
<td> </td>
</tr>
</table>
<p>You can map a drive to a specific folder within any of these locations by adding it to the location you type. For example, to map a drive to the <span class="InputCode">rdimond</span> folder within Linux temporary space I would give <span class="InputCode">\\sscunix.ssc.wisc.edu\temp30days\rdimond</span> for the <span class="MenuOutput">Folder</span>.</p>
<p>For more information about SSCC disk space see
  <a href="https://ssc.wisc.edu/sscc/pubs/disk.htm">Network Disk Space at the SSCC</a>.                </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-26/mapnetworkdrive_win10.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Formatting Your Dissertation in Word</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>After all the work of writing your dissertation, there's one last hurdle.
		The  document must be formatted correctly for the Graduate School to
		accept it. 
  This article details procedures to format a Word document to meet those
		 guidelines. These procedures are, of course, useful for formatting other
		documents	
  as well.</p>
<p>The Graduate School makes its dissertation format guidelines available online
		 at <a href="http://info.gradsch.wisc.edu/admin/academicservices/pguide.html">http://info.gradsch.wisc.edu/admin/academicservices/pguide.html</a>.
		  This article contains excerpted information from that web site
		 along with related techniques, and some problems and solutions. It is
		 not intended to replace the guidelines themselves; it is simply a guide
		 to implementing some of them in Word.</p>
<h3>Appendices</h3>
<p>You may put unusual or supplementary materials (such as questionnaires or copies 
  of photographs) into appendices. Number the appendices consecutively with the 
  text of the dissertation. The margins of the appendices must meet the standards 
  for the rest of the dissertation.</p>
<p>You may want to make each appendix or the collection of appendices into a
		separate  section or even a separate file. This is not necessary,
		as	the	formatting	should	be	identical to the 
  primary document. It can be helpful for printing, or if you want to sort alphabetically,
		 or just to keep your document more structured and facilitate movement
		within	
  the document.</p>
<p>To add a section break: </p>
<ul>
<li>Go to<span class="MenuOutput"> Insert</span>, then select <span class="MenuOutput">Break</span>. 
  </li><li>
  In the Break menu, you will probably want to go with <span class="MenuOutput">Next 
  Page</span> - the default. This will help you ensure that your appendices each 
  start on a new page.</li></ul>
<h3>Bibliography </h3>
<p>The bibliography should meet your major department's style requirements, which
		 often conform to the leading journals or book series of the field. It
		may  be single-spaced with an additional space between entries.</p>
<p>To set line spacing:</p>
<ul><li>
  Go to the <span class="MenuOutput">Format</span> menu.</li>
<li>Select<span class="MenuOutput"> Paragraph</span>, and select the <span class="MenuOutput">Indents 
  and Spacing</span> tab.</li></ul>
<h3>Equations, Superscripts, and Subscripts</h3>
<p>Equations, superscripts, and subscripts are acceptable provided they are legible 
  when microfilmed. Generally, superscripts and subscripts may be one size smaller 
  than the text. To identify each equation clearly, please isolate it with double 
  spacing.</p>
<p>To insert a subscript or superscript:</p>
<ul><li>  Select the text you want to format as superscript or subscript.</li>
<li>  On the <span class="MenuOutput">Format</span> menu, click <span class="MenuOutput">Font</span>, 
  and then click the<span class="MenuOutput"> Font</span> tab.</li>
<li>  Select the <span class="MenuOutput">Superscript</span> or <span class="MenuOutput">Subscript</span> 
  check box.</li></ul>
<p>To insert an equation:</p>
<ul><li>  Click where you want to insert the equation.</li>
<li>On the <span class="MenuOutput">Insert</span> menu, click <span class="MenuOutput">Object</span>, 
  and then click the <span class="MenuOutput">Create New</span> tab.</li>
<li>In the <span class="MenuOutput">Object</span> type box, click <span class="MenuOutput">Microsoft 
  Equation 3.0</span>.</li>
<li>Click <span class="MenuOutput">OK</span>.</li>
<li>Build the equation by selecting symbols from the Equation toolbar and by typing 
  variables and numbers.</li>
<li>To return to Microsoft Word, click the Word document.</li></ul>
<p>From the top row of the Equation toolbar, you can choose mathematical symbols. 
  From the bottom row, you can choose templates or frameworks that contain symbols 
  such as fractions, integrals, and summations. </p>
<p><span class="italic">Problem</span>: You have created an equation with the
		 Equation Editor in Word 2000. Once you exit from the editor you can
		no longer	
edit the equation.</p>
<p><span class="italic">Solution</span>: In order to re-open the Equation
        				Editor to edit an equation you have previously created,
        		all you need to do is click
  				on the equation, so that the rectangle containing it is highlighted.
			Then, right-click to get a menu of choices. </p>
<h3>
  Footnotes and Endnotes</h3>
<p>  Footnotes and endnotes may be single-spaced with an extra space
						between notes. Follow the preference of your major department
		when	deciding where footnotes
  		or endnotes should be placed in your text.</p>
<p>To insert a footnote:</p>
<ul>
<li>  In <span class="MenuOutput">Print Layout</span> view, click where you want to insert the note reference
  		mark. 
  </li>
<li>  Click <span class="MenuOutput">Insert</span>, <span class="MenuOutput">Reference</span>,
  		and <span class="MenuOutput">Footnote</span>. Click <span class="MenuOutput">Footnotes</span>  or <span class="MenuOutput">Endnotes</span>.
  		By default, Word places footnotes at the end of each page and endnotes
  		at the end of the document. You can change the placement of footnotes
  		and	endnotes  using the menus next to <span class="MenuOutput">Footnotes</span> or <span class="MenuOutput">Endnotes</span>.</li>
<li>
  In the <span class="MenuOutput">Number format</span> box, click the format you want. </li>
<li>
  Click <span class="MenuOutput">Insert</span>. Word inserts the note number and places the insertion point next 
  to the note number. </li>
<li>
  Type the note text. </li>
<li>
  Scroll to your place in the document, click where you want the cursor to be,
  		and	continue	typing. </li>
<li>
  Note that as you insert additional footnotes or endnotes in the document, Word 
  automatically applies the correct number format. </li>
<li>
  There are also shortcut keys available to insert subsequent footnotes. Press
  		 <span class="InputCode">Ctrl-Alt-f</span> to insert a footnote. Press <span class="InputCode">Ctrl-Alt-d</span> to insert an endnote.</li>
</ul>
<p>When you add, delete, or move notes that are automatically numbered, Word renumbers 
  the footnote and endnote reference marks.</p>
<p><em>Problem</em>: You have a paper for a journal that requires the footnotes be endnotes. 
  But you want the endnotes to come before your references and such. One option 
  would be to put the references in a separate file, but is there a way to do 
this and leave it all in one file?</p>
<p> <em>Solution</em>: When you are setting up endnotes, you can select whether
		you want to put them at the end of the document or at the end of the section.
		You can
  place a section break before your references, and select "end of section", 
and your endnotes will follow the text, but precede the reference section. </p>
<p><em>Problem</em>: You have a Word document with footnotes. Someone (maybe you) was working 
  on it, using WordPerfect. The conversion back and forth messed up the footnote 
format.</p>
<p><em>Solution</em>: The two formats are  not quite compatible. To
		repair, the easiest way is to work with each footnote individually. Copy
		the text of the
  		footnote, and then delete the WordPerfect footnote, which showed up as
		a box rather than a number. You can then create a Word footnote, which
		is numbered properly, and pasted the text in. This works,
		and keeps	the number
		sequence intact. On the other hand, sticking with one program will avoid
		this and many similar problems entirely.</p>
<h3>  Foreign Language Use</h3>
<p> You may include quotations in languages other than English in your dissertation.
  				However, the dissertation itself must be in English unless your
		department certifies
  		that one or both of the following conditions have been met: the foreign
		language is that of the readers to whom the work is addressed; or translation
		into
  				English
  		would make the study obscure and imprecise. </p>
<p>Note that some foreign language fonts and spell-checking are available on
		the  Winstat servers.</p>
<h3>  Graphics</h3>
<p>  Computer generated figures and graphs must meet the same standards
						as the rest of the dissertation. Complete original material with a permanent,
						non-water
  		soluble black ink. Do not use pencils, ball point, or felt tip pens.
						Labels on photographs, charts, or other figures must be permanent. Headings,
						keys,
  		and all other identifying information must be of the same quality of
						print as the text. If graphics, tables, or figures are in landscape mode,
						place the top
  		of the printed page at the dissertation binding edge (left side of the
						paper) with the page number in the upper right-hand corner in the portrait
						page setup.</p>
<p>To insert an image, you really only need to know the name and location of
the  image file:</p>
<ul><li>Within the document, place the cursor where you want the image
						to be inserted. Go to the <span class="MenuOutput">Insert</span> menu, and select <span class="MenuOutput">Picture</span>, and then <span class="MenuOutput">From
						File</span>.</li>
<li>
  Select the image.	It will be inserted into the document.</li>
<li>
  You can use the <span class="MenuOutput">Picture or Drawing</span> toolbars to manipulate it. The Word
  		<span class="MenuOutput">Help</span>	menu has step-by-step instructions.</li>
</ul>
<p>Be careful not to change the proportions of the image, such as changing the
		height without changing the width. This is especially important with
		graphs.</p>
<h3>
Margins</h3>
<p> Use a minimum of 1" margin on all four sides. To set margins:</p>
<ul><li>Click on <span class="MenuOutput">File</span>.</li>
<li>  Click on <span class="MenuOutput">Page Setup</span>.</li>
<li>
  Click on the <span class="MenuOutput">Margins</span> tab, and edit the settings for the left, right, top and 
  bottom margins.</li>
</ul>
<h3>Page Numbers</h3>
<p>Page numbers are required and must be placed in the upper right-hand
		corner one inch from both the top and the side of the paper. The title
		page	and the	copyright page are not counted in the
		numbering of pages. All other pages are. </p>
<p>Number the preliminary pages (for example, dedication page, acknowledgments
		page, table of tables, and abstract) that precede the main text with
		lower	case Roman numerals beginning with i. Number the main text consecutively
		beginning with Arabic numeral 1 in the upper right-hand corner one inch
		from	both top and side of the paper. Check
		your dissertation	to ensure that all pages are present and in numerical
		order. Number appendices consecutively with the text, continuing the
		Arabic	numeral	sequence.</p>
<p>To insert page numbers:</p>
<ul>
<li>		Click <span class="MenuOutput">Insert</span>, <span class="MenuOutput">Page
						Numbers</span>. </li>
<li>
		In the <span class="MenuOutput">Position</span> box, specify whether to print page numbers in
				the header	at	the top of the page or in the footer at the bottom of the page.</li>
<li>
		In the <span class="MenuOutput">Alignment</span> box, specify whether to align page numbers left,
				center, or right relative to the left and right margins, or inside or outside
				relative
				to the inside and outside edges of pages that will be bound.</li>
<li>
		If you don't want a number on the first page, uncheck <span class="MenuOutput">Show
				number on	first	page</span>.</li>
<li>
		Select any other options you want. </li></ul>
<p>Putting each chapter of your dissertation in a separate file is a very good
		idea, but you'll need to set the starting page number for the later chapters:</p>
<ul>
<li> Click <span class="MenuOutput">Insert</span>,  <span class="MenuOutput">Page
		Numbers</span>.</li>
<li>   				 Click <span class="MenuOutput">Format</span>.</li>
<li>   				 At the bottom, under <span class="MenuOutput">Page Numbering</span>, select <span class="MenuOutput">Start
        		At</span>.</li>
<li> Type in the page number for the first page.</li>
</ul>
<p>To move page numbers:</p>
<ul><li>On the <span class="MenuOutput">View</span> menu, click <span class="MenuOutput">Header
						and Footer</span>.</li>
<li>
  If you positioned the page numbers at the bottom of the page,
				click <span class="MenuOutput">Switch Between	Header and Footer</span> on the <span class="MenuOutput">Header
				and Footer</span> toolbar.</li>
<li>  Click the page number to make its frame appear.</li>
<li>Click on the frame to select it.</li>
<li>
  Move the pointer over the frame's border until the pointer becomes a
  		four-headed	arrow, and then click to see the frame's sizing handles.</li>
<li>
  Drag the frame and page number to a new location.</li>
</ul>
<p>To rotate the page numbers for pages that are printed in landscape format:</p>
<ul>
<li> Select the object you want to rotate.</li>
<li>
  Click <span class="MenuOutput">Draw</span> on the Drawing
toolbar.</li>
<li>
  Point to <span class="MenuOutput">Rotate</span> or <span class="MenuOutput">Flip.</span></li>
<li>
  Click <span class="MenuOutput">Rotate Left</span> or <span class="MenuOutput">Rotate
  Right</span>.</li>
</ul>
<h3>Title Page</h3>
<p>  Do not number the title page. The title page must be double-spaced.</p>
<h3>Page Headers</h3>
<p>
  Do not use page headers (except for page numbers) or decorative borders.</p>
<p><em>Problem</em>: I am trying to stop the header from appearing on the first
		page. I
only want it on the subsequent pages.</p>
<p> <em>Solution</em>: You can leave the header or footer off the first page
						or create a unique first page header or footer for the first page in a
						document or the first
  		page of each section within a document.</p>
<ul><li>  If your document is divided into sections, click in a section
						or select multiple sections you want to change. Click anywhere in the document
						if your
  				document
  				is not divided into sections. </li><li>
  On the <span class="MenuOutput">View</span> menu, click <span class="MenuOutput">Header
  and Footer</span>.</li>
<li>
  On the <span class="MenuOutput">Header and Footer</span> toolbar, click <span class="MenuOutput">Page
  Setup</span>.</li>
<li>
  Click the <span class="MenuOutput">Layout</span> tab.</li>
<li>
  Select the <span class="MenuOutput">Different first page</span> check box, and then click <span class="MenuOutput">OK</span>.</li>
<li>
  If necessary, click S<span class="MenuOutput">how Previous</span> or <span class="MenuOutput">Show
  Next</span> on the <span class="MenuOutput">Header
  				and Footer</span> toolbar to move into the <span class="MenuOutput">First
  				Page Header</span> area or <span class="MenuOutput">First Page
  				Footer</span> area.</li>
<li>
  Create the header or footer for the first page of the document
  				or section.</li><li>
  If you don't want a header or footer on the first page, leave
  				the header	and	footer areas blank.</li></ul>
<h2>General Formatting Problems</h2>
<p> <em>Problem</em>: You have a Word document and want to get rid of the
				formatting.</p>
<p> <em>Solution</em>: You can highlight the entire document (press <span class="InputCode">Ctrl-a</span>),
		copy	it,	then	open	a new document and go to <span class="MenuOutput">Edit</span>,<span class="MenuOutput"> </span> <span class="MenuOutput">Paste
						Special</span>, choose <span class="MenuOutput">Unformatted Text</span> and
						click <span class="MenuOutput">OK</span>.
						This	is	a drastic solution, to be used when there
						are	too	many format	settings	scattered	throughout
						the document to just find and remove them.</p>
<p><em>Problem</em>: You want to change the font in an entire Word document.</p>
<p> <em>Solution</em>: You can select all (<span class="InputCode">Ctrl-a</span>)
		and then go to font and size, to change the font for the whole document. </p>
<p><em>Problem</em>: You want to get rid of odd indents that are left over from previous 
  formatting.</p>
<p> <em>Solution</em>: Just use the <span class="InputCode">Backspace</span> key,
		and then <span class="InputCode">Tab</span> to get proper	indents.</p>
<p><em>Problem</em>: The font changed in mid-document. How did it happen and how can you 
  fix it?</p>
<p> <em>Solution</em>: This is usually leftover information from something that
		had probably been inserted and then deleted, but the formatting information
		remained.
				You
  can use <span class="MenuOutput">What's This?</span> from the <span class="MenuOutput">Help</span> menu
  to find the problem area,  and then just change the formatting in that area.</p>
<p><em>Problem</em>: You don't want section breaks in your document. How can
		you get rid of them? Where did they come from in the first place?</p>
<p><em>Solution</em>: Word does not insert section breaks automatically--this
		usually comes up when more than one person works on a document. Sections
		can be useful when large
						formatting changes
  		are made, e.g. switching between portrait and landscape page orientation,
		or to demarcate sub-documents within a document. To remove section breaks,
		select the section break and then either press
        <span class="InputCode">Delete</span> or click <span class="MenuOutput">Edit</span>, <span class="MenuOutput">Cut</span>.
        Note that you cannot delete a section break just by backspacing over
        it. The <span class="InputCode">Backspace</span> and <span class="InputCode">Delete</span> keys
        don't affect section breaks unless you select them specifically.</p>
<p><em>Problem</em>: You have a page break that you don't want in your document.</p>
<p> <em>Solution</em>: You should be able to just delete this using the <span class="InputCode">Delete</span>  or <span class="InputCode">Backspace</span> key.
		This may leave you with some formatting problems, though,	which you can
  		find and correct using <span class="MenuOutput">What's This?</span> or <span class="MenuOutput">Reveal
  		Formatting</span>.</p>
<p><em>Problem</em>: How can you keep text from being split up across pages?</p>
<p> <em>Solution</em>: You simply highlight the whole area, and choose <span class="MenuOutput">Format</span>,
		<span class="MenuOutput">Paragraph</span>, choose the <span class="MenuOutput">Line
		and Page Breaks</span>  tab,	and	check	<span class="MenuOutput">Keep	lines
		together</span>.
  Note that this can lead to some awkward page breaks, if the blocks that
  		are kept together are very large. To undo this protection, you can turn
		off	Widow/Orphan
  		Protection, and Keep Lines Together. [both? not just undo what you just
		did?]</p>
<p><em>Problem</em>: You and your advisor are both editing the document and you want to 
  be able to see your advisor's suggestions without necessarily accepting them.</p>
<p> <em>Solution</em>: You can both use the features found on the <span class="MenuOutput">Review</span> toolbar.
						These include	comments and tracking changes.</p>
<h3>Useful Tips</h3>
<ul>
<li>Make each chapter a separate Word document.
				This will make it quicker to open and save, easier to work with,
		and minimize	the impact of mistakes.</li>
<li>Use section breaks to separate different parts of your dissertation, 
  				to change orientation of pages, or to insert endnotes in a particular
				place.</li>
<li>
You can see the formatting codes for the document by going to <span class="MenuOutput">Format</span>	and choosing <span class="MenuOutput">Reveal
Formatting</span>. Here you can easily see the settings,
and make 	changes as needed. (Office XP only)</li>
<li>
 You can also get information about the formatting codes at any particular 
  				point in the document by going to <span class="MenuOutput">Help</span> and choosing <span class="MenuOutput">What's
		This?</span>	Click the cursor	in your text to see the format settings at that point.</li>
<li>
 Use the Microsoft Office Help to learn how to handle tasks in Word. Help 
  				is very good and detailed, and can answer most questions.</li>
<li>
 When one part of the document is doing exactly what you want, and another 
  				part isn't, sometimes the easiest way is to cut the text from
 		the "bad" 
  part and paste it into the "good" part.</li>
<li>
 Stick with one word-processing program for the entire document, and the 
  				entire writing process.</li>
</ul>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Removing Hidden Data from Documents </kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>Sending and publishing documents  electronically is commonplace.
              Unlike the paper version though where "what you see is what you
              get", electronic documents contain  hidden
              data or metadata. Whenever you create, open, or save a document
              in a program like Word or WordPerfect, metadata is written to the
              document. </p>
<p>Sometimes this metadata is not information you want to share with
              others though. For example, your name is metadata.
              If you are doing a "blind" review of a paper for publication
              or submitting a document anonymously, you certainly do not want
              your name included in your document. This article tells
              you the kinds of metadata stored in documents generated by Microsoft
              Word, Corel WordPerfect, and Adobe Acrobat, and how to remove the
              metadata. </p>
<h2>Types of Metadata  </h2>
<p>The metadata stored varies from program to program. Programs like
              Word and WordPerfect store a lot of metadata and may include your
              name, your initials, your organization name, your user name, your
              computer's name, the network server's name or hard disk where you
              saved the document, the names of previous document
              authors, document revisions including undo/redo history, reviewers'
              annotations, document creation and revision dates, template information,
              hidden text, and comments, among other things. </p>
<p>Many people distribute documents in PDF format as a way to avoid
              sending metadata. This works for the most part but even PDF files
              may contain metadata like title, subject, author, key fields,
              and annotations. Unlike with Word and WordPerfect though, metadata
              gets stored in PDF files because someone puts it there. </p>
<p>People distributing very sensitive information may resort to sending
              only text versions of files.  This way they are assured that there
              is no hidden data contained in the file. </p>
<h2>Removing Metadata </h2>
<p>Tools for removing metadata vary from version to version of the
              programs. In general, newer versions of programs make it easier
              to remove metadata than in older versions. Below are links to directions
              for removing metadata from commonly used versions of Word, WordPerfect,
              and Acrobat:</p>
<p><a href="http://support.microsoft.com/default.aspx?scid=kb;EN-US;237361">Microsoft
                Word 2000</a></p>
<p><a href="http://support.microsoft.com/kb/290945">Microsoft Word 2002</a> </p>
<p><a href="http://support.microsoft.com/kb/834427">Microsoft Word
                2003 </a> </p>
<p><a href="http://office.microsoft.com/en-us/help/HA100375931033.aspx">Microsoft Word 2007 </a></p>
<p><a href="http://www.corel.com/servlet/Satellite?pagename=Corel3/Section/Display&amp;sid=1047024315119&amp;gid=1047024331836&amp;cid=1144159894033">Corel WordPerfect </a></p>
<p><a href="http://blogs.adobe.com/acrolaw/2005/10/metadata_and_pd.html">Adobe
                Acrobat 7 </a>(Acrobat 8 has a built-in "Examine Document" tool
            for removing metadata.) </p>
<p> </p>
<p> </p>
<p> </p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Transferring Files Using SecureFX</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- InstanceBeginEditable name="Text" -->
<p>SecureFX is a Windows SFTP client. FTP, or File Transfer Protocol, 
              has been moving files from computer to computer since the earliest 
              days of the Internet. To cope with today's more dangerous Internet, 
              FTP has added encryption, becoming Secure FTP or SFTP. SFTP clients, 
              like SecureFX, give you a drag-and-drop interface and then translate 
              your actions into SFTP commands for you.</p>
<p>SSCC members have several good alternatives for transferring files
            	 to and from the SSCC network. <a href="http://wi.ssc.wisc.edu">Logging
            	 in to Winstat </a>  allows
            	 you to see both the network drives and your local  hard drive
            	 from within a terminal server session, and you can move files
            	 back and forth just by dragging them. <a href="https://ssc.wisc.edu/sscc/pubs/vpn.htm">Virtual
            	  Private Networking</a> or VPN allows your computer to log in to
               the PRIMO domain, gaining access to network drives just as if
              you  were in the Social Science building. SecureFX usually takes
              less  time to set up than the other options, but it does require
              that  you open it every time you want to transfer a file rather
              than having  everything available through network drives. All three
              solutions  work well and it's really a matter of preference.</p>
<p>SecureFX can be downloaded from the <a href="https://software.wisc.edu">Campus Software Library</a> or from <a href="https://www.ssc.wisc.edu/sscc/pubs/softwarecenter.htm">Software Center</a>. Be sure to get SecureFX and not SecureCRT. The default choices in the installation
            		  program  are fine. If you use SecureCRT to log in to the
            		  SSCC's Linux servers, you'll see that SecureFX and SecureCRT
            		  are tightly integrated, sharing server lists and other settings
            		  and having much of their user interface in common. The disadvantage
            		  to this approach is that you'll see buttons and options which
            		  are only relevant to SecureCRT while using SecureFX.</p>
<p>SSCC members who are not affiliated with UW-Madison cannot use SecureFX due to license restrictions, but can use free clients FTP like <a href="https://winscp.net/eng/download.php">WinSCP</a> and <a href="https://filezilla-project.org/">FileZilla</a>. The information needed to set up connections is the same regardless of the client you use.</p>
<p>If you're interested in using SFTP on Linux, or if you want to 
              use anonymous FTP to make files available or let people send you 
              files, see <a href="https://ssc.wisc.edu/sscc/pubs/1-11.htm">Using SFTP</a>.</p>
<h2> Setting up Connections            </h2>
<p>When you first start SecureFX, you'll get the <span class="MenuOutput">Connections</span> 
              window (if you don't, click the far left button on the tool bar). 
              This is where you'll set up connections to the servers you want 
              to use. To create a new connection, click <span class="MenuOutput">Quick 
              Connect</span>, the button with the lightning bolt.</p>
<p> Note that the button next to it, <span class="MenuOutput">New 
              Session</span>, is for SecureCRT and cannot be used to set up SFTP 
              connections. Similarly, you'll see any sessions you have defined 
              in SecureCRT, but if you select them the <span class="MenuOutput">Connect</span> 
              button will be unavailable.</p>
<p><img alt="Connect Window" height="349" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-35/5-35_1.png" width="345"/></p>
<p>You'll then see the Quick Connect window. Set <span class="MenuOutput">Protocol</span> 
              to <span class="MenuOutput">SFTP</span>. In <span class="MenuOutput">Hostname</span>, 
              type the name of the server you want to connect to. The SSCC's FTP 
              servers are <span class="InputCode">ftp.ssc.wisc.edu</span> for 
              files stored on the Linux file system and <span class="InputCode">ntftp.ssc.wisc.edu</span> 
              for files stored on the Windows file system. Make sure <span class="MenuOutput">Port</span> 
              is set to <span class="InputCode">22</span> (<em><strong>not</strong></em> 
              23). Enter your <span class="MenuOutput">Username</span> if you 
              like, or you can enter it when you connect. Check <span class="MenuOutput">Save 
              session</span>. When you're ready, click <span class="MenuOutput">Connect</span>. 
              You'll be connected with the server immediately, and these settings 
              will also be saved so you won't have to enter them again later.</p>
<p><img alt="Quick Connect Window" height="368" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-35/5-35_2.png" width="396"/></p>
<p>Note that the first time you connect with a new server you'll see 
              a message saying that the program does not yet have an entry for 
              that host and it needs to save the encryption key. Click <span class="MenuOutput">Accept 
              &amp; Save</span> and that message will not return.</p>
<h2>Using SecureFX</h2>
<p>Once you're connected to the server you'll see two windows. You 
              can arrange them however you like (the arrangement in the picture 
              below was obtained by clicking <span class="MenuOutput">Window</span>, 
              <span class="MenuOutput">Tile Vertically</span>).</p>
<p><img alt="The main window after connecting to a server" height="483" src="https://ssc.wisc.edu/sscc/pubs/screenshots/5-35/5-35_3.png" width="642"/></p>
<p>One window is for the server you've connected to (in this case, 
              <span class="MenuOutput">ftp.ssc.wisc.edu</span>). The left side 
              of the window shows directories and the right side shows files. 
              The bottom shows the actual FTP commands sent to the server and 
              the server's responses. These can be ignored if everything is working 
              well, but if you run into trouble they may provide valuable information. 
              You'll start in your home directory; you can easily move to any 
              directory on the server.</p>
<p>The other window is for your local computer (in this case <span class="MenuOutput">RUBY</span>). 
              Again, the left side shows drives or directories and the right side 
              shows files.</p>
<p>Once you've located the file you want to move and the directory 
              where you want it to be, simply drag it from one window to the other. 
              SecureFX will send the proper FTP commands to the server to make 
              it happen.</p>
<!-- InstanceEndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/5-35/5-35_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-35/5-35_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/5-35/5-35_3.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>An Introduction to Condor</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>The SSCC's HTCondor flock, Condor, makes a tremendous amount of computing
            	 power available to SSCC users. Condor can be used to run Stata, Matlab, R, C/C++, and Fortran jobs.</p>
<p><a href="http://research.cs.wisc.edu/htcondor/manual/">Complete documentation 
              on HTCondor</a> is available from the UW Computer Science Department. 
              This article will give you specific information about our cluster, 
              easy ways we've created to use Condor (including the ability to <a href="https://www.ssc.wisc.edu/sscc_jsp/condor/">submit Stata jobs to Condor via the web</a>), and an introduction to some 
              of the basic Condor functions.</p>
<h2><a id="TheHardware" name="TheHardware"></a>The Hardware</h2>
<p>SSCC's HTCondor flock  is currently made up of 
              the five Linstat servers plus four additional servers dedicated to running jobs submitted to Condor. For details about the flock's specifications, please see <a href="https://ssc.wisc.edu/sscc/pubs/computing_resources.htm">Computing Resources at the SSCC</a>. The Condor machines have 
              access to Linux home and project directories just like Linstat. Most Linux programs do not have to be changed at all to run on 
              Condor, though programs written to use Windows Stata, SAS, Matlab, or R will probably require modifications.</p>
<h2><a id="TheCondorSoftware" name="TheCondorSoftware"></a>The Condor Software</h2>
<p><a href="http://www.cs.wisc.edu/condor">HTCondor</a> is an open source 
              project at the University of Wisconsin's Computer Science Department. HTCondor groups computers into "flocks" and when you submit a job to HTCondor it finds an available computer in the flock to run your job. Thus you don't need to try to identify which computers are busy and which are not.</p>
<p>In a standard HTCondor flock, high priority jobs can preempt low priority jobs, with the progress of the low priority jobs being "checkpointed" (i.e. their progress is saved). Users who are running lots of jobs have their priority temporarily lowered, ensuring others have a chance to run jobs as well.</p>
<p>Unfortunately, checkpointing does not work with the statistical software used at the SSCC, so we've turned off the entire preemption mechanism. Thus the SSCC's HTCondor flock is not a scheduling system that decides when jobs should run and makes sure everyone can run jobs, but  a matchmaking system that matches jobs with available computers. Because preemption is turned off, we must ask users to comply with our <a href="https://ssc.wisc.edu/sscc/policies/server_usage.htm">Server Usage policy</a> for Condor:</p>
<p>You may submit up to 15 jobs to the SSCC HTCondor flock at any time. You may be able to submit additional jobs depending on  how long your jobs will take to run and how many slots are unclaimed at the time you submit them. Use <span class="InputCode">condor_status</span> to find out how many slots are unclaimed. </p>
<table border="1" cellpadding="5">
<tr>
<th>Time your jobs will take to run</th>
<th>Total Number of  jobs you may submit<br/>
                  is the maximum of 15 or... </th>
</tr>
<tr>
<td>&lt; 3 hours</td>
<td>The number of unclaimed slots</td>
</tr>
<tr>
<td>&lt; 1 day</td>
<td>3/4 of the number  of unclaimed slots</td>
</tr>
<tr>
<td>&gt; 1 day</td>
<td>1/2 of the number of unclaimed slots</td>
</tr>
</table>
<h2>Jobs that Use Multiple Processors</h2>
<p>In order to assign jobs to servers efficiently, Condor distinguishes between jobs that use just one processor and thus can share a server with other similar jobs, and jobs that use multiple processors and thus run fastest if they can use all the processors a server has. Jobs submitted using a 'condor' command (as described below) are treated as single-processor jobs, and jobs submitted using a 'condormp' command are treated as multi-processor jobs. This only affects how jobs are allocated: a job submitted using a 'condor' command can still use multiple processors, it just might have to share them with other jobs. (If you had a job that uses multiple processors briefly but spends most of its time using one processor, submitting it using 'condor' might be ideal.)</p>
<p>SSCC's Linux servers have Stata/MP installed, so Stata will always use multiple processors. For other programs, you usually have to explicitly tell them to use multiple processors, but it's possible something like an R package might do that for you. If you're not sure if your job uses multiple processors or not, start it on Linstat in background mode and type <span class="InputCode">top</span> to monitor it. If your job has multiple entries in the <span class="InputCode">top</span> output or a single entry that uses more than 100% CPU time, it uses multiple processors.</p>
<h2><a id="EasyWaystoSubmitJobstoCondor" name="EasyWaystoSubmitJobstoCondor"></a>Easy Ways to Submit 
              Jobs to Condor</h2>
<p>You can submit Condor jobs from any Linstat server.</p>
<h3><a id="Stata" name="Stata"></a>Stata</h3>
<p>To submit a Stata job to Condor, type:</p>
<p class="InputCode">condor_stata  <span class="Parameter">dofile</span></p>
<p>where <span class="InputCode"><span class="Parameter">dofile</span></span> should be replaced by the name of Stata do file you want to run. (You can also use the same syntax as running a batch job on the server you're using: <span class="InputCode">condor_stata -b do dofile</span>. The result will be the same.) Stata jobs submitted to Condor will use Stata/MP, the multiprocessor version of Stata.</p>
<p>Note that you can also <a href="https://www.ssc.wisc.edu/sscc_jsp/condor/">submit Stata jobs to Condor via the web</a>, completely avoiding the need to log into Linstat.</p>
<h3><a id="Matlab" name="Matlab"></a>Matlab</h3>
<p>To submit a Matlab job to Condor, type:</p>
<p class="InputCode">condor_matlab <span class="Parameter">program</span>.m <span class="Parameter">program</span>.log &amp;</p>
<p>where <span class="InputCode"><span class="Parameter">program</span></span> should be replaced by the name of the  Matlab
            	program you want to run. (The command submitted to the server
            	is actually <span class="InputCode">/software/matlab/bin/matlab
            	-nojvm -nodisplay &lt; <span class="Parameter">program</span>.m &gt; <span class="Parameter">program</span>.log</span>)            </p>
<h3><a id="R" name="R"></a>R</h3>
<p>To submit an R job to Condor, type:</p>
<p class="InputCode">condor_R program.R program.log &amp;</p>
<p>where <span class="InputCode"><span class="Parameter">program</span></span> should be replaced by the name of the  R
            	program you want to run. (The command submitted to the server
            	is actually <span class="InputCode">R &lt; <span class="Parameter">program</span>.R &gt; <span class="Parameter">program</span>.log</span><span class="InputCode"> --no-save</span>)            </p>
<p>If your job uses multiple processors, type:</p>
<p class="InputCode">condormp_R program.R program.log &amp;</p>
<h3><a id="OtherJobs" name="OtherJobs"></a>Other Jobs</h3>
<p>Use <span class="InputCode"><strong>condor_do</strong></span> to 
              run any other simple Linux job. The syntax is simply:</p>
<p class="InputCode">condor_do "<span class="Parameter">command</span>"<span class="InputCode"> 
              &amp; </span></p>
<p>where <span class="Parameter"><span class="InputCode">command</span></span> 
              is any command you could type at the Linux prompt, including arguments.
           	    For example, if you wanted to run an R program called <span class="InputCode">program.R</span>  with different arguments than <span class="InputCode">condor_R</span> uses you could type:</p>
<p class="InputCode">condor_do "R &lt; program.R &gt; program.log
            	 --vanilla" &amp;</p>
<p>If your job uses multiple processors, type:</p>
<p class="InputCode">condormp_do "<span class="Parameter">command</span>" 
              &amp; </p>
<h2><a id="MonitoringtheStatusofCondorJobs" name="MonitoringtheStatusofCondorJobs"></a>Monitoring the Status 
              of Condor Jobs</h2>
<p>Condor will send you a message to your <a href="https://www.ssc.wisc.edu/sscc_jsp/email/pref.jsp">preferred email address</a> when your job is complete. There are also two commands that can tell you the status of the Condor 
              flock or your job.</p>
<p><span class="InputCode">condor_status</span> tells you the state 
              of all the Condor machines, including whether they are available 
              for new jobs.</p>
<p><span class="InputCode">condor_q</span> tells you the status of 
              all the jobs currently running or waiting to be run, including yours.</p>
<h2><a id="ManagingCondorJobs" name="ManagingCondorJobs"></a>Managing Condor Jobs</h2>
<p>If you change your mind, <span class="InputCode">condor_rm</span> 
            can remove jobs from the Condor queue. You must be logged into the same Linstat server you used to submit the job in order to remove it.</p>
<p class="InputCode">condor_rm <span class="Parameter">ID</span></p>
<p>will remove the job with the specified ID. Use <span class="InputCode">condor_q</span> 
              to find the ID of your job. </p>
<p class="InputCode">condor_rm <span class="Parameter">username</span></p>
<p>will remove all jobs belonging to you. For example, type:</p>
<p class="InputCode">condor_rm 151</p>
<p>to remove job 151, or</p>
<p class="InputCode">condor_rm rdimond</p>
<p>to remove all  jobs belonging to <span class="InputCode">rdimond</span>. You cannot remove other peoples' 
              jobs, for obvious reasons. Note that jobs are marked for removal
            	 immediately, but it may be a few minutes before they are actually
            	 removed.          </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using Emacs</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Emacs is a very popular and extremely powerful text editor. Emacs is installed
  on  SSCC  Linux servers, Windows Terminal Servers, and the lab PCs in Social
  Science 3218 and 4218. Emacs
  has too many specialized commands and features to cover completely here. This
  article serves only as an introduction, helping you get started using Emacs.
  A GNU Emacs Reference Card is attached to the end of this article which
  lists many of the most frequently used Emacs commands along with a short description
  of what each command does. If you find you need to learn more, Emacs has a
  comprehensive online help facility where you can get more information. The
  <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">Help Desk</a> also has manuals you can check out on a short-term basis.</p>
<p>There are actually two versions of Emacs available, and each can run in two
	 different modes. Originally Emacs was text-only and XEmacs used Xwindows graphics.
	 However, Emacs is now graphical as well. Both versions have the option 
  to use a text-only mode, which is useful if you do not have the ability to
	display  Xwindows graphics. The differences between the two are either cosmetic
	or subtle  enough to be beyond the scope of this article. In this article
	we'll  use Emacs to refer to both Emacs and XEmacs, unless the difference is
	important.</p>
<p>Emacs is not hard to learn. However, it does not follow the conventions for 
  Windows programs. If you're more comfortable in a Windows environment, keep 
  in mind you can use a Windows text editor, such as TextPad, and then save your 
  files on the Linux file system where Linux programs can access them. This is 
  a very popular way to run programs like Stata or SAS on Linux without spending 
  the time to learn Linux or Linux tools like Emacs. <a href="https://ssc.wisc.edu/sscc/pubs/linstat.htm">Using Linstat</a> covers what you need to know to work this way.</p>
<h2>Emacs Commands</h2>
<p>All Emacs commands involve key combinations. But the Emacs documentation has
   its own way of describing them. For exanple, <span class="MenuOutput">C-<span class="Parameter">key</span></span>,
    means hold down CTRL and press <span class="Parameter"><span class="MenuOutput">key</span></span> 
  (<span class="MenuOutput">so C-x</span> means <span class="InputCode">Ctrl-x</span> 
  in the way you're probably used to these combinations being described). In
  addition,  the documentation refers to the Meta key (<span class="MenuOutput">M-<span class="Parameter">key</span></span>).
   Some keyboards have a Meta key, though none of SSCC's do.  On a PC, it depends
  on the terminal program you're using and how it is configured. SecureCRT has
  an option to use <span class="InputCode">Alt</span> 
  as the Meta key, but if you do so you can't use <span class="InputCode">Alt</span> 
  to send commands to SecureCRT itself. The alternative is to use Escape (<span class="InputCode">Esc</span>),
   but in this case it works a bit differently. Rather than holding down <span class="InputCode">Esc</span>,
    you press it once and then press the key you want. So to execute a command
   described  as <span class="MenuOutput">M-x</span>, press <span class="InputCode">Esc</span> 
  (and let go), then press <span class="InputCode">x</span>.</p>
<p>The most commonly used commands involve the Control key. Slightly less common 
  commands are assigned to Meta. Other commands are executed by typing <span class="MenuOutput">C-x</span> 
  and then the command (for example, to quit the program you type <span class="MenuOutput">C-x 
  C-c</span>). Any command can be executed by typing <span class="MenuOutput">M-x</span> 
  and then the full name of the command, and some commands can only be executed 
  in this way.</p>
<p>Emacs has a very helpful feature known as completion. For example, if you are 
  typing the name of a file after issuing a command such as find-file (<span class="MenuOutput">C-f</span>), 
  you need only type the first few letters of the name, enough to make a unique 
  filename. Then press the <span class="InputCode">Tab</span> key and Emacs will 
  complete the filename for you.</p>
<h2>Starting and Stopping Emacs</h2>
<p>To enter Emacs, simply type</p>
<p> <span class="InputCode">&gt; emacs <span class="Parameter">file</span></span></p>
<p> where <span class="Parameter"><span class="InputCode">file</span></span> is 
  the name of the file you want to edit. If you use a filename that does not exist, 
  Emacs creates a new file. If you type emacs with no file, you'll get a window 
  with copyright information. This will go away as soon you press a key. Emacs 
  then puts you in an empty buffer (a buffer is a temporary workspace that may 
  be saved later as a file) called <span class="MenuOutput">*scratch*</span>. 
  Note: <span class="MenuOutput">*scratch*</span> buffers are not saved when you 
  exit Emacs. Type <span class="MenuOutput">C-x C–w</span> to write this 
  temporary buffer to a permanent file.</p>
<p><br/>
<img alt="Emacs" height="582" src="https://ssc.wisc.edu/sscc/pubs/screenshots/7-10/7-10_1.png" width="612"/></p>
<p>The Emacs window contains three major areas: the largest area which takes up 
  most of the window is where you enter your text. A cursor marks your position 
  in the file. The cursor is also called "point" or "dot". 
</p>
<p>The grey area at the bottom of the window is called the mode line and provides 
  information about the editing session: the name of the buffer being edited, 
  the mode you are in (Emacs has many different modes, each of which customizes 
  Emacs for editing text of a particular sort), and where you are in the file. 
  If you are at the beginning of the file, Emacs prints the word <span class="MenuOutput">Top</span>; 
  if you're at the end, it prints <span class="MenuOutput">Bot</span>; if you 
  are somewhere in the middle, it shows you a percentage; and if the entire file 
  is visible on the screen, Emacs prints the word <span class="MenuOutput">All</span>. 
  At the left edge of this line, you may see two asterisks (<span class="MenuOutput">**</span>). 
  If the asterisks are there, this means that whatever you are editing has been 
  modified since the last time you saved it.</p>
<p>At the bottom of the window, below the mode line is the minibuffer. This is 
  the area where Emacs echoes the commands you enter and where you specify filenames 
  for Emacs to find, values for search and replace, and so on.</p>
<p>Note the colors. The file shown is a Stata .do file. If it is configured correctly, 
  Emacs will recognize this and color various words accordingly. See <a href="https://ssc.wisc.edu/sscc/pubs/4-13.htm">Programming 
  in Color</a> for details.</p>
<p>If you type <span class="InputCode">xemacs</span> instead of <span class="InputCode">emacs</span>, 
  you'll get the following:</p>
<p><img alt="Xemacs" height="633" src="https://ssc.wisc.edu/sscc/pubs/screenshots/7-10/7-10_2.png" width="592"/></p>
<p>Pick according to taste.</p>
<p>If you do not have Linux graphics available  you can still use Emacs. You just have to use the <span class="InputCode">-nw</span> 
  option (think no window) to tell it to run in text mode. Xemacs has the advantaget
   hat it will do some syntax highlighting even in text mode (assuming you set
   up syntax highlighting). To run it, type</p>
<p class="InputCode">&gt; xemacs -nw <span class="Parameter">file</span></p>
<p><img alt="Text-only XEmacs" height="453" src="https://ssc.wisc.edu/sscc/pubs/screenshots/7-10/7-10_3.png" width="640"/></p>
<p>To exit Emacs at any time, type <span class="MenuOutput">C-x</span> <span class="MenuOutput">C-c</span>. 
  If you have made any changes that have not been saved, Emacs will prompt you, 
  asking you if you want to save your changes.</p>
<h2>Getting Help</h2>
<p>Emacs has an extensive help facility, though it is quite different from Windows-style 
  help. If you are just starting out, the tutorial can be handy. There are also 
  tools that can tell you more about a given command, or try to identify the command 
  you need to perform a specific task.</p>
<p>To start the tutorial, in Emacs click on <span class="MenuOutput">Help</span> 
  and you'll see the the <span class="MenuOutput">Emacs Tutorial</span> at the 
  top of the menu. In XEmacs, under <span class="MenuOutput">Help</span> there 
  is a <span class="MenuOutput">Tutorials</span> sub-menu, allowing you to choose 
  the language for the tutorial. If you are running either version in text mode, 
  type <span class="MenuOutput">C-h t</span>. The tutorial provides an excellent 
  guided tour of most of the important Emacs features and concepts. However, do 
  not use it for retrieving information on how to do something in particular. 
  There are better ways of doing this.</p>
<p>If you want to learn more about a command, in Emacs click on <span class="MenuOutput">Help</span>, 
  put the mouse over <span class="MenuOutput">Describe</span> (but do not click), 
  click on <span class="MenuOutput">Describe Key</span>, and then type the command. 
  In XEmacs, click on <span class="MenuOutput">Help</span>, <span class="MenuOutput">Commands 
  and Keys</span>, <span class="MenuOutput">Key</span>, and then type the command. 
  In text mode, type <span class="MenuOutput">C-h k</span> and then the command.</p>
<p>If you want to do something and don't know which command to use, in Emacs click 
  Help, put the mouse over <span class="MenuOutput">Describe</span>, click on 
  <span class="MenuOutput">Apropos Command</span>s, and type a key word related 
  to what you want to do. In XEmacs, click on <span class="MenuOutput">Help</span>, 
  <span class="MenuOutput">Commands and Keys</span>, <span class="MenuOutput">Apropos</span>, 
  and then type the key word. In text mode, type <span class="MenuOutput">C-h 
  a</span> and then the key word. Emacs will then give you a list of commands 
  that include the key word you chose in their titles. This is generally much 
  less useful than the kind of search you may be used to, which searches the descriptions 
  of what a command does.</p>
<p> No matter how you get help the resulting windows can be confusing if you aren't 
  familiar with the keystrokes that control them. The following commands provide 
  the window operations you will need in order to use the help system and exit 
  from it when you are done:</p>
<ul>
<li> To switch windows when the screen contains more than one window, type <span class="MenuOutput">C-x 
	o</span>.</li>
<li> To scroll the selected window forward, type <span class="MenuOutput">C-v</span>.</li>
<li> To scroll the selected window backward, type <span class="MenuOutput">M-v</span>.</li>
<li> To scroll the other window forward, type <span class="MenuOutput">M-C-v</span>.</li>
<li> To make all windows disappear except for the selected window, type <span class="MenuOutput">C-x 
	1</span>.</li>
<li> To remove help information from the selected window, type <span class="MenuOutput">C-x 
	k</span>.</li>
</ul>
<h2>Editing Files</h2>
<p>Emacs achieves some of its famed versatility by having various editing modes 
  in which it behaves slightly differently. Mode in Emacs simply means being sensitive 
  to the task at hand. When you are writing, you often want features like word 
  wrap so you do not have to press Return at the end of every line. When you are 
  programming, the code must be formatted correctly depending on the language. 
  For writing, Emacs has a text mode; for programming, Emacs has modes for different 
  languages. Whenever you edit a file, Emacs attempts to put you in the correct 
  mode for what you are going to edit. </p>
<h3>Fill Mode and Text Mode</h3>
<p>Before you start typing, look at the mode line at the bottom of the Emacs window. 
  If the word <span class="MenuOutput">Fill</span> appears, you are in fill mode. 
  In fill mode, when you type past the end of a line, Emacs automatically starts 
  a new line for you. If Emacs is not in fill mode, you have to press <span class="InputCode">Enter</span> 
  at the end of every line. You can turn on fill mode for a session by typing 
  <span class="MenuOutput">M-x auto-fill-mode</span>. This command is a toggle 
  command so if you want to turn fill mode off, just type the command again. </p>
<h3>Moving the Cursor</h3>
<p>Most of the time you can use the arrow keys on your keyboard (or the mouse 
  in graphical Emacs) to move the cursor. Occasionally these aren't set up properly 
  in your terminal program, so there are alternatives. To move the cursor forward 
  one space, type <span class="MenuOutput">C-f</span> (f for forward). <span class="MenuOutput">C-b</span> 
  moves the cursor backwards one space (b for backwards). To move up, type <span class="MenuOutput">C-p</span> 
  (p for previous) and to move down, type <span class="MenuOutput">C-n</span> 
  (n for next). </p>
<p>In Emacs you can also move to the beginning or end of a line. <span class="MenuOutput">C-a</span> 
  moves you to the beginning of the line (just like a is the beginning of the 
  alphabet). <span class="MenuOutput">C-e</span> (e for end) moves you to the 
  end of the line. Using Emacs commands not discussed here, you can also move 
  the cursor by words, sentences, and paragraphs--see the help..</p>
<p>Use <span class="MenuOutput">C-v</span> to scroll through your document one 
  page at a time. Emacs leaves a couple of lines from the previous screen at the 
  top to give you continuity. Likewise, <span class="MenuOutput">M-v</span> shows 
  you the previous screen. </p>
<p>You often want to move all the way to the beginning or end of a file. To go 
  to the end, type <span class="MenuOutput">M-&gt;</span>. To go to the beginning, 
  type <span class="MenuOutput">M-&lt;</span>.</p>
<p>Sometimes you may want to go to the n-th line or to the n-th character in the 
  file. <span class="MenuOutput">M-x goto-line <span class="Parameter">n</span></span> 
  moves the cursor to the beginning of line <span class="Parameter"><span class="MenuOutput">n</span></span> 
  of the file. Likewise, <span class="MenuOutput">M-x goto-char <span class="Parameter">n</span></span> 
  goes to character <span class="Parameter"><span class="Parameter"><span class="MenuOutput">n</span></span></span> 
  of the file.</p>
<p>The command <span class="MenuOutput">C-l</span> redraws the entire Emacs display 
  and puts the line that has the cursor in the center of the screen.</p>
<h3>Deleting Text</h3>
<p>Emacs provides many ways to delete text. The simplest way to delete text is 
  to press the <span class="InputCode">Backspace</span> or <span class="InputCode">Delete</span> 
  key; this deletes the character immediately to the left of the cursor (note 
  that this is different from what you're probably used to <span class="InputCode">Delete</span> 
  doing). Sometimes, particularly in text Emacs, <span class="InputCode">Backspace</span> 
  is not set to <span class="InputCode">Delete</span>, but rather sends <span class="MenuOutput">C-h</span>, 
  putting you in help mode. Another way to delete a single character is with the 
  <span class="MenuOutput">C-d</span> command. <span class="MenuOutput">C-d</span> 
  deletes the character under the cursor.</p>
<p>If you want to delete an entire line, or part of a line, use the command <span class="MenuOutput">C-k</span> 
  (for kill-line). This deletes everything from the cursor to the end of the line. 
  Typing <span class="MenuOutput">C-k</span> on a blank line deletes the line 
  itself. As a result, it usually takes two <span class="MenuOutput">C-k</span>s 
  to delete a line; one to delete the text, and one to delete the resulting the 
  resulting blank line.</p>
<p>When you use <span class="MenuOutput">C-k</span>, the material you delete does 
  not just disappear. Emacs hides it away in a special place called the "kill 
  ring". You can get back what you have killed with <span class="MenuOutput">C-k</span> 
  by typing <span class="MenuOutput">C-y</span> (y for yank). Conveniently, if 
  you kill several lines in succession, Emacs collects them all in a single item 
  and places the whole unit into the kill ring; a single <span class="MenuOutput">C-y</span> 
  will bring back everything.</p>
<h3>Marking Regions to Delete, Move, or Copy</h3>
<p>You can mark areas of text called regions which you can then delete, move, 
  or copy. To define a region, you use the primary pointer (your cursor) along 
  with a secondary pointer called a mark. Unfortunately, the mark is invisible 
  so you have to remember where it is. To mark a region, you set the mark at one 
  end of the region by pressing <span class="MenuOutput">C-&lt;Space Bar</span>&gt;, 
  then move the cursor (the point) to the other end of the region. Deleting text 
  requires the following four steps:</p>
<ol>
<li> Move the cursor to the beginning of the area you want to delete.</li>
<li> Press <span class="MenuOutput">C-&lt;Space Bar&gt;</span>. Emacs displays 
	the message <span class="MenuOutput">Mark Set</span>.</li>
<li> Move the cursor to the end of the region you want to delete.</li>
<li> Press <span class="MenuOutput">C-w</span> to delete the region.</li>
</ol>
<p>Remember, you can retrieve whatever you have deleted with <span class="MenuOutput">C-y</span>. 
  <span class="MenuOutput">C-y</span> also gives you an easy way to move text 
  from one part of the file to another. Follow these steps to move text:</p>
<ol>
<li> Delete the text you want to move following the four steps above.</li>
<li> Move the cursor to the point where you want to insert the text.</li>
<li> Press <span class="MenuOutput">C-y</span> and Emacs will insert the text 
	at the location of the cursor.</li>
</ol>
<p>To copy text, follow these steps:</p>
<ol>
<li> Move the cursor to the beginning of the area you want to copy.</li>
<li> Press <span class="MenuOutput">C-&lt;Space Bar&gt;</span>. Emacs displays 
	the message Mark Set.</li>
<li> Move the cursor to the end of the region you want to copy.</li>
<li> Press <span class="MenuOutput">M-w</span> to copy the region.</li>
<li>  Move the cursor to the place you want to insert the copied text.</li>
<li> Press <span class="MenuOutput">C-y</span> and Emacs will insert the copied 
	text at the location of the cursor.</li>
</ol>
<title></title>
<h1> </h1>
<h1>GNU Emacs Reference Card</h1>
<em>(for version 19)</em>
<h2>Starting Emacs</h2>
<p>To enter GNU Emacs 19, just type its name: <tt><i>emacs</i></tt> </p>
<p> To read in a file to edit, see <a href="#files">Files</a>, below.</p>
<h2>Leaving Emacs</h2>
<pre>
suspend Emacs (or iconify it under X)              C-z
exit Emacs permanently                             C-x C-c
</pre>
<h2><a id="files" name="files"></a>Files</h2>
<pre>
read a file into Emacs                             C-x C-f
save a file back to disk                           C-x C-s
save all files                                     C-x s
insert tables of another file into this buffer   C-x i
replace this file with the file you really want    C-x C-v
write buffer to a specified file                   C-x C-w
</pre>
<h2>Getting Help</h2>
<p>The Help system is simple. Type <tt>C-h</tt> and follow the directions. If 
  you are a first-time user, type <tt>C-h t</tt> for a tutorial. </p>
<pre>
remove Help window                                 C-x 1
scroll Help window                                 ESC C-v

apropos: show commands matching a string           C-h a
show the function a key runs                       C-h c
describe a function                                C-h f
get mode-specific information                      C-h m
</pre>
<h2>Error Recovery</h2>
<pre>
abort partially typed or executing command         C-g
recover a file lost by a system crash              M-x recover-file
undo an unwanted change                            C-x u or C-`
restore a buffer to its original tables          M-x revert-buffer
redraw garbaged screen                             C-l
</pre>
<h2>Incremental Search</h2>
<pre>
search forward                                     C-s
search backward                                    C-r
regular expression search                          C-M-s
reverse regular expression search                  C-M-r

select previous search string                      M-p
select next later search string                    M-n
exit incremental search                            RET
undo effect of last character                      DEL
abort current search                               C-g
</pre>
<p>Use <tt>C-s</tt> or <tt>C-r</tt> again to repeat the search in either direction. 
  If Emacs is still searching, <tt>C-g</tt> cancels only the part not done. </p>
<h2>Motion</h2>
<pre>
entity to move over                        backward      forward

character                                  C-b           C-f
word                                       M-b           M-f
line                                       C-p           C-n
go to line beginning (or end)              C-a           C-e
sentence                                   M-a           M-e
paragraph                                  M--           M-"
page                                       C-x [         C-x ]
sexp                                       C-M-b         C-M-f
function                                   C-M-a         C-M-e
go to buffer beginning (or end)            M-&lt;           M-&gt;

scroll to next screen                              C-v
scroll to previous screen                          M-v
scroll left                                        C-x &lt;
scroll right                                       C-x &gt;
scroll current line to center of screen            C-u C-l
</pre>
<h2>Killing and Deleting</h2>
<pre>
entity to kill                             backward      forward
character (delete, not kill)               DEL           C-d
word                                       M-DEL         M-d
line (to end of)                           M-0 C-k       C-k
sentence                                   C-x DEL       M-k
sexp                                       M-- C-M-k     C-M-k

kill region                                        C-w
copy region to kill ring                           M-w
kill through next occurrence of char               M-z char

yank back last thing killed                        C-y
replace last yank with previous kill               M-y

</pre>
<h2>Marking</h2>
<pre>
set mark here                                      C-@ or C-SPC
exchange point and mark                            C-x C-x

set mark arg words away                            M-@
mark paragraph                                     M-h
mark page                                          C-x C-p
mark sexp                                          C-M-@
mark function                                      C-M-h
mark entire buffer                                 C-x h
</pre>
<h2>Query Replace</h2>
<pre>
interactively replace a text string                M-%
using regular expressions             		   M-x query-replace-regexp
</pre>
<p>Valid responses in query-replace mode are: </p>
<pre>
replace this one, go on to next                    SPC
replace this one, don't move                       ,
skip to next without replacing                     DEL
replace all remaining matches                      !
back up to the previous match                      ^
exit query-replace                                 ESC
enter recursive edit (C-M-c to exit)               C-r
</pre>
<h2>Multiple Windows</h2>
<pre>
delete all other windows                           C-x 1
delete this window                                 C-x 0
split window in two vertically                     C-x 2

split window in two horizontally                   C-x 3

scroll other window                                C-M-v
switch cursor to another window                    C-x o

shrink window shorter                         M-x shrink-window
grow window taller                                 C-x ^
shrink window narrower                             C-x -
grow window wider                                  C-x "

select buffer in other window                      C-x 4 b
display buffer in other window                     C-x 4 C-o
find file in other window                          C-x 4 f
find file read-only in other window                C-x 4 r
run Dired in other window                          C-x 4 d
find tag in other window                           C-x 4 .
</pre>
<h2>Formatting</h2>
<pre>
indent current line (mode-dependent)               TAB
indent region (mode-dependent)                     C-M-"
indent sexp (mode-dependent)                       C-M-q
indent region rigidly arg columns                  C-x TAB

insert newline after point                         C-o
move rest of line vertically down                  C-M-o
delete blank lines around point                    C-x C-o
join line with previous (with arg, next)           M-^
delete all white space around point                M-"
put exactly one space at point                     M-SPC

fill paragraph                                     M-q
set fill column                                    C-x f
set prefix each line starts with                   C-x .
</pre>
<h2>Case Change</h2>
<pre>
uppercase word                                     M-u
lowercase word                                     M-l
capitalize word                                    M-c

uppercase region                                   C-x C-u
lowercase region                                   C-x C-l
capitalize region                                  M-x capitalize-region
</pre>
<h2>The Minibuffer</h2>
<p>The following keys are defined in the minibuffer: </p>
<pre>
complete as much as possible                       TAB
complete up to one word                            SPC
complete and execute                               RET
show possible completions                          ?
fetch previous minibuffer input                    M-p
fetch next later minibuffer input                  M-n
regexp search backward through history             M-r
regexp search forward through history              M-s
abort command                                      C-g
</pre>
<p>Type <tt>C-x ESC ESC</tt> to edit and repeat the last command that used the 
  minibuffer. The following keys are then defined: </p>
<pre>
previous minibuffer command                        M-p
next minibuffer command                            M-n
</pre>
<h2>Buffers</h2>
<pre>

select another buffer                              C-x b
list all buffers                                   C-x C-b
kill a buffer                                      C-x k
</pre>
<h2>Transposing</h2>
<pre>
transpose characters                               C-t
transpose words                                    M-t
transpose lines                                    C-x C-t
transpose sexps                                    C-M-t
</pre>
<h2>Spelling Check</h2>
<pre>
check spelling of current word                     M-$
check spelling of all words in region              M-x ispell-region
check spelling of entire buffer                    M-x ispell-buffer

</pre>
<h2>Tags</h2>
<pre>
find a tag (a definition)                          M-.
find next occurrence of tag                        C-u M-.
specify a new tags file                            M-x visit-tags-table

regexp search on all files in tags table           M-x tags-search
run query-replace on all the files                 M-x tags-query-replace
continue last tags search or query-replace         M-,
</pre>
<h2>Shells</h2>
<pre>
execute a shell command                            M-!
run a shell command on the region                  M-_
filter region through a shell command              C-u M-_
start a shell in window *shell*                    M-x shell
</pre>
<h2>Rectangles</h2>
<pre>
copy rectangle to register                         C-x r r
kill rectangle                                     C-x r k
yank rectangle                                     C-x r y
open rectangle, shifting text right                C-x r o
blank out rectangle                                M-x clear-rectangle
prefix each line with a string                     M-x string-rectangle
</pre>
<h2>Abbrevs</h2>
<pre>
add global abbrev                                  C-x a g
add mode-local abbrev                              C-x a l
add global expansion for this abbrev               C-x a i g
add mode-local expansion for this abbrev           C-x a i l
explicitly expand abbrev                           C-x a e

expand previous word dynamically                   M-/
</pre>
<h2>Regular Expressions</h2>
<pre>
any single character except a newline              .   (dot)

zero or more repeats                               *
one or more repeats                                +
zero or one repeat                                 ?
any character in the set                           [ : : :]
any character not in the set                       [^ : : :]
beginning of line                                  ^
end of line                                        $
quote a special character c                        "c
alternative ("or")                                 "_
grouping                                           "( : : :")
nth group                                          "n
beginning of buffer                                "`
end of buffer                                      "'
word break                                         "b
not beginning or end of word                       "B
beginning of word                                  "&lt;
end of word                                        "&gt;
any word-syntax character                          "w
any non-word-syntax character                      "W
character with syntax c                            "sc
character with syntax not c                        "Sc
</pre>
<h2>Registers</h2>
<pre>
save region in register                            C-x r s
insert register tables into buffer               C-x r i

save value of point in register                    C-x r SPC
jump to point saved in register                    C-x r j
</pre>
<h2>Info</h2>
<pre>
enter the Info documentation reader                C-h i
</pre>
<p>Moving within a node: </p>
<pre>
   scroll forward                                  SPC
   scroll reverse                                  DEL
   beginning of node                               .   (dot)
</pre>
<p>Moving between nodes: </p>
<pre>
   next node                                       n
   previous node                                   p
   move up                                         u
   select menu item by name                        m
   select nth menu item by number (1-5)            n
   follow cross reference (return with l)          f
   return to last node you saw                     l
   return to directory node                        d
   go to any node by name                          g

</pre>
<p>Other: </p>
<pre>
   run Info tutorial                               h
   list Info commands                              ?
   quit Info                                       q
   search nodes for regexp                         s
</pre>
<h2>Keyboard Macros</h2>
<pre>
start defining a keyboard macro                    C-x (

end keyboard macro definition                      C-x )
execute last-defined keyboard macro                C-x e
append to last keyboard macro                      C-u C-x (
name last keyboard macro                           M-x name-last-kbd-macro
insert Lisp definition in buffer                   M-x insert-kbd-macro
</pre>
<h2>Commands Dealing with Emacs Lisp</h2>
<pre>
eval sexp before point                             C-x C-e
eval current defun                                 C-M-x
eval region                                        M-x eval-region
eval entire buffer                                 M-x eval-current-buffer
read and eval minibuffer                           M-ESC
re-execute last minibuffer command                 C-x ESC ESC
read and eval Emacs Lisp file                      M-x load-file
load from standard system directory                M-x load-library
</pre>
<h2>Simple Customization</h2>
<p>Here are some examples of binding global keys in Emacs Lisp. Note that you 
  cannot say <tt>""M-#"</tt>; you must say <tt>""e#"</tt>. </p>
<pre>
(global-set-key ""C-cg" 'goto-line)
(global-set-key ""C-x"C-k" 'kill-region)
(global-set-key ""e#" 'query-replace-regexp)
</pre>
<p>An example of setting a variable in Emacs Lisp: </p>
<pre>
(setq backup-by-copying-when-linked t)
</pre>
<h2>Writing Commands</h2>
<pre>
(defun command-name  (args)
   "documentation"
   (interactive "template")
   body)
</pre>
<p>An example: </p>
<pre>
(defun this-line-to-top-of-window (line)
   "Reposition line point is on to top of window.
With ARG, put point on line ARG.
Negative counts from bottom."
   (interactive "P")
   (recenter (if (null line)
                    0
                 (prefix-numeric-value line))))
</pre>
<p>The argument to interactive is a string specifying how to get the arguments 
  when the function is called interactively. Type <tt>C-h f</tt> interactive for 
  more information. </p>
<pre>



           Copyright c 1993 Free Software Foundation, Inc.
              designed by Stephen Gildea, May 1993 v2.0
              for GNU Emacs version 19 on Unix systems
</pre>
<h5> Permission is granted to make and distribute copies of this card provided 
  the copyright notice and this permission notice are preserved on all copies. 
</h5>
<h5> For copies of the GNU Emacs manual, write to the Free Software Foundation, 
  Inc., 675 Massachusetts Ave, Cambridge MA 02139. </h5>
<!-- #EndEditable -->

</kb_body>
<img_base_url>https://ssc.wisc.edu/sscc/pubs/screenshots/7-10/7-10_1.png, https://ssc.wisc.edu/sscc/pubs/screenshots/7-10/7-10_2.png, https://ssc.wisc.edu/sscc/pubs/screenshots/7-10/7-10_3.png</img_base_url>
</kb_document>
<kb_document>
<kb_title>Using Stata on Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Stata is an interactive statistical graphics software package that contains 
  a wide variety of statistical applications including some that are difficult 
  (at best) to compute in other statistical software packages. These include censored 
  normal and tobit regression, multinomial logistic regression, and ordered logit 
  and probit estimation.</p>
<p>The current version of Stata available on SSCC's Linux computers is 9. A Windows
    version of Stata is also available on  the lab PCs in Social Science 3218
  and 4218 (refer to <a href="https://ssc.wisc.edu/sscc/pubs/winstat.htm">Using
    Windows Terminal Servers</a>) and Windows Terminal Servers (Winstat1-3),</p>
<h2> <a id="InvokingStata" name="InvokingStata"></a>Invoking Stata</h2>
<p>You have three ways of running Stata on Linux: an interactive windowed Graphical
  User Interface (GUI), an interactive non-windowed interface which Stata calls
  console mode, and a noninteractive batch mode. The following examples show
  how to invoke Stata in each of these modes.</p>
<h3>Interactive Windowed GUI Mode </h3>
<p>Stata can only be accessed in this mode from an X-display such as a Windows-based 
  Terminal or a PC running software like X-Win32. Those accessing Stata interactively 
  from a Telnet-type window (like SecureCRT) should skip ahead to the next section 
  on <a href="#InteractiveConsoleMode">the Console mode</a>.</p>
<p>Typing <span class="InputCode">xstata</span> at the Linux prompt from an X-display 
  brings up Stata in an interactive windowed GUI mode. In this mode, you can use 
  menus to do some tasks but the command line is still accessible. For example, 
  to exit Stata, you can either type <span class="InputCode">exit</span> at the 
  command line or choose <span class="MenuOutput">Exit</span> from the File menu. 
  This handout only documents commands.</p>
<h3><a id="InteractiveConsoleMode" name="InteractiveConsoleMode"></a>Interactive Console Mode</h3>
<p>Typing <span class="InputCode">stata</span> at the Linux prompt brings up Stata 
  in interactive console mode. The program prompts you with a period (<span class="InputCode">.</span>). 
  At this point you can begin entering Stata commands. Type: <span class="InputCode">exit, 
  clear</span> to terminate your Stata session and return control to the operating 
  system.</p>
<h3>Noninteractive Mode</h3>
<p>To invoke Stata in noninteractive mode, use the <span class="InputCode">stata</span> 
  command with the <span class="InputCode">-b</span> (batch) option:</p>
<p class="InputCode">stata -b do filename </p>
<p>For example:</p>
<p class="InputCode">&gt; stata -b do statarun </p>
<p>will execute the commands in the file <span class="InputCode">statarun.do</span> 
  and write the output to <span class="InputCode">statarun.log</span>. If your 
  command file extension is named something other than <span class="InputCode">.do</span>, 
  you need to specify the full file name on the command line.</p>
<p>Below is an example of a Stata program that might be contained in <span class="InputCode">statarun.do</span>. 
  The program reads in data and computes a logistic regression:</p>
<p class="InputCode">infile vote count race polview pold1-pold6 using ~/diss/elect.dat<br/>
  logistic vote race polview [fweight=count]</p>
<p>To run a noninteractive Stata program in the background, simply add an &amp; 
  at the end of the Linux command line. The advantage of running noninteractive 
  programs in the background is that you do not have to wait until your Stata 
  program finishes execution before you get the Linux prompt. In other words, 
  your shell is available for other work.</p>
<h2> <a id="KeyboardShortcuts" name="KeyboardShortcuts"></a>Keyboard Shortcuts</h2>
<p>Stata provides several keyboard shortcuts for entering commands quickly and 
  fixing mistakes when working in interactive mode. For example, <span class="InputCode">CTRL-R</span> 
  retrieves the previously typed command line. Refer to the <span class="italic">Getting 
  Started with Stata for Linux</span> manual for a complete list of keyboard shortcuts.</p>
<h2> <a id="KeepingaLogofyourStataSession" name="KeepingaLogofyourStataSession"></a>Keeping a Log of your Stata Session</h2>
<p>When working in interactive mode, you may want to record a copy of your session 
  to a file. Start a log by typing:</p>
<p class="InputCode">log using <span class="italic">filename</span>, text</p>
<p>The log is closed automatically when you exit Stata. Then you can use the Linux 
  <span class="InputCode">more</span> or <span class="InputCode">lpr</span> command 
  to list or print your log file. </p>
<p>Note: Be sure and add the <span class="InputCode">text</span> <span class="italic">option</span> 
  to the <span class="InputCode">log</span> command. Otherwise, the log will be 
  formatted in Stata Markup Command Language (SMCL) which contains codes to control 
  the format of the text. If viewed in any program other than the Stata viewer, 
  these codes will be included in the text, making it difficult to pick out the 
  table of the file. </p>
<p>If you want to create a log file that contains only the command lines that 
  you enter in a Stata session, type:</p>
<p><span class="InputCode">cmdlog using <span class="italic">filename</span></span></p>
<h2> <a id="UsingStatasOnLineHelpSystem" name="UsingStatasOnLineHelpSystem"></a>Using Stata's On-Line Help System</h2>
<p>Stata provides an extensive on-line "Help" system which can be accessed 
  from two Stata commands: <span class="InputCode">help</span> and <span class="InputCode">search</span>.</p>
<p>To get help on a particular command, type: <span class="InputCode">help <span class="italic">commandname</span></span></p>
<p>To get a complete list of help topics, type: <span class="InputCode">help tables</span></p>
<p>To obtain all references to a topic, both in the on-line help and the Internet, 
  type: <span class="InputCode">findit<span class="italic">topic</span></span></p>
<p>For example, to obtain help on Stata's <span class="InputCode">regress</span> 
  command, type:</p>
<p class="InputCode">. help regress</p>
<p> If you want Stata to tell you all the sources of information that have to 
  do with Regression Analysis in general, type: </p>
<p class="InputCode">. findit regress</p>
<h2> Stata Command Syntax</h2>
<p>With few exceptions, the basic language syntax for Stata is:</p>
<p>[<span class="bolded">by</span><span class="italic"> varlist</span><span class="bolded">:</span>]<span class="italic"> 
  command</span> [<span class="italic">varlist</span>] [<span class="bolded">=</span><span class="italic">expression</span>] 
  [<span class="bolded">if</span> <span class="italic">expression</span>] [<span class="bolded">in</span>
<span class="italic">range</span>] [<span class="italic">weights</span>] [<span class="italic">, 
  options</span>]</p>
<p>where square brackets denote optional qualifiers. <span class="italic">command</span> 
  denotes a Stata command, <span class="italic">varlist</span> denotes a list 
  of variable names. For example, typing the command </p>
<p class="InputCode">. summarize</p>
<p>results in summary statistics for all the variables in your data set. Typing</p>
<p class="InputCode">. summarize vote count</p>
<p>results in summary statistics for just the variables vote and count. To get 
  more detailed summary statistics for the two variables specified, type:</p>
<p class="InputCode">. summarize vote count, detail</p>
<p>You can also prefix most Stata commands with <span class="MenuOutput">by <span class="italic">varlist</span>:</span>. 
  This instructs Stata to process the command separately for groups of observations 
  defined by the variable list specified. You can also restrict the scope of a 
  command to certain subsets of observations with the qualifiers <span class="bolded">if</span> 
  or <span class="bolded">in</span> for most Stata commands. </p>
<p>You can write statements over more than one line. Command, variable and option 
  names may be abbreviated to the shortest string of characters that uniquely 
  identifies them. For other shortcut methods, refer to Chapter 13 of the <span class="italic">User's 
  Guide</span>.<br/>
</p>
<h2> <a id="ReadingData" name="ReadingData"></a>Reading Data</h2>
<p>This section describes how to read in ASCII data stored separately on your 
  disk using the <span class="InputCode">infile</span> command. If your data is 
  stored in a file that was created by another software package, you can use software 
  like STAT/TRANSFER or DBMS/COPY to convert the file to a Stata system file. 
  Stata system files are described later in this handout.</p>
<h3><a id="FreeFormattedInput" name="FreeFormattedInput"></a>Free-Formatted Input</h3>
<p>The simplest method of reading data is by listing variable names without column 
  locations. This method is referred to as free-formatted input. You can use free-formatted 
  input when the variables are recorded in the same order for each case, but not 
  necessarily in the same locations. Values may be separated by blanks and/or 
  commas. Numeric missing values must be indicated by single periods (.). The 
  command for reading a file using free-formatted input is:</p>
<p class="InputCode">infile <span class="italic">varlist</span> using <span class="italic">filename</span></p>
<p>where <span class="italic"><span class="InputCode">varlist</span></span> is 
  the names of the variables and <span class="italic"><span class="InputCode">filename</span></span> 
  is the name of the file that contains the raw data. For example,</p>
<p class="InputCode">infile age wgt1-wgt6 using ~/rawdata/weights.dat</p>
<p>If the raw data to be read into Stata using free-formatted input contain character 
  or string variables, you must precede the variable's name with the keyword <span class="InputCode">str</span> 
  followed immediately by the length of the string. For example, if the above 
  data set contained an additional variable called <span class="InputCode">lastname</span> 
  which contained the last name of the person and the longest name was 20 characters, 
  the following command would read in the data:</p>
<p class="InputCode">infile age wgt1-wgt6 str20 lastname using ~/rawdata/weights.dat</p>
<p>Note that if values for a string variable contains blanks or other special 
  characters, the string must be enclosed in single or double quotes in the data 
  file. Otherwise you will need to specify how many characters to read as discussed 
  below.</p>
<h3><a id="FixedFormattedInput" name="FixedFormattedInput"></a>Fixed-Formatted Input</h3>
<p>The most common way data are read into Stata occurs when the data are formatted 
  in the file according to some uniform structure and is referred to as fixed-formatted 
  input. The command for reading a file using fixed-formatted input is:</p>
<p class="InputCode">infile using <span class="italic">filename</span></p>
<p>where <span class="italic"><span class="InputCode">filename</span></span> is 
  the name of the file that contains what Stata calls a dictionary. A dictionary 
  describes the tables of the file and will allow reading files in fixed or 
  free format. The data may be in the same file as the dictionary or in another 
  file. The following example instructs Stata to read the dictionary contained 
  in the file <span class="InputCode">~/rawdata/cps.dct</span>:</p>
<p class="InputCode">infile using ~/rawdata/cps.dct</p>
<p>The general syntax for the tables of the dictionary file is:</p>
<p class="InputCode">dictionary [using <span class="italic">datafile</span>] { 
  varlist }</p>
<p>where <span class="italic"><span class="InputCode">datafile</span></span> is 
  the name of the file containing the data. If <span class="InputCode">using <span class="italic">datafile</span></span> 
  is not specified, the data are assumed to start at the record following the 
  close brace ( <span class="InputCode">}</span> ). The varlist contains both 
  the variables and any information needed to read them.</p>
<p><span class="InputCode">_lines(n)</span> specifies that each observation has 
  <span class="InputCode">n</span> lines. Stata doesn't care where this statement 
  appears, but good style suggests it should be before the variables.</p>
<p>Other options go with a variable. <span class="InputCode">_line(x) _column(y)</span> 
  tells Stata to read the variable from line <span class="InputCode">x</span> 
  and column <span class="InputCode">y</span> of the current observation. If you 
  do not specify this, Stata will simply proceed from wherever finished reading 
  the last variable. You can also specify a format such as <span class="InputCode">int</span>, 
  <span class="InputCode">byte</span>, or <span class="InputCode">str</span>. 
  Finally you can specify how many characters to read into the variable using 
  <span class="InputCode">%NumberType</span> where <span class="InputCode">Number</span> 
  is the number of characters to read and <span class="InputCode">Type</span> 
  is the type of variable (you'll almost always use <span class="InputCode">f</span> 
  for numbers or <span class="InputCode">s</span> for strings). This must follow 
  the variable name, all the other options come before it.</p>
<p>In the following example, the data and dictionary are contained in the same 
  file:</p>
<p class="InputCode">dictionary<br/>
  { <br/>
<span class="indent3">_lines(1)</span><br/>
<span class="indent3">_line(1) _column(1) int age %2f</span><br/>
<span class="indent3">_line(1) _column(4) float weight %5f</span><br/>
  }<br/>
  12 100.5<br/>
  13 110.0<br/>
  15 130.5</p>
<p>All of the formatting information is optional. In many cases, Stata's default 
  action (read variables from left to right and top to bottom, with spaces or 
  commas separatng them) works just fine. The dictionary</p>
<p class="InputCode">dictionary<br/>
  { <br/>
<span class="indent3">age</span><br/>
<span class="indent3">weight</span><br/>
  }<br/>
  12 100.5<br/>
  13 110.0<br/>
  15 130.5</p>
<p>will give the same results as the previous one except that <span class="InputCode">age</span> 
  will be read as a <span class="InputCode">float</span>, which takes a bit more 
  memory.</p>
<p>In the following example, the data and dictionary are contained in different 
  files:</p>
<p class="InputCode">dictionary using data.dat {<br/>
<span class="indent3">name 20s</span><br/>
<span class="indent3">weight 5f</span><br/>
  }</p>
<p>This is just a simple overview of reading formatted data. Refer to the Stata 
  Reference Manual for a complete discussion of reading formatted data.</p>
<h3><a id="RecordLengthandDictionaries" name="RecordLengthandDictionaries"></a>Record Length and Dictionaries</h3>
<p>Sometimes Stata has trouble reading data that has been written out from other 
  software. For instance, SPSS writes out data without inserting carriage returns 
  at the end of each line. Stata is then unable to accurately determine record 
  length. To solve this problem, you can use the <span class="InputCode">_lrecl(n)</span> 
  command within the dictionary. For example,</p>
<p class="InputCode">dictionary using data.dat {<br/>
<span class="indent3">_lrecl(90)</span><br/>
<span class="indent3">name 20s</span><br/>
<span class="indent3">weight 5f </span><br/>
  }</p>
<p>In this case, the <span class="InputCode">_lrecl(90)</span> command specifies 
  that the length of each record is 90.</p>
<h3><a id="ReadingCompressedData" name="ReadingCompressedData"></a>Reading Compressed Data</h3>
<p>You can read compressed ASCII data into Stata by writing the data to a named 
  pipe and then using the named pipe as the filename you specify on the INFILE 
  command. For example, to read the compressed file, <span class="InputCode">afqt48.dat.Z</span>, 
  into an interactive Stata session, follow the steps below:</p>
<ol>
<li>
<p>From Stata, send the <span class="InputCode">mknod</span> command to the 
      operating system (by preceding the Stata command with <span class="InputCode">!</span>) 
      to create a named pipe:</p>
<p class="InputCode"> !mknod mypipe.pip p</p>
</li>
<li>
<p> Send the <span class="InputCode">zcat</span> command to the operating 
      system to write the data to the named pipe in the background:</p>
<p class="InputCode"> !zcat afqt48.dat &gt; mypipe.pip &amp;</p>
</li>
<li>
<p>Refer to the named pipe in your INFILE command:</p>
<p class="InputCode"> infile wt sed fed ge22 black using mypipe.pip</p>
</li>
<li>
<p>Send a command to the operating system to remove the pipe:</p>
<p class="InputCode"> !rm mypipe.pip</p>
</li>
</ol>
<p>This method will not work in Stata programs run in noninteractive mode. Instead, 
  you must put the two Linux commands in a script. To do this, create a file with 
  lines similar to the ones below:</p>
<p class="InputCode">#!/bin/sh<br/>
  fname=$1<br/>
  rm -f mypipe.pip<br/>
  mknod mypipe.pip p<br/>
  zcat $fname &gt; mypipe.pip &amp;</p>
<p>To make the file a script (an executable file), use the <span class="InputCode">chmod</span> 
  command. For instance, if the above file is called <span class="InputCode">myprog</span>, 
  type the following at the Linux prompt:</p>
<p class="InputCode">chmod +x myprog</p>
<p>Your Stata <span class="InputCode">.do</span> file then needs to include the 
  following:</p>
<p class="InputCode">!myprog afqt49.dat.Z &gt;&amp; /dev/null &lt; /dev/null<br/>
  infile wt sed fed ge22 black using mypipe.pip<br/>
  !rm mypipe.pip</p>
<p>Stata shells out to <span class="InputCode">myprog</span>, passing it the name 
  of the file which it wishes to uncompress. The ampersand at the end of the <span class="InputCode">zcat</span> 
  command in <span class="InputCode">myprog</span> directs Linux to put that process 
  in the background, allowing <span class="InputCode">myprog</span> to return 
  immediately to Stata. While the <span class="InputCode">zcat</span> command 
  uncompresses <span class="InputCode">afqt48.dat.Z</span> and sends the uncompressed 
  data to the pipe (<span class="InputCode">mypipe.pip</span>) in the background, 
  Stata's <span class="InputCode">infile</span> command reads the uncompressed 
  data from that pipe.</p>
<p>This method will allow you to read compressed ASCII data, but you cannot use 
  a Stata data set without uncompressing it.</p>
<h2><a id="SavingandUsingStataSystemFiles" name="SavingandUsingStataSystemFiles"></a>Saving and Using Stata System 
  Files</h2>
<p>If you plan to use a data set repeatedly with Stata, it will be more convenient 
  to save the data as a Stata system file. System files are self-documenting and 
  reflect transformations made to the data. The SAVE command stores the data currently 
  read into Stata. For example,</p>
<p class="InputCode">. save census</p>
<p>creates a Stata system file with the name <span class="InputCode">census.dta</span>. 
  Following is an example program that reads in raw data and creates a Stata system 
  file:</p>
<p class="InputCode">infile vote count race polview pold1-pold6 using~/diss/elect.dat<br/>
  save elect</p>
<p>The <span class="InputCode">use</span> command loads a Stata system file previously 
  saved. For example,</p>
<p class="InputCode">. use elect</p>
<h2> <a id="ManagingMemory" name="ManagingMemory"></a>Managing Memory</h2>
<p>Stata stores data in memory (RAM). As a result, Stata runs quickly, but the 
  amount of data you can analyze is limited by the amount of memory on your computer. 
  It is also a memory hog. Because of this, it is very important to adhere to 
  the following restrictions with Stata:</p>
<ul>
<li> Use caution when requesting memory from Stata. </li>
<li>Run large batch jobs using Condor. Refer to <a href="https://ssc.wisc.edu/sscc/pubs/7-1.htm">An Introduction 
    to Condor</a> for details, but it's just a matter of replacing the <span class="InputCode">stata</span> 
    command with <span class="InputCode">condor_stata</span> on KITE.</li>
<li>Never run more than one job at a time. If you submit a job and then realize 
    you've made a mistake, kill the job before submitting another. Refer to <a href="https://ssc.wisc.edu/sscc/pubs/linstat_jobs.htm#KillingaJob">Managing Jobs on Linstat</a> for a discussion on how to kill jobs.</li>
<li>If you need to run Stata interactively HAL is ideal for large jobs, but 
    use NORMAN or KITE for smaller ones.</li>
</ul>
<h3>Requesting Additional Memory</h3>
<p>By default, Stata allocates ten megabytes of memory to its data areas when 
  it is invoked. Use the -m command line switch to request additional memory. 
  For example, to request 200 megabytes of memory, type:</p>
<p class="InputCode">&gt; stata -m200</p>
<p>Alternatively, you can request additional memory once you are in interactive 
  Stata with the <span class="InputCode">set memory</span> command. For example, 
  to request 100 megabytes of memory:</p>
<p class="InputCode">. set memory 100m</p>
<p>Determining how much additional memory you may need is often a trial-and-error 
  exercise. Start by specifying 25mb and doubling that amount until your job will 
  run. Specify no more than 350 mb. If your job still won't run, contact the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">Help Desk</a> for assistance.</p>
<p>The only restriction with the SET MEMORY command is that whenever you use it, 
  there cannot be any data in memory already. If you have a data set in memory, 
  you need to save it, clear memory, reset the total, and then use it again:</p>
<p class="InputCode">. save dogs, replace<br/>
  file dogs.dta saved</p>
<p class="InputCode">. clear</p>
<p class="InputCode">. set memory 10m<br/>
  (10240k)</p>
<p class="InputCode">. use dogs</p>
<p>Following are a few hints to follow which help conserve memory:</p>
<ul>
<li> When inputting data for the first time, specify appropriate storage types 
    (refer to the <span class="InputCode">input</span> and <span class="InputCode">infile</span> 
    commands in the Stata Reference Manual for details about storage types).</li>
<li> When working with existing data, have Stata store the data as compactly 
    as possible by using Stata's <span class="InputCode">compress</span> command.</li>
<li> Store short, repeated strings as numeric variables with value labels (refer 
    to the <span class="InputCode">labels</span> and <span class="InputCode">encode</span> 
    commands in the Stata Reference Manual).</li>
<li> Using the <span class="InputCode">discard</span> command will clear all 
    automatically loaded programs from memory. This includes information Stata 
    has stored about a previously fit model.</li>
</ul>
<h2> <a id="ManagaingtmpSpacewithStata" name="ManagaingtmpSpacewithStata"></a>Managing /tmp Space with Stata</h2>
<p>By default Stata uses <span class="MenuOutput">/tmp</span> for writing scratch 
  files. When these directories are full, you may not be able to execute commands 
  in Stata. If this happens, it is possible to redirect these scratch files to 
  another location by exiting Stata and setting the TMPDIR environment variable 
  with the following Linux command:</p>
<p class="InputCode">&gt; setenv TMPDIR directory </p>
<p>where directory is some alternative directory where you can write. Refer to<a href="https://www.ssc.wisc.edu/sscc/pubs/30.pdf"> 
  SSCC Pub. #30: How to Avoid Running Out of Disk Space</a> for a complete discussion 
  on <span class="MenuOutput">/tmp</span> disks. </p>
<h2><a id="GettingGRAPHOutput" name="GettingGRAPHOutput"></a>Getting GRAPH Output </h2>
<p>You can display high resolution graphs only when using the interactive windowed 
  GUI mode of Stata (invoked with the xstata command). If you are using the interactive 
  console mode of Stata (invoked with the stata command), you can either use the 
  <span class="InputCode"> plot</span> command to get two-way scatter plots or 
  have the <span class="InputCode">graph</span> command write the graph directly 
  to a file that you then print. </p>
<h3>Displaying GRAPH Output in the Interactive Windowed GUI Mode </h3>
<p>High resolution graphics may be generated in GUI Stata with the <span class="InputCode">graph</span> 
  command. For example:</p>
<p class="InputCode">. graph twoway scatter y x</p>
<p>generates a scatter plot of the variables Y by X in a new window on your screen.</p>
<p>You can then type <span class="InputCode">print</span> to print a copy of the 
  graph on the printer in the fourth floor computer lab (Soc. Sci. 4218). Alternatively, 
  you can choose <span class="MenuOutput">Print</span> from the <span class="MenuOutput">File</span> 
  menu. If you want to print the graph on a different printer, you will need to 
  save the graph first and then print it from Linux with the <span class="InputCode">lpr</span> 
  command. This is described below.</p>
<h3>Saving GRAPH Output</h3>
<p>You can save <span class="InputCode">graph</span> output from any of Stata's 
  three different interfaces. This is useful for two reasons:</p>
<ol>
<li>If you are using the interactive console mode, Stata can not display the 
    graphs you request with the <span class="InputCode">graph</span> command. 
    But, it can save the graphs to a file that can then be printed.</li>
<li>Stata can convert saved graphs to Postscript and encapsulated Postscript 
    files that can then be inserted in documents.</li>
</ol>
<p>To save a copy of a graph, use the <span class="InputCode">saving</span> <span class="italic">option</span>. 
  For example:</p>
<p class="InputCode">. graph twoway scatter y x, saving(mypic)</p>
<p>This creates a file called <span class="InputCode">mypic.gph</span> containing 
  the graph. </p>
<p>Note that in interactive console mode, nothing is displayed except Stata's 
  prompt indicating it is ready for your next command.</p>
<p>Saved graphs can be printed from Linux using the <span class="InputCode">lpr</span> 
  command. For example:</p>
<p class="InputCode"> &gt; lpr -Puser7single mypic.gph</p>
<h2> <a id="AccessingPrograms" name="AccessingPrograms"></a>Accessing Programs (ado-files) in the Stata 
  Technical Bulletin</h2>
<p>The <span class="italic">Stata Technical Bulletin</span> (STB) was a printed 
  journal which was published roughly every other month. It contains articles 
  written by Stata Corporation as well as Stata users. It has been replaced by 
  the <span class="italic">Stata Journal</span>, which has less emphasis on technical 
  issues and more on techniques. We have a set of these publications in the CDE 
  Print Library in 4457 Social Science.</p>
<p>Some STB articles include software enhancements to Stata called ado-files which 
  can be installed into Stata. These ado-files are available for download from 
  <a href="http://www.stata.com">Stata's web site</a>. Software additions included 
  in the STBs come in two flavors: official updates and user-written additions.</p>
<h3>Official Updates</h3>
<p>SSCC staff incorporate official updates into Stata as they become available. 
  You can use the <span class="InputCode">update query</span> command to verify 
  that Stata is using the latest available updates:</p>
<p class="InputCode">. update query<br/>
<span class="MenuOutput">(contacting http://www.stata.com)</span></p>
<p class="MenuOutput">Stata executable<br/>
  folder: /usr/local/stata/<br/>
  name of file: stata-se<br/>
  currently installed: 30 Jan 2004<br/>
  latest available: 30 Jan 2004</p>
<p class="MenuOutput">Ado-file updates<br/>
  folder: /usr/local/stata/ado/updates/<br/>
  names of files: (various)<br/>
  currently installed: 30 Jan 2004<br/>
  latest available: 30 Jan 2004<br/>
</p>
<p class="MenuOutput">Recommendation<br/>
  Do nothing; all files up-to-date.</p>
<p>The <span class="InputCode">update query</span> command makes a connection 
  to Stata's web site to check for all available official updates. If you discover 
  that we have not installed all the official updates available, send email to 
  the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">Help Desk</a> 
  and we will update the software.</p>
<p>Note that we download official updates to Stata about every two months. To 
  get a list of Stata updates, type the following command:</p>
<p class="InputCode">.help whatsnew</p>
<h3>User-written Additions</h3>
<p>User-written additions to Stata published in the STBs are available from Stata's 
  web site for download just as are the official updates. Unlike the official 
  updates though, you need to request them individually (one at a time). For this 
  reason and also because user-written additions do not undergo quality assurance 
  testing like official updates do, SSCC staff do not update Stata with user-written 
  additions. If you want a user-written addition, you need to download the addition 
  yourself to your own directory. Instructions are provided in 
  <a href="https://www.ssc.wisc.edu/sscc/pubs/4-16.htm">Finding and Installing User-Written Stata Programs</a>.</p>
<h2> <a id="StataDocumentation" name="StataDocumentation"></a>Stata Documentation</h2>
<p>The following Stata manuals are available for short term loan from the CDE 
  Print Library in 4457 Social Science:</p>
<ul>
<li><span class="italic">Stata Reference Manual: Version 9 </span> (four volumes)</li>
<span class="italic">
<li>Stata User's Guide: Version 9 </li>
<li>Getting Started with Stata 9 for Linux</li>
<li>Stata Graphics Manual Version 9 </li>
</span>
</ul>
<p><a href="http://www.stata.com">Stata's web site</a> also has a lot of information 
  including a support section which has a searchable database for finding answers 
  to common questions.</p>
<p>To subscribe to  Stata's list serv, visit <a href="http://www.stattransfer.com/lists.html">Stat/Transfer's
     list subscription service</a>. This web site provides a subscription service
      to all the major statistical software list servers including Stata. The
     Stata  list serv provides a depth of information and support that is essentially
      impossible for staff at any one institution (like ours) to duplicate. </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Limiting Access to a Web Page</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>The Internet is a wonderful way to disseminate information broadly, but every 
  now and then it is a bit too broad. This document will discuss how to limit 
  access to a web page on the SSCC's web server.</p>
<p>Please note that this process requires you to log into one of the SSCC's Linux servers. If you're not familiar with Linux, please contact the <a href="https://ssc.wisc.edu/sscc/helpdesk.htm">SSCC Help Desk</a> and we'll be happy to do it for you.</p>
<p>Security is actually set for directories, not 
  individual web pages. Of course you could set up a separate directory for each 
  page if you so desired. When the web server receives a request to view a web 
  page, the server will first see if there is a file called <span class="InputCode">.htaccess</span> 
  in the same directory. If there is, this file determines what kind of access 
  the server will give.</p>
<h2><a id="SettingupaSingleUsernameandPassword" name="SettingupaSingleUsernameandPassword"></a>Setting up a Single Username 
  and Password</h2>
<p>In many cases it will be enough to have a single user name and password that 
  many people can share. For example, you could give an entire class one user 
  name and password to access the course web site.</p>
<h3>Creating the .htaccess File</h3>
<p> The first step is to create the <span class="InputCode">.htaccess</span> file. 
  It must contain the following text:</p>
<p class="InputCode">AuthUserFile {<span class="Parameter">full path name to
		page(s) to be protected</span>}/.htpasswd<br/>
  AuthName "{<span class="Parameter">description of the protected pages</span>}"<br/>
  AuthType Basic<br/>&lt;Limit GET POST&gt;<br/>
  require valid-user<br/>
  &lt;/Limit&gt;</p>
<p>You can <a href="https://ssc.wisc.edu/sscc/pubs/files/htaccess.txt">download a template</a> of this<span class="InputCode">.htaccess 
  </span>file (if your browser opens it rather than saving it when you click on 
  the link, right click instead and select <span class="MenuOutput">Save Target 
  as </span>or<span class="MenuOutput"> Save Link as</span>). Place this template 
  in the directory you want to protect and then rename it<span class="InputCode"> 
  .htaccess</span>. Open it in your favorite editor and replace everything in 
  curly brackets {} with what applies to your site. For example, if I wanted to 
  protect the pages for an Econ 101 class that were in a directory called <span class="InputCode">econ101</span> 
  in my web site, the <span class="InputCode">.htaccess</span> file would look 
  like this:</p>
<p class="InputCode">AuthUserFile /home/r/rdimond/PUBLIC_web/econ101/.htpasswd<br/>
  AuthName "Econ 101 web site"<br/>
  AuthType Basic<br/>&lt;Limit GET POST&gt;<br/>
  require valid-user<br/>
  &lt;/Limit&gt;</p>
<p>(Note that if you copy this example you need to change <span class="InputCode">/home/r/rdimond</span> to <span class="InputCode">/home/</span><span class="Parameter">{first letter of your username}</span><span class="InputCode">/</span><span class="Parameter">{your username}</span>.)</p>
<p>Another example, if I wanted to protect the pages for an Soc 101 class that 
  were in a directory called <span class="InputCode">soc101</span> in Sociology's 
  web site, the <span class="InputCode">.htaccess</span> file would look like 
  this:</p>
<p class="InputCode">AuthUserFile /usr/global/web/soc/class/soc101/.htpasswd<br/>
  AuthName "Soc 101 web site"<br/>
  AuthType Basic<br/>&lt;Limit GET POST&gt;<br/>
  require valid-user<br/>
  &lt;/Limit&gt;</p>
<h3>Setting the Username and Password</h3>
<p>Once the <span class="InputCode">.htaccess</span> file is created, you need
		 to set the username and password. Log in to Linux (if you haven't already)
		and	make the	current directory is the one you want to protect.
		Then type</p>
<p class="InputCode"> /usr/bin/htpasswd -c .htpasswd <span class="Parameter">username</span></p>
<p>Where <span class="Parameter"><span class="InputCode">username</span></span> 
  should be replaced by the username you want to give the users of the web page. 
  You will be prompted to enter and confirm a password. This will create a file 
  called <span class="InputCode">.htpasswd</span>. The <span class="InputCode">.htaccess</span> 
  file tells the server to only allow people to view the pages in this directory 
  if they enter the username and password combination that appears in <span class="InputCode">.htpasswd</span>.</p>
<p>Note that if you open <span class="InputCode">.htpasswd</span>, it lists the 
  valid usernames, but the passwords are encrypted. If you forget the password 
  you chose you will create it again.</p>
<h2><a id="CreatingMultipleUsernames" name="CreatingMultipleUsernames"></a>Creating Multiple Usernames</h2>
<p>If you want more than one username, there is a simple program that automates
	 the entire process. Of course the price of automation is lack of flexibility;
	 in particular you cannot choose the usernames and passwords. In the directory
	 you want protected simply type</p>
<p class="InputCode">mkhtpass n</p>
<p>where <span class="InputCode">n </span>is the number of separate usernames 
  you desire. The program will then prompt you to enter a description of the site. 
  It will create the <span class="InputCode">.htaccess</span> and<span class="InputCode"> 
  .htpasswd</span> files, along with a file called <span class="InputCode">password.txt</span>. 
  This contains the usernames and passwords in plain text (so you will want to 
  delete it or move it to a non-public location). Note that the usernames are 
  simply numbers: 00001, 00002 etc., and the passwords are completely random.</p>
<h2 class="PageBreak"><a id="LimitingAccessbyDomain" name="LimitingAccessbyDomain"></a>Limiting Access by 
  Domain</h2>
<p>One easy way to limit access is by domain. For example, you could allow access 
  only to those who are currently in the <span class="InputCode">wisc.edu</span> 
  domain. Thus anyone using a University computer or dialing in to DoIT's modem 
  pool would be able to access your web pages. Keep in mind that anyone using 
  a different Internet Service Provider would not be able to access them, so this 
  may not be ideal for a course web site. As before you need to have a <span class="InputCode">.htaccess</span> 
  file, but this time it just needs to contain:</p>
<p class="InputCode"> allow from wisc.edu<br/>
  deny from all</p>
<p>No <span class="InputCode">.htpasswd</span> file is needed. You could replace 
  <span class="InputCode">wisc.edu</span> with any other domain (even <span class="InputCode">ssc.wisc.edu</span>), 
  but keep in mind that this kind of restriction depends on where the user is, 
  not who they are (for example someone dialing in to DoIT's modem pool from home 
  is not in the <span class="InputCode">ssc.wisc.edu</span> domain even if they 
  have an SSCC account). Here is a <a href="https://ssc.wisc.edu/sscc/pubs/files/htaccess2.txt">template</a> 
  for this kind of access.</p>
<h2><a id="Caveats" name="Caveats"></a>Caveats</h2>
<p>The steps described here are simple and fairly effective, but not state of 
  the art. In particular, the user names and passwords are sent in plain text, 
  and in principle could be intercepted and read. Thus it would be wise to use 
  a different user name and password for web pages than for your SSCC account 
  or any other account. In addition, this would not be appropriate for highly 
  sensitive data, which probably does not belong on the web, period.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Forwarding Your Email to Another Address</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>When you were given your SSCC account, an email address was automatically created 
  for you (<span class="Parameter">username</span>@ssc.wisc.edu). 
  However, you can easily instruct our mail server to automatically forward your 
  SSCC mail to any address you choose. 	Just go to our <a href="https://www.ssc.wisc.edu/sscc_jsp/email/forward.jsp">Email
		Forwarding</a> page.</p>
<p>All mail is scanned before being forwarded, and viruses and obvious spam will be discarded. If your SSCC email is being forwarded at the time your SSCC account is closed, we will continue to forward your mail for one year.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Running OpenOffice on Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>OpenOffice is an open source alternative to Microsoft Office that runs on Linux. 
  This includes programs similar to Word, Excel, PowerPoint, and Front Page. Since 
  SSCC staff have little experience or expertise with this program, we can offer 
  only minimal support (for details about what minimal support means, please see 
  our <a href="https://ssc.wisc.edu/sscc/policies/softsup.htm">Software Support Policy</a>). Documentation 
  is available on the <a href="http://www.openoffice.org">OpenOffice web site</a>.</p>
<p>OpenOffice will attempt to read documents created with Microsoft Office, and 
  with simple files it may be successful. You can convert documents by simply 
  opening them, or convert whole dirctories at a time using the <span class="MenuOutput">File 
  Converter</span> under <span class="MenuOutput">AutoPilot</span>. We do not 
  recommend trying to switch back and forth between Office and OpenOffice, because 
  fixing the problems created by the conversion process may take a great deal 
  of time. However, OpenOffice does provide a way for dedicated Linux users to 
  run Office style applications without having to use any Microsoft products.</p>
<h2>Running OpenOffice</h2>
<p>Before you can use OpenOffice, you must have X-Win32 running (or another program
   that displays X windows). If you need help using X-Win32, please see <a href="https://www.ssc.wisc.edu/sscc/pubs/5-2.htm">Connecting
  to SSCC Linux Computers using X-Win32</a>.</p>
<p>Start OpenOffice by typing:</p>
<p class="InputCode">&gt; ooffice</p>
<p>If you want to be able to use your Linux session at the same time, add an
  ampersand (<span class="InputCode">&amp;</span>) to the end of the command
  so OpenOffice runs in the background. Once OpenOffice starts, you can then
  use whatever component you need by clicking <span class="MenuOutput">File</span>, <span class="MenuOutput">New</span> 
  and then creating a new spreadsheet, presentation, etc. </p>
<p>In general you'll find that OpenOffice is is very similar to Microsoft Office, 
  and if you're comfortable with Office you'll feel right at home.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Printing from Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>The SSCC's Linux servers all have access to the SSCC's network printers. This
		 allows all SSCC users to print to 2470, 3218, and 4218 Social
  Science. These rooms are open when a student lab monitor is on duty Monday
  - Friday, 8:00 a.m. - 7:30 p.m. In
  order to get into these rooms after hours, you will need a PIN to use along
  with your UW ID. You can <a href="https://www.ssc.wisc.edu/sscc_jsp/account/lab.jsp">request
		a PIN</a> online. Note
		 that you cannot print to personal printers from Linux.</p>
<p>SSCC printing costs are  substantial, to both the SSCC's budget and the environment.
  We do not charge SSCC members for printing, but we do track printer usage and
  report it to our member agencies. This then becomes one of the factors in determining
  how much each agency contribues to the SSCC budget.</p>
<p> We urge you to look for ways to conserve on printing whenever possible. This 
  would include printing double-sided, printing more than one page per sheet if 
  possible, and only printing what you really need. Instructions for doing all 
  of these are included in this article.</p>
<h2><a id="TheenscriptCommand" name="TheenscriptCommand"></a>The <span class="InputCode">enscript</span> 
  Command</h2>
<p>You can submit jobs to be printed using the <span class="InputCode">enscript</span> 
  command. This replaces the <span class="InputCode">lpr</span> command which 
  often does not work with the newer printers. The basic syntax is:</p>
<p class="InputCode">enscript <span class="Parameter">options</span> <span class="Parameter">file</span></p>
<p>Here <span class="Parameter"><span class="InputCode">file</span></span> should 
  be replaced by the name of the file you want to print. It is possible to use 
  wildcards, but do not do so unless you are certain you will only print the files 
  you need.</p>
<h2><a id="PrintQueues" name="PrintQueues"></a>Print Queues</h2>
<p>One of the most important options is the print queue. Each printer has two 
  queues (one for double sided printing and one for single), and you select the 
  one you want to use with the <span class="InputCode">-P</span> option followed 
  by the queue name. Always use the double-sided queues if at all possible. If 
  you do not specify a printer it will go to the default, which is <span class="InputCode">user4double</span>. 
  The following table lists the available print queues:</p>
<p></p>
<table align="center" border="1" cellpadding="3" width="85%">
<tr>
<th scope="row">Output Location</th>
<th scope="row">Queue Name</th>
<th scope="row">Notes</th>
</tr>
<tr>
<td rowspan="2">Computer Lab (4218)</td>
<td class="InputCode">user4double (u4)</td>
<td>Prints on both sides of the paper. Self-service printer. <b>This is the 
	  default printer if no queue is specified.</b></td>
</tr>
<tr>
<td class="InputCode">user4single (u4s)</td>
<td>Prints on one side of the paper only. Self-service printer. </td>
</tr>
<tr>
<td rowspan="2">Computer Lab (3218)</td>
<td class="InputCode">user3double</td>
<td>Prints on both sides of the paper. Self-service printer.</td>
</tr>
<tr>
<td class="InputCode">user3single </td>
<td>Prints on one side of the paper only. Self-service printer.</td>
</tr>
<tr>
<td rowspan="2">Computer Lab (2470)</td>
<td class="InputCode">user2double (u2)</td>
<td>Prints on both sides of the paper. Self-service printer.</td>
</tr>
<tr>
<td class="InputCode">user2single (u2s)</td>
<td>Prints on one side of the paper only. Self-service printer.</td>
</tr>
</table>
<p>The names in parentheses are shortcut aliases for the actual queue names--you 
  may find them convenient.</p>
<p class="InputCode">enscript <span class="Parameter">file</span></p>
<p>will print your file double sided in the 4218, while</p>
<p class="InputCode">enscript -P u2s <span class="Parameter">file</span></p>
<p>will print your file in 2470, and on just one side of each page.</p>
<p>Note that the printers in 4218 are the newest, fastest, and least likely to 
  have problems with large or complex files (like articles in PDF format).</p>
<h2><a id="PrintingOptions" name="PrintingOptions"></a>Printing Options</h2>
<p>Many other options allow you to control the way your document will be printed. 
  One we ask that you use as often as possible is <span class="InputCode">-U<span class="Parameter">x</span></span> 
  which allows you to print <span class="Parameter"><span class="InputCode">x</span></span> 
  pages per side of the paper. Thus</p>
<p class="InputCode">enscript -U2 -P u4 <span class="Parameter">file</span></p>
<p>will print four pages of your file per sheet of paper (two on the front and 
  two on the back). Of course the printing will be smaller, but this may be acceptable 
  for codebooks, logs, or other long documents. </p>
<p> You can print your file in landscape format with the <span class="InputCode">-r</span> 
  option, e.g.</p>
<p class="InputCode">enscript -r <span class="Parameter">file</span></p>
<p>Think of this as rotating your file 90 degrees, hence the <span class="InputCode">-r</span>. 
  Note that by default SAS assumes you are printing in portrait format. If you 
  include the following line in your SAS program any output after that point will 
  be formatted nicely for landscape printing:</p>
<p class="InputCode">OPTIONS LINESIZE=122 PAGESIZE=47;</p>
<p>You can also specify which pages you want printed with the <span class="InputCode">-a</span> 
  option, The baisc syntax is <span class="InputCode">-a <span class="Parameter">x</span>-<span class="Parameter">y</span></span>, 
  where <span class="Parameter"><span class="InputCode">x</span></span> specifies 
  the starting page and <span class="Parameter"><span class="InputCode">y</span></span> 
  the ending page. A single number will print just that page. If you give a single 
  number with a dash, <span class="InputCode">enscript</span> will treat the missing 
  number as either the beginning or the end of the file. Thus</p>
<p class="InputCode">enscript -a 3-5 <span class="Parameter">file</span></p>
<p>will print pages three through five,</p>
<p class="InputCode">enscript -a 4 <span class="Parameter">file</span></p>
<p>will print just page four,</p>
<p class="InputCode">enscript -4 <span class="Parameter">file</span></p>
<p>will print from the beginning to page four, and </p>
<p class="InputCode">enscript 4- <span class="Parameter">file</span> </p>
<p>will print from page four to the end.</p>
<p>There are many more options. Type <span class="InputCode">man enscript</span> 
  to see them all.</p>
<h2><a id="PrintingPostscriptFiles" name="PrintingPostscriptFiles"></a>Printing Postscript Files</h2>
<p>The <span class="InputCode">enscript</span> command converts files to postscript 
  format before printing, which normally works quite well. However if a file is 
  already in postscript format, the output will be useless. Normally postscript 
  files end with the extension <span class="InputCode">.ps</span>. To print postscript 
  files use <span class="InputCode">lpr</span>. The syntax for choosing a printer 
  with <span class="InputCode">lpr</span> is identical to <span class="InputCode">enscript</span>. 
  For example:</p>
<p class="InputCode">lpr -P u2d <span class="Parameter">postscriptfile.ps</span></p>
<p>If you need to use other options please type <span class="InputCode">man lpr</span>.</p>
<p>The <span class="InputCode">lpr</span> command does not allow for printing 
  multiple pages per sheet. However you can pipe to output of a postscript command 
  to <span class="InputCode">lpr</span>:</p>
<p class="InputCode">psnup -n 2 <span class="Parameter">postscriptfile.ps</span> 
  | lpr</p>
<p>This will print <span class="Parameter"><span class="InputCode">postscriptfile.ps</span></span> 
  to the 4218 printers with two pages per sheet.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Running SAS on Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>SAS is a comprehensive program used by SSCC researchers for data management
  and statistical analysis. It can be run in both 
  a Windows-like or batch environment on Linux. SSCC has version 9 of SAS installed
  on Linux, Windows Terminal Server (Winstat1-3), and the lab PCs in Social Science
  3218 and 4218. This article explains how to run SAS jobs on Linux. For
  an introduction to writing SAS programs to work with data, see <a href="https://www.ssc.wisc.edu/sscc/pubs/4-18.htm">An Introduction
  to SAS Data Sets</a>. </p>
<h2> Invoking SAS</h2>
<p>SAS can be invoked simply by typing the word "sas" at the Linux prompt. 
  To take advantage of the many options available with the command, use the general 
  form of the SAS command as follows:</p>
<p> <b>sas</b> <i>filename -option1...-optionn</i></p>
<p>where <i>filename</i> gives the name of the file containing the SAS program
   to be executed. Specifying a filename on the SAS command invokes SAS in batch
  mode.</p>
<p><i>options</i> specifies a SAS system option to configure your session. Some 
  options include:</p>
<p><b>-linesize</b> <i>n</i> specifies the line size of the SAS output. The range
   of linesize is 64 to 256. The default is 132 for batch mode.</p>
<p><b>-obs</b> <i>n</i> specifies the last observation from a data set that SAS 
  is to read.</p>
<p><b>-pagesize</b> <i>n</i> specifies the number of lines that can be placed
  in a page of SAS output. Values can range from 15 to 32,767. The default is
  60.</p>
<p><b>-memsize</b> <i>n</i> specifies the maximum amount of memory a procedure
   call may use. The default is 64mb. </p>
<p><b>-log</b> <i>file</i> specifies that SAS write the log of the SAS session 
  to "file". By default, the SAS log is written to the file <i>filename</i>.log 
  where <i>filename</i> is the name of the file containing the SAS commands.</p>
<p><b>-print</b> <i>file</i> specifies that SAS write the SAS output to "file". 
  By default, the SAS output is written to the file <i>filename</i>.lst where 
  <i>filename</i> is the name of the file containing the SAS commands.</p>
<p> Example:</p>
<p class="InputCode"> sas test1 -obs 0 -noreplace</p>
<p>This command executes the program test1.sas, the file containing the SAS commands, 
  with the system options OBS and NOREPLACE. These two options used together are 
  a good way of checking to make sure your syntax is correct in your file containing 
  the SAS statements. It causes SAS to execute each DATA and PROC step in the 
  program without actually reading any of the data.</p>
<h2> Modes of Execution</h2>
<p> This section describes
  how to invoke SAS in the Interactive SAS Windowing Environment and batch modes.</p>
<h3>Interactive SAS Windowing Environment Mode</h3>
<p>SAS can only be accessed in this mode from an X-display such as a Windows-based
  Terminal or a PC running software like X-Win32. </p>
<p>Typing <span class="InputCode">sas</span> at the Linux prompt brings up SAS 
  in the Windowing Environment mode. The SAS Windowing Environment is an interactive 
  windowing system that enables you to write and modify your programs, run them, 
  and monitor the output. You can use menus or type commands within the SAS Windowing 
  Environment. Choose <b>File: Exit</b> from the menu to terminate the SAS Windowing 
  Environment and return control to the operating system.</p>
<p>Note: If after typing <span class="InputCode">sas</span> on the command line,
  you see a 1? prompt on your screen, you are NOT in the SAS Windowing Environment
   but in old-style interactive line mode. Typing endsas; at the 1? prompt will
  take you back to the Linux prompt. The SAS Windowing Environment is only available
  from  X-displays.</p>
<h3>Batch Mode</h3>
<p>To invoke SAS in batch mode, enter the SAS command followed by the
   name of the file containing the SAS program to be executed. For example, suppose
   you have stored your SAS statements in a file named pums90.sas. To invoke
  SAS and execute the program you would type the
  following:</p>
<p class="InputCode"> sas pums90 </p>
<p>Note that you do not have to include the file extension in the filename when 
  the file extension is .sas. SAS uses .sas by default.</p>
<p>You do not get another Linux prompt until SAS finishes executing the program.
   When SAS finishes and you get the Linux prompt, two new files are in your
  working  directory which contain the SAS output. pums90.log contains the log
  of the SAS session and pums90.lst contains the output from the SAS commands
  in pums90.sas.. </p>
<p>Note: If you have stored your SAS statements in a file which has some file
   extension other than .sas, the log and lst files that are created will have
   filenames that include the extension. For example, if your command file was
   named pums90.ext, the log file created would be pums90.ext.log and the output
  file would be pums90.ext.lst </p>
<h4> Routing Output</h4>
<p>In the example just shown, SAS created two files: one to hold the SAS output 
  and the other one for a log of session messages. If you want to direct your 
  output and log to other files, use the PRINT and LOG system options. For example,</p>
<p class="InputCode"> sas pums90 -print report -log report.log</p>
<p>The output goes to file report and the log goes to file report.log.</p>
<h4>Running SAS Jobs in the Background </h4>
<p>To execute a program in the background, you simply  type an <span class="InputCode">&amp;</span> at
  the end of the command. For the pums90.sas example above, type the following:</p>
<p class="InputCode"> sas pums90 &amp;</p>
<p>Your job will then be executed in the background, meaning you do not have
   to wait until the SAS program finishes execution before you get the Linux
  prompt. In other words, your shell is available for other work. Submit only
  one SAS background job at a time on any one Linux server. </p>
<h2> SAS Documentation</h2>
<p>Online documentation for SAS 9 is available at <a href="http://support.sas.com/documentation/onlinedoc/sas9doc.html">http://support.sas.com/documentation/onlinedoc/sas9doc.html </a></p>
<p>We also have printed copies of the version 6 manuals and other SAS books on
  programming and statistical topics which you
  may find useful. These manuals are available for short term loan in the CDE
  Print Library, Social Science 4457. </p>
<p>SSCC staff have prepared many  articles on using SAS. These are  available 
  in the <a href="https://www.ssc.wisc.edu/sscc/pubs/stat.htm">SSCC Knowledge Base</a>.</p>
<p>To subscribe to the SAS listserv, visit <a href="http://www.stattransfer.com/lists.html">http://www.stattransfer.com/lists.html</a>.
   This web site provides a subscription service to all the major statistical
  software  listservs including SAS. The SAS listserv provides a depth of
  information  and support that is essentially impossible for staff at any one
  institution  (like ours) to duplicate. </p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
<kb_document>
<kb_title>Using Compressed Data in Linux</kb_title>
<kb_keywords>.</kb_keywords>
<kb_summary>.</kb_summary>
<kb_body>

<!-- #BeginEditable "Text" -->
<p>Linux has a variety of tools for working with compressed data. 
              This article will describe how to use them, and why.</p>
<p>Compression programs look for patterns in the data, and then replace 
              the original file with a file that describes those patterns. Nothing 
              is lost--that description contains all the information needed to 
              recreate the original file. The description will be smaller than 
              the original file, but how much smaller will depend on the data 
              itself and the compression scheme used.</p>
<p>The catch is that it takes CPU time to compress or uncompress a 
              file. Thus compression is really a way to trade CPU power for disk 
              space. For files you use constantly, this may not be a good trade. 
              But we strongly encourage you to compress any data sets you are 
              not using on a regular basis. The SSCC's current disk space was 
              quite costly and we hope to avoid adding to it any sooner than necessary.</p>
<p>This article will not attempt cover all the available compression	
              tools or all the things they can do, just the most common usage. 
              Full details are available by typing <span class="InputCode">man</span> 
              and then the name of the command in Linux (e.g. <span class="InputCode">man 
              compress</span>).</p>
<h2>compress/uncompress</h2>
<p>The <span class="InputCode">compress</span> and <span class="InputCode">uncompress</span> 
              commands are very easy to use:</p>
<p class="InputCode">compress <span class="Parameter">file</span></p>
<p>Will replace <span class="Parameter"><span class="InputCode">file</span></span> 
              with the compressed file <span class="InputCode"><span class="Parameter">file</span>.Z</span> 
              (think zipped). You can uncompress a file with:</p>
<p class="InputCode">uncompress <span class="Parameter">file</span></p>
<p>which replaces the compressed file with the original. <span class="InputCode">uncompress</span> 
              doesn't care if you include the <span class="InputCode">.Z</span> 
              at the end or not--it will find the file either way.</p>
<h2>gzip/gunzip</h2>
<p><span class="InputCode">gzip</span> and <span class="InputCode">gunzip</span> 
              work in exactly the same way:</p>
<p class="InputCode">gzip <span class="Parameter">file</span></p>
<p>will replace <span class="Parameter"><span class="InputCode">file</span></span> 
              with the compressed <span class="InputCode"><span class="Parameter">file</span>.gz</span>.</p>
<p class="InputCode">gunzip <span class="Parameter">file</span></p>
<p>will replace the compressed file with the original.</p>
<h2>bzip2/bunzip2</h2>
<p><span class="InputCode">bzip2</span> and <span class="InputCode">bzip2</span> 
              are another variation on the same theme.</p>
<p class="InputCode">bzip2 <span class="Parameter">file</span></p>
<p>will replace <span class="Parameter"><span class="InputCode">file</span></span> 
              with the compressed <span class="InputCode"><span class="Parameter">file</span>.bZ2</span>.</p>
<p class="InputCode">bunzip2 <span class="Parameter">file</span>.bz2</p>
<p>will replace the compressed file with the original. Note that in 
              this case you must type the <span class="InputCode">.bz2</span> 
              at the end of the name of the file to be uncompressed.            </p>
<h2>zip/unzip</h2>
<p><span class="InputCode">zip</span> works slightly differently in 
              that it asks you to name the compressed file:</p>
<p class="InputCode">zip <span class="Parameter">compressedFile</span>
<span class="Parameter">file</span></p>
<p>will create <span class="InputCode"><span class="Parameter">compressedFile</span>.zip</span> 
              (the <span class="InputCode">.zip</span> is added automatically), 
              containing a compressed version of <span class="Parameter"><span class="InputCode">file</span></span>. 
              The original file is not removed.</p>
<p class="InputCode">unzip <span class="Parameter">compressedFile</span></p>
<p>will recreate the original file. The compressed file is not removed.</p>
<h2>Which Command Should I Use?</h2>
<p>Unfortunately which command will work best depends on the exact 
              properties of the file you're working with. Bzip will usually give the best compression, while Zip files are more easily used on Windows. </p>
<h2>How Do I Uncompress this File?</h2>
<p>Suppose you've obtained a file, perhaps via email or from the web, 
              and you know it's compressed but you don't know what program was 
              used to compress it. Look at the last letters of the file name, 
              following the period:</p>
<table align="center" border="1" cellpadding="4">
<tr>
<th>Last Letters of the File Name...</th>
<th>Program it was probably compressed with...</th>
</tr>
<tr>
<td class="InputCode">.Z</td>
<td class="InputCode">compress</td>
</tr>
<tr>
<td class="InputCode">.gz</td>
<td class="InputCode">gzip</td>
</tr>
<tr>
<td class="InputCode">.bz2</td>
<td class="InputCode">bzip2</td>
</tr>
<tr>
<td class="InputCode">.zip</td>
<td><span class="InputCode">zip</span> (possibly a Windows program 
                  like Winzip)</td>
</tr>
</table>
<p>Note that both <span class="InputCode">uncompress</span> and <span class="InputCode">unzip</span> 
              will handle Windows <span class="InputCode">.zip</span> files just	
              fine. Feel free to just experiment: if you try to uncompress a file 
              using a program that can't read the needed format, it will just 
              give you an error message and quit.</p>
<h2>zcat/bzcat</h2>
<p>The zcat command reads a compressed file and sends the results 
              to the standard output (use <span class="InputCode">bzcat </span>with<span class="InputCode"> bzip2</span>). 
              Just typing</p>
<p class="InputCode">zcat <span class="Parameter">file</span></p>
<p>where <span class="Parameter"><span class="InputCode">file</span></span> 
              is a compressed file, will display the tables of the file on the 
              screen. But the real point is to use the results in other programs. 
              For example, to see the results one page at a time pipe the output 
              to the more command:</p>
<p class="InputCode">zcat <span class="Parameter">file</span> | more</p>
<p>Both SAS and Stata can read directly from the output of the <span class="InputCode">zcat</span> 
              command. For instructions see <a href="https://ssc.wisc.edu/sscc/pubs/4-11.htm">Using Compressed 
              Data in SAS</a> or <a href="https://ssc.wisc.edu/sscc/pubs/7-12.htm#ReadingCompressedData">Using 
              Stata on Linux</a>. Note that SAS has compression built in as a 
              data set option. Stata users should consider using the user-written 
              <span class="InputCode">gzsave</span> and <span class="InputCode">gzuse</span> 
              commands. These act just like the regular <span class="InputCode">save</span> 
              and <span class="InputCode">use</span> commands, but the file on 
              disk is compressed just as if you had used <span class="InputCode">gzip</span> 
              on it.</p>
<!-- #EndEditable -->

</kb_body>
<img_base_url></img_base_url>
</kb_document>
</kb_documents>